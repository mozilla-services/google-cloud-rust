// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/iam/v1/iam_policy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct SetIamPolicyRequest {
    // message fields
    pub resource: ::std::string::String,
    pub policy: ::protobuf::SingularPtrField<super::policy::Policy>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetIamPolicyRequest {
    fn default() -> &'a SetIamPolicyRequest {
        <SetIamPolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetIamPolicyRequest {
    pub fn new() -> SetIamPolicyRequest {
        ::std::default::Default::default()
    }

    // string resource = 1;


    pub fn get_resource(&self) -> &str {
        &self.resource
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        &mut self.resource
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource, ::std::string::String::new())
    }

    // .google.iam.v1.Policy policy = 2;


    pub fn get_policy(&self) -> &super::policy::Policy {
        self.policy.as_ref().unwrap_or_else(|| <super::policy::Policy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_policy(&mut self) {
        self.policy.clear();
    }

    pub fn has_policy(&self) -> bool {
        self.policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: super::policy::Policy) {
        self.policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy(&mut self) -> &mut super::policy::Policy {
        if self.policy.is_none() {
            self.policy.set_default();
        }
        self.policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy(&mut self) -> super::policy::Policy {
        self.policy.take().unwrap_or_else(|| super::policy::Policy::new())
    }

    // .google.protobuf.FieldMask update_mask = 3;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for SetIamPolicyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.policy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.policy)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource);
        }
        if let Some(ref v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.resource.is_empty() {
            os.write_string(1, &self.resource)?;
        }
        if let Some(ref v) = self.policy.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetIamPolicyRequest {
        SetIamPolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource",
                |m: &SetIamPolicyRequest| { &m.resource },
                |m: &mut SetIamPolicyRequest| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::policy::Policy>>(
                "policy",
                |m: &SetIamPolicyRequest| { &m.policy },
                |m: &mut SetIamPolicyRequest| { &mut m.policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &SetIamPolicyRequest| { &m.update_mask },
                |m: &mut SetIamPolicyRequest| { &mut m.update_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetIamPolicyRequest>(
                "SetIamPolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetIamPolicyRequest {
        static instance: ::protobuf::rt::LazyV2<SetIamPolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetIamPolicyRequest::new)
    }
}

impl ::protobuf::Clear for SetIamPolicyRequest {
    fn clear(&mut self) {
        self.resource.clear();
        self.policy.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetIamPolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetIamPolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetIamPolicyRequest {
    // message fields
    pub resource: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<super::options::GetPolicyOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetIamPolicyRequest {
    fn default() -> &'a GetIamPolicyRequest {
        <GetIamPolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIamPolicyRequest {
    pub fn new() -> GetIamPolicyRequest {
        ::std::default::Default::default()
    }

    // string resource = 1;


    pub fn get_resource(&self) -> &str {
        &self.resource
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        &mut self.resource
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource, ::std::string::String::new())
    }

    // .google.iam.v1.GetPolicyOptions options = 2;


    pub fn get_options(&self) -> &super::options::GetPolicyOptions {
        self.options.as_ref().unwrap_or_else(|| <super::options::GetPolicyOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: super::options::GetPolicyOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut super::options::GetPolicyOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> super::options::GetPolicyOptions {
        self.options.take().unwrap_or_else(|| super::options::GetPolicyOptions::new())
    }
}

impl ::protobuf::Message for GetIamPolicyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.resource.is_empty() {
            os.write_string(1, &self.resource)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetIamPolicyRequest {
        GetIamPolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource",
                |m: &GetIamPolicyRequest| { &m.resource },
                |m: &mut GetIamPolicyRequest| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::options::GetPolicyOptions>>(
                "options",
                |m: &GetIamPolicyRequest| { &m.options },
                |m: &mut GetIamPolicyRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetIamPolicyRequest>(
                "GetIamPolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetIamPolicyRequest {
        static instance: ::protobuf::rt::LazyV2<GetIamPolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetIamPolicyRequest::new)
    }
}

impl ::protobuf::Clear for GetIamPolicyRequest {
    fn clear(&mut self) {
        self.resource.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetIamPolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIamPolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestIamPermissionsRequest {
    // message fields
    pub resource: ::std::string::String,
    pub permissions: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestIamPermissionsRequest {
    fn default() -> &'a TestIamPermissionsRequest {
        <TestIamPermissionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl TestIamPermissionsRequest {
    pub fn new() -> TestIamPermissionsRequest {
        ::std::default::Default::default()
    }

    // string resource = 1;


    pub fn get_resource(&self) -> &str {
        &self.resource
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        &mut self.resource
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource, ::std::string::String::new())
    }

    // repeated string permissions = 2;


    pub fn get_permissions(&self) -> &[::std::string::String] {
        &self.permissions
    }
    pub fn clear_permissions(&mut self) {
        self.permissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_permissions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.permissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_permissions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.permissions
    }

    // Take field
    pub fn take_permissions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.permissions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TestIamPermissionsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.permissions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource);
        }
        for value in &self.permissions {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.resource.is_empty() {
            os.write_string(1, &self.resource)?;
        }
        for v in &self.permissions {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestIamPermissionsRequest {
        TestIamPermissionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource",
                |m: &TestIamPermissionsRequest| { &m.resource },
                |m: &mut TestIamPermissionsRequest| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "permissions",
                |m: &TestIamPermissionsRequest| { &m.permissions },
                |m: &mut TestIamPermissionsRequest| { &mut m.permissions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TestIamPermissionsRequest>(
                "TestIamPermissionsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TestIamPermissionsRequest {
        static instance: ::protobuf::rt::LazyV2<TestIamPermissionsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TestIamPermissionsRequest::new)
    }
}

impl ::protobuf::Clear for TestIamPermissionsRequest {
    fn clear(&mut self) {
        self.resource.clear();
        self.permissions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestIamPermissionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestIamPermissionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestIamPermissionsResponse {
    // message fields
    pub permissions: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestIamPermissionsResponse {
    fn default() -> &'a TestIamPermissionsResponse {
        <TestIamPermissionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl TestIamPermissionsResponse {
    pub fn new() -> TestIamPermissionsResponse {
        ::std::default::Default::default()
    }

    // repeated string permissions = 1;


    pub fn get_permissions(&self) -> &[::std::string::String] {
        &self.permissions
    }
    pub fn clear_permissions(&mut self) {
        self.permissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_permissions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.permissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_permissions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.permissions
    }

    // Take field
    pub fn take_permissions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.permissions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TestIamPermissionsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.permissions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.permissions {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.permissions {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestIamPermissionsResponse {
        TestIamPermissionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "permissions",
                |m: &TestIamPermissionsResponse| { &m.permissions },
                |m: &mut TestIamPermissionsResponse| { &mut m.permissions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TestIamPermissionsResponse>(
                "TestIamPermissionsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TestIamPermissionsResponse {
        static instance: ::protobuf::rt::LazyV2<TestIamPermissionsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TestIamPermissionsResponse::new)
    }
}

impl ::protobuf::Clear for TestIamPermissionsResponse {
    fn clear(&mut self) {
        self.permissions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestIamPermissionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestIamPermissionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egoogle/iam/v1/iam_policy.proto\x12\rgoogle.iam.v1\x1a\x1cgoogle/ap\
    i/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/fie\
    ld_behavior.proto\x1a\x19google/api/resource.proto\x1a\x1bgoogle/iam/v1/\
    options.proto\x1a\x1agoogle/iam/v1/policy.proto\x1a\x20google/protobuf/f\
    ield_mask.proto\"\xad\x01\n\x13SetIamPolicyRequest\x12%\n\x08resource\
    \x18\x01\x20\x01(\tR\x08resourceB\t\xfaA\x03\n\x01*\xe0A\x02\x122\n\x06p\
    olicy\x18\x02\x20\x01(\x0b2\x15.google.iam.v1.PolicyR\x06policyB\x03\xe0\
    A\x02\x12;\n\x0bupdate_mask\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.Fi\
    eldMaskR\nupdateMask\"w\n\x13GetIamPolicyRequest\x12%\n\x08resource\x18\
    \x01\x20\x01(\tR\x08resourceB\t\xfaA\x03\n\x01*\xe0A\x02\x129\n\x07optio\
    ns\x18\x02\x20\x01(\x0b2\x1f.google.iam.v1.GetPolicyOptionsR\x07options\
    \"i\n\x19TestIamPermissionsRequest\x12%\n\x08resource\x18\x01\x20\x01(\t\
    R\x08resourceB\t\xfaA\x03\n\x01*\xe0A\x02\x12%\n\x0bpermissions\x18\x02\
    \x20\x03(\tR\x0bpermissionsB\x03\xe0A\x02\">\n\x1aTestIamPermissionsResp\
    onse\x12\x20\n\x0bpermissions\x18\x01\x20\x03(\tR\x0bpermissions2\xb4\
    \x03\n\tIAMPolicy\x12t\n\x0cSetIamPolicy\x12\".google.iam.v1.SetIamPolic\
    yRequest\x1a\x15.google.iam.v1.Policy\")\x82\xd3\xe4\x93\x02#\"\x1e/v1/{\
    resource=**}:setIamPolicy:\x01*\x12t\n\x0cGetIamPolicy\x12\".google.iam.\
    v1.GetIamPolicyRequest\x1a\x15.google.iam.v1.Policy\")\x82\xd3\xe4\x93\
    \x02#\"\x1e/v1/{resource=**}:getIamPolicy:\x01*\x12\x9a\x01\n\x12TestIam\
    Permissions\x12(.google.iam.v1.TestIamPermissionsRequest\x1a).google.iam\
    .v1.TestIamPermissionsResponse\"/\x82\xd3\xe4\x93\x02)\"$/v1/{resource=*\
    *}:testIamPermissions:\x01*\x1a\x1e\xcaA\x1biam-meta-api.googleapis.comB\
    \x7f\n\x11com.google.iam.v1B\x0eIamPolicyProtoP\x01Z)cloud.google.com/go\
    /iam/apiv1/iampb;iampb\xf8\x01\x01\xaa\x02\x13Google.Cloud.Iam.V1\xca\
    \x02\x13Google\\Cloud\\Iam\\V1J\xa8'\n\x07\x12\x05\x0e\0\x9a\x01\x01\n\
    \xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202022\x20Go\
    ogle\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ver\
    sion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20th\
    is\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x16\n\t\n\x02\x03\0\
    \x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\x03\x13\0!\n\t\n\x02\x03\x02\x12\
    \x03\x14\0)\n\t\n\x02\x03\x03\x12\x03\x15\0#\n\t\n\x02\x03\x04\x12\x03\
    \x16\0%\n\t\n\x02\x03\x05\x12\x03\x17\0$\n\t\n\x02\x03\x06\x12\x03\x18\0\
    *\n\x08\n\x01\x08\x12\x03\x1a\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x1a\0\x1f\
    \n\x08\n\x01\x08\x12\x03\x1b\00\n\t\n\x02\x08%\x12\x03\x1b\00\n\x08\n\
    \x01\x08\x12\x03\x1c\0@\n\t\n\x02\x08\x0b\x12\x03\x1c\0@\n\x08\n\x01\x08\
    \x12\x03\x1d\0\"\n\t\n\x02\x08\n\x12\x03\x1d\0\"\n\x08\n\x01\x08\x12\x03\
    \x1e\0/\n\t\n\x02\x08\x08\x12\x03\x1e\0/\n\x08\n\x01\x08\x12\x03\x1f\0*\
    \n\t\n\x02\x08\x01\x12\x03\x1f\0*\n\x08\n\x01\x08\x12\x03\x20\00\n\t\n\
    \x02\x08)\x12\x03\x20\00\n\xb9\x07\n\x02\x06\0\x12\x04<\0a\x01\x1a\xac\
    \x07\x20API\x20Overview\n\n\n\x20Manages\x20Identity\x20and\x20Access\
    \x20Management\x20(IAM)\x20policies.\n\n\x20Any\x20implementation\x20of\
    \x20an\x20API\x20that\x20offers\x20access\x20control\x20features\n\x20im\
    plements\x20the\x20google.iam.v1.IAMPolicy\x20interface.\n\n\x20##\x20Da\
    ta\x20model\n\n\x20Access\x20control\x20is\x20applied\x20when\x20a\x20pr\
    incipal\x20(user\x20or\x20service\x20account),\x20takes\n\x20some\x20act\
    ion\x20on\x20a\x20resource\x20exposed\x20by\x20a\x20service.\x20Resource\
    s,\x20identified\x20by\n\x20URI-like\x20names,\x20are\x20the\x20unit\x20\
    of\x20access\x20control\x20specification.\x20Service\n\x20implementation\
    s\x20can\x20choose\x20the\x20granularity\x20of\x20access\x20control\x20a\
    nd\x20the\n\x20supported\x20permissions\x20for\x20their\x20resources.\n\
    \x20For\x20example\x20one\x20database\x20service\x20may\x20allow\x20acce\
    ss\x20control\x20to\x20be\n\x20specified\x20only\x20at\x20the\x20Table\
    \x20level,\x20whereas\x20another\x20might\x20allow\x20access\x20control\
    \n\x20to\x20also\x20be\x20specified\x20at\x20the\x20Column\x20level.\n\n\
    \x20##\x20Policy\x20Structure\n\n\x20See\x20google.iam.v1.Policy\n\n\x20\
    This\x20is\x20intentionally\x20not\x20a\x20CRUD\x20style\x20API\x20becau\
    se\x20access\x20control\x20policies\n\x20are\x20created\x20and\x20delete\
    d\x20implicitly\x20with\x20the\x20resources\x20to\x20which\x20they\x20ar\
    e\n\x20attached.\n\n\n\n\x03\x06\0\x01\x12\x03<\x08\x11\n\n\n\x03\x06\0\
    \x03\x12\x03=\x02C\n\x0c\n\x05\x06\0\x03\x99\x08\x12\x03=\x02C\n\xb7\x01\
    \n\x04\x06\0\x02\0\x12\x04C\x02H\x03\x1a\xa8\x01\x20Sets\x20the\x20acces\
    s\x20control\x20policy\x20on\x20the\x20specified\x20resource.\x20Replace\
    s\x20any\n\x20existing\x20policy.\n\n\x20Can\x20return\x20`NOT_FOUND`,\
    \x20`INVALID_ARGUMENT`,\x20and\x20`PERMISSION_DENIED`\x20errors.\n\n\x0c\
    \n\x05\x06\0\x02\0\x01\x12\x03C\x06\x12\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03C\x13&\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03C17\n\r\n\x05\x06\0\x02\0\
    \x04\x12\x04D\x04G\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04D\
    \x04G\x06\n\x90\x01\n\x04\x06\0\x02\x01\x12\x04M\x02R\x03\x1a\x81\x01\
    \x20Gets\x20the\x20access\x20control\x20policy\x20for\x20a\x20resource.\
    \n\x20Returns\x20an\x20empty\x20policy\x20if\x20the\x20resource\x20exist\
    s\x20and\x20does\x20not\x20have\x20a\x20policy\n\x20set.\n\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03M\x06\x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03M\x13&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03M17\n\r\n\x05\x06\0\x02\
    \x01\x04\x12\x04N\x04Q\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\
    \x04N\x04Q\x06\n\xf4\x02\n\x04\x06\0\x02\x02\x12\x04[\x02`\x03\x1a\xe5\
    \x02\x20Returns\x20permissions\x20that\x20a\x20caller\x20has\x20on\x20th\
    e\x20specified\x20resource.\n\x20If\x20the\x20resource\x20does\x20not\
    \x20exist,\x20this\x20will\x20return\x20an\x20empty\x20set\x20of\n\x20pe\
    rmissions,\x20not\x20a\x20`NOT_FOUND`\x20error.\n\n\x20Note:\x20This\x20\
    operation\x20is\x20designed\x20to\x20be\x20used\x20for\x20building\x20pe\
    rmission-aware\n\x20UIs\x20and\x20command-line\x20tools,\x20not\x20for\
    \x20authorization\x20checking.\x20This\x20operation\n\x20may\x20\"fail\
    \x20open\"\x20without\x20warning.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03[\x06\x18\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03[\x192\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03[=W\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\\\x04_\
    \x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04\\\x04_\x06\n8\n\
    \x02\x04\0\x12\x04d\0w\x01\x1a,\x20Request\x20message\x20for\x20`SetIamP\
    olicy`\x20method.\n\n\n\n\x03\x04\0\x01\x12\x03d\x08\x1b\n\x9b\x01\n\x04\
    \x04\0\x02\0\x12\x04g\x02i0\x1a\x8c\x01\x20REQUIRED:\x20The\x20resource\
    \x20for\x20which\x20the\x20policy\x20is\x20being\x20specified.\n\x20See\
    \x20the\x20operation\x20documentation\x20for\x20the\x20appropriate\x20va\
    lue\x20for\x20this\x20field.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03g\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03g\t\x11\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03g\x14\x15\n\r\n\x05\x04\0\x02\0\x08\x12\x04g\x16i/\n\x0f\n\
    \x08\x04\0\x02\0\x08\x9c\x08\0\x12\x03h\x04*\n\x0f\n\x08\x04\0\x02\0\x08\
    \x9f\x08\x01\x12\x03i\x04.\n\xf3\x01\n\x04\x04\0\x02\x01\x12\x03o\x02=\
    \x1a\xe5\x01\x20REQUIRED:\x20The\x20complete\x20policy\x20to\x20be\x20ap\
    plied\x20to\x20the\x20`resource`.\x20The\x20size\x20of\n\x20the\x20polic\
    y\x20is\x20limited\x20to\x20a\x20few\x2010s\x20of\x20KB.\x20An\x20empty\
    \x20policy\x20is\x20a\n\x20valid\x20policy\x20but\x20certain\x20Cloud\
    \x20Platform\x20services\x20(such\x20as\x20Projects)\n\x20might\x20rejec\
    t\x20them.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03o\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03o\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03o\
    \x12\x13\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03o\x14<\n\x0f\n\x08\x04\0\
    \x02\x01\x08\x9c\x08\0\x12\x03o\x15;\n\xde\x01\n\x04\x04\0\x02\x02\x12\
    \x03v\x02,\x1a\xd0\x01\x20OPTIONAL:\x20A\x20FieldMask\x20specifying\x20w\
    hich\x20fields\x20of\x20the\x20policy\x20to\x20modify.\x20Only\n\x20the\
    \x20fields\x20in\x20the\x20mask\x20will\x20be\x20modified.\x20If\x20no\
    \x20mask\x20is\x20provided,\x20the\n\x20following\x20default\x20mask\x20\
    is\x20used:\n\n\x20`paths:\x20\"bindings,\x20etag\"`\n\n\x0c\n\x05\x04\0\
    \x02\x02\x06\x12\x03v\x02\x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03v\x1c\
    '\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03v*+\n9\n\x02\x04\x01\x12\x05z\0\
    \x84\x01\x01\x1a,\x20Request\x20message\x20for\x20`GetIamPolicy`\x20meth\
    od.\n\n\n\n\x03\x04\x01\x01\x12\x03z\x08\x1b\n\x9b\x01\n\x04\x04\x01\x02\
    \0\x12\x04}\x02\x7f0\x1a\x8c\x01\x20REQUIRED:\x20The\x20resource\x20for\
    \x20which\x20the\x20policy\x20is\x20being\x20requested.\n\x20See\x20the\
    \x20operation\x20documentation\x20for\x20the\x20appropriate\x20value\x20\
    for\x20this\x20field.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03}\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03}\t\x11\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03}\x14\x15\n\r\n\x05\x04\x01\x02\0\x08\x12\x04}\x16\x7f/\n\
    \x0f\n\x08\x04\x01\x02\0\x08\x9c\x08\0\x12\x03~\x04*\n\x0f\n\x08\x04\x01\
    \x02\0\x08\x9f\x08\x01\x12\x03\x7f\x04.\n`\n\x04\x04\x01\x02\x01\x12\x04\
    \x83\x01\x02\x1f\x1aR\x20OPTIONAL:\x20A\x20`GetPolicyOptions`\x20object\
    \x20for\x20specifying\x20options\x20to\n\x20`GetIamPolicy`.\n\n\r\n\x05\
    \x04\x01\x02\x01\x06\x12\x04\x83\x01\x02\x12\n\r\n\x05\x04\x01\x02\x01\
    \x01\x12\x04\x83\x01\x13\x1a\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\x83\
    \x01\x1d\x1e\n@\n\x02\x04\x02\x12\x06\x87\x01\0\x93\x01\x01\x1a2\x20Requ\
    est\x20message\x20for\x20`TestIamPermissions`\x20method.\n\n\x0b\n\x03\
    \x04\x02\x01\x12\x04\x87\x01\x08!\n\xa4\x01\n\x04\x04\x02\x02\0\x12\x06\
    \x8a\x01\x02\x8c\x010\x1a\x93\x01\x20REQUIRED:\x20The\x20resource\x20for\
    \x20which\x20the\x20policy\x20detail\x20is\x20being\x20requested.\n\x20S\
    ee\x20the\x20operation\x20documentation\x20for\x20the\x20appropriate\x20\
    value\x20for\x20this\x20field.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x8a\
    \x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x8a\x01\t\x11\n\r\n\x05\
    \x04\x02\x02\0\x03\x12\x04\x8a\x01\x14\x15\n\x0f\n\x05\x04\x02\x02\0\x08\
    \x12\x06\x8a\x01\x15\x8c\x01/\n\x10\n\x08\x04\x02\x02\0\x08\x9c\x08\0\
    \x12\x04\x8b\x01\x04*\n\x10\n\x08\x04\x02\x02\0\x08\x9f\x08\x01\x12\x04\
    \x8c\x01\x04.\n\xf1\x01\n\x04\x04\x02\x02\x01\x12\x04\x92\x01\x02K\x1a\
    \xe2\x01\x20The\x20set\x20of\x20permissions\x20to\x20check\x20for\x20the\
    \x20`resource`.\x20Permissions\x20with\n\x20wildcards\x20(such\x20as\x20\
    '*'\x20or\x20'storage.*')\x20are\x20not\x20allowed.\x20For\x20more\n\x20\
    information\x20see\n\x20[IAM\x20Overview](https://cloud.google.com/iam/d\
    ocs/overview#permissions).\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x92\
    \x01\x02\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\x92\x01\x0b\x11\n\r\n\
    \x05\x04\x02\x02\x01\x01\x12\x04\x92\x01\x12\x1d\n\r\n\x05\x04\x02\x02\
    \x01\x03\x12\x04\x92\x01\x20!\n\r\n\x05\x04\x02\x02\x01\x08\x12\x04\x92\
    \x01\"J\n\x10\n\x08\x04\x02\x02\x01\x08\x9c\x08\0\x12\x04\x92\x01#I\nA\n\
    \x02\x04\x03\x12\x06\x96\x01\0\x9a\x01\x01\x1a3\x20Response\x20message\
    \x20for\x20`TestIamPermissions`\x20method.\n\n\x0b\n\x03\x04\x03\x01\x12\
    \x04\x96\x01\x08\"\n]\n\x04\x04\x03\x02\0\x12\x04\x99\x01\x02\"\x1aO\x20\
    A\x20subset\x20of\x20`TestPermissionsRequest.permissions`\x20that\x20the\
    \x20caller\x20is\n\x20allowed.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x99\
    \x01\x02\n\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\x99\x01\x0b\x11\n\r\n\x05\
    \x04\x03\x02\0\x01\x12\x04\x99\x01\x12\x1d\n\r\n\x05\x04\x03\x02\0\x03\
    \x12\x04\x99\x01\x20!b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
