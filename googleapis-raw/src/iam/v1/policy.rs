// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/iam/v1/policy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.iam.v1.Policy)
pub struct Policy {
    // message fields
    ///  Specifies the format of the policy.
    ///
    ///  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
    ///  rejected.
    ///
    ///  Operations affecting conditional bindings must specify version 3. This can
    ///  be either setting a conditional policy, modifying a conditional binding,
    ///  or removing a binding (conditional or unconditional) from the stored
    ///  conditional policy.
    ///  Operations on non-conditional policies may specify any valid value or
    ///  leave the field unset.
    ///
    ///  If no etag is provided in the call to `setIamPolicy`, version compliance
    ///  checks against the stored policy is skipped.
    // @@protoc_insertion_point(field:google.iam.v1.Policy.version)
    pub version: i32,
    ///  Associates a list of `members` to a `role`. Optionally may specify a
    ///  `condition` that determines when binding is in effect.
    ///  `bindings` with no members will result in an error.
    // @@protoc_insertion_point(field:google.iam.v1.Policy.bindings)
    pub bindings: ::std::vec::Vec<Binding>,
    ///  `etag` is used for optimistic concurrency control as a way to help
    ///  prevent simultaneous updates of a policy from overwriting each other.
    ///  It is strongly suggested that systems make use of the `etag` in the
    ///  read-modify-write cycle to perform policy updates in order to avoid race
    ///  conditions: An `etag` is returned in the response to `getIamPolicy`, and
    ///  systems are expected to put that etag in the request to `setIamPolicy` to
    ///  ensure that their change will be applied to the same version of the policy.
    ///
    ///  If no `etag` is provided in the call to `setIamPolicy`, then the existing
    ///  policy is overwritten. Due to blind-set semantics of an etag-less policy,
    ///  'setIamPolicy' will not fail even if the incoming policy version does not
    ///  meet the requirements for modifying the stored policy.
    // @@protoc_insertion_point(field:google.iam.v1.Policy.etag)
    pub etag: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:google.iam.v1.Policy.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Policy {
    fn default() -> &'a Policy {
        <Policy as ::protobuf::Message>::default_instance()
    }
}

impl Policy {
    pub fn new() -> Policy {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Policy| { &m.version },
            |m: &mut Policy| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bindings",
            |m: &Policy| { &m.bindings },
            |m: &mut Policy| { &mut m.bindings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "etag",
            |m: &Policy| { &m.etag },
            |m: &mut Policy| { &mut m.etag },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Policy>(
            "Policy",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Policy {
    const NAME: &'static str = "Policy";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_int32()?;
                },
                34 => {
                    self.bindings.push(is.read_message()?);
                },
                26 => {
                    self.etag = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.version);
        }
        for value in &self.bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.etag);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        for v in &self.bindings {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if !self.etag.is_empty() {
            os.write_bytes(3, &self.etag)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Policy {
        Policy::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.bindings.clear();
        self.etag.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Policy {
        static instance: Policy = Policy {
            version: 0,
            bindings: ::std::vec::Vec::new(),
            etag: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Policy {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Policy").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Policy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Policy {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Associates `members` with a `role`.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.iam.v1.Binding)
pub struct Binding {
    // message fields
    ///  Role that is assigned to `members`.
    ///  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    // @@protoc_insertion_point(field:google.iam.v1.Binding.role)
    pub role: ::std::string::String,
    // @@protoc_insertion_point(field:google.iam.v1.Binding.members)
    pub members: ::std::vec::Vec<::std::string::String>,
    ///  The condition that is associated with this binding.
    ///  NOTE: An unsatisfied condition will not allow user access via current
    ///  binding. Different bindings, including their conditions, are examined
    ///  independently.
    // @@protoc_insertion_point(field:google.iam.v1.Binding.condition)
    pub condition: ::protobuf::MessageField<super::expr::Expr>,
    // special fields
    // @@protoc_insertion_point(special_field:google.iam.v1.Binding.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Binding {
    fn default() -> &'a Binding {
        <Binding as ::protobuf::Message>::default_instance()
    }
}

impl Binding {
    pub fn new() -> Binding {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "role",
            |m: &Binding| { &m.role },
            |m: &mut Binding| { &mut m.role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "members",
            |m: &Binding| { &m.members },
            |m: &mut Binding| { &mut m.members },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::expr::Expr>(
            "condition",
            |m: &Binding| { &m.condition },
            |m: &mut Binding| { &mut m.condition },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Binding>(
            "Binding",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Binding {
    const NAME: &'static str = "Binding";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.role = is.read_string()?;
                },
                18 => {
                    self.members.push(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.condition)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.role);
        }
        for value in &self.members {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(v) = self.condition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.role.is_empty() {
            os.write_string(1, &self.role)?;
        }
        for v in &self.members {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.condition.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Binding {
        Binding::new()
    }

    fn clear(&mut self) {
        self.role.clear();
        self.members.clear();
        self.condition.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Binding {
        static instance: Binding = Binding {
            role: ::std::string::String::new(),
            members: ::std::vec::Vec::new(),
            condition: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Binding {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Binding").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Binding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Binding {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The difference delta between two policies.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.iam.v1.PolicyDelta)
pub struct PolicyDelta {
    // message fields
    ///  The delta for Bindings between two policies.
    // @@protoc_insertion_point(field:google.iam.v1.PolicyDelta.binding_deltas)
    pub binding_deltas: ::std::vec::Vec<BindingDelta>,
    ///  The delta for AuditConfigs between two policies.
    // @@protoc_insertion_point(field:google.iam.v1.PolicyDelta.audit_config_deltas)
    pub audit_config_deltas: ::std::vec::Vec<AuditConfigDelta>,
    // special fields
    // @@protoc_insertion_point(special_field:google.iam.v1.PolicyDelta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PolicyDelta {
    fn default() -> &'a PolicyDelta {
        <PolicyDelta as ::protobuf::Message>::default_instance()
    }
}

impl PolicyDelta {
    pub fn new() -> PolicyDelta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "binding_deltas",
            |m: &PolicyDelta| { &m.binding_deltas },
            |m: &mut PolicyDelta| { &mut m.binding_deltas },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audit_config_deltas",
            |m: &PolicyDelta| { &m.audit_config_deltas },
            |m: &mut PolicyDelta| { &mut m.audit_config_deltas },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PolicyDelta>(
            "PolicyDelta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PolicyDelta {
    const NAME: &'static str = "PolicyDelta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.binding_deltas.push(is.read_message()?);
                },
                18 => {
                    self.audit_config_deltas.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.binding_deltas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.audit_config_deltas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.binding_deltas {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.audit_config_deltas {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PolicyDelta {
        PolicyDelta::new()
    }

    fn clear(&mut self) {
        self.binding_deltas.clear();
        self.audit_config_deltas.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PolicyDelta {
        static instance: PolicyDelta = PolicyDelta {
            binding_deltas: ::std::vec::Vec::new(),
            audit_config_deltas: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PolicyDelta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PolicyDelta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PolicyDelta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PolicyDelta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  One delta entry for Binding. Each individual change (only one member in each
///  entry) to a binding will be a separate entry.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.iam.v1.BindingDelta)
pub struct BindingDelta {
    // message fields
    ///  The action that was performed on a Binding.
    ///  Required
    // @@protoc_insertion_point(field:google.iam.v1.BindingDelta.action)
    pub action: ::protobuf::EnumOrUnknown<binding_delta::Action>,
    ///  Role that is assigned to `members`.
    ///  For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    ///  Required
    // @@protoc_insertion_point(field:google.iam.v1.BindingDelta.role)
    pub role: ::std::string::String,
    ///  A single identity requesting access for a Cloud Platform resource.
    ///  Follows the same format of Binding.members.
    ///  Required
    // @@protoc_insertion_point(field:google.iam.v1.BindingDelta.member)
    pub member: ::std::string::String,
    ///  The condition that is associated with this binding.
    // @@protoc_insertion_point(field:google.iam.v1.BindingDelta.condition)
    pub condition: ::protobuf::MessageField<super::expr::Expr>,
    // special fields
    // @@protoc_insertion_point(special_field:google.iam.v1.BindingDelta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BindingDelta {
    fn default() -> &'a BindingDelta {
        <BindingDelta as ::protobuf::Message>::default_instance()
    }
}

impl BindingDelta {
    pub fn new() -> BindingDelta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &BindingDelta| { &m.action },
            |m: &mut BindingDelta| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "role",
            |m: &BindingDelta| { &m.role },
            |m: &mut BindingDelta| { &mut m.role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "member",
            |m: &BindingDelta| { &m.member },
            |m: &mut BindingDelta| { &mut m.member },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::expr::Expr>(
            "condition",
            |m: &BindingDelta| { &m.condition },
            |m: &mut BindingDelta| { &mut m.condition },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BindingDelta>(
            "BindingDelta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BindingDelta {
    const NAME: &'static str = "BindingDelta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.action = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.role = is.read_string()?;
                },
                26 => {
                    self.member = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.condition)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.action != ::protobuf::EnumOrUnknown::new(binding_delta::Action::ACTION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.action.value());
        }
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.role);
        }
        if !self.member.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.member);
        }
        if let Some(v) = self.condition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.action != ::protobuf::EnumOrUnknown::new(binding_delta::Action::ACTION_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.action))?;
        }
        if !self.role.is_empty() {
            os.write_string(2, &self.role)?;
        }
        if !self.member.is_empty() {
            os.write_string(3, &self.member)?;
        }
        if let Some(v) = self.condition.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BindingDelta {
        BindingDelta::new()
    }

    fn clear(&mut self) {
        self.action = ::protobuf::EnumOrUnknown::new(binding_delta::Action::ACTION_UNSPECIFIED);
        self.role.clear();
        self.member.clear();
        self.condition.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BindingDelta {
        static instance: BindingDelta = BindingDelta {
            action: ::protobuf::EnumOrUnknown::from_i32(0),
            role: ::std::string::String::new(),
            member: ::std::string::String::new(),
            condition: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BindingDelta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BindingDelta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BindingDelta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BindingDelta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BindingDelta`
pub mod binding_delta {
    ///  The type of action performed on a Binding in a policy.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.iam.v1.BindingDelta.Action)
    pub enum Action {
        // @@protoc_insertion_point(enum_value:google.iam.v1.BindingDelta.Action.ACTION_UNSPECIFIED)
        ACTION_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.iam.v1.BindingDelta.Action.ADD)
        ADD = 1,
        // @@protoc_insertion_point(enum_value:google.iam.v1.BindingDelta.Action.REMOVE)
        REMOVE = 2,
    }

    impl ::protobuf::Enum for Action {
        const NAME: &'static str = "Action";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Action> {
            match value {
                0 => ::std::option::Option::Some(Action::ACTION_UNSPECIFIED),
                1 => ::std::option::Option::Some(Action::ADD),
                2 => ::std::option::Option::Some(Action::REMOVE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Action] = &[
            Action::ACTION_UNSPECIFIED,
            Action::ADD,
            Action::REMOVE,
        ];
    }

    impl ::protobuf::EnumFull for Action {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("BindingDelta.Action").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Action {
        fn default() -> Self {
            Action::ACTION_UNSPECIFIED
        }
    }

    impl Action {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Action>("BindingDelta.Action")
        }
    }
}

///  One delta entry for AuditConfig. Each individual change (only one
///  exempted_member in each entry) to a AuditConfig will be a separate entry.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.iam.v1.AuditConfigDelta)
pub struct AuditConfigDelta {
    // message fields
    ///  The action that was performed on an audit configuration in a policy.
    ///  Required
    // @@protoc_insertion_point(field:google.iam.v1.AuditConfigDelta.action)
    pub action: ::protobuf::EnumOrUnknown<audit_config_delta::Action>,
    ///  Specifies a service that was configured for Cloud Audit Logging.
    ///  For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
    ///  `allServices` is a special value that covers all services.
    ///  Required
    // @@protoc_insertion_point(field:google.iam.v1.AuditConfigDelta.service)
    pub service: ::std::string::String,
    ///  A single identity that is exempted from "data access" audit
    ///  logging for the `service` specified above.
    ///  Follows the same format of Binding.members.
    // @@protoc_insertion_point(field:google.iam.v1.AuditConfigDelta.exempted_member)
    pub exempted_member: ::std::string::String,
    ///  Specifies the log_type that was be enabled. ADMIN_ACTIVITY is always
    ///  enabled, and cannot be configured.
    ///  Required
    // @@protoc_insertion_point(field:google.iam.v1.AuditConfigDelta.log_type)
    pub log_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.iam.v1.AuditConfigDelta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuditConfigDelta {
    fn default() -> &'a AuditConfigDelta {
        <AuditConfigDelta as ::protobuf::Message>::default_instance()
    }
}

impl AuditConfigDelta {
    pub fn new() -> AuditConfigDelta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &AuditConfigDelta| { &m.action },
            |m: &mut AuditConfigDelta| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service",
            |m: &AuditConfigDelta| { &m.service },
            |m: &mut AuditConfigDelta| { &mut m.service },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exempted_member",
            |m: &AuditConfigDelta| { &m.exempted_member },
            |m: &mut AuditConfigDelta| { &mut m.exempted_member },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "log_type",
            |m: &AuditConfigDelta| { &m.log_type },
            |m: &mut AuditConfigDelta| { &mut m.log_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuditConfigDelta>(
            "AuditConfigDelta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuditConfigDelta {
    const NAME: &'static str = "AuditConfigDelta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.action = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.service = is.read_string()?;
                },
                26 => {
                    self.exempted_member = is.read_string()?;
                },
                34 => {
                    self.log_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.action != ::protobuf::EnumOrUnknown::new(audit_config_delta::Action::ACTION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.action.value());
        }
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.service);
        }
        if !self.exempted_member.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.exempted_member);
        }
        if !self.log_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.log_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.action != ::protobuf::EnumOrUnknown::new(audit_config_delta::Action::ACTION_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.action))?;
        }
        if !self.service.is_empty() {
            os.write_string(2, &self.service)?;
        }
        if !self.exempted_member.is_empty() {
            os.write_string(3, &self.exempted_member)?;
        }
        if !self.log_type.is_empty() {
            os.write_string(4, &self.log_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuditConfigDelta {
        AuditConfigDelta::new()
    }

    fn clear(&mut self) {
        self.action = ::protobuf::EnumOrUnknown::new(audit_config_delta::Action::ACTION_UNSPECIFIED);
        self.service.clear();
        self.exempted_member.clear();
        self.log_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuditConfigDelta {
        static instance: AuditConfigDelta = AuditConfigDelta {
            action: ::protobuf::EnumOrUnknown::from_i32(0),
            service: ::std::string::String::new(),
            exempted_member: ::std::string::String::new(),
            log_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuditConfigDelta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuditConfigDelta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuditConfigDelta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuditConfigDelta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AuditConfigDelta`
pub mod audit_config_delta {
    ///  The type of action performed on an audit configuration in a policy.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.iam.v1.AuditConfigDelta.Action)
    pub enum Action {
        // @@protoc_insertion_point(enum_value:google.iam.v1.AuditConfigDelta.Action.ACTION_UNSPECIFIED)
        ACTION_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.iam.v1.AuditConfigDelta.Action.ADD)
        ADD = 1,
        // @@protoc_insertion_point(enum_value:google.iam.v1.AuditConfigDelta.Action.REMOVE)
        REMOVE = 2,
    }

    impl ::protobuf::Enum for Action {
        const NAME: &'static str = "Action";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Action> {
            match value {
                0 => ::std::option::Option::Some(Action::ACTION_UNSPECIFIED),
                1 => ::std::option::Option::Some(Action::ADD),
                2 => ::std::option::Option::Some(Action::REMOVE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Action] = &[
            Action::ACTION_UNSPECIFIED,
            Action::ADD,
            Action::REMOVE,
        ];
    }

    impl ::protobuf::EnumFull for Action {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("AuditConfigDelta.Action").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Action {
        fn default() -> Self {
            Action::ACTION_UNSPECIFIED
        }
    }

    impl Action {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Action>("AuditConfigDelta.Action")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1agoogle/iam/v1/policy.proto\x12\rgoogle.iam.v1\x1a\x16google/type/e\
    xpr.proto\x1a\x1cgoogle/api/annotations.proto\"j\n\x06Policy\x12\x18\n\
    \x07version\x18\x01\x20\x01(\x05R\x07version\x122\n\x08bindings\x18\x04\
    \x20\x03(\x0b2\x16.google.iam.v1.BindingR\x08bindings\x12\x12\n\x04etag\
    \x18\x03\x20\x01(\x0cR\x04etag\"h\n\x07Binding\x12\x12\n\x04role\x18\x01\
    \x20\x01(\tR\x04role\x12\x18\n\x07members\x18\x02\x20\x03(\tR\x07members\
    \x12/\n\tcondition\x18\x03\x20\x01(\x0b2\x11.google.type.ExprR\tconditio\
    n\"\xa2\x01\n\x0bPolicyDelta\x12B\n\x0ebinding_deltas\x18\x01\x20\x03(\
    \x0b2\x1b.google.iam.v1.BindingDeltaR\rbindingDeltas\x12O\n\x13audit_con\
    fig_deltas\x18\x02\x20\x03(\x0b2\x1f.google.iam.v1.AuditConfigDeltaR\x11\
    auditConfigDeltas\"\xde\x01\n\x0cBindingDelta\x12:\n\x06action\x18\x01\
    \x20\x01(\x0e2\".google.iam.v1.BindingDelta.ActionR\x06action\x12\x12\n\
    \x04role\x18\x02\x20\x01(\tR\x04role\x12\x16\n\x06member\x18\x03\x20\x01\
    (\tR\x06member\x12/\n\tcondition\x18\x04\x20\x01(\x0b2\x11.google.type.E\
    xprR\tcondition\"5\n\x06Action\x12\x16\n\x12ACTION_UNSPECIFIED\x10\0\x12\
    \x07\n\x03ADD\x10\x01\x12\n\n\x06REMOVE\x10\x02\"\xe7\x01\n\x10AuditConf\
    igDelta\x12>\n\x06action\x18\x01\x20\x01(\x0e2&.google.iam.v1.AuditConfi\
    gDelta.ActionR\x06action\x12\x18\n\x07service\x18\x02\x20\x01(\tR\x07ser\
    vice\x12'\n\x0fexempted_member\x18\x03\x20\x01(\tR\x0eexemptedMember\x12\
    \x19\n\x08log_type\x18\x04\x20\x01(\tR\x07logType\"5\n\x06Action\x12\x16\
    \n\x12ACTION_UNSPECIFIED\x10\0\x12\x07\n\x03ADD\x10\x01\x12\n\n\x06REMOV\
    E\x10\x02B\x83\x01\n\x11com.google.iam.v1B\x0bPolicyProtoP\x01Z0google.g\
    olang.org/genproto/googleapis/iam/v1;iam\xf8\x01\x01\xaa\x02\x13Google.C\
    loud.Iam.V1\xca\x02\x13Google\\Cloud\\Iam\\V1J\x8dD\n\x07\x12\x05\x0f\0\
    \xef\x01\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\
    \x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20\
    License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20n\
    ot\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\
    \x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lice\
    nse\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-\
    2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x16\n\t\n\x02\x03\0\x12\x03\x13\0\x20\n\t\n\x02\x03\x01\x12\x03\x14\0&\
    \n\x08\n\x01\x08\x12\x03\x16\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x16\0\x1f\n\
    \x08\n\x01\x08\x12\x03\x17\00\n\t\n\x02\x08%\x12\x03\x17\00\n\x08\n\x01\
    \x08\x12\x03\x18\0G\n\t\n\x02\x08\x0b\x12\x03\x18\0G\n\x08\n\x01\x08\x12\
    \x03\x19\0\"\n\t\n\x02\x08\n\x12\x03\x19\0\"\n\x08\n\x01\x08\x12\x03\x1a\
    \0,\n\t\n\x02\x08\x08\x12\x03\x1a\0,\n\x08\n\x01\x08\x12\x03\x1b\0*\n\t\
    \n\x02\x08\x01\x12\x03\x1b\0*\n\x08\n\x01\x08\x12\x03\x1c\00\n\t\n\x02\
    \x08)\x12\x03\x1c\00\n\xe7\x0f\n\x02\x04\0\x12\x04W\0z\x01\x1a\xda\x0f\
    \x20Defines\x20an\x20Identity\x20and\x20Access\x20Management\x20(IAM)\
    \x20policy.\x20It\x20is\x20used\x20to\n\x20specify\x20access\x20control\
    \x20policies\x20for\x20Cloud\x20Platform\x20resources.\n\n\n\x20A\x20`Po\
    licy`\x20is\x20a\x20collection\x20of\x20`bindings`.\x20A\x20`binding`\
    \x20binds\x20one\x20or\x20more\n\x20`members`\x20to\x20a\x20single\x20`r\
    ole`.\x20Members\x20can\x20be\x20user\x20accounts,\x20service\x20account\
    s,\n\x20Google\x20groups,\x20and\x20domains\x20(such\x20as\x20G\x20Suite\
    ).\x20A\x20`role`\x20is\x20a\x20named\x20list\x20of\n\x20permissions\x20\
    (defined\x20by\x20IAM\x20or\x20configured\x20by\x20users).\x20A\x20`bind\
    ing`\x20can\n\x20optionally\x20specify\x20a\x20`condition`,\x20which\x20\
    is\x20a\x20logic\x20expression\x20that\x20further\n\x20constrains\x20the\
    \x20role\x20binding\x20based\x20on\x20attributes\x20about\x20the\x20requ\
    est\x20and/or\n\x20target\x20resource.\n\n\x20**JSON\x20Example**\n\n\
    \x20\x20\x20\x20\x20{\n\x20\x20\x20\x20\x20\x20\x20\"bindings\":\x20[\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\"role\":\x20\"roles/resourcemanager.organizationAdmin\",\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"members\":\x20[\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"user:mike@example.com\",\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"group:admins@examp\
    le.com\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"domain:\
    google.com\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"ser\
    viceAccount:my-project-id@appspot.gserviceaccount.com\"\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\
    ,\n\x20\x20\x20\x20\x20\x20\x20\x20\x20{\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\"role\":\x20\"roles/resourcemanager.organizationViewer\
    \",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"members\":\x20[\"user\
    :eve@example.com\"],\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"cond\
    ition\":\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"tit\
    le\":\x20\"expirable\x20access\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\"description\":\x20\"Does\x20not\x20grant\x20access\x20\
    after\x20Sep\x202020\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\"expression\":\x20\"request.time\x20<\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20timestamp('2020-10-01T00:00:00.000Z')\",\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20]\n\x20\x20\x20\x20\x20}\n\n\
    \x20**YAML\x20Example**\n\n\x20\x20\x20\x20\x20bindings:\n\x20\x20\x20\
    \x20\x20-\x20members:\n\x20\x20\x20\x20\x20\x20\x20-\x20user:mike@exampl\
    e.com\n\x20\x20\x20\x20\x20\x20\x20-\x20group:admins@example.com\n\x20\
    \x20\x20\x20\x20\x20\x20-\x20domain:google.com\n\x20\x20\x20\x20\x20\x20\
    \x20-\x20serviceAccount:my-project-id@appspot.gserviceaccount.com\n\x20\
    \x20\x20\x20\x20\x20\x20role:\x20roles/resourcemanager.organizationAdmin\
    \n\x20\x20\x20\x20\x20-\x20members:\n\x20\x20\x20\x20\x20\x20\x20-\x20us\
    er:eve@example.com\n\x20\x20\x20\x20\x20\x20\x20role:\x20roles/resourcem\
    anager.organizationViewer\n\x20\x20\x20\x20\x20\x20\x20condition:\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20title:\x20expirable\x20access\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20description:\x20Does\x20not\x20grant\x20acce\
    ss\x20after\x20Sep\x202020\n\x20\x20\x20\x20\x20\x20\x20\x20\x20expressi\
    on:\x20request.time\x20<\x20timestamp('2020-10-01T00:00:00.000Z')\n\n\
    \x20For\x20a\x20description\x20of\x20IAM\x20and\x20its\x20features,\x20s\
    ee\x20the\n\x20[IAM\x20developer's\x20guide](https://cloud.google.com/ia\
    m/docs).\n\n\n\n\x03\x04\0\x01\x12\x03W\x08\x0e\n\xd5\x04\n\x04\x04\0\
    \x02\0\x12\x03f\x02\x14\x1a\xc7\x04\x20Specifies\x20the\x20format\x20of\
    \x20the\x20policy.\n\n\x20Valid\x20values\x20are\x200,\x201,\x20and\x203\
    .\x20Requests\x20specifying\x20an\x20invalid\x20value\x20will\x20be\n\
    \x20rejected.\n\n\x20Operations\x20affecting\x20conditional\x20bindings\
    \x20must\x20specify\x20version\x203.\x20This\x20can\n\x20be\x20either\
    \x20setting\x20a\x20conditional\x20policy,\x20modifying\x20a\x20conditio\
    nal\x20binding,\n\x20or\x20removing\x20a\x20binding\x20(conditional\x20o\
    r\x20unconditional)\x20from\x20the\x20stored\n\x20conditional\x20policy.\
    \n\x20Operations\x20on\x20non-conditional\x20policies\x20may\x20specify\
    \x20any\x20valid\x20value\x20or\n\x20leave\x20the\x20field\x20unset.\n\n\
    \x20If\x20no\x20etag\x20is\x20provided\x20in\x20the\x20call\x20to\x20`se\
    tIamPolicy`,\x20version\x20compliance\n\x20checks\x20against\x20the\x20s\
    tored\x20policy\x20is\x20skipped.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03f\
    \x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03f\x08\x0f\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03f\x12\x13\n\xc1\x01\n\x04\x04\0\x02\x01\x12\x03k\x02\
    \x20\x1a\xb3\x01\x20Associates\x20a\x20list\x20of\x20`members`\x20to\x20\
    a\x20`role`.\x20Optionally\x20may\x20specify\x20a\n\x20`condition`\x20th\
    at\x20determines\x20when\x20binding\x20is\x20in\x20effect.\n\x20`binding\
    s`\x20with\x20no\x20members\x20will\x20result\x20in\x20an\x20error.\n\n\
    \x0c\n\x05\x04\0\x02\x01\x04\x12\x03k\x02\n\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03k\x0b\x12\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03k\x13\x1b\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03k\x1e\x1f\n\xa4\x06\n\x04\x04\0\x02\
    \x02\x12\x03y\x02\x11\x1a\x96\x06\x20`etag`\x20is\x20used\x20for\x20opti\
    mistic\x20concurrency\x20control\x20as\x20a\x20way\x20to\x20help\n\x20pr\
    event\x20simultaneous\x20updates\x20of\x20a\x20policy\x20from\x20overwri\
    ting\x20each\x20other.\n\x20It\x20is\x20strongly\x20suggested\x20that\
    \x20systems\x20make\x20use\x20of\x20the\x20`etag`\x20in\x20the\n\x20read\
    -modify-write\x20cycle\x20to\x20perform\x20policy\x20updates\x20in\x20or\
    der\x20to\x20avoid\x20race\n\x20conditions:\x20An\x20`etag`\x20is\x20ret\
    urned\x20in\x20the\x20response\x20to\x20`getIamPolicy`,\x20and\n\x20syst\
    ems\x20are\x20expected\x20to\x20put\x20that\x20etag\x20in\x20the\x20requ\
    est\x20to\x20`setIamPolicy`\x20to\n\x20ensure\x20that\x20their\x20change\
    \x20will\x20be\x20applied\x20to\x20the\x20same\x20version\x20of\x20the\
    \x20policy.\n\n\x20If\x20no\x20`etag`\x20is\x20provided\x20in\x20the\x20\
    call\x20to\x20`setIamPolicy`,\x20then\x20the\x20existing\n\x20policy\x20\
    is\x20overwritten.\x20Due\x20to\x20blind-set\x20semantics\x20of\x20an\
    \x20etag-less\x20policy,\n\x20'setIamPolicy'\x20will\x20not\x20fail\x20e\
    ven\x20if\x20the\x20incoming\x20policy\x20version\x20does\x20not\n\x20me\
    et\x20the\x20requirements\x20for\x20modifying\x20the\x20stored\x20policy\
    .\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03y\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03y\x08\x0c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03y\x0f\x10\
    \n2\n\x02\x04\x01\x12\x05}\0\xa1\x01\x01\x1a%\x20Associates\x20`members`\
    \x20with\x20a\x20`role`.\n\n\n\n\x03\x04\x01\x01\x12\x03}\x08\x0f\ns\n\
    \x04\x04\x01\x02\0\x12\x04\x80\x01\x02\x12\x1ae\x20Role\x20that\x20is\
    \x20assigned\x20to\x20`members`.\n\x20For\x20example,\x20`roles/viewer`,\
    \x20`roles/editor`,\x20or\x20`roles/owner`.\n\n\r\n\x05\x04\x01\x02\0\
    \x05\x12\x04\x80\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x80\x01\
    \t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x80\x01\x10\x11\n\x9b\x07\n\x04\
    \x04\x01\x02\x01\x12\x04\x9a\x01\x02\x1e\x1a\x8c\x07\x20Specifies\x20the\
    \x20identities\x20requesting\x20access\x20for\x20a\x20Cloud\x20Platform\
    \x20resource.\n\x20`members`\x20can\x20have\x20the\x20following\x20value\
    s:\n\n\x20*\x20`allUsers`:\x20A\x20special\x20identifier\x20that\x20repr\
    esents\x20anyone\x20who\x20is\n\x20\x20\x20\x20on\x20the\x20internet;\
    \x20with\x20or\x20without\x20a\x20Google\x20account.\n\n\x20*\x20`allAut\
    henticatedUsers`:\x20A\x20special\x20identifier\x20that\x20represents\
    \x20anyone\n\x20\x20\x20\x20who\x20is\x20authenticated\x20with\x20a\x20G\
    oogle\x20account\x20or\x20a\x20service\x20account.\n\n\x20*\x20`user:{em\
    ailid}`:\x20An\x20email\x20address\x20that\x20represents\x20a\x20specifi\
    c\x20Google\n\x20\x20\x20\x20account.\x20For\x20example,\x20`alice@examp\
    le.com`\x20.\n\n\n\x20*\x20`serviceAccount:{emailid}`:\x20An\x20email\
    \x20address\x20that\x20represents\x20a\x20service\n\x20\x20\x20\x20accou\
    nt.\x20For\x20example,\x20`my-other-app@appspot.gserviceaccount.com`.\n\
    \n\x20*\x20`group:{emailid}`:\x20An\x20email\x20address\x20that\x20repre\
    sents\x20a\x20Google\x20group.\n\x20\x20\x20\x20For\x20example,\x20`admi\
    ns@example.com`.\n\n\n\x20*\x20`domain:{domain}`:\x20The\x20G\x20Suite\
    \x20domain\x20(primary)\x20that\x20represents\x20all\x20the\n\x20\x20\
    \x20\x20users\x20of\x20that\x20domain.\x20For\x20example,\x20`google.com\
    `\x20or\x20`example.com`.\n\n\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\
    \x9a\x01\x02\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\x9a\x01\x0b\x11\n\r\
    \n\x05\x04\x01\x02\x01\x01\x12\x04\x9a\x01\x12\x19\n\r\n\x05\x04\x01\x02\
    \x01\x03\x12\x04\x9a\x01\x1c\x1d\n\xe2\x01\n\x04\x04\x01\x02\x02\x12\x04\
    \xa0\x01\x02!\x1a\xd3\x01\x20The\x20condition\x20that\x20is\x20associate\
    d\x20with\x20this\x20binding.\n\x20NOTE:\x20An\x20unsatisfied\x20conditi\
    on\x20will\x20not\x20allow\x20user\x20access\x20via\x20current\n\x20bind\
    ing.\x20Different\x20bindings,\x20including\x20their\x20conditions,\x20a\
    re\x20examined\n\x20independently.\n\n\r\n\x05\x04\x01\x02\x02\x06\x12\
    \x04\xa0\x01\x02\x12\n\r\n\x05\x04\x01\x02\x02\x01\x12\x04\xa0\x01\x13\
    \x1c\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\xa0\x01\x1f\x20\n:\n\x02\x04\
    \x02\x12\x06\xa4\x01\0\xaa\x01\x01\x1a,\x20The\x20difference\x20delta\
    \x20between\x20two\x20policies.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xa4\
    \x01\x08\x13\n<\n\x04\x04\x02\x02\0\x12\x04\xa6\x01\x02+\x1a.\x20The\x20\
    delta\x20for\x20Bindings\x20between\x20two\x20policies.\n\n\r\n\x05\x04\
    \x02\x02\0\x04\x12\x04\xa6\x01\x02\n\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\
    \xa6\x01\x0b\x17\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xa6\x01\x18&\n\r\n\
    \x05\x04\x02\x02\0\x03\x12\x04\xa6\x01)*\n@\n\x04\x04\x02\x02\x01\x12\
    \x04\xa9\x01\x024\x1a2\x20The\x20delta\x20for\x20AuditConfigs\x20between\
    \x20two\x20policies.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\xa9\x01\x02\
    \n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\xa9\x01\x0b\x1b\n\r\n\x05\x04\
    \x02\x02\x01\x01\x12\x04\xa9\x01\x1c/\n\r\n\x05\x04\x02\x02\x01\x03\x12\
    \x04\xa9\x0123\n\x8b\x01\n\x02\x04\x03\x12\x06\xae\x01\0\xcb\x01\x01\x1a\
    }\x20One\x20delta\x20entry\x20for\x20Binding.\x20Each\x20individual\x20c\
    hange\x20(only\x20one\x20member\x20in\x20each\n\x20entry)\x20to\x20a\x20\
    binding\x20will\x20be\x20a\x20separate\x20entry.\n\n\x0b\n\x03\x04\x03\
    \x01\x12\x04\xae\x01\x08\x14\nH\n\x04\x04\x03\x04\0\x12\x06\xb0\x01\x02\
    \xb9\x01\x03\x1a8\x20The\x20type\x20of\x20action\x20performed\x20on\x20a\
    \x20Binding\x20in\x20a\x20policy.\n\n\r\n\x05\x04\x03\x04\0\x01\x12\x04\
    \xb0\x01\x07\r\n\x1e\n\x06\x04\x03\x04\0\x02\0\x12\x04\xb2\x01\x04\x1b\
    \x1a\x0e\x20Unspecified.\n\n\x0f\n\x07\x04\x03\x04\0\x02\0\x01\x12\x04\
    \xb2\x01\x04\x16\n\x0f\n\x07\x04\x03\x04\0\x02\0\x02\x12\x04\xb2\x01\x19\
    \x1a\n(\n\x06\x04\x03\x04\0\x02\x01\x12\x04\xb5\x01\x04\x0c\x1a\x18\x20A\
    ddition\x20of\x20a\x20Binding.\n\n\x0f\n\x07\x04\x03\x04\0\x02\x01\x01\
    \x12\x04\xb5\x01\x04\x07\n\x0f\n\x07\x04\x03\x04\0\x02\x01\x02\x12\x04\
    \xb5\x01\n\x0b\n'\n\x06\x04\x03\x04\0\x02\x02\x12\x04\xb8\x01\x04\x0f\
    \x1a\x17\x20Removal\x20of\x20a\x20Binding.\n\n\x0f\n\x07\x04\x03\x04\0\
    \x02\x02\x01\x12\x04\xb8\x01\x04\n\n\x0f\n\x07\x04\x03\x04\0\x02\x02\x02\
    \x12\x04\xb8\x01\r\x0e\nE\n\x04\x04\x03\x02\0\x12\x04\xbd\x01\x02\x14\
    \x1a7\x20The\x20action\x20that\x20was\x20performed\x20on\x20a\x20Binding\
    .\n\x20Required\n\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\xbd\x01\x02\x08\n\
    \r\n\x05\x04\x03\x02\0\x01\x12\x04\xbd\x01\t\x0f\n\r\n\x05\x04\x03\x02\0\
    \x03\x12\x04\xbd\x01\x12\x13\n}\n\x04\x04\x03\x02\x01\x12\x04\xc2\x01\
    \x02\x12\x1ao\x20Role\x20that\x20is\x20assigned\x20to\x20`members`.\n\
    \x20For\x20example,\x20`roles/viewer`,\x20`roles/editor`,\x20or\x20`role\
    s/owner`.\n\x20Required\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xc2\x01\
    \x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xc2\x01\t\r\n\r\n\x05\x04\
    \x03\x02\x01\x03\x12\x04\xc2\x01\x10\x11\n\x89\x01\n\x04\x04\x03\x02\x02\
    \x12\x04\xc7\x01\x02\x14\x1a{\x20A\x20single\x20identity\x20requesting\
    \x20access\x20for\x20a\x20Cloud\x20Platform\x20resource.\n\x20Follows\
    \x20the\x20same\x20format\x20of\x20Binding.members.\n\x20Required\n\n\r\
    \n\x05\x04\x03\x02\x02\x05\x12\x04\xc7\x01\x02\x08\n\r\n\x05\x04\x03\x02\
    \x02\x01\x12\x04\xc7\x01\t\x0f\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xc7\
    \x01\x12\x13\nC\n\x04\x04\x03\x02\x03\x12\x04\xca\x01\x02!\x1a5\x20The\
    \x20condition\x20that\x20is\x20associated\x20with\x20this\x20binding.\n\
    \n\r\n\x05\x04\x03\x02\x03\x06\x12\x04\xca\x01\x02\x12\n\r\n\x05\x04\x03\
    \x02\x03\x01\x12\x04\xca\x01\x13\x1c\n\r\n\x05\x04\x03\x02\x03\x03\x12\
    \x04\xca\x01\x1f\x20\n\x9d\x01\n\x02\x04\x04\x12\x06\xcf\x01\0\xef\x01\
    \x01\x1a\x8e\x01\x20One\x20delta\x20entry\x20for\x20AuditConfig.\x20Each\
    \x20individual\x20change\x20(only\x20one\n\x20exempted_member\x20in\x20e\
    ach\x20entry)\x20to\x20a\x20AuditConfig\x20will\x20be\x20a\x20separate\
    \x20entry.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xcf\x01\x08\x18\nU\n\x04\
    \x04\x04\x04\0\x12\x06\xd1\x01\x02\xda\x01\x03\x1aE\x20The\x20type\x20of\
    \x20action\x20performed\x20on\x20an\x20audit\x20configuration\x20in\x20a\
    \x20policy.\n\n\r\n\x05\x04\x04\x04\0\x01\x12\x04\xd1\x01\x07\r\n\x1e\n\
    \x06\x04\x04\x04\0\x02\0\x12\x04\xd3\x01\x04\x1b\x1a\x0e\x20Unspecified.\
    \n\n\x0f\n\x07\x04\x04\x04\0\x02\0\x01\x12\x04\xd3\x01\x04\x16\n\x0f\n\
    \x07\x04\x04\x04\0\x02\0\x02\x12\x04\xd3\x01\x19\x1a\n5\n\x06\x04\x04\
    \x04\0\x02\x01\x12\x04\xd6\x01\x04\x0c\x1a%\x20Addition\x20of\x20an\x20a\
    udit\x20configuration.\n\n\x0f\n\x07\x04\x04\x04\0\x02\x01\x01\x12\x04\
    \xd6\x01\x04\x07\n\x0f\n\x07\x04\x04\x04\0\x02\x01\x02\x12\x04\xd6\x01\n\
    \x0b\n4\n\x06\x04\x04\x04\0\x02\x02\x12\x04\xd9\x01\x04\x0f\x1a$\x20Remo\
    val\x20of\x20an\x20audit\x20configuration.\n\n\x0f\n\x07\x04\x04\x04\0\
    \x02\x02\x01\x12\x04\xd9\x01\x04\n\n\x0f\n\x07\x04\x04\x04\0\x02\x02\x02\
    \x12\x04\xd9\x01\r\x0e\n^\n\x04\x04\x04\x02\0\x12\x04\xde\x01\x02\x14\
    \x1aP\x20The\x20action\x20that\x20was\x20performed\x20on\x20an\x20audit\
    \x20configuration\x20in\x20a\x20policy.\n\x20Required\n\n\r\n\x05\x04\
    \x04\x02\0\x06\x12\x04\xde\x01\x02\x08\n\r\n\x05\x04\x04\x02\0\x01\x12\
    \x04\xde\x01\t\x0f\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xde\x01\x12\x13\n\
    \xda\x01\n\x04\x04\x04\x02\x01\x12\x04\xe4\x01\x02\x15\x1a\xcb\x01\x20Sp\
    ecifies\x20a\x20service\x20that\x20was\x20configured\x20for\x20Cloud\x20\
    Audit\x20Logging.\n\x20For\x20example,\x20`storage.googleapis.com`,\x20`\
    cloudsql.googleapis.com`.\n\x20`allServices`\x20is\x20a\x20special\x20va\
    lue\x20that\x20covers\x20all\x20services.\n\x20Required\n\n\r\n\x05\x04\
    \x04\x02\x01\x05\x12\x04\xe4\x01\x02\x08\n\r\n\x05\x04\x04\x02\x01\x01\
    \x12\x04\xe4\x01\t\x10\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xe4\x01\x13\
    \x14\n\xa5\x01\n\x04\x04\x04\x02\x02\x12\x04\xe9\x01\x02\x1d\x1a\x96\x01\
    \x20A\x20single\x20identity\x20that\x20is\x20exempted\x20from\x20\"data\
    \x20access\"\x20audit\n\x20logging\x20for\x20the\x20`service`\x20specifi\
    ed\x20above.\n\x20Follows\x20the\x20same\x20format\x20of\x20Binding.memb\
    ers.\n\n\r\n\x05\x04\x04\x02\x02\x05\x12\x04\xe9\x01\x02\x08\n\r\n\x05\
    \x04\x04\x02\x02\x01\x12\x04\xe9\x01\t\x18\n\r\n\x05\x04\x04\x02\x02\x03\
    \x12\x04\xe9\x01\x1b\x1c\n\x82\x01\n\x04\x04\x04\x02\x03\x12\x04\xee\x01\
    \x02\x16\x1at\x20Specifies\x20the\x20log_type\x20that\x20was\x20be\x20en\
    abled.\x20ADMIN_ACTIVITY\x20is\x20always\n\x20enabled,\x20and\x20cannot\
    \x20be\x20configured.\n\x20Required\n\n\r\n\x05\x04\x04\x02\x03\x05\x12\
    \x04\xee\x01\x02\x08\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\xee\x01\t\x11\
    \n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\xee\x01\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::expr::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Policy::generated_message_descriptor_data());
            messages.push(Binding::generated_message_descriptor_data());
            messages.push(PolicyDelta::generated_message_descriptor_data());
            messages.push(BindingDelta::generated_message_descriptor_data());
            messages.push(AuditConfigDelta::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(binding_delta::Action::generated_enum_descriptor_data());
            enums.push(audit_config_delta::Action::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
