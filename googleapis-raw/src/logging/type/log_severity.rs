// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/logging/type/log_severity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LogSeverity {
    DEFAULT = 0,
    DEBUG = 100,
    INFO = 200,
    NOTICE = 300,
    WARNING = 400,
    ERROR = 500,
    CRITICAL = 600,
    ALERT = 700,
    EMERGENCY = 800,
}

impl ::protobuf::ProtobufEnum for LogSeverity {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogSeverity> {
        match value {
            0 => ::std::option::Option::Some(LogSeverity::DEFAULT),
            100 => ::std::option::Option::Some(LogSeverity::DEBUG),
            200 => ::std::option::Option::Some(LogSeverity::INFO),
            300 => ::std::option::Option::Some(LogSeverity::NOTICE),
            400 => ::std::option::Option::Some(LogSeverity::WARNING),
            500 => ::std::option::Option::Some(LogSeverity::ERROR),
            600 => ::std::option::Option::Some(LogSeverity::CRITICAL),
            700 => ::std::option::Option::Some(LogSeverity::ALERT),
            800 => ::std::option::Option::Some(LogSeverity::EMERGENCY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LogSeverity] = &[
            LogSeverity::DEFAULT,
            LogSeverity::DEBUG,
            LogSeverity::INFO,
            LogSeverity::NOTICE,
            LogSeverity::WARNING,
            LogSeverity::ERROR,
            LogSeverity::CRITICAL,
            LogSeverity::ALERT,
            LogSeverity::EMERGENCY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LogSeverity>("LogSeverity", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LogSeverity {
}

impl ::std::default::Default for LogSeverity {
    fn default() -> Self {
        LogSeverity::DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for LogSeverity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&google/logging/type/log_severity.proto\x12\x13google.logging.type*\
    \x82\x01\n\x0bLogSeverity\x12\x0b\n\x07DEFAULT\x10\0\x12\t\n\x05DEBUG\
    \x10d\x12\t\n\x04INFO\x10\xc8\x01\x12\x0b\n\x06NOTICE\x10\xac\x02\x12\
    \x0c\n\x07WARNING\x10\x90\x03\x12\n\n\x05ERROR\x10\xf4\x03\x12\r\n\x08CR\
    ITICAL\x10\xd8\x04\x12\n\n\x05ALERT\x10\xbc\x05\x12\x0e\n\tEMERGENCY\x10\
    \xa0\x06B\xc5\x01\n\x17com.google.logging.typeB\x10LogSeverityProtoP\x01\
    Z8google.golang.org/genproto/googleapis/logging/type;ltype\xa2\x02\x04GL\
    OG\xaa\x02\x19Google.Cloud.Logging.Type\xca\x02\x19Google\\Cloud\\Loggin\
    g\\Type\xea\x02\x1cGoogle::Cloud::Logging::TypeJ\x84\x13\n\x06\x12\x04\
    \x0e\0F\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\
    \x202023\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20L\
    icense,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20no\
    t\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\
    \x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lice\
    nse\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-\
    2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x1c\
    \n\x08\n\x01\x08\x12\x03\x12\06\n\t\n\x02\x08%\x12\x03\x12\06\n\x08\n\
    \x01\x08\x12\x03\x13\0O\n\t\n\x02\x08\x0b\x12\x03\x13\0O\n\x08\n\x01\x08\
    \x12\x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\
    \x15\01\n\t\n\x02\x08\x08\x12\x03\x15\01\n\x08\n\x01\x08\x12\x03\x16\00\
    \n\t\n\x02\x08\x01\x12\x03\x16\00\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\
    \x02\x08$\x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\x18\06\n\t\n\x02\x08)\
    \x12\x03\x18\06\n\x08\n\x01\x08\x12\x03\x19\05\n\t\n\x02\x08-\x12\x03\
    \x19\05\n\x8b\x06\n\x02\x05\0\x12\x04*\0F\x01\x1a\xfe\x05\x20The\x20seve\
    rity\x20of\x20the\x20event\x20described\x20in\x20a\x20log\x20entry,\x20e\
    xpressed\x20as\x20one\x20of\x20the\n\x20standard\x20severity\x20levels\
    \x20listed\x20below.\x20\x20For\x20your\x20reference,\x20the\x20levels\
    \x20are\n\x20assigned\x20the\x20listed\x20numeric\x20values.\x20The\x20e\
    ffect\x20of\x20using\x20numeric\x20values\x20other\n\x20than\x20those\
    \x20listed\x20is\x20undefined.\n\n\x20You\x20can\x20filter\x20for\x20log\
    \x20entries\x20by\x20severity.\x20\x20For\x20example,\x20the\x20followin\
    g\n\x20filter\x20expression\x20will\x20match\x20log\x20entries\x20with\
    \x20severities\x20`INFO`,\x20`NOTICE`,\n\x20and\x20`WARNING`:\n\n\x20\
    \x20\x20\x20\x20severity\x20>\x20DEBUG\x20AND\x20severity\x20<=\x20WARNI\
    NG\n\n\x20If\x20you\x20are\x20writing\x20log\x20entries,\x20you\x20shoul\
    d\x20map\x20other\x20severity\x20encodings\x20to\n\x20one\x20of\x20these\
    \x20standard\x20levels.\x20For\x20example,\x20you\x20might\x20map\x20all\
    \x20of\x20Java's\x20FINE,\n\x20FINER,\x20and\x20FINEST\x20levels\x20to\
    \x20`LogSeverity.DEBUG`.\x20You\x20can\x20preserve\x20the\n\x20original\
    \x20severity\x20level\x20in\x20the\x20log\x20entry\x20payload\x20if\x20y\
    ou\x20wish.\n\n\n\n\x03\x05\0\x01\x12\x03*\x05\x10\n@\n\x04\x05\0\x02\0\
    \x12\x03,\x02\x0e\x1a3\x20(0)\x20The\x20log\x20entry\x20has\x20no\x20ass\
    igned\x20severity\x20level.\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03,\x02\t\
    \n\x0c\n\x05\x05\0\x02\0\x02\x12\x03,\x0c\r\n0\n\x04\x05\0\x02\x01\x12\
    \x03/\x02\x0e\x1a#\x20(100)\x20Debug\x20or\x20trace\x20information.\n\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03/\x02\x07\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03/\n\r\nP\n\x04\x05\0\x02\x02\x12\x032\x02\r\x1aC\x20(200)\
    \x20Routine\x20information,\x20such\x20as\x20ongoing\x20status\x20or\x20\
    performance.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x032\x02\x06\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x032\t\x0c\nl\n\x04\x05\0\x02\x03\x12\x036\
    \x02\x0f\x1a_\x20(300)\x20Normal\x20but\x20significant\x20events,\x20suc\
    h\x20as\x20start\x20up,\x20shut\x20down,\x20or\n\x20a\x20configuration\
    \x20change.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x036\x02\x08\n\x0c\n\x05\
    \x05\0\x02\x03\x02\x12\x036\x0b\x0e\n9\n\x04\x05\0\x02\x04\x12\x039\x02\
    \x10\x1a,\x20(400)\x20Warning\x20events\x20might\x20cause\x20problems.\n\
    \n\x0c\n\x05\x05\0\x02\x04\x01\x12\x039\x02\t\n\x0c\n\x05\x05\0\x02\x04\
    \x02\x12\x039\x0c\x0f\n?\n\x04\x05\0\x02\x05\x12\x03<\x02\x0e\x1a2\x20(5\
    00)\x20Error\x20events\x20are\x20likely\x20to\x20cause\x20problems.\n\n\
    \x0c\n\x05\x05\0\x02\x05\x01\x12\x03<\x02\x07\n\x0c\n\x05\x05\0\x02\x05\
    \x02\x12\x03<\n\r\nK\n\x04\x05\0\x02\x06\x12\x03?\x02\x11\x1a>\x20(600)\
    \x20Critical\x20events\x20cause\x20more\x20severe\x20problems\x20or\x20o\
    utages.\n\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03?\x02\n\n\x0c\n\x05\x05\0\
    \x02\x06\x02\x12\x03?\r\x10\n>\n\x04\x05\0\x02\x07\x12\x03B\x02\x0e\x1a1\
    \x20(700)\x20A\x20person\x20must\x20take\x20an\x20action\x20immediately.\
    \n\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03B\x02\x07\n\x0c\n\x05\x05\0\x02\
    \x07\x02\x12\x03B\n\r\n6\n\x04\x05\0\x02\x08\x12\x03E\x02\x12\x1a)\x20(8\
    00)\x20One\x20or\x20more\x20systems\x20are\x20unusable.\n\n\x0c\n\x05\
    \x05\0\x02\x08\x01\x12\x03E\x02\x0b\n\x0c\n\x05\x05\0\x02\x08\x02\x12\
    \x03E\x0e\x11b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
