// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/logging/type/log_severity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.logging.type.LogSeverity)
pub enum LogSeverity {
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.DEFAULT)
    DEFAULT = 0,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.DEBUG)
    DEBUG = 100,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.INFO)
    INFO = 200,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.NOTICE)
    NOTICE = 300,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.WARNING)
    WARNING = 400,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.ERROR)
    ERROR = 500,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.CRITICAL)
    CRITICAL = 600,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.ALERT)
    ALERT = 700,
    // @@protoc_insertion_point(enum_value:google.logging.type.LogSeverity.EMERGENCY)
    EMERGENCY = 800,
}

impl ::protobuf::Enum for LogSeverity {
    const NAME: &'static str = "LogSeverity";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogSeverity> {
        match value {
            0 => ::std::option::Option::Some(LogSeverity::DEFAULT),
            100 => ::std::option::Option::Some(LogSeverity::DEBUG),
            200 => ::std::option::Option::Some(LogSeverity::INFO),
            300 => ::std::option::Option::Some(LogSeverity::NOTICE),
            400 => ::std::option::Option::Some(LogSeverity::WARNING),
            500 => ::std::option::Option::Some(LogSeverity::ERROR),
            600 => ::std::option::Option::Some(LogSeverity::CRITICAL),
            700 => ::std::option::Option::Some(LogSeverity::ALERT),
            800 => ::std::option::Option::Some(LogSeverity::EMERGENCY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LogSeverity] = &[
        LogSeverity::DEFAULT,
        LogSeverity::DEBUG,
        LogSeverity::INFO,
        LogSeverity::NOTICE,
        LogSeverity::WARNING,
        LogSeverity::ERROR,
        LogSeverity::CRITICAL,
        LogSeverity::ALERT,
        LogSeverity::EMERGENCY,
    ];
}

impl ::protobuf::EnumFull for LogSeverity {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LogSeverity").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            LogSeverity::DEFAULT => 0,
            LogSeverity::DEBUG => 1,
            LogSeverity::INFO => 2,
            LogSeverity::NOTICE => 3,
            LogSeverity::WARNING => 4,
            LogSeverity::ERROR => 5,
            LogSeverity::CRITICAL => 6,
            LogSeverity::ALERT => 7,
            LogSeverity::EMERGENCY => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LogSeverity {
    fn default() -> Self {
        LogSeverity::DEFAULT
    }
}

impl LogSeverity {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LogSeverity>("LogSeverity")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&google/logging/type/log_severity.proto\x12\x13google.logging.type\x1a\
    \x1cgoogle/api/annotations.proto*\x82\x01\n\x0bLogSeverity\x12\x0b\n\x07\
    DEFAULT\x10\0\x12\t\n\x05DEBUG\x10d\x12\t\n\x04INFO\x10\xc8\x01\x12\x0b\
    \n\x06NOTICE\x10\xac\x02\x12\x0c\n\x07WARNING\x10\x90\x03\x12\n\n\x05ERR\
    OR\x10\xf4\x03\x12\r\n\x08CRITICAL\x10\xd8\x04\x12\n\n\x05ALERT\x10\xbc\
    \x05\x12\x0e\n\tEMERGENCY\x10\xa0\x06B\x9f\x01\n\x17com.google.logging.t\
    ypeB\x10LogSeverityProtoP\x01Z8google.golang.org/genproto/googleapis/log\
    ging/type;ltype\xaa\x02\x19Google.Cloud.Logging.Type\xca\x02\x19Google\\\
    Cloud\\Logging\\TypeJ\xe7\x12\n\x06\x12\x04\x0f\0G\x01\n\xbe\x04\n\x01\
    \x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\
    \n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\
    \x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1c\n\t\n\x02\x03\0\x12\
    \x03\x13\0&\n\x08\n\x01\x08\x12\x03\x15\06\n\t\n\x02\x08%\x12\x03\x15\06\
    \n\x08\n\x01\x08\x12\x03\x16\0O\n\t\n\x02\x08\x0b\x12\x03\x16\0O\n\x08\n\
    \x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\
    \x12\x03\x18\01\n\t\n\x02\x08\x08\x12\x03\x18\01\n\x08\n\x01\x08\x12\x03\
    \x19\00\n\t\n\x02\x08\x01\x12\x03\x19\00\n\x08\n\x01\x08\x12\x03\x1a\06\
    \n\t\n\x02\x08)\x12\x03\x1a\06\n\x8b\x06\n\x02\x05\0\x12\x04+\0G\x01\x1a\
    \xfe\x05\x20The\x20severity\x20of\x20the\x20event\x20described\x20in\x20\
    a\x20log\x20entry,\x20expressed\x20as\x20one\x20of\x20the\n\x20standard\
    \x20severity\x20levels\x20listed\x20below.\x20\x20For\x20your\x20referen\
    ce,\x20the\x20levels\x20are\n\x20assigned\x20the\x20listed\x20numeric\
    \x20values.\x20The\x20effect\x20of\x20using\x20numeric\x20values\x20othe\
    r\n\x20than\x20those\x20listed\x20is\x20undefined.\n\n\x20You\x20can\x20\
    filter\x20for\x20log\x20entries\x20by\x20severity.\x20\x20For\x20example\
    ,\x20the\x20following\n\x20filter\x20expression\x20will\x20match\x20log\
    \x20entries\x20with\x20severities\x20`INFO`,\x20`NOTICE`,\n\x20and\x20`W\
    ARNING`:\n\n\x20\x20\x20\x20\x20severity\x20>\x20DEBUG\x20AND\x20severit\
    y\x20<=\x20WARNING\n\n\x20If\x20you\x20are\x20writing\x20log\x20entries,\
    \x20you\x20should\x20map\x20other\x20severity\x20encodings\x20to\n\x20on\
    e\x20of\x20these\x20standard\x20levels.\x20For\x20example,\x20you\x20mig\
    ht\x20map\x20all\x20of\x20Java's\x20FINE,\n\x20FINER,\x20and\x20FINEST\
    \x20levels\x20to\x20`LogSeverity.DEBUG`.\x20You\x20can\x20preserve\x20th\
    e\n\x20original\x20severity\x20level\x20in\x20the\x20log\x20entry\x20pay\
    load\x20if\x20you\x20wish.\n\n\n\n\x03\x05\0\x01\x12\x03+\x05\x10\n@\n\
    \x04\x05\0\x02\0\x12\x03-\x02\x0e\x1a3\x20(0)\x20The\x20log\x20entry\x20\
    has\x20no\x20assigned\x20severity\x20level.\n\n\x0c\n\x05\x05\0\x02\0\
    \x01\x12\x03-\x02\t\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03-\x0c\r\n0\n\x04\
    \x05\0\x02\x01\x12\x030\x02\x0e\x1a#\x20(100)\x20Debug\x20or\x20trace\
    \x20information.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x030\x02\x07\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x030\n\r\nP\n\x04\x05\0\x02\x02\x12\x033\
    \x02\r\x1aC\x20(200)\x20Routine\x20information,\x20such\x20as\x20ongoing\
    \x20status\x20or\x20performance.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\
    3\x02\x06\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x033\t\x0c\nl\n\x04\x05\0\
    \x02\x03\x12\x037\x02\x0f\x1a_\x20(300)\x20Normal\x20but\x20significant\
    \x20events,\x20such\x20as\x20start\x20up,\x20shut\x20down,\x20or\n\x20a\
    \x20configuration\x20change.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x037\
    \x02\x08\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x037\x0b\x0e\n9\n\x04\x05\0\
    \x02\x04\x12\x03:\x02\x10\x1a,\x20(400)\x20Warning\x20events\x20might\
    \x20cause\x20problems.\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03:\x02\t\n\
    \x0c\n\x05\x05\0\x02\x04\x02\x12\x03:\x0c\x0f\n?\n\x04\x05\0\x02\x05\x12\
    \x03=\x02\x0e\x1a2\x20(500)\x20Error\x20events\x20are\x20likely\x20to\
    \x20cause\x20problems.\n\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03=\x02\x07\
    \n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03=\n\r\nK\n\x04\x05\0\x02\x06\x12\
    \x03@\x02\x11\x1a>\x20(600)\x20Critical\x20events\x20cause\x20more\x20se\
    vere\x20problems\x20or\x20outages.\n\n\x0c\n\x05\x05\0\x02\x06\x01\x12\
    \x03@\x02\n\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03@\r\x10\n>\n\x04\x05\0\
    \x02\x07\x12\x03C\x02\x0e\x1a1\x20(700)\x20A\x20person\x20must\x20take\
    \x20an\x20action\x20immediately.\n\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\
    C\x02\x07\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03C\n\r\n6\n\x04\x05\0\x02\
    \x08\x12\x03F\x02\x12\x1a)\x20(800)\x20One\x20or\x20more\x20systems\x20a\
    re\x20unusable.\n\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03F\x02\x0b\n\x0c\n\
    \x05\x05\0\x02\x08\x02\x12\x03F\x0e\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(LogSeverity::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
