// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/logging/type/http_request.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  A common proto for logging HTTP requests. Only contains semantics
///  defined by the HTTP specification. Product-specific logging
///  information MUST be defined in a separate message.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.logging.type.HttpRequest)
pub struct HttpRequest {
    // message fields
    ///  The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.request_method)
    pub request_method: ::std::string::String,
    ///  The scheme (http, https), the host name, the path and the query
    ///  portion of the URL that was requested.
    ///  Example: `"http://example.com/some/info?color=red"`.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.request_url)
    pub request_url: ::std::string::String,
    ///  The size of the HTTP request message in bytes, including the request
    ///  headers and the request body.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.request_size)
    pub request_size: i64,
    ///  The response code indicating the status of response.
    ///  Examples: 200, 404.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.status)
    pub status: i32,
    ///  The size of the HTTP response message sent back to the client, in bytes,
    ///  including the response headers and the response body.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.response_size)
    pub response_size: i64,
    ///  The user agent sent by the client. Example:
    ///  `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET
    ///  CLR 1.0.3705)"`.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.user_agent)
    pub user_agent: ::std::string::String,
    ///  The IP address (IPv4 or IPv6) of the client that issued the HTTP
    ///  request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.remote_ip)
    pub remote_ip: ::std::string::String,
    ///  The IP address (IPv4 or IPv6) of the origin server that the request was
    ///  sent to.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.server_ip)
    pub server_ip: ::std::string::String,
    ///  The referer URL of the request, as defined in
    ///  [HTTP/1.1 Header Field
    ///  Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.referer)
    pub referer: ::std::string::String,
    ///  The request processing latency on the server, from the time the request was
    ///  received until the response was sent.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.latency)
    pub latency: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    ///  Whether or not a cache lookup was attempted.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.cache_lookup)
    pub cache_lookup: bool,
    ///  Whether or not an entity was served from cache
    ///  (with or without validation).
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.cache_hit)
    pub cache_hit: bool,
    ///  Whether or not the response was validated with the origin server before
    ///  being served from cache. This field is only meaningful if `cache_hit` is
    ///  True.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.cache_validated_with_origin_server)
    pub cache_validated_with_origin_server: bool,
    ///  The number of HTTP response bytes inserted into cache. Set only when a
    ///  cache fill was attempted.
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.cache_fill_bytes)
    pub cache_fill_bytes: i64,
    ///  Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
    // @@protoc_insertion_point(field:google.logging.type.HttpRequest.protocol)
    pub protocol: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.logging.type.HttpRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HttpRequest {
    fn default() -> &'a HttpRequest {
        <HttpRequest as ::protobuf::Message>::default_instance()
    }
}

impl HttpRequest {
    pub fn new() -> HttpRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_method",
            |m: &HttpRequest| { &m.request_method },
            |m: &mut HttpRequest| { &mut m.request_method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_url",
            |m: &HttpRequest| { &m.request_url },
            |m: &mut HttpRequest| { &mut m.request_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_size",
            |m: &HttpRequest| { &m.request_size },
            |m: &mut HttpRequest| { &mut m.request_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &HttpRequest| { &m.status },
            |m: &mut HttpRequest| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "response_size",
            |m: &HttpRequest| { &m.response_size },
            |m: &mut HttpRequest| { &mut m.response_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_agent",
            |m: &HttpRequest| { &m.user_agent },
            |m: &mut HttpRequest| { &mut m.user_agent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remote_ip",
            |m: &HttpRequest| { &m.remote_ip },
            |m: &mut HttpRequest| { &mut m.remote_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_ip",
            |m: &HttpRequest| { &m.server_ip },
            |m: &mut HttpRequest| { &mut m.server_ip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "referer",
            |m: &HttpRequest| { &m.referer },
            |m: &mut HttpRequest| { &mut m.referer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "latency",
            |m: &HttpRequest| { &m.latency },
            |m: &mut HttpRequest| { &mut m.latency },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cache_lookup",
            |m: &HttpRequest| { &m.cache_lookup },
            |m: &mut HttpRequest| { &mut m.cache_lookup },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cache_hit",
            |m: &HttpRequest| { &m.cache_hit },
            |m: &mut HttpRequest| { &mut m.cache_hit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cache_validated_with_origin_server",
            |m: &HttpRequest| { &m.cache_validated_with_origin_server },
            |m: &mut HttpRequest| { &mut m.cache_validated_with_origin_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cache_fill_bytes",
            |m: &HttpRequest| { &m.cache_fill_bytes },
            |m: &mut HttpRequest| { &mut m.cache_fill_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "protocol",
            |m: &HttpRequest| { &m.protocol },
            |m: &mut HttpRequest| { &mut m.protocol },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HttpRequest>(
            "HttpRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HttpRequest {
    const NAME: &'static str = "HttpRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.request_method = is.read_string()?;
                },
                18 => {
                    self.request_url = is.read_string()?;
                },
                24 => {
                    self.request_size = is.read_int64()?;
                },
                32 => {
                    self.status = is.read_int32()?;
                },
                40 => {
                    self.response_size = is.read_int64()?;
                },
                50 => {
                    self.user_agent = is.read_string()?;
                },
                58 => {
                    self.remote_ip = is.read_string()?;
                },
                106 => {
                    self.server_ip = is.read_string()?;
                },
                66 => {
                    self.referer = is.read_string()?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.latency)?;
                },
                88 => {
                    self.cache_lookup = is.read_bool()?;
                },
                72 => {
                    self.cache_hit = is.read_bool()?;
                },
                80 => {
                    self.cache_validated_with_origin_server = is.read_bool()?;
                },
                96 => {
                    self.cache_fill_bytes = is.read_int64()?;
                },
                122 => {
                    self.protocol = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.request_method.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_method);
        }
        if !self.request_url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.request_url);
        }
        if self.request_size != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.request_size);
        }
        if self.status != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.status);
        }
        if self.response_size != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.response_size);
        }
        if !self.user_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.user_agent);
        }
        if !self.remote_ip.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.remote_ip);
        }
        if !self.server_ip.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.server_ip);
        }
        if !self.referer.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.referer);
        }
        if let Some(v) = self.latency.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.cache_lookup != false {
            my_size += 1 + 1;
        }
        if self.cache_hit != false {
            my_size += 1 + 1;
        }
        if self.cache_validated_with_origin_server != false {
            my_size += 1 + 1;
        }
        if self.cache_fill_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(12, self.cache_fill_bytes);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.protocol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.request_method.is_empty() {
            os.write_string(1, &self.request_method)?;
        }
        if !self.request_url.is_empty() {
            os.write_string(2, &self.request_url)?;
        }
        if self.request_size != 0 {
            os.write_int64(3, self.request_size)?;
        }
        if self.status != 0 {
            os.write_int32(4, self.status)?;
        }
        if self.response_size != 0 {
            os.write_int64(5, self.response_size)?;
        }
        if !self.user_agent.is_empty() {
            os.write_string(6, &self.user_agent)?;
        }
        if !self.remote_ip.is_empty() {
            os.write_string(7, &self.remote_ip)?;
        }
        if !self.server_ip.is_empty() {
            os.write_string(13, &self.server_ip)?;
        }
        if !self.referer.is_empty() {
            os.write_string(8, &self.referer)?;
        }
        if let Some(v) = self.latency.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if self.cache_lookup != false {
            os.write_bool(11, self.cache_lookup)?;
        }
        if self.cache_hit != false {
            os.write_bool(9, self.cache_hit)?;
        }
        if self.cache_validated_with_origin_server != false {
            os.write_bool(10, self.cache_validated_with_origin_server)?;
        }
        if self.cache_fill_bytes != 0 {
            os.write_int64(12, self.cache_fill_bytes)?;
        }
        if !self.protocol.is_empty() {
            os.write_string(15, &self.protocol)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HttpRequest {
        HttpRequest::new()
    }

    fn clear(&mut self) {
        self.request_method.clear();
        self.request_url.clear();
        self.request_size = 0;
        self.status = 0;
        self.response_size = 0;
        self.user_agent.clear();
        self.remote_ip.clear();
        self.server_ip.clear();
        self.referer.clear();
        self.latency.clear();
        self.cache_lookup = false;
        self.cache_hit = false;
        self.cache_validated_with_origin_server = false;
        self.cache_fill_bytes = 0;
        self.protocol.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HttpRequest {
        static instance: HttpRequest = HttpRequest {
            request_method: ::std::string::String::new(),
            request_url: ::std::string::String::new(),
            request_size: 0,
            status: 0,
            response_size: 0,
            user_agent: ::std::string::String::new(),
            remote_ip: ::std::string::String::new(),
            server_ip: ::std::string::String::new(),
            referer: ::std::string::String::new(),
            latency: ::protobuf::MessageField::none(),
            cache_lookup: false,
            cache_hit: false,
            cache_validated_with_origin_server: false,
            cache_fill_bytes: 0,
            protocol: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HttpRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HttpRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HttpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&google/logging/type/http_request.proto\x12\x13google.logging.type\x1a\
    \x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/api/annotations.proto\"\
    \xaf\x04\n\x0bHttpRequest\x12%\n\x0erequest_method\x18\x01\x20\x01(\tR\r\
    requestMethod\x12\x1f\n\x0brequest_url\x18\x02\x20\x01(\tR\nrequestUrl\
    \x12!\n\x0crequest_size\x18\x03\x20\x01(\x03R\x0brequestSize\x12\x16\n\
    \x06status\x18\x04\x20\x01(\x05R\x06status\x12#\n\rresponse_size\x18\x05\
    \x20\x01(\x03R\x0cresponseSize\x12\x1d\n\nuser_agent\x18\x06\x20\x01(\tR\
    \tuserAgent\x12\x1b\n\tremote_ip\x18\x07\x20\x01(\tR\x08remoteIp\x12\x1b\
    \n\tserver_ip\x18\r\x20\x01(\tR\x08serverIp\x12\x18\n\x07referer\x18\x08\
    \x20\x01(\tR\x07referer\x123\n\x07latency\x18\x0e\x20\x01(\x0b2\x19.goog\
    le.protobuf.DurationR\x07latency\x12!\n\x0ccache_lookup\x18\x0b\x20\x01(\
    \x08R\x0bcacheLookup\x12\x1b\n\tcache_hit\x18\t\x20\x01(\x08R\x08cacheHi\
    t\x12J\n\"cache_validated_with_origin_server\x18\n\x20\x01(\x08R\x1ecach\
    eValidatedWithOriginServer\x12(\n\x10cache_fill_bytes\x18\x0c\x20\x01(\
    \x03R\x0ecacheFillBytes\x12\x1a\n\x08protocol\x18\x0f\x20\x01(\tR\x08pro\
    tocolB\x9f\x01\n\x17com.google.logging.typeB\x10HttpRequestProtoP\x01Z8g\
    oogle.golang.org/genproto/googleapis/logging/type;ltype\xaa\x02\x19Googl\
    e.Cloud.Logging.Type\xca\x02\x19Google\\Cloud\\Logging\\TypeJ\xcf\x1a\n\
    \x06\x12\x04\x0f\0]\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\
    \x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\
    \x12\x03\x11\0\x1c\n\t\n\x02\x03\0\x12\x03\x13\0(\n\t\n\x02\x03\x01\x12\
    \x03\x14\0&\n\x08\n\x01\x08\x12\x03\x16\06\n\t\n\x02\x08%\x12\x03\x16\06\
    \n\x08\n\x01\x08\x12\x03\x17\0O\n\t\n\x02\x08\x0b\x12\x03\x17\0O\n\x08\n\
    \x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\x18\0\"\n\x08\n\x01\x08\
    \x12\x03\x19\01\n\t\n\x02\x08\x08\x12\x03\x19\01\n\x08\n\x01\x08\x12\x03\
    \x1a\00\n\t\n\x02\x08\x01\x12\x03\x1a\00\n\x08\n\x01\x08\x12\x03\x1b\06\
    \n\t\n\x02\x08)\x12\x03\x1b\06\n\xc1\x01\n\x02\x04\0\x12\x04\x20\0]\x01\
    \x1a\xb4\x01\x20A\x20common\x20proto\x20for\x20logging\x20HTTP\x20reques\
    ts.\x20Only\x20contains\x20semantics\n\x20defined\x20by\x20the\x20HTTP\
    \x20specification.\x20Product-specific\x20logging\n\x20information\x20MU\
    ST\x20be\x20defined\x20in\x20a\x20separate\x20message.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x20\x08\x13\nR\n\x04\x04\0\x02\0\x12\x03\"\x02\x1c\x1aE\x20\
    The\x20request\x20method.\x20Examples:\x20`\"GET\"`,\x20`\"HEAD\"`,\x20`\
    \"PUT\"`,\x20`\"POST\"`.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\"\x02\x08\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\"\t\x17\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\"\x1a\x1b\n\xad\x01\n\x04\x04\0\x02\x01\x12\x03'\x02\x19\x1a\
    \x9f\x01\x20The\x20scheme\x20(http,\x20https),\x20the\x20host\x20name,\
    \x20the\x20path\x20and\x20the\x20query\n\x20portion\x20of\x20the\x20URL\
    \x20that\x20was\x20requested.\n\x20Example:\x20`\"http://example.com/som\
    e/info?color=red\"`.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03'\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03'\t\x14\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03'\x17\x18\nr\n\x04\x04\0\x02\x02\x12\x03+\x02\x19\x1ae\x20Th\
    e\x20size\x20of\x20the\x20HTTP\x20request\x20message\x20in\x20bytes,\x20\
    including\x20the\x20request\n\x20headers\x20and\x20the\x20request\x20bod\
    y.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03+\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03+\x08\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03+\x17\
    \x18\nX\n\x04\x04\0\x02\x03\x12\x03/\x02\x13\x1aK\x20The\x20response\x20\
    code\x20indicating\x20the\x20status\x20of\x20response.\n\x20Examples:\
    \x20200,\x20404.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03/\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03/\x08\x0e\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03/\x11\x12\n\x8f\x01\n\x04\x04\0\x02\x04\x12\x033\x02\x1a\x1a\x81\
    \x01\x20The\x20size\x20of\x20the\x20HTTP\x20response\x20message\x20sent\
    \x20back\x20to\x20the\x20client,\x20in\x20bytes,\n\x20including\x20the\
    \x20response\x20headers\x20and\x20the\x20response\x20body.\n\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x033\x02\x07\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x033\x08\x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x033\x18\x19\n\x8c\x01\n\
    \x04\x04\0\x02\x05\x12\x038\x02\x18\x1a\x7f\x20The\x20user\x20agent\x20s\
    ent\x20by\x20the\x20client.\x20Example:\n\x20`\"Mozilla/4.0\x20(compatib\
    le;\x20MSIE\x206.0;\x20Windows\x2098;\x20Q312461;\x20.NET\n\x20CLR\x201.\
    0.3705)\"`.\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x038\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x038\t\x13\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x038\
    \x16\x17\n\x94\x01\n\x04\x04\0\x02\x06\x12\x03<\x02\x17\x1a\x86\x01\x20T\
    he\x20IP\x20address\x20(IPv4\x20or\x20IPv6)\x20of\x20the\x20client\x20th\
    at\x20issued\x20the\x20HTTP\n\x20request.\x20Examples:\x20`\"192.168.1.1\
    \"`,\x20`\"FE80::0202:B3FF:FE1E:8329\"`.\n\n\x0c\n\x05\x04\0\x02\x06\x05\
    \x12\x03<\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03<\t\x12\n\x0c\n\
    \x05\x04\0\x02\x06\x03\x12\x03<\x15\x16\n`\n\x04\x04\0\x02\x07\x12\x03@\
    \x02\x18\x1aS\x20The\x20IP\x20address\x20(IPv4\x20or\x20IPv6)\x20of\x20t\
    he\x20origin\x20server\x20that\x20the\x20request\x20was\n\x20sent\x20to.\
    \n\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x07\x01\x12\x03@\t\x12\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03@\x15\x17\n\
    \x9c\x01\n\x04\x04\0\x02\x08\x12\x03E\x02\x15\x1a\x8e\x01\x20The\x20refe\
    rer\x20URL\x20of\x20the\x20request,\x20as\x20defined\x20in\n\x20[HTTP/1.\
    1\x20Header\x20Field\n\x20Definitions](http://www.w3.org/Protocols/rfc26\
    16/rfc2616-sec14.html).\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03E\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03E\t\x10\n\x0c\n\x05\x04\0\x02\x08\
    \x03\x12\x03E\x13\x14\n\x81\x01\n\x04\x04\0\x02\t\x12\x03I\x02(\x1at\x20\
    The\x20request\x20processing\x20latency\x20on\x20the\x20server,\x20from\
    \x20the\x20time\x20the\x20request\x20was\n\x20received\x20until\x20the\
    \x20response\x20was\x20sent.\n\n\x0c\n\x05\x04\0\x02\t\x06\x12\x03I\x02\
    \x1a\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03I\x1b\"\n\x0c\n\x05\x04\0\x02\t\
    \x03\x12\x03I%'\n;\n\x04\x04\0\x02\n\x12\x03L\x02\x19\x1a.\x20Whether\
    \x20or\x20not\x20a\x20cache\x20lookup\x20was\x20attempted.\n\n\x0c\n\x05\
    \x04\0\x02\n\x05\x12\x03L\x02\x06\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03L\
    \x07\x13\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03L\x16\x18\n\\\n\x04\x04\0\
    \x02\x0b\x12\x03P\x02\x15\x1aO\x20Whether\x20or\x20not\x20an\x20entity\
    \x20was\x20served\x20from\x20cache\n\x20(with\x20or\x20without\x20valida\
    tion).\n\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03P\x02\x06\n\x0c\n\x05\x04\
    \0\x02\x0b\x01\x12\x03P\x07\x10\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03P\
    \x13\x14\n\xa8\x01\n\x04\x04\0\x02\x0c\x12\x03U\x02/\x1a\x9a\x01\x20Whet\
    her\x20or\x20not\x20the\x20response\x20was\x20validated\x20with\x20the\
    \x20origin\x20server\x20before\n\x20being\x20served\x20from\x20cache.\
    \x20This\x20field\x20is\x20only\x20meaningful\x20if\x20`cache_hit`\x20is\
    \n\x20True.\n\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03U\x02\x06\n\x0c\n\x05\
    \x04\0\x02\x0c\x01\x12\x03U\x07)\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03U,\
    .\np\n\x04\x04\0\x02\r\x12\x03Y\x02\x1e\x1ac\x20The\x20number\x20of\x20H\
    TTP\x20response\x20bytes\x20inserted\x20into\x20cache.\x20Set\x20only\
    \x20when\x20a\n\x20cache\x20fill\x20was\x20attempted.\n\n\x0c\n\x05\x04\
    \0\x02\r\x05\x12\x03Y\x02\x07\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03Y\x08\
    \x18\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03Y\x1b\x1d\nY\n\x04\x04\0\x02\x0e\
    \x12\x03\\\x02\x17\x1aL\x20Protocol\x20used\x20for\x20the\x20request.\
    \x20Examples:\x20\"HTTP/1.1\",\x20\"HTTP/2\",\x20\"websocket\"\n\n\x0c\n\
    \x05\x04\0\x02\x0e\x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\0\x02\x0e\x01\
    \x12\x03\\\t\x11\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\x03\\\x14\x16b\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HttpRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
