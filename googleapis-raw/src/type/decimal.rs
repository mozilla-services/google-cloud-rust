// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/type/decimal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Decimal {
    // message fields
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Decimal {
    fn default() -> &'a Decimal {
        <Decimal as ::protobuf::Message>::default_instance()
    }
}

impl Decimal {
    pub fn new() -> Decimal {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Decimal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Decimal {
        Decimal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &Decimal| { &m.value },
                |m: &mut Decimal| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Decimal>(
                "Decimal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Decimal {
        static instance: ::protobuf::rt::LazyV2<Decimal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Decimal::new)
    }
}

impl ::protobuf::Clear for Decimal {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Decimal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Decimal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/type/decimal.proto\x12\x0bgoogle.type\"\x1f\n\x07Decimal\
    \x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05valueBf\n\x0fcom.google.typeB\
    \x0cDecimalProtoP\x01Z:google.golang.org/genproto/googleapis/type/decima\
    l;decimal\xf8\x01\x01\xa2\x02\x03GTPJ\xf0\x1d\n\x06\x12\x04\x0e\0^\x01\n\
    \xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202021\x20Go\
    ogle\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ver\
    sion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20th\
    is\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x14\n\x08\n\x01\x08\
    \x12\x03\x12\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x12\0\x1f\n\x08\n\x01\x08\
    \x12\x03\x13\0Q\n\t\n\x02\x08\x0b\x12\x03\x13\0Q\n\x08\n\x01\x08\x12\x03\
    \x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\0-\
    \n\t\n\x02\x08\x08\x12\x03\x15\0-\n\x08\n\x01\x08\x12\x03\x16\0(\n\t\n\
    \x02\x08\x01\x12\x03\x16\0(\n\x08\n\x01\x08\x12\x03\x17\0!\n\t\n\x02\x08\
    $\x12\x03\x17\0!\n\xed\x02\n\x02\x04\0\x12\x04\x20\0^\x01\x1a\xe0\x02\
    \x20A\x20representation\x20of\x20a\x20decimal\x20value,\x20such\x20as\
    \x202.5.\x20Clients\x20may\x20convert\x20values\n\x20into\x20language-na\
    tive\x20decimal\x20formats,\x20such\x20as\x20Java's\x20[BigDecimal][]\
    \x20or\n\x20Python's\x20[decimal.Decimal][].\n\n\x20[BigDecimal]:\n\x20h\
    ttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/Bi\
    gDecimal.html\n\x20[decimal.Decimal]:\x20https://docs.python.org/3/libra\
    ry/decimal.html\n\n\n\n\x03\x04\0\x01\x12\x03\x20\x08\x0f\n\xf8\x14\n\
    \x04\x04\0\x02\0\x12\x03]\x02\x13\x1a\xea\x14\x20The\x20decimal\x20value\
    ,\x20as\x20a\x20string.\n\n\x20The\x20string\x20representation\x20consis\
    ts\x20of\x20an\x20optional\x20sign,\x20`+`\x20(`U+002B`)\n\x20or\x20`-`\
    \x20(`U+002D`),\x20followed\x20by\x20a\x20sequence\x20of\x20zero\x20or\
    \x20more\x20decimal\x20digits\n\x20(\"the\x20integer\"),\x20optionally\
    \x20followed\x20by\x20a\x20fraction,\x20optionally\x20followed\n\x20by\
    \x20an\x20exponent.\n\n\x20The\x20fraction\x20consists\x20of\x20a\x20dec\
    imal\x20point\x20followed\x20by\x20zero\x20or\x20more\x20decimal\n\x20di\
    gits.\x20The\x20string\x20must\x20contain\x20at\x20least\x20one\x20digit\
    \x20in\x20either\x20the\x20integer\n\x20or\x20the\x20fraction.\x20The\
    \x20number\x20formed\x20by\x20the\x20sign,\x20the\x20integer\x20and\x20t\
    he\n\x20fraction\x20is\x20referred\x20to\x20as\x20the\x20significand.\n\
    \n\x20The\x20exponent\x20consists\x20of\x20the\x20character\x20`e`\x20(`\
    U+0065`)\x20or\x20`E`\x20(`U+0045`)\n\x20followed\x20by\x20one\x20or\x20\
    more\x20decimal\x20digits.\n\n\x20Services\x20**should**\x20normalize\
    \x20decimal\x20values\x20before\x20storing\x20them\x20by:\n\n\x20\x20\
    \x20-\x20Removing\x20an\x20explicitly-provided\x20`+`\x20sign\x20(`+2.5`\
    \x20->\x20`2.5`).\n\x20\x20\x20-\x20Replacing\x20a\x20zero-length\x20int\
    eger\x20value\x20with\x20`0`\x20(`.5`\x20->\x20`0.5`).\n\x20\x20\x20-\
    \x20Coercing\x20the\x20exponent\x20character\x20to\x20lower-case\x20(`2.\
    5E8`\x20->\x20`2.5e8`).\n\x20\x20\x20-\x20Removing\x20an\x20explicitly-p\
    rovided\x20zero\x20exponent\x20(`2.5e0`\x20->\x20`2.5`).\n\n\x20Services\
    \x20**may**\x20perform\x20additional\x20normalization\x20based\x20on\x20\
    its\x20own\x20needs\n\x20and\x20the\x20internal\x20decimal\x20implementa\
    tion\x20selected,\x20such\x20as\x20shifting\x20the\n\x20decimal\x20point\
    \x20and\x20exponent\x20value\x20together\x20(example:\x20`2.5e-1`\x20<->\
    \x20`0.25`).\n\x20Additionally,\x20services\x20**may**\x20preserve\x20tr\
    ailing\x20zeroes\x20in\x20the\x20fraction\n\x20to\x20indicate\x20increas\
    ed\x20precision,\x20but\x20are\x20not\x20required\x20to\x20do\x20so.\n\n\
    \x20Note\x20that\x20only\x20the\x20`.`\x20character\x20is\x20supported\
    \x20to\x20divide\x20the\x20integer\n\x20and\x20the\x20fraction;\x20`,`\
    \x20**should\x20not**\x20be\x20supported\x20regardless\x20of\x20locale.\
    \n\x20Additionally,\x20thousand\x20separators\x20**should\x20not**\x20be\
    \x20supported.\x20If\x20a\n\x20service\x20does\x20support\x20them,\x20va\
    lues\x20**must**\x20be\x20normalized.\n\n\x20The\x20ENBF\x20grammar\x20i\
    s:\n\n\x20\x20\x20\x20\x20DecimalString\x20=\n\x20\x20\x20\x20\x20\x20\
    \x20[Sign]\x20Significand\x20[Exponent];\n\n\x20\x20\x20\x20\x20Sign\x20\
    =\x20'+'\x20|\x20'-';\n\n\x20\x20\x20\x20\x20Significand\x20=\n\x20\x20\
    \x20\x20\x20\x20\x20Digits\x20['.']\x20[Digits]\x20|\x20[Digits]\x20'.'\
    \x20Digits;\n\n\x20\x20\x20\x20\x20Exponent\x20=\x20('e'\x20|\x20'E')\
    \x20[Sign]\x20Digits;\n\n\x20\x20\x20\x20\x20Digits\x20=\x20{\x20'0'\x20\
    |\x20'1'\x20|\x20'2'\x20|\x20'3'\x20|\x20'4'\x20|\x20'5'\x20|\x20'6'\x20\
    |\x20'7'\x20|\x20'8'\x20|\x20'9'\x20};\n\n\x20Services\x20**should**\x20\
    clearly\x20document\x20the\x20range\x20of\x20supported\x20values,\x20the\
    \n\x20maximum\x20supported\x20precision\x20(total\x20number\x20of\x20dig\
    its),\x20and,\x20if\x20applicable,\n\x20the\x20scale\x20(number\x20of\
    \x20digits\x20after\x20the\x20decimal\x20point),\x20as\x20well\x20as\x20\
    how\x20it\n\x20behaves\x20when\x20receiving\x20out-of-bounds\x20values.\
    \n\n\x20Services\x20**may**\x20choose\x20to\x20accept\x20values\x20passe\
    d\x20as\x20input\x20even\x20when\x20the\n\x20value\x20has\x20a\x20higher\
    \x20precision\x20or\x20scale\x20than\x20the\x20service\x20supports,\x20a\
    nd\n\x20**should**\x20round\x20the\x20value\x20to\x20fit\x20the\x20suppo\
    rted\x20scale.\x20Alternatively,\x20the\n\x20service\x20**may**\x20error\
    \x20with\x20`400\x20Bad\x20Request`\x20(`INVALID_ARGUMENT`\x20in\x20gRPC\
    )\n\x20if\x20precision\x20would\x20be\x20lost.\n\n\x20Services\x20**shou\
    ld**\x20error\x20with\x20`400\x20Bad\x20Request`\x20(`INVALID_ARGUMENT`\
    \x20in\n\x20gRPC)\x20if\x20the\x20service\x20receives\x20a\x20value\x20o\
    utside\x20of\x20the\x20supported\x20range.\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03]\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03]\t\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03]\x11\x12b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
