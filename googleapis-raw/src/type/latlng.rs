// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/type/latlng.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  An object representing a latitude/longitude pair. This is expressed as a pair
///  of doubles representing degrees latitude and degrees longitude. Unless
///  specified otherwise, this must conform to the
///  <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
///  standard</a>. Values must be within normalized ranges.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.type.LatLng)
pub struct LatLng {
    // message fields
    ///  The latitude in degrees. It must be in the range [-90.0, +90.0].
    // @@protoc_insertion_point(field:google.type.LatLng.latitude)
    pub latitude: f64,
    ///  The longitude in degrees. It must be in the range [-180.0, +180.0].
    // @@protoc_insertion_point(field:google.type.LatLng.longitude)
    pub longitude: f64,
    // special fields
    // @@protoc_insertion_point(special_field:google.type.LatLng.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LatLng {
    fn default() -> &'a LatLng {
        <LatLng as ::protobuf::Message>::default_instance()
    }
}

impl LatLng {
    pub fn new() -> LatLng {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "latitude",
            |m: &LatLng| { &m.latitude },
            |m: &mut LatLng| { &mut m.latitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "longitude",
            |m: &LatLng| { &m.longitude },
            |m: &mut LatLng| { &mut m.longitude },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LatLng>(
            "LatLng",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LatLng {
    const NAME: &'static str = "LatLng";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.latitude = is.read_double()?;
                },
                17 => {
                    self.longitude = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.latitude != 0. {
            my_size += 1 + 8;
        }
        if self.longitude != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.latitude != 0. {
            os.write_double(1, self.latitude)?;
        }
        if self.longitude != 0. {
            os.write_double(2, self.longitude)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LatLng {
        LatLng::new()
    }

    fn clear(&mut self) {
        self.latitude = 0.;
        self.longitude = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LatLng {
        static instance: LatLng = LatLng {
            latitude: 0.,
            longitude: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LatLng {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LatLng").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LatLng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LatLng {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/type/latlng.proto\x12\x0bgoogle.type\"B\n\x06LatLng\x12\x1a\
    \n\x08latitude\x18\x01\x20\x01(\x01R\x08latitude\x12\x1c\n\tlongitude\
    \x18\x02\x20\x01(\x01R\tlongitudeBc\n\x0fcom.google.typeB\x0bLatLngProto\
    P\x01Z8google.golang.org/genproto/googleapis/type/latlng;latlng\xf8\x01\
    \x01\xa2\x02\x03GTPJ\xac\n\n\x06\x12\x04\x0f\0%\x01\n\xbe\x04\n\x01\x0c\
    \x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x14\n\x08\n\x01\x08\x12\x03\x13\0\
    \x1f\n\t\n\x02\x08\x1f\x12\x03\x13\0\x1f\n\x08\n\x01\x08\x12\x03\x14\0O\
    \n\t\n\x02\x08\x0b\x12\x03\x14\0O\n\x08\n\x01\x08\x12\x03\x15\0\"\n\t\n\
    \x02\x08\n\x12\x03\x15\0\"\n\x08\n\x01\x08\x12\x03\x16\0,\n\t\n\x02\x08\
    \x08\x12\x03\x16\0,\n\x08\n\x01\x08\x12\x03\x17\0(\n\t\n\x02\x08\x01\x12\
    \x03\x17\0(\n\x08\n\x01\x08\x12\x03\x18\0!\n\t\n\x02\x08$\x12\x03\x18\0!\
    \n\xd3\x02\n\x02\x04\0\x12\x04\x1f\0%\x01\x1a\xc6\x02\x20An\x20object\
    \x20representing\x20a\x20latitude/longitude\x20pair.\x20This\x20is\x20ex\
    pressed\x20as\x20a\x20pair\n\x20of\x20doubles\x20representing\x20degrees\
    \x20latitude\x20and\x20degrees\x20longitude.\x20Unless\n\x20specified\
    \x20otherwise,\x20this\x20must\x20conform\x20to\x20the\n\x20<a\x20href=\
    \"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\n\x20st\
    andard</a>.\x20Values\x20must\x20be\x20within\x20normalized\x20ranges.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x1f\x08\x0e\nO\n\x04\x04\0\x02\0\x12\x03!\
    \x02\x16\x1aB\x20The\x20latitude\x20in\x20degrees.\x20It\x20must\x20be\
    \x20in\x20the\x20range\x20[-90.0,\x20+90.0].\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03!\t\x11\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03!\x14\x15\nR\n\x04\x04\0\x02\x01\x12\x03$\
    \x02\x17\x1aE\x20The\x20longitude\x20in\x20degrees.\x20It\x20must\x20be\
    \x20in\x20the\x20range\x20[-180.0,\x20+180.0].\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03$\t\x12\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03$\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LatLng::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
