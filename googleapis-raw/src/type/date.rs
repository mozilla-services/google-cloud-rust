// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/type/date.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Represents a whole or partial calendar date, e.g. a birthday. The time of day
///  and time zone are either specified elsewhere or are not significant. The date
///  is relative to the Proleptic Gregorian Calendar. This can represent:
///
///  * A full date, with non-zero year, month and day values
///  * A month and day value, with a zero year, e.g. an anniversary
///  * A year on its own, with zero month and day values
///  * A year and month value, with a zero day, e.g. a credit card expiration date
///
///  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
// @@protoc_insertion_point(message:google.type.Date)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Date {
    // message fields
    ///  Year of date. Must be from 1 to 9999, or 0 if specifying a date without
    ///  a year.
    // @@protoc_insertion_point(field:google.type.Date.year)
    pub year: i32,
    ///  Month of year. Must be from 1 to 12, or 0 if specifying a year without a
    ///  month and day.
    // @@protoc_insertion_point(field:google.type.Date.month)
    pub month: i32,
    ///  Day of month. Must be from 1 to 31 and valid for the year and month, or 0
    ///  if specifying a year by itself or a year and month where the day is not
    ///  significant.
    // @@protoc_insertion_point(field:google.type.Date.day)
    pub day: i32,
    // special fields
    // @@protoc_insertion_point(special_field:google.type.Date.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Date {
    fn default() -> &'a Date {
        <Date as ::protobuf::Message>::default_instance()
    }
}

impl Date {
    pub fn new() -> Date {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "year",
            |m: &Date| { &m.year },
            |m: &mut Date| { &mut m.year },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "month",
            |m: &Date| { &m.month },
            |m: &mut Date| { &mut m.month },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "day",
            |m: &Date| { &m.day },
            |m: &mut Date| { &mut m.day },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Date>(
            "Date",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Date {
    const NAME: &'static str = "Date";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.year = is.read_int32()?;
                },
                16 => {
                    self.month = is.read_int32()?;
                },
                24 => {
                    self.day = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.year != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.year);
        }
        if self.month != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.month);
        }
        if self.day != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.day);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.year != 0 {
            os.write_int32(1, self.year)?;
        }
        if self.month != 0 {
            os.write_int32(2, self.month)?;
        }
        if self.day != 0 {
            os.write_int32(3, self.day)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Date {
        Date::new()
    }

    fn clear(&mut self) {
        self.year = 0;
        self.month = 0;
        self.day = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Date {
        static instance: Date = Date {
            year: 0,
            month: 0,
            day: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Date {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Date").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Date {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Date {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16google/type/date.proto\x12\x0bgoogle.type\"B\n\x04Date\x12\x12\n\
    \x04year\x18\x01\x20\x01(\x05R\x04year\x12\x14\n\x05month\x18\x02\x20\
    \x01(\x05R\x05month\x12\x10\n\x03day\x18\x03\x20\x01(\x05R\x03dayB]\n\
    \x0fcom.google.typeB\tDateProtoP\x01Z4google.golang.org/genproto/googlea\
    pis/type/date;date\xf8\x01\x01\xa2\x02\x03GTPJ\xae\x0e\n\x06\x12\x04\x0f\
    \01\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202\
    019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20Licen\
    se,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\
    \x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20\
    License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\
    \x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\
    \n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x14\n\x08\n\x01\x08\x12\x03\x13\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x13\0\
    \x1f\n\x08\n\x01\x08\x12\x03\x14\0K\n\t\n\x02\x08\x0b\x12\x03\x14\0K\n\
    \x08\n\x01\x08\x12\x03\x15\0\"\n\t\n\x02\x08\n\x12\x03\x15\0\"\n\x08\n\
    \x01\x08\x12\x03\x16\0*\n\t\n\x02\x08\x08\x12\x03\x16\0*\n\x08\n\x01\x08\
    \x12\x03\x17\0(\n\t\n\x02\x08\x01\x12\x03\x17\0(\n\x08\n\x01\x08\x12\x03\
    \x18\0!\n\t\n\x02\x08$\x12\x03\x18\0!\n\xd3\x04\n\x02\x04\0\x12\x04$\01\
    \x01\x1a\xc6\x04\x20Represents\x20a\x20whole\x20or\x20partial\x20calenda\
    r\x20date,\x20e.g.\x20a\x20birthday.\x20The\x20time\x20of\x20day\n\x20an\
    d\x20time\x20zone\x20are\x20either\x20specified\x20elsewhere\x20or\x20ar\
    e\x20not\x20significant.\x20The\x20date\n\x20is\x20relative\x20to\x20the\
    \x20Proleptic\x20Gregorian\x20Calendar.\x20This\x20can\x20represent:\n\n\
    \x20*\x20A\x20full\x20date,\x20with\x20non-zero\x20year,\x20month\x20and\
    \x20day\x20values\n\x20*\x20A\x20month\x20and\x20day\x20value,\x20with\
    \x20a\x20zero\x20year,\x20e.g.\x20an\x20anniversary\n\x20*\x20A\x20year\
    \x20on\x20its\x20own,\x20with\x20zero\x20month\x20and\x20day\x20values\n\
    \x20*\x20A\x20year\x20and\x20month\x20value,\x20with\x20a\x20zero\x20day\
    ,\x20e.g.\x20a\x20credit\x20card\x20expiration\x20date\n\n\x20Related\
    \x20types\x20are\x20[google.type.TimeOfDay][google.type.TimeOfDay]\x20an\
    d\x20`google.protobuf.Timestamp`.\n\n\n\n\x03\x04\0\x01\x12\x03$\x08\x0c\
    \n_\n\x04\x04\0\x02\0\x12\x03'\x02\x11\x1aR\x20Year\x20of\x20date.\x20Mu\
    st\x20be\x20from\x201\x20to\x209999,\x20or\x200\x20if\x20specifying\x20a\
    \x20date\x20without\n\x20a\x20year.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03'\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03'\x08\x0c\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03'\x0f\x10\ng\n\x04\x04\0\x02\x01\x12\x03+\x02\
    \x12\x1aZ\x20Month\x20of\x20year.\x20Must\x20be\x20from\x201\x20to\x2012\
    ,\x20or\x200\x20if\x20specifying\x20a\x20year\x20without\x20a\n\x20month\
    \x20and\x20day.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03+\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03+\x08\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03+\x10\x11\n\xb0\x01\n\x04\x04\0\x02\x02\x12\x030\x02\x10\x1a\xa2\x01\
    \x20Day\x20of\x20month.\x20Must\x20be\x20from\x201\x20to\x2031\x20and\
    \x20valid\x20for\x20the\x20year\x20and\x20month,\x20or\x200\n\x20if\x20s\
    pecifying\x20a\x20year\x20by\x20itself\x20or\x20a\x20year\x20and\x20mont\
    h\x20where\x20the\x20day\x20is\x20not\n\x20significant.\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x030\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x030\x08\x0b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x030\x0e\x0fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Date::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
