// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/type/dayofweek.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Represents a day of week.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.type.DayOfWeek)
pub enum DayOfWeek {
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.DAY_OF_WEEK_UNSPECIFIED)
    DAY_OF_WEEK_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.MONDAY)
    MONDAY = 1,
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.TUESDAY)
    TUESDAY = 2,
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.WEDNESDAY)
    WEDNESDAY = 3,
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.THURSDAY)
    THURSDAY = 4,
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.FRIDAY)
    FRIDAY = 5,
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.SATURDAY)
    SATURDAY = 6,
    // @@protoc_insertion_point(enum_value:google.type.DayOfWeek.SUNDAY)
    SUNDAY = 7,
}

impl ::protobuf::Enum for DayOfWeek {
    const NAME: &'static str = "DayOfWeek";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DayOfWeek> {
        match value {
            0 => ::std::option::Option::Some(DayOfWeek::DAY_OF_WEEK_UNSPECIFIED),
            1 => ::std::option::Option::Some(DayOfWeek::MONDAY),
            2 => ::std::option::Option::Some(DayOfWeek::TUESDAY),
            3 => ::std::option::Option::Some(DayOfWeek::WEDNESDAY),
            4 => ::std::option::Option::Some(DayOfWeek::THURSDAY),
            5 => ::std::option::Option::Some(DayOfWeek::FRIDAY),
            6 => ::std::option::Option::Some(DayOfWeek::SATURDAY),
            7 => ::std::option::Option::Some(DayOfWeek::SUNDAY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DayOfWeek] = &[
        DayOfWeek::DAY_OF_WEEK_UNSPECIFIED,
        DayOfWeek::MONDAY,
        DayOfWeek::TUESDAY,
        DayOfWeek::WEDNESDAY,
        DayOfWeek::THURSDAY,
        DayOfWeek::FRIDAY,
        DayOfWeek::SATURDAY,
        DayOfWeek::SUNDAY,
    ];
}

impl ::protobuf::EnumFull for DayOfWeek {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DayOfWeek").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DayOfWeek {
    fn default() -> Self {
        DayOfWeek::DAY_OF_WEEK_UNSPECIFIED
    }
}

impl DayOfWeek {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DayOfWeek>("DayOfWeek")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bgoogle/type/dayofweek.proto\x12\x0bgoogle.type*\x84\x01\n\tDayOfWe\
    ek\x12\x1b\n\x17DAY_OF_WEEK_UNSPECIFIED\x10\0\x12\n\n\x06MONDAY\x10\x01\
    \x12\x0b\n\x07TUESDAY\x10\x02\x12\r\n\tWEDNESDAY\x10\x03\x12\x0c\n\x08TH\
    URSDAY\x10\x04\x12\n\n\x06FRIDAY\x10\x05\x12\x0c\n\x08SATURDAY\x10\x06\
    \x12\n\n\x06SUNDAY\x10\x07Bi\n\x0fcom.google.typeB\x0eDayOfWeekProtoP\
    \x01Z>google.golang.org/genproto/googleapis/type/dayofweek;dayofweek\xa2\
    \x02\x03GTPJ\xb3\n\n\x06\x12\x04\x0f\02\x01\n\xbe\x04\n\x01\x0c\x12\x03\
    \x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licens\
    ed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"\
    License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20i\
    n\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20\
    a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://ww\
    w.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20app\
    licable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20\
    distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITION\
    S\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\
    \x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\
    \x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\
    \n\x08\n\x01\x02\x12\x03\x11\0\x14\n\x08\n\x01\x08\x12\x03\x13\0U\n\t\n\
    \x02\x08\x0b\x12\x03\x13\0U\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\n\x02\
    \x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\0/\n\t\n\x02\x08\x08\
    \x12\x03\x15\0/\n\x08\n\x01\x08\x12\x03\x16\0(\n\t\n\x02\x08\x01\x12\x03\
    \x16\0(\n\x08\n\x01\x08\x12\x03\x17\0!\n\t\n\x02\x08$\x12\x03\x17\0!\n'\
    \n\x02\x05\0\x12\x04\x1a\02\x01\x1a\x1b\x20Represents\x20a\x20day\x20of\
    \x20week.\n\n\n\n\x03\x05\0\x01\x12\x03\x1a\x05\x0e\n+\n\x04\x05\0\x02\0\
    \x12\x03\x1c\x02\x1e\x1a\x1e\x20The\x20unspecified\x20day-of-week.\n\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x1c\x02\x19\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\x1c\x1c\x1d\n)\n\x04\x05\0\x02\x01\x12\x03\x1f\x02\r\x1a\
    \x1c\x20The\x20day-of-week\x20of\x20Monday.\n\n\x0c\n\x05\x05\0\x02\x01\
    \x01\x12\x03\x1f\x02\x08\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x1f\x0b\
    \x0c\n*\n\x04\x05\0\x02\x02\x12\x03\"\x02\x0e\x1a\x1d\x20The\x20day-of-w\
    eek\x20of\x20Tuesday.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\"\x02\t\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\"\x0c\r\n,\n\x04\x05\0\x02\x03\x12\
    \x03%\x02\x10\x1a\x1f\x20The\x20day-of-week\x20of\x20Wednesday.\n\n\x0c\
    \n\x05\x05\0\x02\x03\x01\x12\x03%\x02\x0b\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03%\x0e\x0f\n+\n\x04\x05\0\x02\x04\x12\x03(\x02\x0f\x1a\x1e\x20The\
    \x20day-of-week\x20of\x20Thursday.\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\
    \x03(\x02\n\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03(\r\x0e\n)\n\x04\x05\0\
    \x02\x05\x12\x03+\x02\r\x1a\x1c\x20The\x20day-of-week\x20of\x20Friday.\n\
    \n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03+\x02\x08\n\x0c\n\x05\x05\0\x02\
    \x05\x02\x12\x03+\x0b\x0c\n+\n\x04\x05\0\x02\x06\x12\x03.\x02\x0f\x1a\
    \x1e\x20The\x20day-of-week\x20of\x20Saturday.\n\n\x0c\n\x05\x05\0\x02\
    \x06\x01\x12\x03.\x02\n\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03.\r\x0e\n)\
    \n\x04\x05\0\x02\x07\x12\x031\x02\r\x1a\x1c\x20The\x20day-of-week\x20of\
    \x20Sunday.\n\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x031\x02\x08\n\x0c\n\x05\
    \x05\0\x02\x07\x02\x12\x031\x0b\x0cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DayOfWeek::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
