// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/type/expr.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.type.Expr)
pub struct Expr {
    // message fields
    ///  Textual representation of an expression in
    ///  Common Expression Language syntax.
    ///
    ///  The application context of the containing message determines which
    ///  well-known feature set of CEL is supported.
    // @@protoc_insertion_point(field:google.type.Expr.expression)
    pub expression: ::std::string::String,
    ///  An optional title for the expression, i.e. a short string describing
    ///  its purpose. This can be used e.g. in UIs which allow to enter the
    ///  expression.
    // @@protoc_insertion_point(field:google.type.Expr.title)
    pub title: ::std::string::String,
    ///  An optional description of the expression. This is a longer text which
    ///  describes the expression, e.g. when hovered over it in a UI.
    // @@protoc_insertion_point(field:google.type.Expr.description)
    pub description: ::std::string::String,
    ///  An optional string indicating the location of the expression for error
    ///  reporting, e.g. a file name and a position in the file.
    // @@protoc_insertion_point(field:google.type.Expr.location)
    pub location: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.type.Expr.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Expr {
    fn default() -> &'a Expr {
        <Expr as ::protobuf::Message>::default_instance()
    }
}

impl Expr {
    pub fn new() -> Expr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expression",
            |m: &Expr| { &m.expression },
            |m: &mut Expr| { &mut m.expression },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &Expr| { &m.title },
            |m: &mut Expr| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Expr| { &m.description },
            |m: &mut Expr| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "location",
            |m: &Expr| { &m.location },
            |m: &mut Expr| { &mut m.location },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Expr>(
            "Expr",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Expr {
    const NAME: &'static str = "Expr";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.expression = is.read_string()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.location = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.expression.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.expression);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.location);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.expression.is_empty() {
            os.write_string(1, &self.expression)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.location.is_empty() {
            os.write_string(4, &self.location)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Expr {
        Expr::new()
    }

    fn clear(&mut self) {
        self.expression.clear();
        self.title.clear();
        self.description.clear();
        self.location.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Expr {
        static instance: Expr = Expr {
            expression: ::std::string::String::new(),
            title: ::std::string::String::new(),
            description: ::std::string::String::new(),
            location: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Expr {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Expr").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Expr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16google/type/expr.proto\x12\x0bgoogle.type\"z\n\x04Expr\x12\x1e\n\n\
    expression\x18\x01\x20\x01(\tR\nexpression\x12\x14\n\x05title\x18\x02\
    \x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bde\
    scription\x12\x1a\n\x08location\x18\x04\x20\x01(\tR\x08locationBZ\n\x0fc\
    om.google.typeB\tExprProtoP\x01Z4google.golang.org/genproto/googleapis/t\
    ype/expr;expr\xa2\x02\x03GTPJ\xe2\r\n\x06\x12\x04\x0f\02\x01\n\xbe\x04\n\
    \x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LL\
    C.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x14\n\x08\n\x01\x08\x12\
    \x03\x13\0K\n\t\n\x02\x08\x0b\x12\x03\x13\0K\n\x08\n\x01\x08\x12\x03\x14\
    \0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\0*\n\t\
    \n\x02\x08\x08\x12\x03\x15\0*\n\x08\n\x01\x08\x12\x03\x16\0(\n\t\n\x02\
    \x08\x01\x12\x03\x16\0(\n\x08\n\x01\x08\x12\x03\x17\0!\n\t\n\x02\x08$\
    \x12\x03\x17\0!\n\xcb\x01\n\x02\x04\0\x12\x04\x1e\02\x01\x1a\xbe\x01\x20\
    Represents\x20an\x20expression\x20text.\x20Example:\n\n\x20\x20\x20\x20\
    \x20title:\x20\"User\x20account\x20presence\"\n\x20\x20\x20\x20\x20descr\
    iption:\x20\"Determines\x20whether\x20the\x20request\x20has\x20a\x20user\
    \x20account\"\n\x20\x20\x20\x20\x20expression:\x20\"size(request.user)\
    \x20>\x200\"\n\n\n\n\x03\x04\0\x01\x12\x03\x1e\x08\x0c\n\xd0\x01\n\x04\
    \x04\0\x02\0\x12\x03$\x02\x18\x1a\xc2\x01\x20Textual\x20representation\
    \x20of\x20an\x20expression\x20in\n\x20Common\x20Expression\x20Language\
    \x20syntax.\n\n\x20The\x20application\x20context\x20of\x20the\x20contain\
    ing\x20message\x20determines\x20which\n\x20well-known\x20feature\x20set\
    \x20of\x20CEL\x20is\x20supported.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03$\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03$\t\x13\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03$\x16\x17\n\xa5\x01\n\x04\x04\0\x02\x01\x12\x03)\x02\
    \x13\x1a\x97\x01\x20An\x20optional\x20title\x20for\x20the\x20expression,\
    \x20i.e.\x20a\x20short\x20string\x20describing\n\x20its\x20purpose.\x20T\
    his\x20can\x20be\x20used\x20e.g.\x20in\x20UIs\x20which\x20allow\x20to\
    \x20enter\x20the\n\x20expression.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03)\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03)\t\x0e\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03)\x11\x12\n\x94\x01\n\x04\x04\0\x02\x02\x12\
    \x03-\x02\x19\x1a\x86\x01\x20An\x20optional\x20description\x20of\x20the\
    \x20expression.\x20This\x20is\x20a\x20longer\x20text\x20which\n\x20descr\
    ibes\x20the\x20expression,\x20e.g.\x20when\x20hovered\x20over\x20it\x20i\
    n\x20a\x20UI.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03-\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03-\t\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03-\x17\x18\n\x8f\x01\n\x04\x04\0\x02\x03\x12\x031\x02\x16\x1a\x81\x01\
    \x20An\x20optional\x20string\x20indicating\x20the\x20location\x20of\x20t\
    he\x20expression\x20for\x20error\n\x20reporting,\x20e.g.\x20a\x20file\
    \x20name\x20and\x20a\x20position\x20in\x20the\x20file.\n\n\x0c\n\x05\x04\
    \0\x02\x03\x05\x12\x031\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x031\t\
    \x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x031\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Expr::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
