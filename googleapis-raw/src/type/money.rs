// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/type/money.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Represents an amount of money with its currency type.
// @@protoc_insertion_point(message:google.type.Money)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Money {
    // message fields
    ///  The 3-letter currency code defined in ISO 4217.
    // @@protoc_insertion_point(field:google.type.Money.currency_code)
    pub currency_code: ::std::string::String,
    ///  The whole units of the amount.
    ///  For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
    // @@protoc_insertion_point(field:google.type.Money.units)
    pub units: i64,
    ///  Number of nano (10^-9) units of the amount.
    ///  The value must be between -999,999,999 and +999,999,999 inclusive.
    ///  If `units` is positive, `nanos` must be positive or zero.
    ///  If `units` is zero, `nanos` can be positive, zero, or negative.
    ///  If `units` is negative, `nanos` must be negative or zero.
    ///  For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
    // @@protoc_insertion_point(field:google.type.Money.nanos)
    pub nanos: i32,
    // special fields
    // @@protoc_insertion_point(special_field:google.type.Money.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Money {
    fn default() -> &'a Money {
        <Money as ::protobuf::Message>::default_instance()
    }
}

impl Money {
    pub fn new() -> Money {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "currency_code",
            |m: &Money| { &m.currency_code },
            |m: &mut Money| { &mut m.currency_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "units",
            |m: &Money| { &m.units },
            |m: &mut Money| { &mut m.units },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nanos",
            |m: &Money| { &m.nanos },
            |m: &mut Money| { &mut m.nanos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Money>(
            "Money",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Money {
    const NAME: &'static str = "Money";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.currency_code = is.read_string()?;
                },
                16 => {
                    self.units = is.read_int64()?;
                },
                24 => {
                    self.nanos = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.currency_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.currency_code);
        }
        if self.units != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.units);
        }
        if self.nanos != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.nanos);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.currency_code.is_empty() {
            os.write_string(1, &self.currency_code)?;
        }
        if self.units != 0 {
            os.write_int64(2, self.units)?;
        }
        if self.nanos != 0 {
            os.write_int32(3, self.nanos)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Money {
        Money::new()
    }

    fn clear(&mut self) {
        self.currency_code.clear();
        self.units = 0;
        self.nanos = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Money {
        static instance: Money = Money {
            currency_code: ::std::string::String::new(),
            units: 0,
            nanos: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Money {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Money").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Money {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Money {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17google/type/money.proto\x12\x0bgoogle.type\"X\n\x05Money\x12#\n\rc\
    urrency_code\x18\x01\x20\x01(\tR\x0ccurrencyCode\x12\x14\n\x05units\x18\
    \x02\x20\x01(\x03R\x05units\x12\x14\n\x05nanos\x18\x03\x20\x01(\x05R\x05\
    nanosB`\n\x0fcom.google.typeB\nMoneyProtoP\x01Z6google.golang.org/genpro\
    to/googleapis/type/money;money\xf8\x01\x01\xa2\x02\x03GTPJ\xdc\x0b\n\x06\
    \x12\x04\x0f\0*\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Co\
    pyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apa\
    che\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20m\
    ay\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\
    \x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/\
    LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\
    \x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\
    \x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20B\
    ASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIN\
    D,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20\
    for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\
    \x11\0\x14\n\x08\n\x01\x08\x12\x03\x13\0\x1f\n\t\n\x02\x08\x1f\x12\x03\
    \x13\0\x1f\n\x08\n\x01\x08\x12\x03\x14\0M\n\t\n\x02\x08\x0b\x12\x03\x14\
    \0M\n\x08\n\x01\x08\x12\x03\x15\0\"\n\t\n\x02\x08\n\x12\x03\x15\0\"\n\
    \x08\n\x01\x08\x12\x03\x16\0+\n\t\n\x02\x08\x08\x12\x03\x16\0+\n\x08\n\
    \x01\x08\x12\x03\x17\0(\n\t\n\x02\x08\x01\x12\x03\x17\0(\n\x08\n\x01\x08\
    \x12\x03\x18\0!\n\t\n\x02\x08$\x12\x03\x18\0!\nC\n\x02\x04\0\x12\x04\x1b\
    \0*\x01\x1a7\x20Represents\x20an\x20amount\x20of\x20money\x20with\x20its\
    \x20currency\x20type.\n\n\n\n\x03\x04\0\x01\x12\x03\x1b\x08\r\n>\n\x04\
    \x04\0\x02\0\x12\x03\x1d\x02\x1b\x1a1\x20The\x203-letter\x20currency\x20\
    code\x20defined\x20in\x20ISO\x204217.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x1d\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1d\t\x16\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x1d\x19\x1a\nv\n\x04\x04\0\x02\x01\x12\x03!\
    \x02\x12\x1ai\x20The\x20whole\x20units\x20of\x20the\x20amount.\n\x20For\
    \x20example\x20if\x20`currencyCode`\x20is\x20`\"USD\"`,\x20then\x201\x20\
    unit\x20is\x20one\x20US\x20dollar.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03!\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03!\x08\r\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03!\x10\x11\n\x81\x03\n\x04\x04\0\x02\x02\x12\
    \x03)\x02\x12\x1a\xf3\x02\x20Number\x20of\x20nano\x20(10^-9)\x20units\
    \x20of\x20the\x20amount.\n\x20The\x20value\x20must\x20be\x20between\x20-\
    999,999,999\x20and\x20+999,999,999\x20inclusive.\n\x20If\x20`units`\x20i\
    s\x20positive,\x20`nanos`\x20must\x20be\x20positive\x20or\x20zero.\n\x20\
    If\x20`units`\x20is\x20zero,\x20`nanos`\x20can\x20be\x20positive,\x20zer\
    o,\x20or\x20negative.\n\x20If\x20`units`\x20is\x20negative,\x20`nanos`\
    \x20must\x20be\x20negative\x20or\x20zero.\n\x20For\x20example\x20$-1.75\
    \x20is\x20represented\x20as\x20`units`=-1\x20and\x20`nanos`=-750,000,000\
    .\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03)\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03)\x08\r\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03)\x10\x11b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Money::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
