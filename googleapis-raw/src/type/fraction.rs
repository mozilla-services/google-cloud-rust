// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/type/fraction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Represents a fraction in terms of a numerator divided by a denominator.
// @@protoc_insertion_point(message:google.type.Fraction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Fraction {
    // message fields
    ///  The portion of the denominator in the faction, e.g. 2 in 2/3.
    // @@protoc_insertion_point(field:google.type.Fraction.numerator)
    pub numerator: i64,
    ///  The value by which the numerator is divided, e.g. 3 in 2/3. Must be
    ///  positive.
    // @@protoc_insertion_point(field:google.type.Fraction.denominator)
    pub denominator: i64,
    // special fields
    // @@protoc_insertion_point(special_field:google.type.Fraction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Fraction {
    fn default() -> &'a Fraction {
        <Fraction as ::protobuf::Message>::default_instance()
    }
}

impl Fraction {
    pub fn new() -> Fraction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "numerator",
            |m: &Fraction| { &m.numerator },
            |m: &mut Fraction| { &mut m.numerator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "denominator",
            |m: &Fraction| { &m.denominator },
            |m: &mut Fraction| { &mut m.denominator },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fraction>(
            "Fraction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Fraction {
    const NAME: &'static str = "Fraction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.numerator = is.read_int64()?;
                },
                16 => {
                    self.denominator = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.numerator != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.numerator);
        }
        if self.denominator != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.denominator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.numerator != 0 {
            os.write_int64(1, self.numerator)?;
        }
        if self.denominator != 0 {
            os.write_int64(2, self.denominator)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Fraction {
        Fraction::new()
    }

    fn clear(&mut self) {
        self.numerator = 0;
        self.denominator = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Fraction {
        static instance: Fraction = Fraction {
            numerator: 0,
            denominator: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Fraction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Fraction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Fraction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fraction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1agoogle/type/fraction.proto\x12\x0bgoogle.type\"J\n\x08Fraction\x12\
    \x1c\n\tnumerator\x18\x01\x20\x01(\x03R\tnumerator\x12\x20\n\x0bdenomina\
    tor\x18\x02\x20\x01(\x03R\x0bdenominatorBf\n\x0fcom.google.typeB\rFracti\
    onProtoP\x01Z<google.golang.org/genproto/googleapis/type/fraction;fracti\
    on\xa2\x02\x03GTPJ\xa0\x08\n\x06\x12\x04\x0f\0!\x01\n\xbe\x04\n\x01\x0c\
    \x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x14\n\x08\n\x01\x08\x12\x03\x13\0\
    S\n\t\n\x02\x08\x0b\x12\x03\x13\0S\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\n\
    \x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\0.\n\t\n\x02\x08\
    \x08\x12\x03\x15\0.\n\x08\n\x01\x08\x12\x03\x16\0(\n\t\n\x02\x08\x01\x12\
    \x03\x16\0(\n\x08\n\x01\x08\x12\x03\x17\0!\n\t\n\x02\x08$\x12\x03\x17\0!\
    \nU\n\x02\x04\0\x12\x04\x1a\0!\x01\x1aI\x20Represents\x20a\x20fraction\
    \x20in\x20terms\x20of\x20a\x20numerator\x20divided\x20by\x20a\x20denomin\
    ator.\n\n\n\n\x03\x04\0\x01\x12\x03\x1a\x08\x10\nL\n\x04\x04\0\x02\0\x12\
    \x03\x1c\x02\x16\x1a?\x20The\x20portion\x20of\x20the\x20denominator\x20i\
    n\x20the\x20faction,\x20e.g.\x202\x20in\x202/3.\n\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03\x1c\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1c\x08\
    \x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1c\x14\x15\n]\n\x04\x04\0\x02\
    \x01\x12\x03\x20\x02\x18\x1aP\x20The\x20value\x20by\x20which\x20the\x20n\
    umerator\x20is\x20divided,\x20e.g.\x203\x20in\x202/3.\x20Must\x20be\n\
    \x20positive.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x20\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x20\x08\x13\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x20\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Fraction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
