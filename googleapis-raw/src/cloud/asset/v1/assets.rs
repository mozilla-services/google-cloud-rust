// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/cloud/asset/v1/assets.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Temporal asset. In addition to the asset, the temporal asset includes the
///  status of the asset and valid from and to time of it.
// @@protoc_insertion_point(message:google.cloud.asset.v1.TemporalAsset)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TemporalAsset {
    // message fields
    ///  The time window when the asset data and state was observed.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.TemporalAsset.window)
    pub window: ::protobuf::MessageField<TimeWindow>,
    ///  If the asset is deleted or not.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.TemporalAsset.deleted)
    pub deleted: bool,
    ///  Asset.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.TemporalAsset.asset)
    pub asset: ::protobuf::MessageField<Asset>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.TemporalAsset.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TemporalAsset {
    fn default() -> &'a TemporalAsset {
        <TemporalAsset as ::protobuf::Message>::default_instance()
    }
}

impl TemporalAsset {
    pub fn new() -> TemporalAsset {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TimeWindow>(
            "window",
            |m: &TemporalAsset| { &m.window },
            |m: &mut TemporalAsset| { &mut m.window },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "deleted",
            |m: &TemporalAsset| { &m.deleted },
            |m: &mut TemporalAsset| { &mut m.deleted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Asset>(
            "asset",
            |m: &TemporalAsset| { &m.asset },
            |m: &mut TemporalAsset| { &mut m.asset },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TemporalAsset>(
            "TemporalAsset",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TemporalAsset {
    const NAME: &'static str = "TemporalAsset";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.window)?;
                },
                16 => {
                    self.deleted = is.read_bool()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.asset)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.deleted != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.window.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.deleted != false {
            os.write_bool(2, self.deleted)?;
        }
        if let Some(v) = self.asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TemporalAsset {
        TemporalAsset::new()
    }

    fn clear(&mut self) {
        self.window.clear();
        self.deleted = false;
        self.asset.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TemporalAsset {
        static instance: TemporalAsset = TemporalAsset {
            window: ::protobuf::MessageField::none(),
            deleted: false,
            asset: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TemporalAsset {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TemporalAsset").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TemporalAsset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TemporalAsset {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A time window of (start_time, end_time].
// @@protoc_insertion_point(message:google.cloud.asset.v1.TimeWindow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TimeWindow {
    // message fields
    ///  Start time of the time window (exclusive).
    // @@protoc_insertion_point(field:google.cloud.asset.v1.TimeWindow.start_time)
    pub start_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  End time of the time window (inclusive).
    ///  Current timestamp if not specified.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.TimeWindow.end_time)
    pub end_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.TimeWindow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TimeWindow {
    fn default() -> &'a TimeWindow {
        <TimeWindow as ::protobuf::Message>::default_instance()
    }
}

impl TimeWindow {
    pub fn new() -> TimeWindow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "start_time",
            |m: &TimeWindow| { &m.start_time },
            |m: &mut TimeWindow| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "end_time",
            |m: &TimeWindow| { &m.end_time },
            |m: &mut TimeWindow| { &mut m.end_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimeWindow>(
            "TimeWindow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TimeWindow {
    const NAME: &'static str = "TimeWindow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start_time)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.end_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.start_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.end_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TimeWindow {
        TimeWindow::new()
    }

    fn clear(&mut self) {
        self.start_time.clear();
        self.end_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TimeWindow {
        static instance: TimeWindow = TimeWindow {
            start_time: ::protobuf::MessageField::none(),
            end_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TimeWindow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TimeWindow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TimeWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeWindow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Cloud asset. This includes all Google Cloud Platform resources,
///  Cloud IAM policies, and other non-GCP assets.
// @@protoc_insertion_point(message:google.cloud.asset.v1.Asset)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Asset {
    // message fields
    ///  The full name of the asset. For example:
    ///  `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
    ///  See [Resource
    ///  Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
    ///  for more information.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Asset.name)
    pub name: ::std::string::String,
    ///  Type of the asset. Example: "compute.googleapis.com/Disk".
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Asset.asset_type)
    pub asset_type: ::std::string::String,
    ///  Representation of the resource.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Asset.resource)
    pub resource: ::protobuf::MessageField<Resource>,
    ///  Representation of the actual Cloud IAM policy set on a cloud resource. For
    ///  each resource, there must be at most one Cloud IAM policy set on it.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Asset.iam_policy)
    pub iam_policy: ::protobuf::MessageField<super::policy::Policy>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.Asset.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Asset {
    fn default() -> &'a Asset {
        <Asset as ::protobuf::Message>::default_instance()
    }
}

impl Asset {
    pub fn new() -> Asset {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Asset| { &m.name },
            |m: &mut Asset| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "asset_type",
            |m: &Asset| { &m.asset_type },
            |m: &mut Asset| { &mut m.asset_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Resource>(
            "resource",
            |m: &Asset| { &m.resource },
            |m: &mut Asset| { &mut m.resource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::policy::Policy>(
            "iam_policy",
            |m: &Asset| { &m.iam_policy },
            |m: &mut Asset| { &mut m.iam_policy },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Asset>(
            "Asset",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Asset {
    const NAME: &'static str = "Asset";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.asset_type = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resource)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.iam_policy)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.asset_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.asset_type);
        }
        if let Some(v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.iam_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.asset_type.is_empty() {
            os.write_string(2, &self.asset_type)?;
        }
        if let Some(v) = self.resource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.iam_policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Asset {
        Asset::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.asset_type.clear();
        self.resource.clear();
        self.iam_policy.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Asset {
        static instance: Asset = Asset {
            name: ::std::string::String::new(),
            asset_type: ::std::string::String::new(),
            resource: ::protobuf::MessageField::none(),
            iam_policy: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Asset {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Asset").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Asset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Asset {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Representation of a cloud resource.
// @@protoc_insertion_point(message:google.cloud.asset.v1.Resource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Resource {
    // message fields
    ///  The API version. Example: "v1".
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Resource.version)
    pub version: ::std::string::String,
    ///  The URL of the discovery document containing the resource's JSON schema.
    ///  For example:
    ///  `"https://www.googleapis.com/discovery/v1/apis/compute/v1/rest"`.
    ///  It will be left unspecified for resources without a discovery-based API,
    ///  such as Cloud Bigtable.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Resource.discovery_document_uri)
    pub discovery_document_uri: ::std::string::String,
    ///  The JSON schema name listed in the discovery document.
    ///  Example: "Project". It will be left unspecified for resources (such as
    ///  Cloud Bigtable) without a discovery-based API.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Resource.discovery_name)
    pub discovery_name: ::std::string::String,
    ///  The REST URL for accessing the resource. An HTTP GET operation using this
    ///  URL returns the resource itself.
    ///  Example:
    ///  `https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123`.
    ///  It will be left unspecified for resources without a REST API.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Resource.resource_url)
    pub resource_url: ::std::string::String,
    ///  The full name of the immediate parent of this resource. See
    ///  [Resource
    ///  Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
    ///  for more information.
    ///
    ///  For GCP assets, it is the parent resource defined in the [Cloud IAM policy
    ///  hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy).
    ///  For example:
    ///  `"//cloudresourcemanager.googleapis.com/projects/my_project_123"`.
    ///
    ///  For third-party assets, it is up to the users to define.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Resource.parent)
    pub parent: ::std::string::String,
    ///  The content of the resource, in which some sensitive fields are scrubbed
    ///  away and may not be present.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.Resource.data)
    pub data: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.Resource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Resource| { &m.version },
            |m: &mut Resource| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "discovery_document_uri",
            |m: &Resource| { &m.discovery_document_uri },
            |m: &mut Resource| { &mut m.discovery_document_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "discovery_name",
            |m: &Resource| { &m.discovery_name },
            |m: &mut Resource| { &mut m.discovery_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_url",
            |m: &Resource| { &m.resource_url },
            |m: &mut Resource| { &mut m.resource_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &Resource| { &m.parent },
            |m: &mut Resource| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "data",
            |m: &Resource| { &m.data },
            |m: &mut Resource| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Resource>(
            "Resource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Resource {
    const NAME: &'static str = "Resource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = is.read_string()?;
                },
                18 => {
                    self.discovery_document_uri = is.read_string()?;
                },
                26 => {
                    self.discovery_name = is.read_string()?;
                },
                34 => {
                    self.resource_url = is.read_string()?;
                },
                42 => {
                    self.parent = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.discovery_document_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.discovery_document_uri);
        }
        if !self.discovery_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.discovery_name);
        }
        if !self.resource_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.resource_url);
        }
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.parent);
        }
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.discovery_document_uri.is_empty() {
            os.write_string(2, &self.discovery_document_uri)?;
        }
        if !self.discovery_name.is_empty() {
            os.write_string(3, &self.discovery_name)?;
        }
        if !self.resource_url.is_empty() {
            os.write_string(4, &self.resource_url)?;
        }
        if !self.parent.is_empty() {
            os.write_string(5, &self.parent)?;
        }
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn clear(&mut self) {
        self.version.clear();
        self.discovery_document_uri.clear();
        self.discovery_name.clear();
        self.resource_url.clear();
        self.parent.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Resource {
        static instance: Resource = Resource {
            version: ::std::string::String::new(),
            discovery_document_uri: ::std::string::String::new(),
            discovery_name: ::std::string::String::new(),
            resource_url: ::std::string::String::new(),
            parent: ::std::string::String::new(),
            data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Resource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Resource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"google/cloud/asset/v1/assets.proto\x12\x15google.cloud.asset.v1\x1a\
    \x1cgoogle/api/annotations.proto\x1a\x19google/api/resource.proto\x1a\
    \x1agoogle/iam/v1/policy.proto\x1a\x19google/protobuf/any.proto\x1a\x1cg\
    oogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x98\
    \x01\n\rTemporalAsset\x129\n\x06window\x18\x01\x20\x01(\x0b2!.google.clo\
    ud.asset.v1.TimeWindowR\x06window\x12\x18\n\x07deleted\x18\x02\x20\x01(\
    \x08R\x07deleted\x122\n\x05asset\x18\x03\x20\x01(\x0b2\x1c.google.cloud.\
    asset.v1.AssetR\x05asset\"~\n\nTimeWindow\x129\n\nstart_time\x18\x01\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\tstartTime\x125\n\x08end_time\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x07endTime\"\xd6\
    \x01\n\x05Asset\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1d\n\
    \nasset_type\x18\x02\x20\x01(\tR\tassetType\x12;\n\x08resource\x18\x03\
    \x20\x01(\x0b2\x1f.google.cloud.asset.v1.ResourceR\x08resource\x124\n\ni\
    am_policy\x18\x04\x20\x01(\x0b2\x15.google.iam.v1.PolicyR\tiamPolicy:'\
    \xeaA$\n\x1fcloudasset.googleapis.com/Asset\x12\x01*\"\xe9\x01\n\x08Reso\
    urce\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x124\n\x16disco\
    very_document_uri\x18\x02\x20\x01(\tR\x14discoveryDocumentUri\x12%\n\x0e\
    discovery_name\x18\x03\x20\x01(\tR\rdiscoveryName\x12!\n\x0cresource_url\
    \x18\x04\x20\x01(\tR\x0bresourceUrl\x12\x16\n\x06parent\x18\x05\x20\x01(\
    \tR\x06parent\x12+\n\x04data\x18\x06\x20\x01(\x0b2\x17.google.protobuf.S\
    tructR\x04dataB\x98\x01\n\x19com.google.cloud.asset.v1B\nAssetProtoP\x01\
    Z:google.golang.org/genproto/googleapis/cloud/asset/v1;asset\xf8\x01\x01\
    \xaa\x02\x15Google.Cloud.Asset.V1\xca\x02\x15Google\\Cloud\\Asset\\V1J\
    \xa2\x20\n\x06\x12\x04\x0f\0{\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\
    \xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\
    \x01\x02\x12\x03\x11\0\x1e\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\x02\x03\
    \x01\x12\x03\x14\0#\n\t\n\x02\x03\x02\x12\x03\x15\0$\n\t\n\x02\x03\x03\
    \x12\x03\x16\0#\n\t\n\x02\x03\x04\x12\x03\x17\0&\n\t\n\x02\x03\x05\x12\
    \x03\x18\0)\n\x08\n\x01\x08\x12\x03\x1a\0\x1f\n\t\n\x02\x08\x1f\x12\x03\
    \x1a\0\x1f\n\x08\n\x01\x08\x12\x03\x1b\02\n\t\n\x02\x08%\x12\x03\x1b\02\
    \n\x08\n\x01\x08\x12\x03\x1c\0Q\n\t\n\x02\x08\x0b\x12\x03\x1c\0Q\n\x08\n\
    \x01\x08\x12\x03\x1d\0\"\n\t\n\x02\x08\n\x12\x03\x1d\0\"\n\x08\n\x01\x08\
    \x12\x03\x1e\0+\n\t\n\x02\x08\x08\x12\x03\x1e\0+\n\x08\n\x01\x08\x12\x03\
    \x1f\02\n\t\n\x02\x08\x01\x12\x03\x1f\02\n\x08\n\x01\x08\x12\x03\x20\02\
    \n\t\n\x02\x08)\x12\x03\x20\02\n\x8f\x01\n\x02\x04\0\x12\x04$\0-\x01\x1a\
    \x82\x01\x20Temporal\x20asset.\x20In\x20addition\x20to\x20the\x20asset,\
    \x20the\x20temporal\x20asset\x20includes\x20the\n\x20status\x20of\x20the\
    \x20asset\x20and\x20valid\x20from\x20and\x20to\x20time\x20of\x20it.\n\n\
    \n\n\x03\x04\0\x01\x12\x03$\x08\x15\nJ\n\x04\x04\0\x02\0\x12\x03&\x02\
    \x18\x1a=\x20The\x20time\x20window\x20when\x20the\x20asset\x20data\x20an\
    d\x20state\x20was\x20observed.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03&\
    \x02\x0c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03&\r\x13\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03&\x16\x17\n.\n\x04\x04\0\x02\x01\x12\x03)\x02\x13\x1a!\
    \x20If\x20the\x20asset\x20is\x20deleted\x20or\x20not.\n\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03)\x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03)\
    \x07\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03)\x11\x12\n\x15\n\x04\x04\
    \0\x02\x02\x12\x03,\x02\x12\x1a\x08\x20Asset.\n\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03,\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03,\x08\r\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03,\x10\x11\n6\n\x02\x04\x01\x12\x040\
    \07\x01\x1a*\x20A\x20time\x20window\x20of\x20(start_time,\x20end_time].\
    \n\n\n\n\x03\x04\x01\x01\x12\x030\x08\x12\n9\n\x04\x04\x01\x02\0\x12\x03\
    2\x02+\x1a,\x20Start\x20time\x20of\x20the\x20time\x20window\x20(exclusiv\
    e).\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x032\x02\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x032\x1c&\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x032)*\n\\\n\
    \x04\x04\x01\x02\x01\x12\x036\x02)\x1aO\x20End\x20time\x20of\x20the\x20t\
    ime\x20window\x20(inclusive).\n\x20Current\x20timestamp\x20if\x20not\x20\
    specified.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x036\x02\x1b\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x036\x1c$\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x036'(\n|\n\x02\x04\x02\x12\x04;\0Q\x01\x1ap\x20Cloud\x20asset.\x20\
    This\x20includes\x20all\x20Google\x20Cloud\x20Platform\x20resources,\n\
    \x20Cloud\x20IAM\x20policies,\x20and\x20other\x20non-GCP\x20assets.\n\n\
    \n\n\x03\x04\x02\x01\x12\x03;\x08\r\n\x0b\n\x03\x04\x02\x07\x12\x04<\x02\
    ?\x04\n\r\n\x05\x04\x02\x07\x9d\x08\x12\x04<\x02?\x04\n\x83\x02\n\x04\
    \x04\x02\x02\0\x12\x03F\x02\x12\x1a\xf5\x01\x20The\x20full\x20name\x20of\
    \x20the\x20asset.\x20For\x20example:\n\x20`//compute.googleapis.com/proj\
    ects/my_project_123/zones/zone1/instances/instance1`.\n\x20See\x20[Resou\
    rce\n\x20Names](https://cloud.google.com/apis/design/resource_names#full\
    _resource_name)\n\x20for\x20more\x20information.\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03F\t\r\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03F\x10\x11\nI\n\x04\x04\x02\x02\x01\
    \x12\x03I\x02\x18\x1a<\x20Type\x20of\x20the\x20asset.\x20Example:\x20\"c\
    ompute.googleapis.com/Disk\".\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03I\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03I\t\x13\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03I\x16\x17\n.\n\x04\x04\x02\x02\x02\x12\x03L\x02\
    \x18\x1a!\x20Representation\x20of\x20the\x20resource.\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x03L\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03L\
    \x0b\x13\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03L\x16\x17\n\xa0\x01\n\
    \x04\x04\x02\x02\x03\x12\x03P\x02&\x1a\x92\x01\x20Representation\x20of\
    \x20the\x20actual\x20Cloud\x20IAM\x20policy\x20set\x20on\x20a\x20cloud\
    \x20resource.\x20For\n\x20each\x20resource,\x20there\x20must\x20be\x20at\
    \x20most\x20one\x20Cloud\x20IAM\x20policy\x20set\x20on\x20it.\n\n\x0c\n\
    \x05\x04\x02\x02\x03\x06\x12\x03P\x02\x16\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03P\x17!\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03P$%\n1\n\x02\
    \x04\x03\x12\x04T\0{\x01\x1a%\x20Representation\x20of\x20a\x20cloud\x20r\
    esource.\n\n\n\n\x03\x04\x03\x01\x12\x03T\x08\x10\n.\n\x04\x04\x03\x02\0\
    \x12\x03V\x02\x15\x1a!\x20The\x20API\x20version.\x20Example:\x20\"v1\".\
    \n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03V\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03V\t\x10\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03V\x13\x14\
    \n\x8c\x02\n\x04\x04\x03\x02\x01\x12\x03]\x02$\x1a\xfe\x01\x20The\x20URL\
    \x20of\x20the\x20discovery\x20document\x20containing\x20the\x20resource'\
    s\x20JSON\x20schema.\n\x20For\x20example:\n\x20`\"https://www.googleapis\
    .com/discovery/v1/apis/compute/v1/rest\"`.\n\x20It\x20will\x20be\x20left\
    \x20unspecified\x20for\x20resources\x20without\x20a\x20discovery-based\
    \x20API,\n\x20such\x20as\x20Cloud\x20Bigtable.\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03]\t\x1f\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03]\"#\n\xbe\x01\n\x04\x04\x03\x02\
    \x02\x12\x03b\x02\x1c\x1a\xb0\x01\x20The\x20JSON\x20schema\x20name\x20li\
    sted\x20in\x20the\x20discovery\x20document.\n\x20Example:\x20\"Project\"\
    .\x20It\x20will\x20be\x20left\x20unspecified\x20for\x20resources\x20(suc\
    h\x20as\n\x20Cloud\x20Bigtable)\x20without\x20a\x20discovery-based\x20AP\
    I.\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03b\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03b\t\x17\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03b\
    \x1a\x1b\n\x8f\x02\n\x04\x04\x03\x02\x03\x12\x03i\x02\x1a\x1a\x81\x02\
    \x20The\x20REST\x20URL\x20for\x20accessing\x20the\x20resource.\x20An\x20\
    HTTP\x20GET\x20operation\x20using\x20this\n\x20URL\x20returns\x20the\x20\
    resource\x20itself.\n\x20Example:\n\x20`https://cloudresourcemanager.goo\
    gleapis.com/v1/projects/my-project-123`.\n\x20It\x20will\x20be\x20left\
    \x20unspecified\x20for\x20resources\x20without\x20a\x20REST\x20API.\n\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03i\t\x15\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03i\x18\x19\
    \n\xe1\x03\n\x04\x04\x03\x02\x04\x12\x03v\x02\x14\x1a\xd3\x03\x20The\x20\
    full\x20name\x20of\x20the\x20immediate\x20parent\x20of\x20this\x20resour\
    ce.\x20See\n\x20[Resource\n\x20Names](https://cloud.google.com/apis/desi\
    gn/resource_names#full_resource_name)\n\x20for\x20more\x20information.\n\
    \n\x20For\x20GCP\x20assets,\x20it\x20is\x20the\x20parent\x20resource\x20\
    defined\x20in\x20the\x20[Cloud\x20IAM\x20policy\n\x20hierarchy](https://\
    cloud.google.com/iam/docs/overview#policy_hierarchy).\n\x20For\x20exampl\
    e:\n\x20`\"//cloudresourcemanager.googleapis.com/projects/my_project_123\
    \"`.\n\n\x20For\x20third-party\x20assets,\x20it\x20is\x20up\x20to\x20the\
    \x20users\x20to\x20define.\n\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03v\
    \x02\x08\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03v\t\x0f\n\x0c\n\x05\x04\
    \x03\x02\x04\x03\x12\x03v\x12\x13\nu\n\x04\x04\x03\x02\x05\x12\x03z\x02\
    \"\x1ah\x20The\x20content\x20of\x20the\x20resource,\x20in\x20which\x20so\
    me\x20sensitive\x20fields\x20are\x20scrubbed\n\x20away\x20and\x20may\x20\
    not\x20be\x20present.\n\n\x0c\n\x05\x04\x03\x02\x05\x06\x12\x03z\x02\x18\
    \n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03z\x19\x1d\n\x0c\n\x05\x04\x03\
    \x02\x05\x03\x12\x03z\x20!b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::resource::file_descriptor().clone());
            deps.push(super::policy::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(TemporalAsset::generated_message_descriptor_data());
            messages.push(TimeWindow::generated_message_descriptor_data());
            messages.push(Asset::generated_message_descriptor_data());
            messages.push(Resource::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
