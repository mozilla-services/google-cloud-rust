// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/asset/v1/assets.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct TemporalAsset {
    // message fields
    pub window: ::protobuf::SingularPtrField<TimeWindow>,
    pub deleted: bool,
    pub asset: ::protobuf::SingularPtrField<Asset>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TemporalAsset {
    fn default() -> &'a TemporalAsset {
        <TemporalAsset as ::protobuf::Message>::default_instance()
    }
}

impl TemporalAsset {
    pub fn new() -> TemporalAsset {
        ::std::default::Default::default()
    }

    // .google.cloud.asset.v1.TimeWindow window = 1;


    pub fn get_window(&self) -> &TimeWindow {
        self.window.as_ref().unwrap_or_else(|| <TimeWindow as ::protobuf::Message>::default_instance())
    }
    pub fn clear_window(&mut self) {
        self.window.clear();
    }

    pub fn has_window(&self) -> bool {
        self.window.is_some()
    }

    // Param is passed by value, moved
    pub fn set_window(&mut self, v: TimeWindow) {
        self.window = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_window(&mut self) -> &mut TimeWindow {
        if self.window.is_none() {
            self.window.set_default();
        }
        self.window.as_mut().unwrap()
    }

    // Take field
    pub fn take_window(&mut self) -> TimeWindow {
        self.window.take().unwrap_or_else(|| TimeWindow::new())
    }

    // bool deleted = 2;


    pub fn get_deleted(&self) -> bool {
        self.deleted
    }
    pub fn clear_deleted(&mut self) {
        self.deleted = false;
    }

    // Param is passed by value, moved
    pub fn set_deleted(&mut self, v: bool) {
        self.deleted = v;
    }

    // .google.cloud.asset.v1.Asset asset = 3;


    pub fn get_asset(&self) -> &Asset {
        self.asset.as_ref().unwrap_or_else(|| <Asset as ::protobuf::Message>::default_instance())
    }
    pub fn clear_asset(&mut self) {
        self.asset.clear();
    }

    pub fn has_asset(&self) -> bool {
        self.asset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset(&mut self, v: Asset) {
        self.asset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset(&mut self) -> &mut Asset {
        if self.asset.is_none() {
            self.asset.set_default();
        }
        self.asset.as_mut().unwrap()
    }

    // Take field
    pub fn take_asset(&mut self) -> Asset {
        self.asset.take().unwrap_or_else(|| Asset::new())
    }
}

impl ::protobuf::Message for TemporalAsset {
    fn is_initialized(&self) -> bool {
        for v in &self.window {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.asset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.window)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.deleted = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.asset)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.deleted != false {
            my_size += 2;
        }
        if let Some(ref v) = self.asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.window.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.deleted != false {
            os.write_bool(2, self.deleted)?;
        }
        if let Some(ref v) = self.asset.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TemporalAsset {
        TemporalAsset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TimeWindow>>(
                "window",
                |m: &TemporalAsset| { &m.window },
                |m: &mut TemporalAsset| { &mut m.window },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "deleted",
                |m: &TemporalAsset| { &m.deleted },
                |m: &mut TemporalAsset| { &mut m.deleted },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Asset>>(
                "asset",
                |m: &TemporalAsset| { &m.asset },
                |m: &mut TemporalAsset| { &mut m.asset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TemporalAsset>(
                "TemporalAsset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TemporalAsset {
        static instance: ::protobuf::rt::LazyV2<TemporalAsset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TemporalAsset::new)
    }
}

impl ::protobuf::Clear for TemporalAsset {
    fn clear(&mut self) {
        self.window.clear();
        self.deleted = false;
        self.asset.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TemporalAsset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TemporalAsset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeWindow {
    // message fields
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeWindow {
    fn default() -> &'a TimeWindow {
        <TimeWindow as ::protobuf::Message>::default_instance()
    }
}

impl TimeWindow {
    pub fn new() -> TimeWindow {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp start_time = 1;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 2;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for TimeWindow {
    fn is_initialized(&self) -> bool {
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeWindow {
        TimeWindow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &TimeWindow| { &m.start_time },
                |m: &mut TimeWindow| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &TimeWindow| { &m.end_time },
                |m: &mut TimeWindow| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimeWindow>(
                "TimeWindow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimeWindow {
        static instance: ::protobuf::rt::LazyV2<TimeWindow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimeWindow::new)
    }
}

impl ::protobuf::Clear for TimeWindow {
    fn clear(&mut self) {
        self.start_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeWindow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Asset {
    // message fields
    pub name: ::std::string::String,
    pub asset_type: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<Resource>,
    pub iam_policy: ::protobuf::SingularPtrField<super::policy::Policy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Asset {
    fn default() -> &'a Asset {
        <Asset as ::protobuf::Message>::default_instance()
    }
}

impl Asset {
    pub fn new() -> Asset {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string asset_type = 2;


    pub fn get_asset_type(&self) -> &str {
        &self.asset_type
    }
    pub fn clear_asset_type(&mut self) {
        self.asset_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_type(&mut self, v: ::std::string::String) {
        self.asset_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_type(&mut self) -> &mut ::std::string::String {
        &mut self.asset_type
    }

    // Take field
    pub fn take_asset_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset_type, ::std::string::String::new())
    }

    // .google.cloud.asset.v1.Resource resource = 3;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| <Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }

    // .google.iam.v1.Policy iam_policy = 4;


    pub fn get_iam_policy(&self) -> &super::policy::Policy {
        self.iam_policy.as_ref().unwrap_or_else(|| <super::policy::Policy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_iam_policy(&mut self) {
        self.iam_policy.clear();
    }

    pub fn has_iam_policy(&self) -> bool {
        self.iam_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_iam_policy(&mut self, v: super::policy::Policy) {
        self.iam_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iam_policy(&mut self) -> &mut super::policy::Policy {
        if self.iam_policy.is_none() {
            self.iam_policy.set_default();
        }
        self.iam_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_iam_policy(&mut self) -> super::policy::Policy {
        self.iam_policy.take().unwrap_or_else(|| super::policy::Policy::new())
    }
}

impl ::protobuf::Message for Asset {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.iam_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.iam_policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.asset_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.asset_type);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.iam_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.asset_type.is_empty() {
            os.write_string(2, &self.asset_type)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.iam_policy.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Asset {
        Asset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Asset| { &m.name },
                |m: &mut Asset| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_type",
                |m: &Asset| { &m.asset_type },
                |m: &mut Asset| { &mut m.asset_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resource",
                |m: &Asset| { &m.resource },
                |m: &mut Asset| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::policy::Policy>>(
                "iam_policy",
                |m: &Asset| { &m.iam_policy },
                |m: &mut Asset| { &mut m.iam_policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Asset>(
                "Asset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Asset {
        static instance: ::protobuf::rt::LazyV2<Asset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Asset::new)
    }
}

impl ::protobuf::Clear for Asset {
    fn clear(&mut self) {
        self.name.clear();
        self.asset_type.clear();
        self.resource.clear();
        self.iam_policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Asset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Asset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource {
    // message fields
    pub version: ::std::string::String,
    pub discovery_document_uri: ::std::string::String,
    pub discovery_name: ::std::string::String,
    pub resource_url: ::std::string::String,
    pub parent: ::std::string::String,
    pub data: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string discovery_document_uri = 2;


    pub fn get_discovery_document_uri(&self) -> &str {
        &self.discovery_document_uri
    }
    pub fn clear_discovery_document_uri(&mut self) {
        self.discovery_document_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_discovery_document_uri(&mut self, v: ::std::string::String) {
        self.discovery_document_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_discovery_document_uri(&mut self) -> &mut ::std::string::String {
        &mut self.discovery_document_uri
    }

    // Take field
    pub fn take_discovery_document_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.discovery_document_uri, ::std::string::String::new())
    }

    // string discovery_name = 3;


    pub fn get_discovery_name(&self) -> &str {
        &self.discovery_name
    }
    pub fn clear_discovery_name(&mut self) {
        self.discovery_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_discovery_name(&mut self, v: ::std::string::String) {
        self.discovery_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_discovery_name(&mut self) -> &mut ::std::string::String {
        &mut self.discovery_name
    }

    // Take field
    pub fn take_discovery_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.discovery_name, ::std::string::String::new())
    }

    // string resource_url = 4;


    pub fn get_resource_url(&self) -> &str {
        &self.resource_url
    }
    pub fn clear_resource_url(&mut self) {
        self.resource_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_url(&mut self, v: ::std::string::String) {
        self.resource_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_url(&mut self) -> &mut ::std::string::String {
        &mut self.resource_url
    }

    // Take field
    pub fn take_resource_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_url, ::std::string::String::new())
    }

    // string parent = 5;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // .google.protobuf.Struct data = 6;


    pub fn get_data(&self) -> &::protobuf::well_known_types::Struct {
        self.data.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::well_known_types::Struct {
        self.data.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }
}

impl ::protobuf::Message for Resource {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.discovery_document_uri)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.discovery_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_url)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.discovery_document_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.discovery_document_uri);
        }
        if !self.discovery_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.discovery_name);
        }
        if !self.resource_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.resource_url);
        }
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.parent);
        }
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.discovery_document_uri.is_empty() {
            os.write_string(2, &self.discovery_document_uri)?;
        }
        if !self.discovery_name.is_empty() {
            os.write_string(3, &self.discovery_name)?;
        }
        if !self.resource_url.is_empty() {
            os.write_string(4, &self.resource_url)?;
        }
        if !self.parent.is_empty() {
            os.write_string(5, &self.parent)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Resource| { &m.version },
                |m: &mut Resource| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "discovery_document_uri",
                |m: &Resource| { &m.discovery_document_uri },
                |m: &mut Resource| { &mut m.discovery_document_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "discovery_name",
                |m: &Resource| { &m.discovery_name },
                |m: &mut Resource| { &mut m.discovery_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_url",
                |m: &Resource| { &m.resource_url },
                |m: &mut Resource| { &mut m.resource_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &Resource| { &m.parent },
                |m: &mut Resource| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "data",
                |m: &Resource| { &m.data },
                |m: &mut Resource| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resource>(
                "Resource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Resource {
        static instance: ::protobuf::rt::LazyV2<Resource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Resource::new)
    }
}

impl ::protobuf::Clear for Resource {
    fn clear(&mut self) {
        self.version.clear();
        self.discovery_document_uri.clear();
        self.discovery_name.clear();
        self.resource_url.clear();
        self.parent.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"google/cloud/asset/v1/assets.proto\x12\x15google.cloud.asset.v1\x1a\
    \x1cgoogle/api/annotations.proto\x1a\x19google/api/resource.proto\x1a\
    \x1agoogle/iam/v1/policy.proto\x1a\x19google/protobuf/any.proto\x1a\x1cg\
    oogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x98\
    \x01\n\rTemporalAsset\x129\n\x06window\x18\x01\x20\x01(\x0b2!.google.clo\
    ud.asset.v1.TimeWindowR\x06window\x12\x18\n\x07deleted\x18\x02\x20\x01(\
    \x08R\x07deleted\x122\n\x05asset\x18\x03\x20\x01(\x0b2\x1c.google.cloud.\
    asset.v1.AssetR\x05asset\"~\n\nTimeWindow\x129\n\nstart_time\x18\x01\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\tstartTime\x125\n\x08end_time\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x07endTime\"\xd6\
    \x01\n\x05Asset\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1d\n\
    \nasset_type\x18\x02\x20\x01(\tR\tassetType\x12;\n\x08resource\x18\x03\
    \x20\x01(\x0b2\x1f.google.cloud.asset.v1.ResourceR\x08resource\x124\n\ni\
    am_policy\x18\x04\x20\x01(\x0b2\x15.google.iam.v1.PolicyR\tiamPolicy:'\
    \xeaA$\n\x1fcloudasset.googleapis.com/Asset\x12\x01*\"\xe9\x01\n\x08Reso\
    urce\x12\x18\n\x07version\x18\x01\x20\x01(\tR\x07version\x124\n\x16disco\
    very_document_uri\x18\x02\x20\x01(\tR\x14discoveryDocumentUri\x12%\n\x0e\
    discovery_name\x18\x03\x20\x01(\tR\rdiscoveryName\x12!\n\x0cresource_url\
    \x18\x04\x20\x01(\tR\x0bresourceUrl\x12\x16\n\x06parent\x18\x05\x20\x01(\
    \tR\x06parent\x12+\n\x04data\x18\x06\x20\x01(\x0b2\x17.google.protobuf.S\
    tructR\x04dataB\x98\x01\n\x19com.google.cloud.asset.v1B\nAssetProtoP\x01\
    Z:google.golang.org/genproto/googleapis/cloud/asset/v1;asset\xf8\x01\x01\
    \xaa\x02\x15Google.Cloud.Asset.V1\xca\x02\x15Google\\Cloud\\Asset\\V1J\
    \xa2\x20\n\x06\x12\x04\x0f\0{\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\
    \xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\
    \x01\x02\x12\x03\x11\0\x1e\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\x02\x03\
    \x01\x12\x03\x14\0#\n\t\n\x02\x03\x02\x12\x03\x15\0$\n\t\n\x02\x03\x03\
    \x12\x03\x16\0#\n\t\n\x02\x03\x04\x12\x03\x17\0&\n\t\n\x02\x03\x05\x12\
    \x03\x18\0)\n\x08\n\x01\x08\x12\x03\x1a\0\x1f\n\t\n\x02\x08\x1f\x12\x03\
    \x1a\0\x1f\n\x08\n\x01\x08\x12\x03\x1b\02\n\t\n\x02\x08%\x12\x03\x1b\02\
    \n\x08\n\x01\x08\x12\x03\x1c\0Q\n\t\n\x02\x08\x0b\x12\x03\x1c\0Q\n\x08\n\
    \x01\x08\x12\x03\x1d\0\"\n\t\n\x02\x08\n\x12\x03\x1d\0\"\n\x08\n\x01\x08\
    \x12\x03\x1e\0+\n\t\n\x02\x08\x08\x12\x03\x1e\0+\n\x08\n\x01\x08\x12\x03\
    \x1f\02\n\t\n\x02\x08\x01\x12\x03\x1f\02\n\x08\n\x01\x08\x12\x03\x20\02\
    \n\t\n\x02\x08)\x12\x03\x20\02\n\x8f\x01\n\x02\x04\0\x12\x04$\0-\x01\x1a\
    \x82\x01\x20Temporal\x20asset.\x20In\x20addition\x20to\x20the\x20asset,\
    \x20the\x20temporal\x20asset\x20includes\x20the\n\x20status\x20of\x20the\
    \x20asset\x20and\x20valid\x20from\x20and\x20to\x20time\x20of\x20it.\n\n\
    \n\n\x03\x04\0\x01\x12\x03$\x08\x15\nJ\n\x04\x04\0\x02\0\x12\x03&\x02\
    \x18\x1a=\x20The\x20time\x20window\x20when\x20the\x20asset\x20data\x20an\
    d\x20state\x20was\x20observed.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03&\
    \x02\x0c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03&\r\x13\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03&\x16\x17\n.\n\x04\x04\0\x02\x01\x12\x03)\x02\x13\x1a!\
    \x20If\x20the\x20asset\x20is\x20deleted\x20or\x20not.\n\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03)\x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03)\
    \x07\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03)\x11\x12\n\x15\n\x04\x04\
    \0\x02\x02\x12\x03,\x02\x12\x1a\x08\x20Asset.\n\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03,\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03,\x08\r\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03,\x10\x11\n6\n\x02\x04\x01\x12\x040\
    \07\x01\x1a*\x20A\x20time\x20window\x20of\x20(start_time,\x20end_time].\
    \n\n\n\n\x03\x04\x01\x01\x12\x030\x08\x12\n9\n\x04\x04\x01\x02\0\x12\x03\
    2\x02+\x1a,\x20Start\x20time\x20of\x20the\x20time\x20window\x20(exclusiv\
    e).\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x032\x02\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x032\x1c&\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x032)*\n\\\n\
    \x04\x04\x01\x02\x01\x12\x036\x02)\x1aO\x20End\x20time\x20of\x20the\x20t\
    ime\x20window\x20(inclusive).\n\x20Current\x20timestamp\x20if\x20not\x20\
    specified.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x036\x02\x1b\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x036\x1c$\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x036'(\n|\n\x02\x04\x02\x12\x04;\0Q\x01\x1ap\x20Cloud\x20asset.\x20\
    This\x20includes\x20all\x20Google\x20Cloud\x20Platform\x20resources,\n\
    \x20Cloud\x20IAM\x20policies,\x20and\x20other\x20non-GCP\x20assets.\n\n\
    \n\n\x03\x04\x02\x01\x12\x03;\x08\r\n\x0b\n\x03\x04\x02\x07\x12\x04<\x02\
    ?\x04\n\r\n\x05\x04\x02\x07\x9d\x08\x12\x04<\x02?\x04\n\x83\x02\n\x04\
    \x04\x02\x02\0\x12\x03F\x02\x12\x1a\xf5\x01\x20The\x20full\x20name\x20of\
    \x20the\x20asset.\x20For\x20example:\n\x20`//compute.googleapis.com/proj\
    ects/my_project_123/zones/zone1/instances/instance1`.\n\x20See\x20[Resou\
    rce\n\x20Names](https://cloud.google.com/apis/design/resource_names#full\
    _resource_name)\n\x20for\x20more\x20information.\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03F\t\r\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03F\x10\x11\nI\n\x04\x04\x02\x02\x01\
    \x12\x03I\x02\x18\x1a<\x20Type\x20of\x20the\x20asset.\x20Example:\x20\"c\
    ompute.googleapis.com/Disk\".\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03I\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03I\t\x13\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03I\x16\x17\n.\n\x04\x04\x02\x02\x02\x12\x03L\x02\
    \x18\x1a!\x20Representation\x20of\x20the\x20resource.\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x03L\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03L\
    \x0b\x13\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03L\x16\x17\n\xa0\x01\n\
    \x04\x04\x02\x02\x03\x12\x03P\x02&\x1a\x92\x01\x20Representation\x20of\
    \x20the\x20actual\x20Cloud\x20IAM\x20policy\x20set\x20on\x20a\x20cloud\
    \x20resource.\x20For\n\x20each\x20resource,\x20there\x20must\x20be\x20at\
    \x20most\x20one\x20Cloud\x20IAM\x20policy\x20set\x20on\x20it.\n\n\x0c\n\
    \x05\x04\x02\x02\x03\x06\x12\x03P\x02\x16\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03P\x17!\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03P$%\n1\n\x02\
    \x04\x03\x12\x04T\0{\x01\x1a%\x20Representation\x20of\x20a\x20cloud\x20r\
    esource.\n\n\n\n\x03\x04\x03\x01\x12\x03T\x08\x10\n.\n\x04\x04\x03\x02\0\
    \x12\x03V\x02\x15\x1a!\x20The\x20API\x20version.\x20Example:\x20\"v1\".\
    \n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03V\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03V\t\x10\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03V\x13\x14\
    \n\x8c\x02\n\x04\x04\x03\x02\x01\x12\x03]\x02$\x1a\xfe\x01\x20The\x20URL\
    \x20of\x20the\x20discovery\x20document\x20containing\x20the\x20resource'\
    s\x20JSON\x20schema.\n\x20For\x20example:\n\x20`\"https://www.googleapis\
    .com/discovery/v1/apis/compute/v1/rest\"`.\n\x20It\x20will\x20be\x20left\
    \x20unspecified\x20for\x20resources\x20without\x20a\x20discovery-based\
    \x20API,\n\x20such\x20as\x20Cloud\x20Bigtable.\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03]\t\x1f\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03]\"#\n\xbe\x01\n\x04\x04\x03\x02\
    \x02\x12\x03b\x02\x1c\x1a\xb0\x01\x20The\x20JSON\x20schema\x20name\x20li\
    sted\x20in\x20the\x20discovery\x20document.\n\x20Example:\x20\"Project\"\
    .\x20It\x20will\x20be\x20left\x20unspecified\x20for\x20resources\x20(suc\
    h\x20as\n\x20Cloud\x20Bigtable)\x20without\x20a\x20discovery-based\x20AP\
    I.\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03b\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03b\t\x17\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03b\
    \x1a\x1b\n\x8f\x02\n\x04\x04\x03\x02\x03\x12\x03i\x02\x1a\x1a\x81\x02\
    \x20The\x20REST\x20URL\x20for\x20accessing\x20the\x20resource.\x20An\x20\
    HTTP\x20GET\x20operation\x20using\x20this\n\x20URL\x20returns\x20the\x20\
    resource\x20itself.\n\x20Example:\n\x20`https://cloudresourcemanager.goo\
    gleapis.com/v1/projects/my-project-123`.\n\x20It\x20will\x20be\x20left\
    \x20unspecified\x20for\x20resources\x20without\x20a\x20REST\x20API.\n\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03i\t\x15\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03i\x18\x19\
    \n\xe1\x03\n\x04\x04\x03\x02\x04\x12\x03v\x02\x14\x1a\xd3\x03\x20The\x20\
    full\x20name\x20of\x20the\x20immediate\x20parent\x20of\x20this\x20resour\
    ce.\x20See\n\x20[Resource\n\x20Names](https://cloud.google.com/apis/desi\
    gn/resource_names#full_resource_name)\n\x20for\x20more\x20information.\n\
    \n\x20For\x20GCP\x20assets,\x20it\x20is\x20the\x20parent\x20resource\x20\
    defined\x20in\x20the\x20[Cloud\x20IAM\x20policy\n\x20hierarchy](https://\
    cloud.google.com/iam/docs/overview#policy_hierarchy).\n\x20For\x20exampl\
    e:\n\x20`\"//cloudresourcemanager.googleapis.com/projects/my_project_123\
    \"`.\n\n\x20For\x20third-party\x20assets,\x20it\x20is\x20up\x20to\x20the\
    \x20users\x20to\x20define.\n\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03v\
    \x02\x08\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03v\t\x0f\n\x0c\n\x05\x04\
    \x03\x02\x04\x03\x12\x03v\x12\x13\nu\n\x04\x04\x03\x02\x05\x12\x03z\x02\
    \"\x1ah\x20The\x20content\x20of\x20the\x20resource,\x20in\x20which\x20so\
    me\x20sensitive\x20fields\x20are\x20scrubbed\n\x20away\x20and\x20may\x20\
    not\x20be\x20present.\n\n\x0c\n\x05\x04\x03\x02\x05\x06\x12\x03z\x02\x18\
    \n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03z\x19\x1d\n\x0c\n\x05\x04\x03\
    \x02\x05\x03\x12\x03z\x20!b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
