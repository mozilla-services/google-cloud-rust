// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/asset/v1/asset_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ExportAssetsRequest {
    // message fields
    pub parent: ::std::string::String,
    pub read_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub asset_types: ::protobuf::RepeatedField<::std::string::String>,
    pub content_type: ContentType,
    pub output_config: ::protobuf::SingularPtrField<OutputConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExportAssetsRequest {
    fn default() -> &'a ExportAssetsRequest {
        <ExportAssetsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExportAssetsRequest {
    pub fn new() -> ExportAssetsRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp read_time = 2;


    pub fn get_read_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.read_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_read_time(&mut self) {
        self.read_time.clear();
    }

    pub fn has_read_time(&self) -> bool {
        self.read_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.read_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.read_time.is_none() {
            self.read_time.set_default();
        }
        self.read_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.read_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // repeated string asset_types = 3;


    pub fn get_asset_types(&self) -> &[::std::string::String] {
        &self.asset_types
    }
    pub fn clear_asset_types(&mut self) {
        self.asset_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_types(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.asset_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_asset_types(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.asset_types
    }

    // Take field
    pub fn take_asset_types(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.asset_types, ::protobuf::RepeatedField::new())
    }

    // .google.cloud.asset.v1.ContentType content_type = 4;


    pub fn get_content_type(&self) -> ContentType {
        self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type = ContentType::CONTENT_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: ContentType) {
        self.content_type = v;
    }

    // .google.cloud.asset.v1.OutputConfig output_config = 5;


    pub fn get_output_config(&self) -> &OutputConfig {
        self.output_config.as_ref().unwrap_or_else(|| <OutputConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output_config(&mut self) {
        self.output_config.clear();
    }

    pub fn has_output_config(&self) -> bool {
        self.output_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_config(&mut self, v: OutputConfig) {
        self.output_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_config(&mut self) -> &mut OutputConfig {
        if self.output_config.is_none() {
            self.output_config.set_default();
        }
        self.output_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_config(&mut self) -> OutputConfig {
        self.output_config.take().unwrap_or_else(|| OutputConfig::new())
    }
}

impl ::protobuf::Message for ExportAssetsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.read_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.output_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_time)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.asset_types)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.content_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if let Some(ref v) = self.read_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.asset_types {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.content_type != ContentType::CONTENT_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.content_type);
        }
        if let Some(ref v) = self.output_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if let Some(ref v) = self.read_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.asset_types {
            os.write_string(3, &v)?;
        };
        if self.content_type != ContentType::CONTENT_TYPE_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.content_type))?;
        }
        if let Some(ref v) = self.output_config.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExportAssetsRequest {
        ExportAssetsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ExportAssetsRequest| { &m.parent },
                |m: &mut ExportAssetsRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "read_time",
                |m: &ExportAssetsRequest| { &m.read_time },
                |m: &mut ExportAssetsRequest| { &mut m.read_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_types",
                |m: &ExportAssetsRequest| { &m.asset_types },
                |m: &mut ExportAssetsRequest| { &mut m.asset_types },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ContentType>>(
                "content_type",
                |m: &ExportAssetsRequest| { &m.content_type },
                |m: &mut ExportAssetsRequest| { &mut m.content_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutputConfig>>(
                "output_config",
                |m: &ExportAssetsRequest| { &m.output_config },
                |m: &mut ExportAssetsRequest| { &mut m.output_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExportAssetsRequest>(
                "ExportAssetsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExportAssetsRequest {
        static instance: ::protobuf::rt::LazyV2<ExportAssetsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExportAssetsRequest::new)
    }
}

impl ::protobuf::Clear for ExportAssetsRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.read_time.clear();
        self.asset_types.clear();
        self.content_type = ContentType::CONTENT_TYPE_UNSPECIFIED;
        self.output_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExportAssetsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExportAssetsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExportAssetsResponse {
    // message fields
    pub read_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub output_config: ::protobuf::SingularPtrField<OutputConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExportAssetsResponse {
    fn default() -> &'a ExportAssetsResponse {
        <ExportAssetsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExportAssetsResponse {
    pub fn new() -> ExportAssetsResponse {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp read_time = 1;


    pub fn get_read_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.read_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_read_time(&mut self) {
        self.read_time.clear();
    }

    pub fn has_read_time(&self) -> bool {
        self.read_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.read_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.read_time.is_none() {
            self.read_time.set_default();
        }
        self.read_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.read_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.cloud.asset.v1.OutputConfig output_config = 2;


    pub fn get_output_config(&self) -> &OutputConfig {
        self.output_config.as_ref().unwrap_or_else(|| <OutputConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output_config(&mut self) {
        self.output_config.clear();
    }

    pub fn has_output_config(&self) -> bool {
        self.output_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_config(&mut self, v: OutputConfig) {
        self.output_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_config(&mut self) -> &mut OutputConfig {
        if self.output_config.is_none() {
            self.output_config.set_default();
        }
        self.output_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_config(&mut self) -> OutputConfig {
        self.output_config.take().unwrap_or_else(|| OutputConfig::new())
    }
}

impl ::protobuf::Message for ExportAssetsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.read_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.output_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.read_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.output_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.read_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.output_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExportAssetsResponse {
        ExportAssetsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "read_time",
                |m: &ExportAssetsResponse| { &m.read_time },
                |m: &mut ExportAssetsResponse| { &mut m.read_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutputConfig>>(
                "output_config",
                |m: &ExportAssetsResponse| { &m.output_config },
                |m: &mut ExportAssetsResponse| { &mut m.output_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExportAssetsResponse>(
                "ExportAssetsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExportAssetsResponse {
        static instance: ::protobuf::rt::LazyV2<ExportAssetsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExportAssetsResponse::new)
    }
}

impl ::protobuf::Clear for ExportAssetsResponse {
    fn clear(&mut self) {
        self.read_time.clear();
        self.output_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExportAssetsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExportAssetsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchGetAssetsHistoryRequest {
    // message fields
    pub parent: ::std::string::String,
    pub asset_names: ::protobuf::RepeatedField<::std::string::String>,
    pub content_type: ContentType,
    pub read_time_window: ::protobuf::SingularPtrField<super::assets::TimeWindow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchGetAssetsHistoryRequest {
    fn default() -> &'a BatchGetAssetsHistoryRequest {
        <BatchGetAssetsHistoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchGetAssetsHistoryRequest {
    pub fn new() -> BatchGetAssetsHistoryRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // repeated string asset_names = 2;


    pub fn get_asset_names(&self) -> &[::std::string::String] {
        &self.asset_names
    }
    pub fn clear_asset_names(&mut self) {
        self.asset_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.asset_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_asset_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.asset_names
    }

    // Take field
    pub fn take_asset_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.asset_names, ::protobuf::RepeatedField::new())
    }

    // .google.cloud.asset.v1.ContentType content_type = 3;


    pub fn get_content_type(&self) -> ContentType {
        self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type = ContentType::CONTENT_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: ContentType) {
        self.content_type = v;
    }

    // .google.cloud.asset.v1.TimeWindow read_time_window = 4;


    pub fn get_read_time_window(&self) -> &super::assets::TimeWindow {
        self.read_time_window.as_ref().unwrap_or_else(|| <super::assets::TimeWindow as ::protobuf::Message>::default_instance())
    }
    pub fn clear_read_time_window(&mut self) {
        self.read_time_window.clear();
    }

    pub fn has_read_time_window(&self) -> bool {
        self.read_time_window.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_time_window(&mut self, v: super::assets::TimeWindow) {
        self.read_time_window = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_time_window(&mut self) -> &mut super::assets::TimeWindow {
        if self.read_time_window.is_none() {
            self.read_time_window.set_default();
        }
        self.read_time_window.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_time_window(&mut self) -> super::assets::TimeWindow {
        self.read_time_window.take().unwrap_or_else(|| super::assets::TimeWindow::new())
    }
}

impl ::protobuf::Message for BatchGetAssetsHistoryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.read_time_window {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.asset_names)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.content_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_time_window)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        for value in &self.asset_names {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if self.content_type != ContentType::CONTENT_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.content_type);
        }
        if let Some(ref v) = self.read_time_window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        for v in &self.asset_names {
            os.write_string(2, &v)?;
        };
        if self.content_type != ContentType::CONTENT_TYPE_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.content_type))?;
        }
        if let Some(ref v) = self.read_time_window.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchGetAssetsHistoryRequest {
        BatchGetAssetsHistoryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &BatchGetAssetsHistoryRequest| { &m.parent },
                |m: &mut BatchGetAssetsHistoryRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "asset_names",
                |m: &BatchGetAssetsHistoryRequest| { &m.asset_names },
                |m: &mut BatchGetAssetsHistoryRequest| { &mut m.asset_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ContentType>>(
                "content_type",
                |m: &BatchGetAssetsHistoryRequest| { &m.content_type },
                |m: &mut BatchGetAssetsHistoryRequest| { &mut m.content_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::assets::TimeWindow>>(
                "read_time_window",
                |m: &BatchGetAssetsHistoryRequest| { &m.read_time_window },
                |m: &mut BatchGetAssetsHistoryRequest| { &mut m.read_time_window },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BatchGetAssetsHistoryRequest>(
                "BatchGetAssetsHistoryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BatchGetAssetsHistoryRequest {
        static instance: ::protobuf::rt::LazyV2<BatchGetAssetsHistoryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchGetAssetsHistoryRequest::new)
    }
}

impl ::protobuf::Clear for BatchGetAssetsHistoryRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.asset_names.clear();
        self.content_type = ContentType::CONTENT_TYPE_UNSPECIFIED;
        self.read_time_window.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatchGetAssetsHistoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchGetAssetsHistoryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchGetAssetsHistoryResponse {
    // message fields
    pub assets: ::protobuf::RepeatedField<super::assets::TemporalAsset>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchGetAssetsHistoryResponse {
    fn default() -> &'a BatchGetAssetsHistoryResponse {
        <BatchGetAssetsHistoryResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchGetAssetsHistoryResponse {
    pub fn new() -> BatchGetAssetsHistoryResponse {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.asset.v1.TemporalAsset assets = 1;


    pub fn get_assets(&self) -> &[super::assets::TemporalAsset] {
        &self.assets
    }
    pub fn clear_assets(&mut self) {
        self.assets.clear();
    }

    // Param is passed by value, moved
    pub fn set_assets(&mut self, v: ::protobuf::RepeatedField<super::assets::TemporalAsset>) {
        self.assets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_assets(&mut self) -> &mut ::protobuf::RepeatedField<super::assets::TemporalAsset> {
        &mut self.assets
    }

    // Take field
    pub fn take_assets(&mut self) -> ::protobuf::RepeatedField<super::assets::TemporalAsset> {
        ::std::mem::replace(&mut self.assets, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchGetAssetsHistoryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.assets {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.assets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.assets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.assets {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchGetAssetsHistoryResponse {
        BatchGetAssetsHistoryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::assets::TemporalAsset>>(
                "assets",
                |m: &BatchGetAssetsHistoryResponse| { &m.assets },
                |m: &mut BatchGetAssetsHistoryResponse| { &mut m.assets },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BatchGetAssetsHistoryResponse>(
                "BatchGetAssetsHistoryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BatchGetAssetsHistoryResponse {
        static instance: ::protobuf::rt::LazyV2<BatchGetAssetsHistoryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchGetAssetsHistoryResponse::new)
    }
}

impl ::protobuf::Clear for BatchGetAssetsHistoryResponse {
    fn clear(&mut self) {
        self.assets.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatchGetAssetsHistoryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchGetAssetsHistoryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutputConfig {
    // message oneof groups
    pub destination: ::std::option::Option<OutputConfig_oneof_destination>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputConfig {
    fn default() -> &'a OutputConfig {
        <OutputConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum OutputConfig_oneof_destination {
    gcs_destination(GcsDestination),
    bigquery_destination(BigQueryDestination),
}

impl OutputConfig {
    pub fn new() -> OutputConfig {
        ::std::default::Default::default()
    }

    // .google.cloud.asset.v1.GcsDestination gcs_destination = 1;


    pub fn get_gcs_destination(&self) -> &GcsDestination {
        match self.destination {
            ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(ref v)) => v,
            _ => <GcsDestination as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_gcs_destination(&mut self) {
        self.destination = ::std::option::Option::None;
    }

    pub fn has_gcs_destination(&self) -> bool {
        match self.destination {
            ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gcs_destination(&mut self, v: GcsDestination) {
        self.destination = ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gcs_destination(&mut self) -> &mut GcsDestination {
        if let ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(_)) = self.destination {
        } else {
            self.destination = ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(GcsDestination::new()));
        }
        match self.destination {
            ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gcs_destination(&mut self) -> GcsDestination {
        if self.has_gcs_destination() {
            match self.destination.take() {
                ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(v)) => v,
                _ => panic!(),
            }
        } else {
            GcsDestination::new()
        }
    }

    // .google.cloud.asset.v1.BigQueryDestination bigquery_destination = 2;


    pub fn get_bigquery_destination(&self) -> &BigQueryDestination {
        match self.destination {
            ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(ref v)) => v,
            _ => <BigQueryDestination as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_bigquery_destination(&mut self) {
        self.destination = ::std::option::Option::None;
    }

    pub fn has_bigquery_destination(&self) -> bool {
        match self.destination {
            ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bigquery_destination(&mut self, v: BigQueryDestination) {
        self.destination = ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bigquery_destination(&mut self) -> &mut BigQueryDestination {
        if let ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(_)) = self.destination {
        } else {
            self.destination = ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(BigQueryDestination::new()));
        }
        match self.destination {
            ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bigquery_destination(&mut self) -> BigQueryDestination {
        if self.has_bigquery_destination() {
            match self.destination.take() {
                ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(v)) => v,
                _ => panic!(),
            }
        } else {
            BigQueryDestination::new()
        }
    }
}

impl ::protobuf::Message for OutputConfig {
    fn is_initialized(&self) -> bool {
        if let Some(OutputConfig_oneof_destination::gcs_destination(ref v)) = self.destination {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OutputConfig_oneof_destination::bigquery_destination(ref v)) = self.destination {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.destination = ::std::option::Option::Some(OutputConfig_oneof_destination::gcs_destination(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.destination = ::std::option::Option::Some(OutputConfig_oneof_destination::bigquery_destination(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.destination {
            match v {
                &OutputConfig_oneof_destination::gcs_destination(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OutputConfig_oneof_destination::bigquery_destination(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.destination {
            match v {
                &OutputConfig_oneof_destination::gcs_destination(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OutputConfig_oneof_destination::bigquery_destination(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputConfig {
        OutputConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GcsDestination>(
                "gcs_destination",
                OutputConfig::has_gcs_destination,
                OutputConfig::get_gcs_destination,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BigQueryDestination>(
                "bigquery_destination",
                OutputConfig::has_bigquery_destination,
                OutputConfig::get_bigquery_destination,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputConfig>(
                "OutputConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputConfig {
        static instance: ::protobuf::rt::LazyV2<OutputConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputConfig::new)
    }
}

impl ::protobuf::Clear for OutputConfig {
    fn clear(&mut self) {
        self.destination = ::std::option::Option::None;
        self.destination = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GcsDestination {
    // message oneof groups
    pub object_uri: ::std::option::Option<GcsDestination_oneof_object_uri>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GcsDestination {
    fn default() -> &'a GcsDestination {
        <GcsDestination as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GcsDestination_oneof_object_uri {
    uri(::std::string::String),
    uri_prefix(::std::string::String),
}

impl GcsDestination {
    pub fn new() -> GcsDestination {
        ::std::default::Default::default()
    }

    // string uri = 1;


    pub fn get_uri(&self) -> &str {
        match self.object_uri {
            ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_uri(&mut self) {
        self.object_uri = ::std::option::Option::None;
    }

    pub fn has_uri(&self) -> bool {
        match self.object_uri {
            ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.object_uri = ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(_)) = self.object_uri {
        } else {
            self.object_uri = ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(::std::string::String::new()));
        }
        match self.object_uri {
            ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        if self.has_uri() {
            match self.object_uri.take() {
                ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string uri_prefix = 2;


    pub fn get_uri_prefix(&self) -> &str {
        match self.object_uri {
            ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_uri_prefix(&mut self) {
        self.object_uri = ::std::option::Option::None;
    }

    pub fn has_uri_prefix(&self) -> bool {
        match self.object_uri {
            ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri_prefix(&mut self, v: ::std::string::String) {
        self.object_uri = ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uri_prefix(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(_)) = self.object_uri {
        } else {
            self.object_uri = ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(::std::string::String::new()));
        }
        match self.object_uri {
            ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uri_prefix(&mut self) -> ::std::string::String {
        if self.has_uri_prefix() {
            match self.object_uri.take() {
                ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for GcsDestination {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.object_uri = ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.object_uri = ::std::option::Option::Some(GcsDestination_oneof_object_uri::uri_prefix(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.object_uri {
            match v {
                &GcsDestination_oneof_object_uri::uri(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &GcsDestination_oneof_object_uri::uri_prefix(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.object_uri {
            match v {
                &GcsDestination_oneof_object_uri::uri(ref v) => {
                    os.write_string(1, v)?;
                },
                &GcsDestination_oneof_object_uri::uri_prefix(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GcsDestination {
        GcsDestination::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "uri",
                GcsDestination::has_uri,
                GcsDestination::get_uri,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "uri_prefix",
                GcsDestination::has_uri_prefix,
                GcsDestination::get_uri_prefix,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GcsDestination>(
                "GcsDestination",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GcsDestination {
        static instance: ::protobuf::rt::LazyV2<GcsDestination> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GcsDestination::new)
    }
}

impl ::protobuf::Clear for GcsDestination {
    fn clear(&mut self) {
        self.object_uri = ::std::option::Option::None;
        self.object_uri = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GcsDestination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcsDestination {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BigQueryDestination {
    // message fields
    pub dataset: ::std::string::String,
    pub table: ::std::string::String,
    pub force: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BigQueryDestination {
    fn default() -> &'a BigQueryDestination {
        <BigQueryDestination as ::protobuf::Message>::default_instance()
    }
}

impl BigQueryDestination {
    pub fn new() -> BigQueryDestination {
        ::std::default::Default::default()
    }

    // string dataset = 1;


    pub fn get_dataset(&self) -> &str {
        &self.dataset
    }
    pub fn clear_dataset(&mut self) {
        self.dataset.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataset(&mut self, v: ::std::string::String) {
        self.dataset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataset(&mut self) -> &mut ::std::string::String {
        &mut self.dataset
    }

    // Take field
    pub fn take_dataset(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dataset, ::std::string::String::new())
    }

    // string table = 2;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // bool force = 3;


    pub fn get_force(&self) -> bool {
        self.force
    }
    pub fn clear_force(&mut self) {
        self.force = false;
    }

    // Param is passed by value, moved
    pub fn set_force(&mut self, v: bool) {
        self.force = v;
    }
}

impl ::protobuf::Message for BigQueryDestination {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dataset)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.force = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dataset.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dataset);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.table);
        }
        if self.force != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dataset.is_empty() {
            os.write_string(1, &self.dataset)?;
        }
        if !self.table.is_empty() {
            os.write_string(2, &self.table)?;
        }
        if self.force != false {
            os.write_bool(3, self.force)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BigQueryDestination {
        BigQueryDestination::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dataset",
                |m: &BigQueryDestination| { &m.dataset },
                |m: &mut BigQueryDestination| { &mut m.dataset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table",
                |m: &BigQueryDestination| { &m.table },
                |m: &mut BigQueryDestination| { &mut m.table },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "force",
                |m: &BigQueryDestination| { &m.force },
                |m: &mut BigQueryDestination| { &mut m.force },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BigQueryDestination>(
                "BigQueryDestination",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BigQueryDestination {
        static instance: ::protobuf::rt::LazyV2<BigQueryDestination> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BigQueryDestination::new)
    }
}

impl ::protobuf::Clear for BigQueryDestination {
    fn clear(&mut self) {
        self.dataset.clear();
        self.table.clear();
        self.force = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BigQueryDestination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BigQueryDestination {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ContentType {
    CONTENT_TYPE_UNSPECIFIED = 0,
    RESOURCE = 1,
    IAM_POLICY = 2,
    ORG_POLICY = 4,
    ACCESS_POLICY = 5,
}

impl ::protobuf::ProtobufEnum for ContentType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ContentType> {
        match value {
            0 => ::std::option::Option::Some(ContentType::CONTENT_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ContentType::RESOURCE),
            2 => ::std::option::Option::Some(ContentType::IAM_POLICY),
            4 => ::std::option::Option::Some(ContentType::ORG_POLICY),
            5 => ::std::option::Option::Some(ContentType::ACCESS_POLICY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ContentType] = &[
            ContentType::CONTENT_TYPE_UNSPECIFIED,
            ContentType::RESOURCE,
            ContentType::IAM_POLICY,
            ContentType::ORG_POLICY,
            ContentType::ACCESS_POLICY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ContentType>("ContentType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ContentType {
}

impl ::std::default::Default for ContentType {
    fn default() -> Self {
        ContentType::CONTENT_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)google/cloud/asset/v1/asset_service.proto\x12\x15google.cloud.asset.v\
    1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\
    \x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\
    \"google/cloud/asset/v1/assets.proto\x1a#google/longrunning/operations.p\
    roto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x20google/protobuf/field_mas\
    k.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc6\x02\n\x13ExportAsse\
    tsRequest\x12?\n\x06parent\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\x12\x1f\
    cloudasset.googleapis.com/Asset\xe0A\x02\x127\n\tread_time\x18\x02\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x08readTime\x12\x1f\n\x0basset\
    _types\x18\x03\x20\x03(\tR\nassetTypes\x12E\n\x0ccontent_type\x18\x04\
    \x20\x01(\x0e2\".google.cloud.asset.v1.ContentTypeR\x0bcontentType\x12M\
    \n\routput_config\x18\x05\x20\x01(\x0b2#.google.cloud.asset.v1.OutputCon\
    figR\x0coutputConfigB\x03\xe0A\x02\"\x99\x01\n\x14ExportAssetsResponse\
    \x127\n\tread_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x08readTime\x12H\n\routput_config\x18\x02\x20\x01(\x0b2#.google.cloud.a\
    sset.v1.OutputConfigR\x0coutputConfig\"\x9e\x02\n\x1cBatchGetAssetsHisto\
    ryRequest\x12?\n\x06parent\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\x12\x1f\
    cloudasset.googleapis.com/Asset\xe0A\x02\x12\x1f\n\x0basset_names\x18\
    \x02\x20\x03(\tR\nassetNames\x12J\n\x0ccontent_type\x18\x03\x20\x01(\x0e\
    2\".google.cloud.asset.v1.ContentTypeR\x0bcontentTypeB\x03\xe0A\x01\x12P\
    \n\x10read_time_window\x18\x04\x20\x01(\x0b2!.google.cloud.asset.v1.Time\
    WindowR\x0ereadTimeWindowB\x03\xe0A\x01\"]\n\x1dBatchGetAssetsHistoryRes\
    ponse\x12<\n\x06assets\x18\x01\x20\x03(\x0b2$.google.cloud.asset.v1.Temp\
    oralAssetR\x06assets\"\xd0\x01\n\x0cOutputConfig\x12P\n\x0fgcs_destinati\
    on\x18\x01\x20\x01(\x0b2%.google.cloud.asset.v1.GcsDestinationH\0R\x0egc\
    sDestination\x12_\n\x14bigquery_destination\x18\x02\x20\x01(\x0b2*.googl\
    e.cloud.asset.v1.BigQueryDestinationH\0R\x13bigqueryDestinationB\r\n\x0b\
    destination\"S\n\x0eGcsDestination\x12\x12\n\x03uri\x18\x01\x20\x01(\tH\
    \0R\x03uri\x12\x1f\n\nuri_prefix\x18\x02\x20\x01(\tH\0R\turiPrefixB\x0c\
    \n\nobject_uri\"e\n\x13BigQueryDestination\x12\x1d\n\x07dataset\x18\x01\
    \x20\x01(\tR\x07datasetB\x03\xe0A\x02\x12\x19\n\x05table\x18\x02\x20\x01\
    (\tR\x05tableB\x03\xe0A\x02\x12\x14\n\x05force\x18\x03\x20\x01(\x08R\x05\
    force*l\n\x0bContentType\x12\x1c\n\x18CONTENT_TYPE_UNSPECIFIED\x10\0\x12\
    \x0c\n\x08RESOURCE\x10\x01\x12\x0e\n\nIAM_POLICY\x10\x02\x12\x0e\n\nORG_\
    POLICY\x10\x04\x12\x11\n\rACCESS_POLICY\x10\x052\xf3\x03\n\x0cAssetServi\
    ce\x12\xde\x01\n\x0cExportAssets\x12*.google.cloud.asset.v1.ExportAssets\
    Request\x1a\x1d.google.longrunning.Operation\"\x82\x01\xcaAW\n*google.cl\
    oud.asset.v1.ExportAssetsResponse\x12)google.cloud.asset.v1.ExportAssets\
    Request\x82\xd3\xe4\x93\x02\"\"\x1d/v1/{parent=*/*}:exportAssets:\x01*\
    \x12\xb2\x01\n\x15BatchGetAssetsHistory\x123.google.cloud.asset.v1.Batch\
    GetAssetsHistoryRequest\x1a4.google.cloud.asset.v1.BatchGetAssetsHistory\
    Response\".\x82\xd3\xe4\x93\x02(\x12&/v1/{parent=*/*}:batchGetAssetsHist\
    ory\x1aM\xd2A.https://www.googleapis.com/auth/cloud-platform\xcaA\x19clo\
    udasset.googleapis.comB\x9c\x01\n\x19com.google.cloud.asset.v1B\x11Asset\
    ServiceProtoP\x01Z:google.golang.org/genproto/googleapis/cloud/asset/v1;\
    asset\xaa\x02\x15Google.Cloud.Asset.V1\xca\x02\x15Google\\Cloud\\Asset\\\
    V1J\xf7B\n\x07\x12\x05\x0f\0\xeb\x01\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\
    \0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\
    \x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"Li\
    cense\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\
    \x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\
    \x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www\
    .apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20appl\
    icable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20d\
    istributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITION\
    S\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\
    \x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\
    \x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\
    \n\x08\n\x01\x02\x12\x03\x11\0\x1e\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\
    \x02\x03\x01\x12\x03\x14\0!\n\t\n\x02\x03\x02\x12\x03\x15\0)\n\t\n\x02\
    \x03\x03\x12\x03\x16\0#\n\t\n\x02\x03\x04\x12\x03\x17\0,\n\t\n\x02\x03\
    \x05\x12\x03\x18\0-\n\t\n\x02\x03\x06\x12\x03\x19\0%\n\t\n\x02\x03\x07\
    \x12\x03\x1a\0*\n\t\n\x02\x03\x08\x12\x03\x1b\0)\n\x08\n\x01\x08\x12\x03\
    \x1d\02\n\t\n\x02\x08%\x12\x03\x1d\02\n\x08\n\x01\x08\x12\x03\x1e\0Q\n\t\
    \n\x02\x08\x0b\x12\x03\x1e\0Q\n\x08\n\x01\x08\x12\x03\x1f\0\"\n\t\n\x02\
    \x08\n\x12\x03\x1f\0\"\n\x08\n\x01\x08\x12\x03\x20\02\n\t\n\x02\x08\x08\
    \x12\x03\x20\02\n\x08\n\x01\x08\x12\x03!\02\n\t\n\x02\x08\x01\x12\x03!\0\
    2\n\x08\n\x01\x08\x12\x03\"\02\n\t\n\x02\x08)\x12\x03\"\02\n'\n\x02\x06\
    \0\x12\x04%\0D\x01\x1a\x1b\x20Asset\x20service\x20definition.\n\n\n\n\
    \x03\x06\0\x01\x12\x03%\x08\x14\n\n\n\x03\x06\0\x03\x12\x03&\x02A\n\x0c\
    \n\x05\x06\0\x03\x99\x08\x12\x03&\x02A\n\n\n\x03\x06\0\x03\x12\x03'\x02V\
    \n\x0c\n\x05\x06\0\x03\x9a\x08\x12\x03'\x02V\n\x92\x02\n\x04\x06\0\x02\0\
    \x12\x04-\x026\x03\x1a\x83\x02\x20Exports\x20assets\x20with\x20time\x20a\
    nd\x20resource\x20types\x20to\x20a\x20given\x20Cloud\x20Storage\n\x20loc\
    ation.\x20The\x20output\x20format\x20is\x20newline-delimited\x20JSON.\n\
    \x20This\x20API\x20implements\x20the\x20[google.longrunning.Operation][g\
    oogle.longrunning.Operation]\x20API\x20allowing\x20you\n\x20to\x20keep\
    \x20track\x20of\x20the\x20export.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03-\
    \x06\x12\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03-\x13&\n\x0c\n\x05\x06\0\x02\
    \0\x03\x12\x03-1M\n\r\n\x05\x06\0\x02\0\x04\x12\x04.\x041\x06\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04.\x041\x06\n\r\n\x05\x06\0\x02\0\
    \x04\x12\x042\x045\x06\n\x0f\n\x07\x06\0\x02\0\x04\x99\x08\x12\x042\x045\
    \x06\n\x9f\x03\n\x04\x06\0\x02\x01\x12\x04?\x02C\x03\x1a\x90\x03\x20Batc\
    h\x20gets\x20the\x20update\x20history\x20of\x20assets\x20that\x20overlap\
    \x20a\x20time\x20window.\n\x20For\x20RESOURCE\x20content,\x20this\x20API\
    \x20outputs\x20history\x20with\x20asset\x20in\x20both\n\x20non-delete\
    \x20or\x20deleted\x20status.\n\x20For\x20IAM_POLICY\x20content,\x20this\
    \x20API\x20outputs\x20history\x20when\x20the\x20asset\x20and\x20its\n\
    \x20attached\x20IAM\x20POLICY\x20both\x20exist.\x20This\x20can\x20create\
    \x20gaps\x20in\x20the\x20output\x20history.\n\x20If\x20a\x20specified\
    \x20asset\x20does\x20not\x20exist,\x20this\x20API\x20returns\x20an\x20IN\
    VALID_ARGUMENT\n\x20error.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03?\x06\
    \x1b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03?\x1c8\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03?C`\n\r\n\x05\x06\0\x02\x01\x04\x12\x04@\x04B\x06\n\x11\
    \n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04@\x04B\x06\n#\n\x02\x04\0\
    \x12\x04G\0h\x01\x1a\x17\x20Export\x20asset\x20request.\n\n\n\n\x03\x04\
    \0\x01\x12\x03G\x08\x1b\n\x96\x02\n\x04\x04\0\x02\0\x12\x04L\x02Q\x04\
    \x1a\x87\x02\x20Required.\x20The\x20relative\x20name\x20of\x20the\x20roo\
    t\x20asset.\x20This\x20can\x20only\x20be\x20an\n\x20organization\x20numb\
    er\x20(such\x20as\x20\"organizations/123\"),\x20a\x20project\x20ID\x20(s\
    uch\x20as\n\x20\"projects/my-project-id\"),\x20or\x20a\x20project\x20num\
    ber\x20(such\x20as\x20\"projects/12345\"),\n\x20or\x20a\x20folder\x20num\
    ber\x20(such\x20as\x20\"folders/123\").\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03L\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03L\t\x0f\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03L\x12\x13\n\r\n\x05\x04\0\x02\0\x08\x12\x04L\x14\
    Q\x03\n\x0f\n\x08\x04\0\x02\0\x08\x9c\x08\0\x12\x03M\x04*\n\x0f\n\x07\
    \x04\0\x02\0\x08\x9f\x08\x12\x04N\x04P\x05\n\xd8\x02\n\x04\x04\0\x02\x01\
    \x12\x03X\x02*\x1a\xca\x02\x20Timestamp\x20to\x20take\x20an\x20asset\x20\
    snapshot.\x20This\x20can\x20only\x20be\x20set\x20to\x20a\x20timestamp\n\
    \x20between\x202018-10-02\x20UTC\x20(inclusive)\x20and\x20the\x20current\
    \x20time.\x20If\x20not\x20specified,\n\x20the\x20current\x20time\x20will\
    \x20be\x20used.\x20Due\x20to\x20delays\x20in\x20resource\x20data\x20coll\
    ection\n\x20and\x20indexing,\x20there\x20is\x20a\x20volatile\x20window\
    \x20during\x20which\x20running\x20the\x20same\n\x20query\x20may\x20get\
    \x20different\x20results.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03X\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03X\x1c%\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03X()\n\xae\x02\n\x04\x04\0\x02\x02\x12\x03_\x02\"\x1a\xa0\
    \x02\x20A\x20list\x20of\x20asset\x20types\x20of\x20which\x20to\x20take\
    \x20a\x20snapshot\x20for.\x20For\x20example:\n\x20\"compute.googleapis.c\
    om/Disk\".\x20If\x20specified,\x20only\x20matching\x20assets\x20will\x20\
    be\n\x20returned.\x20See\x20[Introduction\x20to\x20Cloud\x20Asset\n\x20I\
    nventory](https://cloud.google.com/asset-inventory/docs/overview)\n\x20f\
    or\x20all\x20supported\x20asset\x20types.\n\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03_\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03_\x0b\x11\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03_\x12\x1d\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03_\x20!\ne\n\x04\x04\0\x02\x03\x12\x03c\x02\x1f\x1aX\x20Asset\x20\
    content\x20type.\x20If\x20not\x20specified,\x20no\x20content\x20but\x20t\
    he\x20asset\x20name\x20will\x20be\n\x20returned.\n\n\x0c\n\x05\x04\0\x02\
    \x03\x06\x12\x03c\x02\r\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03c\x0e\x1a\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03c\x1d\x1e\n\x95\x01\n\x04\x04\0\x02\
    \x04\x12\x03g\x02J\x1a\x87\x01\x20Required.\x20Output\x20configuration\
    \x20indicating\x20where\x20the\x20results\x20will\x20be\x20output\n\x20t\
    o.\x20All\x20results\x20will\x20be\x20in\x20newline\x20delimited\x20JSON\
    \x20format.\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03g\x02\x0e\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03g\x0f\x1c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03g\x1f\x20\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03g!I\n\x0f\n\x08\x04\0\
    \x02\x04\x08\x9c\x08\0\x12\x03g\"H\n\x91\x02\n\x02\x04\x01\x12\x04m\0t\
    \x01\x1a\x84\x02\x20The\x20export\x20asset\x20response.\x20This\x20messa\
    ge\x20is\x20returned\x20by\x20the\n\x20[google.longrunning.Operations.Ge\
    tOperation][google.longrunning.Operations.GetOperation]\x20method\x20in\
    \x20the\x20returned\n\x20[google.longrunning.Operation.response][google.\
    longrunning.Operation.response]\x20field.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03m\x08\x1c\n+\n\x04\x04\x01\x02\0\x12\x03o\x02*\x1a\x1e\x20Time\x20th\
    e\x20snapshot\x20was\x20taken.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03o\
    \x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03o\x1c%\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03o()\nq\n\x04\x04\x01\x02\x01\x12\x03s\x02!\x1ad\x20Out\
    put\x20configuration\x20indicating\x20where\x20the\x20results\x20were\
    \x20output\x20to.\n\x20All\x20results\x20are\x20in\x20JSON\x20format.\n\
    \n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03s\x02\x0e\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03s\x0f\x1c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03s\
    \x1f\x20\n0\n\x02\x04\x02\x12\x05w\0\x98\x01\x01\x1a#\x20Batch\x20get\
    \x20assets\x20history\x20request.\n\n\n\n\x03\x04\x02\x01\x12\x03w\x08$\
    \n\xe9\x01\n\x04\x04\x02\x02\0\x12\x05{\x02\x80\x01\x04\x1a\xd9\x01\x20R\
    equired.\x20The\x20relative\x20name\x20of\x20the\x20root\x20asset.\x20It\
    \x20can\x20only\x20be\x20an\n\x20organization\x20number\x20(such\x20as\
    \x20\"organizations/123\"),\x20a\x20project\x20ID\x20(such\x20as\n\x20\"\
    projects/my-project-id\")\",\x20or\x20a\x20project\x20number\x20(such\
    \x20as\x20\"projects/12345\").\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03{\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03{\t\x0f\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03{\x12\x13\n\x0e\n\x05\x04\x02\x02\0\x08\x12\x05{\
    \x14\x80\x01\x03\n\x0f\n\x08\x04\x02\x02\0\x08\x9c\x08\0\x12\x03|\x04*\n\
    \x0f\n\x07\x04\x02\x02\0\x08\x9f\x08\x12\x04}\x04\x7f\x05\n\xe9\x03\n\
    \x04\x04\x02\x02\x01\x12\x04\x8c\x01\x02\"\x1a\xda\x03\x20A\x20list\x20o\
    f\x20the\x20full\x20names\x20of\x20the\x20assets.\x20For\x20example:\n\
    \x20`//compute.googleapis.com/projects/my_project_123/zones/zone1/instan\
    ces/instance1`.\n\x20See\x20[Resource\n\x20Names](https://cloud.google.c\
    om/apis/design/resource_names#full_resource_name)\n\x20and\x20[Resource\
    \x20Name\n\x20Format](https://cloud.google.com/asset-inventory/docs/reso\
    urce-name-format)\n\x20for\x20more\x20info.\n\n\x20The\x20request\x20bec\
    omes\x20a\x20no-op\x20if\x20the\x20asset\x20name\x20list\x20is\x20empty,\
    \x20and\x20the\x20max\n\x20size\x20of\x20the\x20asset\x20name\x20list\
    \x20is\x20100\x20in\x20one\x20request.\n\n\r\n\x05\x04\x02\x02\x01\x04\
    \x12\x04\x8c\x01\x02\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\x8c\x01\x0b\
    \x11\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x8c\x01\x12\x1d\n\r\n\x05\x04\
    \x02\x02\x01\x03\x12\x04\x8c\x01\x20!\n+\n\x04\x04\x02\x02\x02\x12\x04\
    \x8f\x01\x02H\x1a\x1d\x20Optional.\x20The\x20content\x20type.\n\n\r\n\
    \x05\x04\x02\x02\x02\x06\x12\x04\x8f\x01\x02\r\n\r\n\x05\x04\x02\x02\x02\
    \x01\x12\x04\x8f\x01\x0e\x1a\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\x8f\
    \x01\x1d\x1e\n\r\n\x05\x04\x02\x02\x02\x08\x12\x04\x8f\x01\x1fG\n\x10\n\
    \x08\x04\x02\x02\x02\x08\x9c\x08\0\x12\x04\x8f\x01\x20F\n\x8e\x03\n\x04\
    \x04\x02\x02\x03\x12\x04\x97\x01\x02K\x1a\xff\x02\x20Optional.\x20The\
    \x20time\x20window\x20for\x20the\x20asset\x20history.\x20Both\x20start_t\
    ime\x20and\n\x20end_time\x20are\x20optional\x20and\x20if\x20set,\x20it\
    \x20must\x20be\x20after\x202018-10-02\x20UTC.\x20If\n\x20end_time\x20is\
    \x20not\x20set,\x20it\x20is\x20default\x20to\x20current\x20timestamp.\
    \x20If\x20start_time\x20is\n\x20not\x20set,\x20the\x20snapshot\x20of\x20\
    the\x20assets\x20at\x20end_time\x20will\x20be\x20returned.\x20The\n\x20r\
    eturned\x20results\x20contain\x20all\x20temporal\x20assets\x20whose\x20t\
    ime\x20window\x20overlap\x20with\n\x20read_time_window.\n\n\r\n\x05\x04\
    \x02\x02\x03\x06\x12\x04\x97\x01\x02\x0c\n\r\n\x05\x04\x02\x02\x03\x01\
    \x12\x04\x97\x01\r\x1d\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x97\x01\x20\
    !\n\r\n\x05\x04\x02\x02\x03\x08\x12\x04\x97\x01\"J\n\x10\n\x08\x04\x02\
    \x02\x03\x08\x9c\x08\0\x12\x04\x97\x01#I\n2\n\x02\x04\x03\x12\x06\x9b\
    \x01\0\x9e\x01\x01\x1a$\x20Batch\x20get\x20assets\x20history\x20response\
    .\n\n\x0b\n\x03\x04\x03\x01\x12\x04\x9b\x01\x08%\n9\n\x04\x04\x03\x02\0\
    \x12\x04\x9d\x01\x02$\x1a+\x20A\x20list\x20of\x20assets\x20with\x20valid\
    \x20time\x20windows.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x9d\x01\x02\n\
    \n\r\n\x05\x04\x03\x02\0\x06\x12\x04\x9d\x01\x0b\x18\n\r\n\x05\x04\x03\
    \x02\0\x01\x12\x04\x9d\x01\x19\x1f\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\
    \x9d\x01\"#\nC\n\x02\x04\x04\x12\x06\xa1\x01\0\xad\x01\x01\x1a5\x20Outpu\
    t\x20configuration\x20for\x20export\x20assets\x20destination.\n\n\x0b\n\
    \x03\x04\x04\x01\x12\x04\xa1\x01\x08\x14\n+\n\x04\x04\x04\x08\0\x12\x06\
    \xa3\x01\x02\xac\x01\x03\x1a\x1b\x20Asset\x20export\x20destination.\n\n\
    \r\n\x05\x04\x04\x08\0\x01\x12\x04\xa3\x01\x08\x13\n-\n\x04\x04\x04\x02\
    \0\x12\x04\xa5\x01\x04'\x1a\x1f\x20Destination\x20on\x20Cloud\x20Storage\
    .\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xa5\x01\x04\x12\n\r\n\x05\x04\
    \x04\x02\0\x01\x12\x04\xa5\x01\x13\"\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\
    \xa5\x01%&\n\xf3\x01\n\x04\x04\x04\x02\x01\x12\x04\xab\x01\x041\x1a\xe4\
    \x01\x20Destination\x20on\x20BigQuery.\x20The\x20output\x20table\x20stor\
    es\x20the\x20fields\x20in\x20asset\n\x20proto\x20as\x20columns\x20in\x20\
    BigQuery.\x20The\x20resource/iam_policy\x20field\x20is\x20converted\n\
    \x20to\x20a\x20record\x20with\x20each\x20field\x20to\x20a\x20column,\x20\
    except\x20metadata\x20to\x20a\x20single\x20JSON\n\x20string.\n\n\r\n\x05\
    \x04\x04\x02\x01\x06\x12\x04\xab\x01\x04\x17\n\r\n\x05\x04\x04\x02\x01\
    \x01\x12\x04\xab\x01\x18,\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xab\x01/\
    0\n)\n\x02\x04\x05\x12\x06\xb0\x01\0\xc5\x01\x01\x1a\x1b\x20A\x20Cloud\
    \x20Storage\x20location.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xb0\x01\x08\
    \x16\n\x1b\n\x04\x04\x05\x08\0\x12\x06\xb2\x01\x02\xc4\x01\x03\x1a\x0b\
    \x20Required.\n\n\r\n\x05\x04\x05\x08\0\x01\x12\x04\xb2\x01\x08\x12\n\
    \x90\x02\n\x04\x04\x05\x02\0\x12\x04\xb8\x01\x04\x13\x1a\x81\x02\x20The\
    \x20uri\x20of\x20the\x20Cloud\x20Storage\x20object.\x20It's\x20the\x20sa\
    me\x20uri\x20that\x20is\x20used\x20by\n\x20gsutil.\x20For\x20example:\
    \x20\"gs://bucket_name/object_name\".\x20See\x20[Viewing\x20and\n\x20Edi\
    ting\x20Object\n\x20Metadata](https://cloud.google.com/storage/docs/view\
    ing-editing-metadata)\n\x20for\x20more\x20information.\n\n\r\n\x05\x04\
    \x05\x02\0\x05\x12\x04\xb8\x01\x04\n\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\
    \xb8\x01\x0b\x0e\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xb8\x01\x11\x12\n\
    \xcd\x04\n\x04\x04\x05\x02\x01\x12\x04\xc3\x01\x04\x1a\x1a\xbe\x04\x20Th\
    e\x20uri\x20prefix\x20of\x20all\x20generated\x20Cloud\x20Storage\x20obje\
    cts.\x20For\x20example:\n\x20\"gs://bucket_name/object_name_prefix\".\
    \x20Each\x20object\x20uri\x20is\x20in\x20format:\n\x20\"gs://bucket_name\
    /object_name_prefix/<asset\x20type>/<shard\x20number>\x20and\x20only\n\
    \x20contains\x20assets\x20for\x20that\x20type.\x20<shard\x20number>\x20s\
    tarts\x20from\x200.\x20For\x20example:\n\x20\"gs://bucket_name/object_na\
    me_prefix/compute.googleapis.com/Disk/0\"\x20is\n\x20the\x20first\x20sha\
    rd\x20of\x20output\x20objects\x20containing\x20all\n\x20compute.googleap\
    is.com/Disk\x20assets.\x20An\x20INVALID_ARGUMENT\x20error\x20will\x20be\
    \n\x20returned\x20if\x20file\x20with\x20the\x20same\x20name\x20\"gs://bu\
    cket_name/object_name_prefix\"\n\x20already\x20exists.\n\n\r\n\x05\x04\
    \x05\x02\x01\x05\x12\x04\xc3\x01\x04\n\n\r\n\x05\x04\x05\x02\x01\x01\x12\
    \x04\xc3\x01\x0b\x15\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xc3\x01\x18\
    \x19\n'\n\x02\x04\x06\x12\x06\xc8\x01\0\xd9\x01\x01\x1a\x19\x20A\x20BigQ\
    uery\x20destination.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xc8\x01\x08\x1b\n\
    \xd8\x01\n\x04\x04\x06\x02\0\x12\x04\xcd\x01\x02>\x1a\xc9\x01\x20Require\
    d.\x20The\x20BigQuery\x20dataset\x20in\x20format\n\x20\"projects/project\
    Id/datasets/datasetId\",\x20to\x20which\x20the\x20snapshot\x20result\n\
    \x20should\x20be\x20exported.\x20If\x20this\x20dataset\x20does\x20not\
    \x20exist,\x20the\x20export\x20call\x20returns\n\x20an\x20error.\n\n\r\n\
    \x05\x04\x06\x02\0\x05\x12\x04\xcd\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\
    \x01\x12\x04\xcd\x01\t\x10\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xcd\x01\
    \x13\x14\n\r\n\x05\x04\x06\x02\0\x08\x12\x04\xcd\x01\x15=\n\x10\n\x08\
    \x04\x06\x02\0\x08\x9c\x08\0\x12\x04\xcd\x01\x16<\n\xae\x01\n\x04\x04\
    \x06\x02\x01\x12\x04\xd2\x01\x02<\x1a\x9f\x01\x20Required.\x20The\x20Big\
    Query\x20table\x20to\x20which\x20the\x20snapshot\x20result\x20should\x20\
    be\n\x20written.\x20If\x20this\x20table\x20does\x20not\x20exist,\x20a\
    \x20new\x20table\x20with\x20the\x20given\x20name\n\x20will\x20be\x20crea\
    ted.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xd2\x01\x02\x08\n\r\n\x05\
    \x04\x06\x02\x01\x01\x12\x04\xd2\x01\t\x0e\n\r\n\x05\x04\x06\x02\x01\x03\
    \x12\x04\xd2\x01\x11\x12\n\r\n\x05\x04\x06\x02\x01\x08\x12\x04\xd2\x01\
    \x13;\n\x10\n\x08\x04\x06\x02\x01\x08\x9c\x08\0\x12\x04\xd2\x01\x14:\n\
    \xf9\x01\n\x04\x04\x06\x02\x02\x12\x04\xd8\x01\x02\x11\x1a\xea\x01\x20If\
    \x20the\x20destination\x20table\x20already\x20exists\x20and\x20this\x20f\
    lag\x20is\x20`TRUE`,\x20the\n\x20table\x20will\x20be\x20overwritten\x20b\
    y\x20the\x20contents\x20of\x20assets\x20snapshot.\x20If\x20the\x20flag\n\
    \x20is\x20not\x20set\x20and\x20the\x20destination\x20table\x20already\
    \x20exists,\x20the\x20export\x20call\n\x20returns\x20an\x20error.\n\n\r\
    \n\x05\x04\x06\x02\x02\x05\x12\x04\xd8\x01\x02\x06\n\r\n\x05\x04\x06\x02\
    \x02\x01\x12\x04\xd8\x01\x07\x0c\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\
    \xd8\x01\x0f\x10\n#\n\x02\x05\0\x12\x06\xdc\x01\0\xeb\x01\x01\x1a\x15\
    \x20Asset\x20content\x20type.\n\n\x0b\n\x03\x05\0\x01\x12\x04\xdc\x01\
    \x05\x10\n)\n\x04\x05\0\x02\0\x12\x04\xde\x01\x02\x1f\x1a\x1b\x20Unspeci\
    fied\x20content\x20type.\n\n\r\n\x05\x05\0\x02\0\x01\x12\x04\xde\x01\x02\
    \x1a\n\r\n\x05\x05\0\x02\0\x02\x12\x04\xde\x01\x1d\x1e\n\"\n\x04\x05\0\
    \x02\x01\x12\x04\xe1\x01\x02\x0f\x1a\x14\x20Resource\x20metadata.\n\n\r\
    \n\x05\x05\0\x02\x01\x01\x12\x04\xe1\x01\x02\n\n\r\n\x05\x05\0\x02\x01\
    \x02\x12\x04\xe1\x01\r\x0e\n8\n\x04\x05\0\x02\x02\x12\x04\xe4\x01\x02\
    \x11\x1a*\x20The\x20actual\x20IAM\x20policy\x20set\x20on\x20a\x20resourc\
    e.\n\n\r\n\x05\x05\0\x02\x02\x01\x12\x04\xe4\x01\x02\x0c\n\r\n\x05\x05\0\
    \x02\x02\x02\x12\x04\xe4\x01\x0f\x10\n>\n\x04\x05\0\x02\x03\x12\x04\xe7\
    \x01\x02\x11\x1a0\x20The\x20Cloud\x20Organization\x20Policy\x20set\x20on\
    \x20an\x20asset.\n\n\r\n\x05\x05\0\x02\x03\x01\x12\x04\xe7\x01\x02\x0c\n\
    \r\n\x05\x05\0\x02\x03\x02\x12\x04\xe7\x01\x0f\x10\nI\n\x04\x05\0\x02\
    \x04\x12\x04\xea\x01\x02\x14\x1a;\x20The\x20Cloud\x20Access\x20context\
    \x20mananger\x20Policy\x20set\x20on\x20an\x20asset.\n\n\r\n\x05\x05\0\
    \x02\x04\x01\x12\x04\xea\x01\x02\x0f\n\r\n\x05\x05\0\x02\x04\x02\x12\x04\
    \xea\x01\x12\x13b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
