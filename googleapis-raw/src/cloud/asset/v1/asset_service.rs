// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/cloud/asset/v1/asset_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Export asset request.
// @@protoc_insertion_point(message:google.cloud.asset.v1.ExportAssetsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExportAssetsRequest {
    // message fields
    ///  Required. The relative name of the root asset. This can only be an
    ///  organization number (such as "organizations/123"), a project ID (such as
    ///  "projects/my-project-id"), or a project number (such as "projects/12345"),
    ///  or a folder number (such as "folders/123").
    // @@protoc_insertion_point(field:google.cloud.asset.v1.ExportAssetsRequest.parent)
    pub parent: ::std::string::String,
    ///  Timestamp to take an asset snapshot. This can only be set to a timestamp
    ///  between 2018-10-02 UTC (inclusive) and the current time. If not specified,
    ///  the current time will be used. Due to delays in resource data collection
    ///  and indexing, there is a volatile window during which running the same
    ///  query may get different results.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.ExportAssetsRequest.read_time)
    pub read_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  A list of asset types of which to take a snapshot for. For example:
    ///  "compute.googleapis.com/Disk". If specified, only matching assets will be
    ///  returned. See [Introduction to Cloud Asset
    ///  Inventory](https://cloud.google.com/asset-inventory/docs/overview)
    ///  for all supported asset types.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.ExportAssetsRequest.asset_types)
    pub asset_types: ::std::vec::Vec<::std::string::String>,
    ///  Asset content type. If not specified, no content but the asset name will be
    ///  returned.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.ExportAssetsRequest.content_type)
    pub content_type: ::protobuf::EnumOrUnknown<ContentType>,
    ///  Required. Output configuration indicating where the results will be output
    ///  to. All results will be in newline delimited JSON format.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.ExportAssetsRequest.output_config)
    pub output_config: ::protobuf::MessageField<OutputConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.ExportAssetsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExportAssetsRequest {
    fn default() -> &'a ExportAssetsRequest {
        <ExportAssetsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExportAssetsRequest {
    pub fn new() -> ExportAssetsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &ExportAssetsRequest| { &m.parent },
            |m: &mut ExportAssetsRequest| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "read_time",
            |m: &ExportAssetsRequest| { &m.read_time },
            |m: &mut ExportAssetsRequest| { &mut m.read_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "asset_types",
            |m: &ExportAssetsRequest| { &m.asset_types },
            |m: &mut ExportAssetsRequest| { &mut m.asset_types },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_type",
            |m: &ExportAssetsRequest| { &m.content_type },
            |m: &mut ExportAssetsRequest| { &mut m.content_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OutputConfig>(
            "output_config",
            |m: &ExportAssetsRequest| { &m.output_config },
            |m: &mut ExportAssetsRequest| { &mut m.output_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExportAssetsRequest>(
            "ExportAssetsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExportAssetsRequest {
    const NAME: &'static str = "ExportAssetsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.read_time)?;
                },
                26 => {
                    self.asset_types.push(is.read_string()?);
                },
                32 => {
                    self.content_type = is.read_enum_or_unknown()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.output_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if let Some(v) = self.read_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.asset_types {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.content_type != ::protobuf::EnumOrUnknown::new(ContentType::CONTENT_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.content_type.value());
        }
        if let Some(v) = self.output_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if let Some(v) = self.read_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.asset_types {
            os.write_string(3, &v)?;
        };
        if self.content_type != ::protobuf::EnumOrUnknown::new(ContentType::CONTENT_TYPE_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.content_type))?;
        }
        if let Some(v) = self.output_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExportAssetsRequest {
        ExportAssetsRequest::new()
    }

    fn clear(&mut self) {
        self.parent.clear();
        self.read_time.clear();
        self.asset_types.clear();
        self.content_type = ::protobuf::EnumOrUnknown::new(ContentType::CONTENT_TYPE_UNSPECIFIED);
        self.output_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExportAssetsRequest {
        static instance: ExportAssetsRequest = ExportAssetsRequest {
            parent: ::std::string::String::new(),
            read_time: ::protobuf::MessageField::none(),
            asset_types: ::std::vec::Vec::new(),
            content_type: ::protobuf::EnumOrUnknown::from_i32(0),
            output_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExportAssetsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExportAssetsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExportAssetsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExportAssetsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The export asset response. This message is returned by the
///  [google.longrunning.Operations.GetOperation][google.longrunning.Operations.GetOperation] method in the returned
///  [google.longrunning.Operation.response][google.longrunning.Operation.response] field.
// @@protoc_insertion_point(message:google.cloud.asset.v1.ExportAssetsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExportAssetsResponse {
    // message fields
    ///  Time the snapshot was taken.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.ExportAssetsResponse.read_time)
    pub read_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Output configuration indicating where the results were output to.
    ///  All results are in JSON format.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.ExportAssetsResponse.output_config)
    pub output_config: ::protobuf::MessageField<OutputConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.ExportAssetsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExportAssetsResponse {
    fn default() -> &'a ExportAssetsResponse {
        <ExportAssetsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExportAssetsResponse {
    pub fn new() -> ExportAssetsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "read_time",
            |m: &ExportAssetsResponse| { &m.read_time },
            |m: &mut ExportAssetsResponse| { &mut m.read_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OutputConfig>(
            "output_config",
            |m: &ExportAssetsResponse| { &m.output_config },
            |m: &mut ExportAssetsResponse| { &mut m.output_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExportAssetsResponse>(
            "ExportAssetsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExportAssetsResponse {
    const NAME: &'static str = "ExportAssetsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.read_time)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.output_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.read_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.output_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.read_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.output_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExportAssetsResponse {
        ExportAssetsResponse::new()
    }

    fn clear(&mut self) {
        self.read_time.clear();
        self.output_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExportAssetsResponse {
        static instance: ExportAssetsResponse = ExportAssetsResponse {
            read_time: ::protobuf::MessageField::none(),
            output_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExportAssetsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExportAssetsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExportAssetsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExportAssetsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Batch get assets history request.
// @@protoc_insertion_point(message:google.cloud.asset.v1.BatchGetAssetsHistoryRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchGetAssetsHistoryRequest {
    // message fields
    ///  Required. The relative name of the root asset. It can only be an
    ///  organization number (such as "organizations/123"), a project ID (such as
    ///  "projects/my-project-id")", or a project number (such as "projects/12345").
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BatchGetAssetsHistoryRequest.parent)
    pub parent: ::std::string::String,
    ///  A list of the full names of the assets. For example:
    ///  `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
    ///  See [Resource
    ///  Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
    ///  and [Resource Name
    ///  Format](https://cloud.google.com/asset-inventory/docs/resource-name-format)
    ///  for more info.
    ///
    ///  The request becomes a no-op if the asset name list is empty, and the max
    ///  size of the asset name list is 100 in one request.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BatchGetAssetsHistoryRequest.asset_names)
    pub asset_names: ::std::vec::Vec<::std::string::String>,
    ///  Optional. The content type.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BatchGetAssetsHistoryRequest.content_type)
    pub content_type: ::protobuf::EnumOrUnknown<ContentType>,
    ///  Optional. The time window for the asset history. Both start_time and
    ///  end_time are optional and if set, it must be after 2018-10-02 UTC. If
    ///  end_time is not set, it is default to current timestamp. If start_time is
    ///  not set, the snapshot of the assets at end_time will be returned. The
    ///  returned results contain all temporal assets whose time window overlap with
    ///  read_time_window.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BatchGetAssetsHistoryRequest.read_time_window)
    pub read_time_window: ::protobuf::MessageField<super::assets::TimeWindow>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.BatchGetAssetsHistoryRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchGetAssetsHistoryRequest {
    fn default() -> &'a BatchGetAssetsHistoryRequest {
        <BatchGetAssetsHistoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchGetAssetsHistoryRequest {
    pub fn new() -> BatchGetAssetsHistoryRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &BatchGetAssetsHistoryRequest| { &m.parent },
            |m: &mut BatchGetAssetsHistoryRequest| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "asset_names",
            |m: &BatchGetAssetsHistoryRequest| { &m.asset_names },
            |m: &mut BatchGetAssetsHistoryRequest| { &mut m.asset_names },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_type",
            |m: &BatchGetAssetsHistoryRequest| { &m.content_type },
            |m: &mut BatchGetAssetsHistoryRequest| { &mut m.content_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::assets::TimeWindow>(
            "read_time_window",
            |m: &BatchGetAssetsHistoryRequest| { &m.read_time_window },
            |m: &mut BatchGetAssetsHistoryRequest| { &mut m.read_time_window },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchGetAssetsHistoryRequest>(
            "BatchGetAssetsHistoryRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchGetAssetsHistoryRequest {
    const NAME: &'static str = "BatchGetAssetsHistoryRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent = is.read_string()?;
                },
                18 => {
                    self.asset_names.push(is.read_string()?);
                },
                24 => {
                    self.content_type = is.read_enum_or_unknown()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.read_time_window)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        for value in &self.asset_names {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if self.content_type != ::protobuf::EnumOrUnknown::new(ContentType::CONTENT_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.content_type.value());
        }
        if let Some(v) = self.read_time_window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        for v in &self.asset_names {
            os.write_string(2, &v)?;
        };
        if self.content_type != ::protobuf::EnumOrUnknown::new(ContentType::CONTENT_TYPE_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.content_type))?;
        }
        if let Some(v) = self.read_time_window.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchGetAssetsHistoryRequest {
        BatchGetAssetsHistoryRequest::new()
    }

    fn clear(&mut self) {
        self.parent.clear();
        self.asset_names.clear();
        self.content_type = ::protobuf::EnumOrUnknown::new(ContentType::CONTENT_TYPE_UNSPECIFIED);
        self.read_time_window.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchGetAssetsHistoryRequest {
        static instance: BatchGetAssetsHistoryRequest = BatchGetAssetsHistoryRequest {
            parent: ::std::string::String::new(),
            asset_names: ::std::vec::Vec::new(),
            content_type: ::protobuf::EnumOrUnknown::from_i32(0),
            read_time_window: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchGetAssetsHistoryRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchGetAssetsHistoryRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchGetAssetsHistoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchGetAssetsHistoryRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Batch get assets history response.
// @@protoc_insertion_point(message:google.cloud.asset.v1.BatchGetAssetsHistoryResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchGetAssetsHistoryResponse {
    // message fields
    ///  A list of assets with valid time windows.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BatchGetAssetsHistoryResponse.assets)
    pub assets: ::std::vec::Vec<super::assets::TemporalAsset>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.BatchGetAssetsHistoryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchGetAssetsHistoryResponse {
    fn default() -> &'a BatchGetAssetsHistoryResponse {
        <BatchGetAssetsHistoryResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchGetAssetsHistoryResponse {
    pub fn new() -> BatchGetAssetsHistoryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "assets",
            |m: &BatchGetAssetsHistoryResponse| { &m.assets },
            |m: &mut BatchGetAssetsHistoryResponse| { &mut m.assets },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchGetAssetsHistoryResponse>(
            "BatchGetAssetsHistoryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchGetAssetsHistoryResponse {
    const NAME: &'static str = "BatchGetAssetsHistoryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.assets.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.assets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.assets {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchGetAssetsHistoryResponse {
        BatchGetAssetsHistoryResponse::new()
    }

    fn clear(&mut self) {
        self.assets.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchGetAssetsHistoryResponse {
        static instance: BatchGetAssetsHistoryResponse = BatchGetAssetsHistoryResponse {
            assets: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchGetAssetsHistoryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchGetAssetsHistoryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchGetAssetsHistoryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchGetAssetsHistoryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Output configuration for export assets destination.
// @@protoc_insertion_point(message:google.cloud.asset.v1.OutputConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OutputConfig {
    // message oneof groups
    pub destination: ::std::option::Option<output_config::Destination>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.OutputConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OutputConfig {
    fn default() -> &'a OutputConfig {
        <OutputConfig as ::protobuf::Message>::default_instance()
    }
}

impl OutputConfig {
    pub fn new() -> OutputConfig {
        ::std::default::Default::default()
    }

    // .google.cloud.asset.v1.GcsDestination gcs_destination = 1;

    pub fn gcs_destination(&self) -> &GcsDestination {
        match self.destination {
            ::std::option::Option::Some(output_config::Destination::GcsDestination(ref v)) => v,
            _ => <GcsDestination as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gcs_destination(&mut self) {
        self.destination = ::std::option::Option::None;
    }

    pub fn has_gcs_destination(&self) -> bool {
        match self.destination {
            ::std::option::Option::Some(output_config::Destination::GcsDestination(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gcs_destination(&mut self, v: GcsDestination) {
        self.destination = ::std::option::Option::Some(output_config::Destination::GcsDestination(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gcs_destination(&mut self) -> &mut GcsDestination {
        if let ::std::option::Option::Some(output_config::Destination::GcsDestination(_)) = self.destination {
        } else {
            self.destination = ::std::option::Option::Some(output_config::Destination::GcsDestination(GcsDestination::new()));
        }
        match self.destination {
            ::std::option::Option::Some(output_config::Destination::GcsDestination(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gcs_destination(&mut self) -> GcsDestination {
        if self.has_gcs_destination() {
            match self.destination.take() {
                ::std::option::Option::Some(output_config::Destination::GcsDestination(v)) => v,
                _ => panic!(),
            }
        } else {
            GcsDestination::new()
        }
    }

    // .google.cloud.asset.v1.BigQueryDestination bigquery_destination = 2;

    pub fn bigquery_destination(&self) -> &BigQueryDestination {
        match self.destination {
            ::std::option::Option::Some(output_config::Destination::BigqueryDestination(ref v)) => v,
            _ => <BigQueryDestination as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bigquery_destination(&mut self) {
        self.destination = ::std::option::Option::None;
    }

    pub fn has_bigquery_destination(&self) -> bool {
        match self.destination {
            ::std::option::Option::Some(output_config::Destination::BigqueryDestination(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bigquery_destination(&mut self, v: BigQueryDestination) {
        self.destination = ::std::option::Option::Some(output_config::Destination::BigqueryDestination(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bigquery_destination(&mut self) -> &mut BigQueryDestination {
        if let ::std::option::Option::Some(output_config::Destination::BigqueryDestination(_)) = self.destination {
        } else {
            self.destination = ::std::option::Option::Some(output_config::Destination::BigqueryDestination(BigQueryDestination::new()));
        }
        match self.destination {
            ::std::option::Option::Some(output_config::Destination::BigqueryDestination(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bigquery_destination(&mut self) -> BigQueryDestination {
        if self.has_bigquery_destination() {
            match self.destination.take() {
                ::std::option::Option::Some(output_config::Destination::BigqueryDestination(v)) => v,
                _ => panic!(),
            }
        } else {
            BigQueryDestination::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GcsDestination>(
            "gcs_destination",
            OutputConfig::has_gcs_destination,
            OutputConfig::gcs_destination,
            OutputConfig::mut_gcs_destination,
            OutputConfig::set_gcs_destination,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BigQueryDestination>(
            "bigquery_destination",
            OutputConfig::has_bigquery_destination,
            OutputConfig::bigquery_destination,
            OutputConfig::mut_bigquery_destination,
            OutputConfig::set_bigquery_destination,
        ));
        oneofs.push(output_config::Destination::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OutputConfig>(
            "OutputConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OutputConfig {
    const NAME: &'static str = "OutputConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.destination = ::std::option::Option::Some(output_config::Destination::GcsDestination(is.read_message()?));
                },
                18 => {
                    self.destination = ::std::option::Option::Some(output_config::Destination::BigqueryDestination(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.destination {
            match v {
                &output_config::Destination::GcsDestination(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &output_config::Destination::BigqueryDestination(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.destination {
            match v {
                &output_config::Destination::GcsDestination(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &output_config::Destination::BigqueryDestination(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OutputConfig {
        OutputConfig::new()
    }

    fn clear(&mut self) {
        self.destination = ::std::option::Option::None;
        self.destination = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OutputConfig {
        static instance: OutputConfig = OutputConfig {
            destination: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OutputConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OutputConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OutputConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OutputConfig`
pub mod output_config {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.cloud.asset.v1.OutputConfig.destination)
    pub enum Destination {
        // @@protoc_insertion_point(oneof_field:google.cloud.asset.v1.OutputConfig.gcs_destination)
        GcsDestination(super::GcsDestination),
        // @@protoc_insertion_point(oneof_field:google.cloud.asset.v1.OutputConfig.bigquery_destination)
        BigqueryDestination(super::BigQueryDestination),
    }

    impl ::protobuf::Oneof for Destination {
    }

    impl ::protobuf::OneofFull for Destination {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OutputConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("destination").unwrap()).clone()
        }
    }

    impl Destination {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Destination>("destination")
        }
    }
}

///  A Cloud Storage location.
// @@protoc_insertion_point(message:google.cloud.asset.v1.GcsDestination)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GcsDestination {
    // message oneof groups
    pub object_uri: ::std::option::Option<gcs_destination::Object_uri>,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.GcsDestination.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GcsDestination {
    fn default() -> &'a GcsDestination {
        <GcsDestination as ::protobuf::Message>::default_instance()
    }
}

impl GcsDestination {
    pub fn new() -> GcsDestination {
        ::std::default::Default::default()
    }

    // string uri = 1;

    pub fn uri(&self) -> &str {
        match self.object_uri {
            ::std::option::Option::Some(gcs_destination::Object_uri::Uri(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_uri(&mut self) {
        self.object_uri = ::std::option::Option::None;
    }

    pub fn has_uri(&self) -> bool {
        match self.object_uri {
            ::std::option::Option::Some(gcs_destination::Object_uri::Uri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.object_uri = ::std::option::Option::Some(gcs_destination::Object_uri::Uri(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(gcs_destination::Object_uri::Uri(_)) = self.object_uri {
        } else {
            self.object_uri = ::std::option::Option::Some(gcs_destination::Object_uri::Uri(::std::string::String::new()));
        }
        match self.object_uri {
            ::std::option::Option::Some(gcs_destination::Object_uri::Uri(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        if self.has_uri() {
            match self.object_uri.take() {
                ::std::option::Option::Some(gcs_destination::Object_uri::Uri(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string uri_prefix = 2;

    pub fn uri_prefix(&self) -> &str {
        match self.object_uri {
            ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_uri_prefix(&mut self) {
        self.object_uri = ::std::option::Option::None;
    }

    pub fn has_uri_prefix(&self) -> bool {
        match self.object_uri {
            ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri_prefix(&mut self, v: ::std::string::String) {
        self.object_uri = ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uri_prefix(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(_)) = self.object_uri {
        } else {
            self.object_uri = ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(::std::string::String::new()));
        }
        match self.object_uri {
            ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uri_prefix(&mut self) -> ::std::string::String {
        if self.has_uri_prefix() {
            match self.object_uri.take() {
                ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "uri",
            GcsDestination::has_uri,
            GcsDestination::uri,
            GcsDestination::set_uri,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "uri_prefix",
            GcsDestination::has_uri_prefix,
            GcsDestination::uri_prefix,
            GcsDestination::set_uri_prefix,
        ));
        oneofs.push(gcs_destination::Object_uri::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GcsDestination>(
            "GcsDestination",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GcsDestination {
    const NAME: &'static str = "GcsDestination";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.object_uri = ::std::option::Option::Some(gcs_destination::Object_uri::Uri(is.read_string()?));
                },
                18 => {
                    self.object_uri = ::std::option::Option::Some(gcs_destination::Object_uri::UriPrefix(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.object_uri {
            match v {
                &gcs_destination::Object_uri::Uri(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &gcs_destination::Object_uri::UriPrefix(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.object_uri {
            match v {
                &gcs_destination::Object_uri::Uri(ref v) => {
                    os.write_string(1, v)?;
                },
                &gcs_destination::Object_uri::UriPrefix(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GcsDestination {
        GcsDestination::new()
    }

    fn clear(&mut self) {
        self.object_uri = ::std::option::Option::None;
        self.object_uri = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GcsDestination {
        static instance: GcsDestination = GcsDestination {
            object_uri: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GcsDestination {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GcsDestination").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GcsDestination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcsDestination {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GcsDestination`
pub mod gcs_destination {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.cloud.asset.v1.GcsDestination.object_uri)
    pub enum Object_uri {
        // @@protoc_insertion_point(oneof_field:google.cloud.asset.v1.GcsDestination.uri)
        Uri(::std::string::String),
        // @@protoc_insertion_point(oneof_field:google.cloud.asset.v1.GcsDestination.uri_prefix)
        UriPrefix(::std::string::String),
    }

    impl ::protobuf::Oneof for Object_uri {
    }

    impl ::protobuf::OneofFull for Object_uri {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GcsDestination as ::protobuf::MessageFull>::descriptor().oneof_by_name("object_uri").unwrap()).clone()
        }
    }

    impl Object_uri {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Object_uri>("object_uri")
        }
    }
}

///  A BigQuery destination.
// @@protoc_insertion_point(message:google.cloud.asset.v1.BigQueryDestination)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BigQueryDestination {
    // message fields
    ///  Required. The BigQuery dataset in format
    ///  "projects/projectId/datasets/datasetId", to which the snapshot result
    ///  should be exported. If this dataset does not exist, the export call returns
    ///  an error.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BigQueryDestination.dataset)
    pub dataset: ::std::string::String,
    ///  Required. The BigQuery table to which the snapshot result should be
    ///  written. If this table does not exist, a new table with the given name
    ///  will be created.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BigQueryDestination.table)
    pub table: ::std::string::String,
    ///  If the destination table already exists and this flag is `TRUE`, the
    ///  table will be overwritten by the contents of assets snapshot. If the flag
    ///  is not set and the destination table already exists, the export call
    ///  returns an error.
    // @@protoc_insertion_point(field:google.cloud.asset.v1.BigQueryDestination.force)
    pub force: bool,
    // special fields
    // @@protoc_insertion_point(special_field:google.cloud.asset.v1.BigQueryDestination.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BigQueryDestination {
    fn default() -> &'a BigQueryDestination {
        <BigQueryDestination as ::protobuf::Message>::default_instance()
    }
}

impl BigQueryDestination {
    pub fn new() -> BigQueryDestination {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dataset",
            |m: &BigQueryDestination| { &m.dataset },
            |m: &mut BigQueryDestination| { &mut m.dataset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table",
            |m: &BigQueryDestination| { &m.table },
            |m: &mut BigQueryDestination| { &mut m.table },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "force",
            |m: &BigQueryDestination| { &m.force },
            |m: &mut BigQueryDestination| { &mut m.force },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BigQueryDestination>(
            "BigQueryDestination",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BigQueryDestination {
    const NAME: &'static str = "BigQueryDestination";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dataset = is.read_string()?;
                },
                18 => {
                    self.table = is.read_string()?;
                },
                24 => {
                    self.force = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.dataset.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dataset);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.table);
        }
        if self.force != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.dataset.is_empty() {
            os.write_string(1, &self.dataset)?;
        }
        if !self.table.is_empty() {
            os.write_string(2, &self.table)?;
        }
        if self.force != false {
            os.write_bool(3, self.force)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BigQueryDestination {
        BigQueryDestination::new()
    }

    fn clear(&mut self) {
        self.dataset.clear();
        self.table.clear();
        self.force = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BigQueryDestination {
        static instance: BigQueryDestination = BigQueryDestination {
            dataset: ::std::string::String::new(),
            table: ::std::string::String::new(),
            force: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BigQueryDestination {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BigQueryDestination").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BigQueryDestination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BigQueryDestination {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Asset content type.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.cloud.asset.v1.ContentType)
pub enum ContentType {
    // @@protoc_insertion_point(enum_value:google.cloud.asset.v1.ContentType.CONTENT_TYPE_UNSPECIFIED)
    CONTENT_TYPE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:google.cloud.asset.v1.ContentType.RESOURCE)
    RESOURCE = 1,
    // @@protoc_insertion_point(enum_value:google.cloud.asset.v1.ContentType.IAM_POLICY)
    IAM_POLICY = 2,
    // @@protoc_insertion_point(enum_value:google.cloud.asset.v1.ContentType.ORG_POLICY)
    ORG_POLICY = 4,
    // @@protoc_insertion_point(enum_value:google.cloud.asset.v1.ContentType.ACCESS_POLICY)
    ACCESS_POLICY = 5,
}

impl ::protobuf::Enum for ContentType {
    const NAME: &'static str = "ContentType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ContentType> {
        match value {
            0 => ::std::option::Option::Some(ContentType::CONTENT_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ContentType::RESOURCE),
            2 => ::std::option::Option::Some(ContentType::IAM_POLICY),
            4 => ::std::option::Option::Some(ContentType::ORG_POLICY),
            5 => ::std::option::Option::Some(ContentType::ACCESS_POLICY),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ContentType> {
        match str {
            "CONTENT_TYPE_UNSPECIFIED" => ::std::option::Option::Some(ContentType::CONTENT_TYPE_UNSPECIFIED),
            "RESOURCE" => ::std::option::Option::Some(ContentType::RESOURCE),
            "IAM_POLICY" => ::std::option::Option::Some(ContentType::IAM_POLICY),
            "ORG_POLICY" => ::std::option::Option::Some(ContentType::ORG_POLICY),
            "ACCESS_POLICY" => ::std::option::Option::Some(ContentType::ACCESS_POLICY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ContentType] = &[
        ContentType::CONTENT_TYPE_UNSPECIFIED,
        ContentType::RESOURCE,
        ContentType::IAM_POLICY,
        ContentType::ORG_POLICY,
        ContentType::ACCESS_POLICY,
    ];
}

impl ::protobuf::EnumFull for ContentType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ContentType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ContentType::CONTENT_TYPE_UNSPECIFIED => 0,
            ContentType::RESOURCE => 1,
            ContentType::IAM_POLICY => 2,
            ContentType::ORG_POLICY => 3,
            ContentType::ACCESS_POLICY => 4,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ContentType {
    fn default() -> Self {
        ContentType::CONTENT_TYPE_UNSPECIFIED
    }
}

impl ContentType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ContentType>("ContentType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)google/cloud/asset/v1/asset_service.proto\x12\x15google.cloud.asset.v\
    1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\
    \x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\
    \"google/cloud/asset/v1/assets.proto\x1a#google/longrunning/operations.p\
    roto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x20google/protobuf/field_mas\
    k.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc6\x02\n\x13ExportAsse\
    tsRequest\x12?\n\x06parent\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\x12\x1f\
    cloudasset.googleapis.com/Asset\xe0A\x02\x127\n\tread_time\x18\x02\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x08readTime\x12\x1f\n\x0basset\
    _types\x18\x03\x20\x03(\tR\nassetTypes\x12E\n\x0ccontent_type\x18\x04\
    \x20\x01(\x0e2\".google.cloud.asset.v1.ContentTypeR\x0bcontentType\x12M\
    \n\routput_config\x18\x05\x20\x01(\x0b2#.google.cloud.asset.v1.OutputCon\
    figR\x0coutputConfigB\x03\xe0A\x02\"\x99\x01\n\x14ExportAssetsResponse\
    \x127\n\tread_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x08readTime\x12H\n\routput_config\x18\x02\x20\x01(\x0b2#.google.cloud.a\
    sset.v1.OutputConfigR\x0coutputConfig\"\x9e\x02\n\x1cBatchGetAssetsHisto\
    ryRequest\x12?\n\x06parent\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\x12\x1f\
    cloudasset.googleapis.com/Asset\xe0A\x02\x12\x1f\n\x0basset_names\x18\
    \x02\x20\x03(\tR\nassetNames\x12J\n\x0ccontent_type\x18\x03\x20\x01(\x0e\
    2\".google.cloud.asset.v1.ContentTypeR\x0bcontentTypeB\x03\xe0A\x01\x12P\
    \n\x10read_time_window\x18\x04\x20\x01(\x0b2!.google.cloud.asset.v1.Time\
    WindowR\x0ereadTimeWindowB\x03\xe0A\x01\"]\n\x1dBatchGetAssetsHistoryRes\
    ponse\x12<\n\x06assets\x18\x01\x20\x03(\x0b2$.google.cloud.asset.v1.Temp\
    oralAssetR\x06assets\"\xd0\x01\n\x0cOutputConfig\x12P\n\x0fgcs_destinati\
    on\x18\x01\x20\x01(\x0b2%.google.cloud.asset.v1.GcsDestinationH\0R\x0egc\
    sDestination\x12_\n\x14bigquery_destination\x18\x02\x20\x01(\x0b2*.googl\
    e.cloud.asset.v1.BigQueryDestinationH\0R\x13bigqueryDestinationB\r\n\x0b\
    destination\"S\n\x0eGcsDestination\x12\x12\n\x03uri\x18\x01\x20\x01(\tH\
    \0R\x03uri\x12\x1f\n\nuri_prefix\x18\x02\x20\x01(\tH\0R\turiPrefixB\x0c\
    \n\nobject_uri\"e\n\x13BigQueryDestination\x12\x1d\n\x07dataset\x18\x01\
    \x20\x01(\tR\x07datasetB\x03\xe0A\x02\x12\x19\n\x05table\x18\x02\x20\x01\
    (\tR\x05tableB\x03\xe0A\x02\x12\x14\n\x05force\x18\x03\x20\x01(\x08R\x05\
    force*l\n\x0bContentType\x12\x1c\n\x18CONTENT_TYPE_UNSPECIFIED\x10\0\x12\
    \x0c\n\x08RESOURCE\x10\x01\x12\x0e\n\nIAM_POLICY\x10\x02\x12\x0e\n\nORG_\
    POLICY\x10\x04\x12\x11\n\rACCESS_POLICY\x10\x052\xf3\x03\n\x0cAssetServi\
    ce\x12\xde\x01\n\x0cExportAssets\x12*.google.cloud.asset.v1.ExportAssets\
    Request\x1a\x1d.google.longrunning.Operation\"\x82\x01\xcaAW\n*google.cl\
    oud.asset.v1.ExportAssetsResponse\x12)google.cloud.asset.v1.ExportAssets\
    Request\x82\xd3\xe4\x93\x02\"\"\x1d/v1/{parent=*/*}:exportAssets:\x01*\
    \x12\xb2\x01\n\x15BatchGetAssetsHistory\x123.google.cloud.asset.v1.Batch\
    GetAssetsHistoryRequest\x1a4.google.cloud.asset.v1.BatchGetAssetsHistory\
    Response\".\x82\xd3\xe4\x93\x02(\x12&/v1/{parent=*/*}:batchGetAssetsHist\
    ory\x1aM\xd2A.https://www.googleapis.com/auth/cloud-platform\xcaA\x19clo\
    udasset.googleapis.comB\x9c\x01\n\x19com.google.cloud.asset.v1B\x11Asset\
    ServiceProtoP\x01Z:google.golang.org/genproto/googleapis/cloud/asset/v1;\
    asset\xaa\x02\x15Google.Cloud.Asset.V1\xca\x02\x15Google\\Cloud\\Asset\\\
    V1J\xf7B\n\x07\x12\x05\x0f\0\xeb\x01\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\
    \0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\
    \x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"Li\
    cense\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\
    \x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\
    \x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www\
    .apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20appl\
    icable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20d\
    istributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITION\
    S\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\
    \x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\
    \x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\
    \n\x08\n\x01\x02\x12\x03\x11\0\x1e\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\
    \x02\x03\x01\x12\x03\x14\0!\n\t\n\x02\x03\x02\x12\x03\x15\0)\n\t\n\x02\
    \x03\x03\x12\x03\x16\0#\n\t\n\x02\x03\x04\x12\x03\x17\0,\n\t\n\x02\x03\
    \x05\x12\x03\x18\0-\n\t\n\x02\x03\x06\x12\x03\x19\0%\n\t\n\x02\x03\x07\
    \x12\x03\x1a\0*\n\t\n\x02\x03\x08\x12\x03\x1b\0)\n\x08\n\x01\x08\x12\x03\
    \x1d\02\n\t\n\x02\x08%\x12\x03\x1d\02\n\x08\n\x01\x08\x12\x03\x1e\0Q\n\t\
    \n\x02\x08\x0b\x12\x03\x1e\0Q\n\x08\n\x01\x08\x12\x03\x1f\0\"\n\t\n\x02\
    \x08\n\x12\x03\x1f\0\"\n\x08\n\x01\x08\x12\x03\x20\02\n\t\n\x02\x08\x08\
    \x12\x03\x20\02\n\x08\n\x01\x08\x12\x03!\02\n\t\n\x02\x08\x01\x12\x03!\0\
    2\n\x08\n\x01\x08\x12\x03\"\02\n\t\n\x02\x08)\x12\x03\"\02\n'\n\x02\x06\
    \0\x12\x04%\0D\x01\x1a\x1b\x20Asset\x20service\x20definition.\n\n\n\n\
    \x03\x06\0\x01\x12\x03%\x08\x14\n\n\n\x03\x06\0\x03\x12\x03&\x02A\n\x0c\
    \n\x05\x06\0\x03\x99\x08\x12\x03&\x02A\n\n\n\x03\x06\0\x03\x12\x03'\x02V\
    \n\x0c\n\x05\x06\0\x03\x9a\x08\x12\x03'\x02V\n\x92\x02\n\x04\x06\0\x02\0\
    \x12\x04-\x026\x03\x1a\x83\x02\x20Exports\x20assets\x20with\x20time\x20a\
    nd\x20resource\x20types\x20to\x20a\x20given\x20Cloud\x20Storage\n\x20loc\
    ation.\x20The\x20output\x20format\x20is\x20newline-delimited\x20JSON.\n\
    \x20This\x20API\x20implements\x20the\x20[google.longrunning.Operation][g\
    oogle.longrunning.Operation]\x20API\x20allowing\x20you\n\x20to\x20keep\
    \x20track\x20of\x20the\x20export.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03-\
    \x06\x12\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03-\x13&\n\x0c\n\x05\x06\0\x02\
    \0\x03\x12\x03-1M\n\r\n\x05\x06\0\x02\0\x04\x12\x04.\x041\x06\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04.\x041\x06\n\r\n\x05\x06\0\x02\0\
    \x04\x12\x042\x045\x06\n\x0f\n\x07\x06\0\x02\0\x04\x99\x08\x12\x042\x045\
    \x06\n\x9f\x03\n\x04\x06\0\x02\x01\x12\x04?\x02C\x03\x1a\x90\x03\x20Batc\
    h\x20gets\x20the\x20update\x20history\x20of\x20assets\x20that\x20overlap\
    \x20a\x20time\x20window.\n\x20For\x20RESOURCE\x20content,\x20this\x20API\
    \x20outputs\x20history\x20with\x20asset\x20in\x20both\n\x20non-delete\
    \x20or\x20deleted\x20status.\n\x20For\x20IAM_POLICY\x20content,\x20this\
    \x20API\x20outputs\x20history\x20when\x20the\x20asset\x20and\x20its\n\
    \x20attached\x20IAM\x20POLICY\x20both\x20exist.\x20This\x20can\x20create\
    \x20gaps\x20in\x20the\x20output\x20history.\n\x20If\x20a\x20specified\
    \x20asset\x20does\x20not\x20exist,\x20this\x20API\x20returns\x20an\x20IN\
    VALID_ARGUMENT\n\x20error.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03?\x06\
    \x1b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03?\x1c8\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03?C`\n\r\n\x05\x06\0\x02\x01\x04\x12\x04@\x04B\x06\n\x11\
    \n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04@\x04B\x06\n#\n\x02\x04\0\
    \x12\x04G\0h\x01\x1a\x17\x20Export\x20asset\x20request.\n\n\n\n\x03\x04\
    \0\x01\x12\x03G\x08\x1b\n\x96\x02\n\x04\x04\0\x02\0\x12\x04L\x02Q\x04\
    \x1a\x87\x02\x20Required.\x20The\x20relative\x20name\x20of\x20the\x20roo\
    t\x20asset.\x20This\x20can\x20only\x20be\x20an\n\x20organization\x20numb\
    er\x20(such\x20as\x20\"organizations/123\"),\x20a\x20project\x20ID\x20(s\
    uch\x20as\n\x20\"projects/my-project-id\"),\x20or\x20a\x20project\x20num\
    ber\x20(such\x20as\x20\"projects/12345\"),\n\x20or\x20a\x20folder\x20num\
    ber\x20(such\x20as\x20\"folders/123\").\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03L\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03L\t\x0f\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03L\x12\x13\n\r\n\x05\x04\0\x02\0\x08\x12\x04L\x14\
    Q\x03\n\x0f\n\x08\x04\0\x02\0\x08\x9c\x08\0\x12\x03M\x04*\n\x0f\n\x07\
    \x04\0\x02\0\x08\x9f\x08\x12\x04N\x04P\x05\n\xd8\x02\n\x04\x04\0\x02\x01\
    \x12\x03X\x02*\x1a\xca\x02\x20Timestamp\x20to\x20take\x20an\x20asset\x20\
    snapshot.\x20This\x20can\x20only\x20be\x20set\x20to\x20a\x20timestamp\n\
    \x20between\x202018-10-02\x20UTC\x20(inclusive)\x20and\x20the\x20current\
    \x20time.\x20If\x20not\x20specified,\n\x20the\x20current\x20time\x20will\
    \x20be\x20used.\x20Due\x20to\x20delays\x20in\x20resource\x20data\x20coll\
    ection\n\x20and\x20indexing,\x20there\x20is\x20a\x20volatile\x20window\
    \x20during\x20which\x20running\x20the\x20same\n\x20query\x20may\x20get\
    \x20different\x20results.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03X\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03X\x1c%\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03X()\n\xae\x02\n\x04\x04\0\x02\x02\x12\x03_\x02\"\x1a\xa0\
    \x02\x20A\x20list\x20of\x20asset\x20types\x20of\x20which\x20to\x20take\
    \x20a\x20snapshot\x20for.\x20For\x20example:\n\x20\"compute.googleapis.c\
    om/Disk\".\x20If\x20specified,\x20only\x20matching\x20assets\x20will\x20\
    be\n\x20returned.\x20See\x20[Introduction\x20to\x20Cloud\x20Asset\n\x20I\
    nventory](https://cloud.google.com/asset-inventory/docs/overview)\n\x20f\
    or\x20all\x20supported\x20asset\x20types.\n\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03_\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03_\x0b\x11\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03_\x12\x1d\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03_\x20!\ne\n\x04\x04\0\x02\x03\x12\x03c\x02\x1f\x1aX\x20Asset\x20\
    content\x20type.\x20If\x20not\x20specified,\x20no\x20content\x20but\x20t\
    he\x20asset\x20name\x20will\x20be\n\x20returned.\n\n\x0c\n\x05\x04\0\x02\
    \x03\x06\x12\x03c\x02\r\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03c\x0e\x1a\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03c\x1d\x1e\n\x95\x01\n\x04\x04\0\x02\
    \x04\x12\x03g\x02J\x1a\x87\x01\x20Required.\x20Output\x20configuration\
    \x20indicating\x20where\x20the\x20results\x20will\x20be\x20output\n\x20t\
    o.\x20All\x20results\x20will\x20be\x20in\x20newline\x20delimited\x20JSON\
    \x20format.\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03g\x02\x0e\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03g\x0f\x1c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03g\x1f\x20\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03g!I\n\x0f\n\x08\x04\0\
    \x02\x04\x08\x9c\x08\0\x12\x03g\"H\n\x91\x02\n\x02\x04\x01\x12\x04m\0t\
    \x01\x1a\x84\x02\x20The\x20export\x20asset\x20response.\x20This\x20messa\
    ge\x20is\x20returned\x20by\x20the\n\x20[google.longrunning.Operations.Ge\
    tOperation][google.longrunning.Operations.GetOperation]\x20method\x20in\
    \x20the\x20returned\n\x20[google.longrunning.Operation.response][google.\
    longrunning.Operation.response]\x20field.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03m\x08\x1c\n+\n\x04\x04\x01\x02\0\x12\x03o\x02*\x1a\x1e\x20Time\x20th\
    e\x20snapshot\x20was\x20taken.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03o\
    \x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03o\x1c%\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03o()\nq\n\x04\x04\x01\x02\x01\x12\x03s\x02!\x1ad\x20Out\
    put\x20configuration\x20indicating\x20where\x20the\x20results\x20were\
    \x20output\x20to.\n\x20All\x20results\x20are\x20in\x20JSON\x20format.\n\
    \n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03s\x02\x0e\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03s\x0f\x1c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03s\
    \x1f\x20\n0\n\x02\x04\x02\x12\x05w\0\x98\x01\x01\x1a#\x20Batch\x20get\
    \x20assets\x20history\x20request.\n\n\n\n\x03\x04\x02\x01\x12\x03w\x08$\
    \n\xe9\x01\n\x04\x04\x02\x02\0\x12\x05{\x02\x80\x01\x04\x1a\xd9\x01\x20R\
    equired.\x20The\x20relative\x20name\x20of\x20the\x20root\x20asset.\x20It\
    \x20can\x20only\x20be\x20an\n\x20organization\x20number\x20(such\x20as\
    \x20\"organizations/123\"),\x20a\x20project\x20ID\x20(such\x20as\n\x20\"\
    projects/my-project-id\")\",\x20or\x20a\x20project\x20number\x20(such\
    \x20as\x20\"projects/12345\").\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03{\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03{\t\x0f\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03{\x12\x13\n\x0e\n\x05\x04\x02\x02\0\x08\x12\x05{\
    \x14\x80\x01\x03\n\x0f\n\x08\x04\x02\x02\0\x08\x9c\x08\0\x12\x03|\x04*\n\
    \x0f\n\x07\x04\x02\x02\0\x08\x9f\x08\x12\x04}\x04\x7f\x05\n\xe9\x03\n\
    \x04\x04\x02\x02\x01\x12\x04\x8c\x01\x02\"\x1a\xda\x03\x20A\x20list\x20o\
    f\x20the\x20full\x20names\x20of\x20the\x20assets.\x20For\x20example:\n\
    \x20`//compute.googleapis.com/projects/my_project_123/zones/zone1/instan\
    ces/instance1`.\n\x20See\x20[Resource\n\x20Names](https://cloud.google.c\
    om/apis/design/resource_names#full_resource_name)\n\x20and\x20[Resource\
    \x20Name\n\x20Format](https://cloud.google.com/asset-inventory/docs/reso\
    urce-name-format)\n\x20for\x20more\x20info.\n\n\x20The\x20request\x20bec\
    omes\x20a\x20no-op\x20if\x20the\x20asset\x20name\x20list\x20is\x20empty,\
    \x20and\x20the\x20max\n\x20size\x20of\x20the\x20asset\x20name\x20list\
    \x20is\x20100\x20in\x20one\x20request.\n\n\r\n\x05\x04\x02\x02\x01\x04\
    \x12\x04\x8c\x01\x02\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\x8c\x01\x0b\
    \x11\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x8c\x01\x12\x1d\n\r\n\x05\x04\
    \x02\x02\x01\x03\x12\x04\x8c\x01\x20!\n+\n\x04\x04\x02\x02\x02\x12\x04\
    \x8f\x01\x02H\x1a\x1d\x20Optional.\x20The\x20content\x20type.\n\n\r\n\
    \x05\x04\x02\x02\x02\x06\x12\x04\x8f\x01\x02\r\n\r\n\x05\x04\x02\x02\x02\
    \x01\x12\x04\x8f\x01\x0e\x1a\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\x8f\
    \x01\x1d\x1e\n\r\n\x05\x04\x02\x02\x02\x08\x12\x04\x8f\x01\x1fG\n\x10\n\
    \x08\x04\x02\x02\x02\x08\x9c\x08\0\x12\x04\x8f\x01\x20F\n\x8e\x03\n\x04\
    \x04\x02\x02\x03\x12\x04\x97\x01\x02K\x1a\xff\x02\x20Optional.\x20The\
    \x20time\x20window\x20for\x20the\x20asset\x20history.\x20Both\x20start_t\
    ime\x20and\n\x20end_time\x20are\x20optional\x20and\x20if\x20set,\x20it\
    \x20must\x20be\x20after\x202018-10-02\x20UTC.\x20If\n\x20end_time\x20is\
    \x20not\x20set,\x20it\x20is\x20default\x20to\x20current\x20timestamp.\
    \x20If\x20start_time\x20is\n\x20not\x20set,\x20the\x20snapshot\x20of\x20\
    the\x20assets\x20at\x20end_time\x20will\x20be\x20returned.\x20The\n\x20r\
    eturned\x20results\x20contain\x20all\x20temporal\x20assets\x20whose\x20t\
    ime\x20window\x20overlap\x20with\n\x20read_time_window.\n\n\r\n\x05\x04\
    \x02\x02\x03\x06\x12\x04\x97\x01\x02\x0c\n\r\n\x05\x04\x02\x02\x03\x01\
    \x12\x04\x97\x01\r\x1d\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x97\x01\x20\
    !\n\r\n\x05\x04\x02\x02\x03\x08\x12\x04\x97\x01\"J\n\x10\n\x08\x04\x02\
    \x02\x03\x08\x9c\x08\0\x12\x04\x97\x01#I\n2\n\x02\x04\x03\x12\x06\x9b\
    \x01\0\x9e\x01\x01\x1a$\x20Batch\x20get\x20assets\x20history\x20response\
    .\n\n\x0b\n\x03\x04\x03\x01\x12\x04\x9b\x01\x08%\n9\n\x04\x04\x03\x02\0\
    \x12\x04\x9d\x01\x02$\x1a+\x20A\x20list\x20of\x20assets\x20with\x20valid\
    \x20time\x20windows.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x9d\x01\x02\n\
    \n\r\n\x05\x04\x03\x02\0\x06\x12\x04\x9d\x01\x0b\x18\n\r\n\x05\x04\x03\
    \x02\0\x01\x12\x04\x9d\x01\x19\x1f\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\
    \x9d\x01\"#\nC\n\x02\x04\x04\x12\x06\xa1\x01\0\xad\x01\x01\x1a5\x20Outpu\
    t\x20configuration\x20for\x20export\x20assets\x20destination.\n\n\x0b\n\
    \x03\x04\x04\x01\x12\x04\xa1\x01\x08\x14\n+\n\x04\x04\x04\x08\0\x12\x06\
    \xa3\x01\x02\xac\x01\x03\x1a\x1b\x20Asset\x20export\x20destination.\n\n\
    \r\n\x05\x04\x04\x08\0\x01\x12\x04\xa3\x01\x08\x13\n-\n\x04\x04\x04\x02\
    \0\x12\x04\xa5\x01\x04'\x1a\x1f\x20Destination\x20on\x20Cloud\x20Storage\
    .\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xa5\x01\x04\x12\n\r\n\x05\x04\
    \x04\x02\0\x01\x12\x04\xa5\x01\x13\"\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\
    \xa5\x01%&\n\xf3\x01\n\x04\x04\x04\x02\x01\x12\x04\xab\x01\x041\x1a\xe4\
    \x01\x20Destination\x20on\x20BigQuery.\x20The\x20output\x20table\x20stor\
    es\x20the\x20fields\x20in\x20asset\n\x20proto\x20as\x20columns\x20in\x20\
    BigQuery.\x20The\x20resource/iam_policy\x20field\x20is\x20converted\n\
    \x20to\x20a\x20record\x20with\x20each\x20field\x20to\x20a\x20column,\x20\
    except\x20metadata\x20to\x20a\x20single\x20JSON\n\x20string.\n\n\r\n\x05\
    \x04\x04\x02\x01\x06\x12\x04\xab\x01\x04\x17\n\r\n\x05\x04\x04\x02\x01\
    \x01\x12\x04\xab\x01\x18,\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xab\x01/\
    0\n)\n\x02\x04\x05\x12\x06\xb0\x01\0\xc5\x01\x01\x1a\x1b\x20A\x20Cloud\
    \x20Storage\x20location.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xb0\x01\x08\
    \x16\n\x1b\n\x04\x04\x05\x08\0\x12\x06\xb2\x01\x02\xc4\x01\x03\x1a\x0b\
    \x20Required.\n\n\r\n\x05\x04\x05\x08\0\x01\x12\x04\xb2\x01\x08\x12\n\
    \x90\x02\n\x04\x04\x05\x02\0\x12\x04\xb8\x01\x04\x13\x1a\x81\x02\x20The\
    \x20uri\x20of\x20the\x20Cloud\x20Storage\x20object.\x20It's\x20the\x20sa\
    me\x20uri\x20that\x20is\x20used\x20by\n\x20gsutil.\x20For\x20example:\
    \x20\"gs://bucket_name/object_name\".\x20See\x20[Viewing\x20and\n\x20Edi\
    ting\x20Object\n\x20Metadata](https://cloud.google.com/storage/docs/view\
    ing-editing-metadata)\n\x20for\x20more\x20information.\n\n\r\n\x05\x04\
    \x05\x02\0\x05\x12\x04\xb8\x01\x04\n\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\
    \xb8\x01\x0b\x0e\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xb8\x01\x11\x12\n\
    \xcd\x04\n\x04\x04\x05\x02\x01\x12\x04\xc3\x01\x04\x1a\x1a\xbe\x04\x20Th\
    e\x20uri\x20prefix\x20of\x20all\x20generated\x20Cloud\x20Storage\x20obje\
    cts.\x20For\x20example:\n\x20\"gs://bucket_name/object_name_prefix\".\
    \x20Each\x20object\x20uri\x20is\x20in\x20format:\n\x20\"gs://bucket_name\
    /object_name_prefix/<asset\x20type>/<shard\x20number>\x20and\x20only\n\
    \x20contains\x20assets\x20for\x20that\x20type.\x20<shard\x20number>\x20s\
    tarts\x20from\x200.\x20For\x20example:\n\x20\"gs://bucket_name/object_na\
    me_prefix/compute.googleapis.com/Disk/0\"\x20is\n\x20the\x20first\x20sha\
    rd\x20of\x20output\x20objects\x20containing\x20all\n\x20compute.googleap\
    is.com/Disk\x20assets.\x20An\x20INVALID_ARGUMENT\x20error\x20will\x20be\
    \n\x20returned\x20if\x20file\x20with\x20the\x20same\x20name\x20\"gs://bu\
    cket_name/object_name_prefix\"\n\x20already\x20exists.\n\n\r\n\x05\x04\
    \x05\x02\x01\x05\x12\x04\xc3\x01\x04\n\n\r\n\x05\x04\x05\x02\x01\x01\x12\
    \x04\xc3\x01\x0b\x15\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xc3\x01\x18\
    \x19\n'\n\x02\x04\x06\x12\x06\xc8\x01\0\xd9\x01\x01\x1a\x19\x20A\x20BigQ\
    uery\x20destination.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xc8\x01\x08\x1b\n\
    \xd8\x01\n\x04\x04\x06\x02\0\x12\x04\xcd\x01\x02>\x1a\xc9\x01\x20Require\
    d.\x20The\x20BigQuery\x20dataset\x20in\x20format\n\x20\"projects/project\
    Id/datasets/datasetId\",\x20to\x20which\x20the\x20snapshot\x20result\n\
    \x20should\x20be\x20exported.\x20If\x20this\x20dataset\x20does\x20not\
    \x20exist,\x20the\x20export\x20call\x20returns\n\x20an\x20error.\n\n\r\n\
    \x05\x04\x06\x02\0\x05\x12\x04\xcd\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\
    \x01\x12\x04\xcd\x01\t\x10\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xcd\x01\
    \x13\x14\n\r\n\x05\x04\x06\x02\0\x08\x12\x04\xcd\x01\x15=\n\x10\n\x08\
    \x04\x06\x02\0\x08\x9c\x08\0\x12\x04\xcd\x01\x16<\n\xae\x01\n\x04\x04\
    \x06\x02\x01\x12\x04\xd2\x01\x02<\x1a\x9f\x01\x20Required.\x20The\x20Big\
    Query\x20table\x20to\x20which\x20the\x20snapshot\x20result\x20should\x20\
    be\n\x20written.\x20If\x20this\x20table\x20does\x20not\x20exist,\x20a\
    \x20new\x20table\x20with\x20the\x20given\x20name\n\x20will\x20be\x20crea\
    ted.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xd2\x01\x02\x08\n\r\n\x05\
    \x04\x06\x02\x01\x01\x12\x04\xd2\x01\t\x0e\n\r\n\x05\x04\x06\x02\x01\x03\
    \x12\x04\xd2\x01\x11\x12\n\r\n\x05\x04\x06\x02\x01\x08\x12\x04\xd2\x01\
    \x13;\n\x10\n\x08\x04\x06\x02\x01\x08\x9c\x08\0\x12\x04\xd2\x01\x14:\n\
    \xf9\x01\n\x04\x04\x06\x02\x02\x12\x04\xd8\x01\x02\x11\x1a\xea\x01\x20If\
    \x20the\x20destination\x20table\x20already\x20exists\x20and\x20this\x20f\
    lag\x20is\x20`TRUE`,\x20the\n\x20table\x20will\x20be\x20overwritten\x20b\
    y\x20the\x20contents\x20of\x20assets\x20snapshot.\x20If\x20the\x20flag\n\
    \x20is\x20not\x20set\x20and\x20the\x20destination\x20table\x20already\
    \x20exists,\x20the\x20export\x20call\n\x20returns\x20an\x20error.\n\n\r\
    \n\x05\x04\x06\x02\x02\x05\x12\x04\xd8\x01\x02\x06\n\r\n\x05\x04\x06\x02\
    \x02\x01\x12\x04\xd8\x01\x07\x0c\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\
    \xd8\x01\x0f\x10\n#\n\x02\x05\0\x12\x06\xdc\x01\0\xeb\x01\x01\x1a\x15\
    \x20Asset\x20content\x20type.\n\n\x0b\n\x03\x05\0\x01\x12\x04\xdc\x01\
    \x05\x10\n)\n\x04\x05\0\x02\0\x12\x04\xde\x01\x02\x1f\x1a\x1b\x20Unspeci\
    fied\x20content\x20type.\n\n\r\n\x05\x05\0\x02\0\x01\x12\x04\xde\x01\x02\
    \x1a\n\r\n\x05\x05\0\x02\0\x02\x12\x04\xde\x01\x1d\x1e\n\"\n\x04\x05\0\
    \x02\x01\x12\x04\xe1\x01\x02\x0f\x1a\x14\x20Resource\x20metadata.\n\n\r\
    \n\x05\x05\0\x02\x01\x01\x12\x04\xe1\x01\x02\n\n\r\n\x05\x05\0\x02\x01\
    \x02\x12\x04\xe1\x01\r\x0e\n8\n\x04\x05\0\x02\x02\x12\x04\xe4\x01\x02\
    \x11\x1a*\x20The\x20actual\x20IAM\x20policy\x20set\x20on\x20a\x20resourc\
    e.\n\n\r\n\x05\x05\0\x02\x02\x01\x12\x04\xe4\x01\x02\x0c\n\r\n\x05\x05\0\
    \x02\x02\x02\x12\x04\xe4\x01\x0f\x10\n>\n\x04\x05\0\x02\x03\x12\x04\xe7\
    \x01\x02\x11\x1a0\x20The\x20Cloud\x20Organization\x20Policy\x20set\x20on\
    \x20an\x20asset.\n\n\r\n\x05\x05\0\x02\x03\x01\x12\x04\xe7\x01\x02\x0c\n\
    \r\n\x05\x05\0\x02\x03\x02\x12\x04\xe7\x01\x0f\x10\nI\n\x04\x05\0\x02\
    \x04\x12\x04\xea\x01\x02\x14\x1a;\x20The\x20Cloud\x20Access\x20context\
    \x20mananger\x20Policy\x20set\x20on\x20an\x20asset.\n\n\r\n\x05\x05\0\
    \x02\x04\x01\x12\x04\xea\x01\x02\x0f\n\r\n\x05\x05\0\x02\x04\x02\x12\x04\
    \xea\x01\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(9);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            deps.push(super::field_behavior::file_descriptor().clone());
            deps.push(super::resource::file_descriptor().clone());
            deps.push(super::assets::file_descriptor().clone());
            deps.push(super::operations::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::field_mask::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(ExportAssetsRequest::generated_message_descriptor_data());
            messages.push(ExportAssetsResponse::generated_message_descriptor_data());
            messages.push(BatchGetAssetsHistoryRequest::generated_message_descriptor_data());
            messages.push(BatchGetAssetsHistoryResponse::generated_message_descriptor_data());
            messages.push(OutputConfig::generated_message_descriptor_data());
            messages.push(GcsDestination::generated_message_descriptor_data());
            messages.push(BigQueryDestination::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ContentType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
