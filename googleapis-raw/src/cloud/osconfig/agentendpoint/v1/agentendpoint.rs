// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/osconfig/agentendpoint/v1/agentendpoint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReceiveTaskNotificationRequest {
    // message fields
    pub instance_id_token: ::std::string::String,
    pub agent_version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceiveTaskNotificationRequest {
    fn default() -> &'a ReceiveTaskNotificationRequest {
        <ReceiveTaskNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReceiveTaskNotificationRequest {
    pub fn new() -> ReceiveTaskNotificationRequest {
        ::std::default::Default::default()
    }

    // string instance_id_token = 1;


    pub fn get_instance_id_token(&self) -> &str {
        &self.instance_id_token
    }
    pub fn clear_instance_id_token(&mut self) {
        self.instance_id_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id_token(&mut self, v: ::std::string::String) {
        self.instance_id_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id_token(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id_token
    }

    // Take field
    pub fn take_instance_id_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id_token, ::std::string::String::new())
    }

    // string agent_version = 2;


    pub fn get_agent_version(&self) -> &str {
        &self.agent_version
    }
    pub fn clear_agent_version(&mut self) {
        self.agent_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_agent_version(&mut self, v: ::std::string::String) {
        self.agent_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agent_version(&mut self) -> &mut ::std::string::String {
        &mut self.agent_version
    }

    // Take field
    pub fn take_agent_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.agent_version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReceiveTaskNotificationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.agent_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.instance_id_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.instance_id_token);
        }
        if !self.agent_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.agent_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.instance_id_token.is_empty() {
            os.write_string(1, &self.instance_id_token)?;
        }
        if !self.agent_version.is_empty() {
            os.write_string(2, &self.agent_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiveTaskNotificationRequest {
        ReceiveTaskNotificationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id_token",
                |m: &ReceiveTaskNotificationRequest| { &m.instance_id_token },
                |m: &mut ReceiveTaskNotificationRequest| { &mut m.instance_id_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "agent_version",
                |m: &ReceiveTaskNotificationRequest| { &m.agent_version },
                |m: &mut ReceiveTaskNotificationRequest| { &mut m.agent_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReceiveTaskNotificationRequest>(
                "ReceiveTaskNotificationRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReceiveTaskNotificationRequest {
        static instance: ::protobuf::rt::LazyV2<ReceiveTaskNotificationRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReceiveTaskNotificationRequest::new)
    }
}

impl ::protobuf::Clear for ReceiveTaskNotificationRequest {
    fn clear(&mut self) {
        self.instance_id_token.clear();
        self.agent_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiveTaskNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiveTaskNotificationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceiveTaskNotificationResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReceiveTaskNotificationResponse {
    fn default() -> &'a ReceiveTaskNotificationResponse {
        <ReceiveTaskNotificationResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReceiveTaskNotificationResponse {
    pub fn new() -> ReceiveTaskNotificationResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ReceiveTaskNotificationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiveTaskNotificationResponse {
        ReceiveTaskNotificationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReceiveTaskNotificationResponse>(
                "ReceiveTaskNotificationResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReceiveTaskNotificationResponse {
        static instance: ::protobuf::rt::LazyV2<ReceiveTaskNotificationResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReceiveTaskNotificationResponse::new)
    }
}

impl ::protobuf::Clear for ReceiveTaskNotificationResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiveTaskNotificationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiveTaskNotificationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartNextTaskRequest {
    // message fields
    pub instance_id_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartNextTaskRequest {
    fn default() -> &'a StartNextTaskRequest {
        <StartNextTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl StartNextTaskRequest {
    pub fn new() -> StartNextTaskRequest {
        ::std::default::Default::default()
    }

    // string instance_id_token = 1;


    pub fn get_instance_id_token(&self) -> &str {
        &self.instance_id_token
    }
    pub fn clear_instance_id_token(&mut self) {
        self.instance_id_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id_token(&mut self, v: ::std::string::String) {
        self.instance_id_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id_token(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id_token
    }

    // Take field
    pub fn take_instance_id_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StartNextTaskRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.instance_id_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.instance_id_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.instance_id_token.is_empty() {
            os.write_string(1, &self.instance_id_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartNextTaskRequest {
        StartNextTaskRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id_token",
                |m: &StartNextTaskRequest| { &m.instance_id_token },
                |m: &mut StartNextTaskRequest| { &mut m.instance_id_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartNextTaskRequest>(
                "StartNextTaskRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartNextTaskRequest {
        static instance: ::protobuf::rt::LazyV2<StartNextTaskRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartNextTaskRequest::new)
    }
}

impl ::protobuf::Clear for StartNextTaskRequest {
    fn clear(&mut self) {
        self.instance_id_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartNextTaskRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartNextTaskRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartNextTaskResponse {
    // message fields
    pub task: ::protobuf::SingularPtrField<super::tasks::Task>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartNextTaskResponse {
    fn default() -> &'a StartNextTaskResponse {
        <StartNextTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl StartNextTaskResponse {
    pub fn new() -> StartNextTaskResponse {
        ::std::default::Default::default()
    }

    // .google.cloud.osconfig.agentendpoint.v1.Task task = 1;


    pub fn get_task(&self) -> &super::tasks::Task {
        self.task.as_ref().unwrap_or_else(|| <super::tasks::Task as ::protobuf::Message>::default_instance())
    }
    pub fn clear_task(&mut self) {
        self.task.clear();
    }

    pub fn has_task(&self) -> bool {
        self.task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task(&mut self, v: super::tasks::Task) {
        self.task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task(&mut self) -> &mut super::tasks::Task {
        if self.task.is_none() {
            self.task.set_default();
        }
        self.task.as_mut().unwrap()
    }

    // Take field
    pub fn take_task(&mut self) -> super::tasks::Task {
        self.task.take().unwrap_or_else(|| super::tasks::Task::new())
    }
}

impl ::protobuf::Message for StartNextTaskResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.task.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartNextTaskResponse {
        StartNextTaskResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tasks::Task>>(
                "task",
                |m: &StartNextTaskResponse| { &m.task },
                |m: &mut StartNextTaskResponse| { &mut m.task },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartNextTaskResponse>(
                "StartNextTaskResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartNextTaskResponse {
        static instance: ::protobuf::rt::LazyV2<StartNextTaskResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartNextTaskResponse::new)
    }
}

impl ::protobuf::Clear for StartNextTaskResponse {
    fn clear(&mut self) {
        self.task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartNextTaskResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartNextTaskResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportTaskProgressRequest {
    // message fields
    pub instance_id_token: ::std::string::String,
    pub task_id: ::std::string::String,
    pub task_type: super::tasks::TaskType,
    // message oneof groups
    pub progress: ::std::option::Option<ReportTaskProgressRequest_oneof_progress>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportTaskProgressRequest {
    fn default() -> &'a ReportTaskProgressRequest {
        <ReportTaskProgressRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReportTaskProgressRequest_oneof_progress {
    apply_patches_task_progress(super::tasks::ApplyPatchesTaskProgress),
    exec_step_task_progress(super::tasks::ExecStepTaskProgress),
    apply_config_task_progress(super::tasks::ApplyConfigTaskProgress),
}

impl ReportTaskProgressRequest {
    pub fn new() -> ReportTaskProgressRequest {
        ::std::default::Default::default()
    }

    // string instance_id_token = 1;


    pub fn get_instance_id_token(&self) -> &str {
        &self.instance_id_token
    }
    pub fn clear_instance_id_token(&mut self) {
        self.instance_id_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id_token(&mut self, v: ::std::string::String) {
        self.instance_id_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id_token(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id_token
    }

    // Take field
    pub fn take_instance_id_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id_token, ::std::string::String::new())
    }

    // string task_id = 2;


    pub fn get_task_id(&self) -> &str {
        &self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        &mut self.task_id
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.task_id, ::std::string::String::new())
    }

    // .google.cloud.osconfig.agentendpoint.v1.TaskType task_type = 3;


    pub fn get_task_type(&self) -> super::tasks::TaskType {
        self.task_type
    }
    pub fn clear_task_type(&mut self) {
        self.task_type = super::tasks::TaskType::TASK_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_task_type(&mut self, v: super::tasks::TaskType) {
        self.task_type = v;
    }

    // .google.cloud.osconfig.agentendpoint.v1.ApplyPatchesTaskProgress apply_patches_task_progress = 4;


    pub fn get_apply_patches_task_progress(&self) -> &super::tasks::ApplyPatchesTaskProgress {
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(ref v)) => v,
            _ => <super::tasks::ApplyPatchesTaskProgress as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_apply_patches_task_progress(&mut self) {
        self.progress = ::std::option::Option::None;
    }

    pub fn has_apply_patches_task_progress(&self) -> bool {
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_apply_patches_task_progress(&mut self, v: super::tasks::ApplyPatchesTaskProgress) {
        self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(v))
    }

    // Mutable pointer to the field.
    pub fn mut_apply_patches_task_progress(&mut self) -> &mut super::tasks::ApplyPatchesTaskProgress {
        if let ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(_)) = self.progress {
        } else {
            self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(super::tasks::ApplyPatchesTaskProgress::new()));
        }
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_apply_patches_task_progress(&mut self) -> super::tasks::ApplyPatchesTaskProgress {
        if self.has_apply_patches_task_progress() {
            match self.progress.take() {
                ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(v)) => v,
                _ => panic!(),
            }
        } else {
            super::tasks::ApplyPatchesTaskProgress::new()
        }
    }

    // .google.cloud.osconfig.agentendpoint.v1.ExecStepTaskProgress exec_step_task_progress = 5;


    pub fn get_exec_step_task_progress(&self) -> &super::tasks::ExecStepTaskProgress {
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(ref v)) => v,
            _ => <super::tasks::ExecStepTaskProgress as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exec_step_task_progress(&mut self) {
        self.progress = ::std::option::Option::None;
    }

    pub fn has_exec_step_task_progress(&self) -> bool {
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exec_step_task_progress(&mut self, v: super::tasks::ExecStepTaskProgress) {
        self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exec_step_task_progress(&mut self) -> &mut super::tasks::ExecStepTaskProgress {
        if let ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(_)) = self.progress {
        } else {
            self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(super::tasks::ExecStepTaskProgress::new()));
        }
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exec_step_task_progress(&mut self) -> super::tasks::ExecStepTaskProgress {
        if self.has_exec_step_task_progress() {
            match self.progress.take() {
                ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(v)) => v,
                _ => panic!(),
            }
        } else {
            super::tasks::ExecStepTaskProgress::new()
        }
    }

    // .google.cloud.osconfig.agentendpoint.v1.ApplyConfigTaskProgress apply_config_task_progress = 6;


    pub fn get_apply_config_task_progress(&self) -> &super::tasks::ApplyConfigTaskProgress {
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(ref v)) => v,
            _ => <super::tasks::ApplyConfigTaskProgress as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_apply_config_task_progress(&mut self) {
        self.progress = ::std::option::Option::None;
    }

    pub fn has_apply_config_task_progress(&self) -> bool {
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_apply_config_task_progress(&mut self, v: super::tasks::ApplyConfigTaskProgress) {
        self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(v))
    }

    // Mutable pointer to the field.
    pub fn mut_apply_config_task_progress(&mut self) -> &mut super::tasks::ApplyConfigTaskProgress {
        if let ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(_)) = self.progress {
        } else {
            self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(super::tasks::ApplyConfigTaskProgress::new()));
        }
        match self.progress {
            ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_apply_config_task_progress(&mut self) -> super::tasks::ApplyConfigTaskProgress {
        if self.has_apply_config_task_progress() {
            match self.progress.take() {
                ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(v)) => v,
                _ => panic!(),
            }
        } else {
            super::tasks::ApplyConfigTaskProgress::new()
        }
    }
}

impl ::protobuf::Message for ReportTaskProgressRequest {
    fn is_initialized(&self) -> bool {
        if let Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(ref v)) = self.progress {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(ref v)) = self.progress {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(ref v)) = self.progress {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.task_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.task_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.progress = ::std::option::Option::Some(ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.instance_id_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.instance_id_token);
        }
        if !self.task_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.task_id);
        }
        if self.task_type != super::tasks::TaskType::TASK_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.task_type);
        }
        if let ::std::option::Option::Some(ref v) = self.progress {
            match v {
                &ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.instance_id_token.is_empty() {
            os.write_string(1, &self.instance_id_token)?;
        }
        if !self.task_id.is_empty() {
            os.write_string(2, &self.task_id)?;
        }
        if self.task_type != super::tasks::TaskType::TASK_TYPE_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.task_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.progress {
            match v {
                &ReportTaskProgressRequest_oneof_progress::apply_patches_task_progress(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReportTaskProgressRequest_oneof_progress::exec_step_task_progress(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReportTaskProgressRequest_oneof_progress::apply_config_task_progress(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportTaskProgressRequest {
        ReportTaskProgressRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id_token",
                |m: &ReportTaskProgressRequest| { &m.instance_id_token },
                |m: &mut ReportTaskProgressRequest| { &mut m.instance_id_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "task_id",
                |m: &ReportTaskProgressRequest| { &m.task_id },
                |m: &mut ReportTaskProgressRequest| { &mut m.task_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::tasks::TaskType>>(
                "task_type",
                |m: &ReportTaskProgressRequest| { &m.task_type },
                |m: &mut ReportTaskProgressRequest| { &mut m.task_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::tasks::ApplyPatchesTaskProgress>(
                "apply_patches_task_progress",
                ReportTaskProgressRequest::has_apply_patches_task_progress,
                ReportTaskProgressRequest::get_apply_patches_task_progress,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::tasks::ExecStepTaskProgress>(
                "exec_step_task_progress",
                ReportTaskProgressRequest::has_exec_step_task_progress,
                ReportTaskProgressRequest::get_exec_step_task_progress,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::tasks::ApplyConfigTaskProgress>(
                "apply_config_task_progress",
                ReportTaskProgressRequest::has_apply_config_task_progress,
                ReportTaskProgressRequest::get_apply_config_task_progress,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportTaskProgressRequest>(
                "ReportTaskProgressRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportTaskProgressRequest {
        static instance: ::protobuf::rt::LazyV2<ReportTaskProgressRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportTaskProgressRequest::new)
    }
}

impl ::protobuf::Clear for ReportTaskProgressRequest {
    fn clear(&mut self) {
        self.instance_id_token.clear();
        self.task_id.clear();
        self.task_type = super::tasks::TaskType::TASK_TYPE_UNSPECIFIED;
        self.progress = ::std::option::Option::None;
        self.progress = ::std::option::Option::None;
        self.progress = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportTaskProgressRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportTaskProgressRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportTaskProgressResponse {
    // message fields
    pub task_directive: super::tasks::TaskDirective,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportTaskProgressResponse {
    fn default() -> &'a ReportTaskProgressResponse {
        <ReportTaskProgressResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReportTaskProgressResponse {
    pub fn new() -> ReportTaskProgressResponse {
        ::std::default::Default::default()
    }

    // .google.cloud.osconfig.agentendpoint.v1.TaskDirective task_directive = 1;


    pub fn get_task_directive(&self) -> super::tasks::TaskDirective {
        self.task_directive
    }
    pub fn clear_task_directive(&mut self) {
        self.task_directive = super::tasks::TaskDirective::TASK_DIRECTIVE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_task_directive(&mut self, v: super::tasks::TaskDirective) {
        self.task_directive = v;
    }
}

impl ::protobuf::Message for ReportTaskProgressResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.task_directive, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_directive != super::tasks::TaskDirective::TASK_DIRECTIVE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.task_directive);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_directive != super::tasks::TaskDirective::TASK_DIRECTIVE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.task_directive))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportTaskProgressResponse {
        ReportTaskProgressResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::tasks::TaskDirective>>(
                "task_directive",
                |m: &ReportTaskProgressResponse| { &m.task_directive },
                |m: &mut ReportTaskProgressResponse| { &mut m.task_directive },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportTaskProgressResponse>(
                "ReportTaskProgressResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportTaskProgressResponse {
        static instance: ::protobuf::rt::LazyV2<ReportTaskProgressResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportTaskProgressResponse::new)
    }
}

impl ::protobuf::Clear for ReportTaskProgressResponse {
    fn clear(&mut self) {
        self.task_directive = super::tasks::TaskDirective::TASK_DIRECTIVE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportTaskProgressResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportTaskProgressResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportTaskCompleteRequest {
    // message fields
    pub instance_id_token: ::std::string::String,
    pub task_id: ::std::string::String,
    pub task_type: super::tasks::TaskType,
    pub error_message: ::std::string::String,
    // message oneof groups
    pub output: ::std::option::Option<ReportTaskCompleteRequest_oneof_output>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportTaskCompleteRequest {
    fn default() -> &'a ReportTaskCompleteRequest {
        <ReportTaskCompleteRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReportTaskCompleteRequest_oneof_output {
    apply_patches_task_output(super::tasks::ApplyPatchesTaskOutput),
    exec_step_task_output(super::tasks::ExecStepTaskOutput),
    apply_config_task_output(super::tasks::ApplyConfigTaskOutput),
}

impl ReportTaskCompleteRequest {
    pub fn new() -> ReportTaskCompleteRequest {
        ::std::default::Default::default()
    }

    // string instance_id_token = 1;


    pub fn get_instance_id_token(&self) -> &str {
        &self.instance_id_token
    }
    pub fn clear_instance_id_token(&mut self) {
        self.instance_id_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id_token(&mut self, v: ::std::string::String) {
        self.instance_id_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id_token(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id_token
    }

    // Take field
    pub fn take_instance_id_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id_token, ::std::string::String::new())
    }

    // string task_id = 2;


    pub fn get_task_id(&self) -> &str {
        &self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        &mut self.task_id
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.task_id, ::std::string::String::new())
    }

    // .google.cloud.osconfig.agentendpoint.v1.TaskType task_type = 3;


    pub fn get_task_type(&self) -> super::tasks::TaskType {
        self.task_type
    }
    pub fn clear_task_type(&mut self) {
        self.task_type = super::tasks::TaskType::TASK_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_task_type(&mut self, v: super::tasks::TaskType) {
        self.task_type = v;
    }

    // string error_message = 4;


    pub fn get_error_message(&self) -> &str {
        &self.error_message
    }
    pub fn clear_error_message(&mut self) {
        self.error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.error_message
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_message, ::std::string::String::new())
    }

    // .google.cloud.osconfig.agentendpoint.v1.ApplyPatchesTaskOutput apply_patches_task_output = 5;


    pub fn get_apply_patches_task_output(&self) -> &super::tasks::ApplyPatchesTaskOutput {
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(ref v)) => v,
            _ => <super::tasks::ApplyPatchesTaskOutput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_apply_patches_task_output(&mut self) {
        self.output = ::std::option::Option::None;
    }

    pub fn has_apply_patches_task_output(&self) -> bool {
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_apply_patches_task_output(&mut self, v: super::tasks::ApplyPatchesTaskOutput) {
        self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(v))
    }

    // Mutable pointer to the field.
    pub fn mut_apply_patches_task_output(&mut self) -> &mut super::tasks::ApplyPatchesTaskOutput {
        if let ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(_)) = self.output {
        } else {
            self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(super::tasks::ApplyPatchesTaskOutput::new()));
        }
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_apply_patches_task_output(&mut self) -> super::tasks::ApplyPatchesTaskOutput {
        if self.has_apply_patches_task_output() {
            match self.output.take() {
                ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(v)) => v,
                _ => panic!(),
            }
        } else {
            super::tasks::ApplyPatchesTaskOutput::new()
        }
    }

    // .google.cloud.osconfig.agentendpoint.v1.ExecStepTaskOutput exec_step_task_output = 6;


    pub fn get_exec_step_task_output(&self) -> &super::tasks::ExecStepTaskOutput {
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(ref v)) => v,
            _ => <super::tasks::ExecStepTaskOutput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exec_step_task_output(&mut self) {
        self.output = ::std::option::Option::None;
    }

    pub fn has_exec_step_task_output(&self) -> bool {
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exec_step_task_output(&mut self, v: super::tasks::ExecStepTaskOutput) {
        self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exec_step_task_output(&mut self) -> &mut super::tasks::ExecStepTaskOutput {
        if let ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(_)) = self.output {
        } else {
            self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(super::tasks::ExecStepTaskOutput::new()));
        }
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exec_step_task_output(&mut self) -> super::tasks::ExecStepTaskOutput {
        if self.has_exec_step_task_output() {
            match self.output.take() {
                ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(v)) => v,
                _ => panic!(),
            }
        } else {
            super::tasks::ExecStepTaskOutput::new()
        }
    }

    // .google.cloud.osconfig.agentendpoint.v1.ApplyConfigTaskOutput apply_config_task_output = 7;


    pub fn get_apply_config_task_output(&self) -> &super::tasks::ApplyConfigTaskOutput {
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(ref v)) => v,
            _ => <super::tasks::ApplyConfigTaskOutput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_apply_config_task_output(&mut self) {
        self.output = ::std::option::Option::None;
    }

    pub fn has_apply_config_task_output(&self) -> bool {
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_apply_config_task_output(&mut self, v: super::tasks::ApplyConfigTaskOutput) {
        self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(v))
    }

    // Mutable pointer to the field.
    pub fn mut_apply_config_task_output(&mut self) -> &mut super::tasks::ApplyConfigTaskOutput {
        if let ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(_)) = self.output {
        } else {
            self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(super::tasks::ApplyConfigTaskOutput::new()));
        }
        match self.output {
            ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_apply_config_task_output(&mut self) -> super::tasks::ApplyConfigTaskOutput {
        if self.has_apply_config_task_output() {
            match self.output.take() {
                ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(v)) => v,
                _ => panic!(),
            }
        } else {
            super::tasks::ApplyConfigTaskOutput::new()
        }
    }
}

impl ::protobuf::Message for ReportTaskCompleteRequest {
    fn is_initialized(&self) -> bool {
        if let Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(ref v)) = self.output {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(ref v)) = self.output {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(ref v)) = self.output {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.task_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.task_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_message)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::exec_step_task_output(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output = ::std::option::Option::Some(ReportTaskCompleteRequest_oneof_output::apply_config_task_output(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.instance_id_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.instance_id_token);
        }
        if !self.task_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.task_id);
        }
        if self.task_type != super::tasks::TaskType::TASK_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.task_type);
        }
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.error_message);
        }
        if let ::std::option::Option::Some(ref v) = self.output {
            match v {
                &ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReportTaskCompleteRequest_oneof_output::exec_step_task_output(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReportTaskCompleteRequest_oneof_output::apply_config_task_output(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.instance_id_token.is_empty() {
            os.write_string(1, &self.instance_id_token)?;
        }
        if !self.task_id.is_empty() {
            os.write_string(2, &self.task_id)?;
        }
        if self.task_type != super::tasks::TaskType::TASK_TYPE_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.task_type))?;
        }
        if !self.error_message.is_empty() {
            os.write_string(4, &self.error_message)?;
        }
        if let ::std::option::Option::Some(ref v) = self.output {
            match v {
                &ReportTaskCompleteRequest_oneof_output::apply_patches_task_output(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReportTaskCompleteRequest_oneof_output::exec_step_task_output(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReportTaskCompleteRequest_oneof_output::apply_config_task_output(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportTaskCompleteRequest {
        ReportTaskCompleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id_token",
                |m: &ReportTaskCompleteRequest| { &m.instance_id_token },
                |m: &mut ReportTaskCompleteRequest| { &mut m.instance_id_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "task_id",
                |m: &ReportTaskCompleteRequest| { &m.task_id },
                |m: &mut ReportTaskCompleteRequest| { &mut m.task_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::tasks::TaskType>>(
                "task_type",
                |m: &ReportTaskCompleteRequest| { &m.task_type },
                |m: &mut ReportTaskCompleteRequest| { &mut m.task_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error_message",
                |m: &ReportTaskCompleteRequest| { &m.error_message },
                |m: &mut ReportTaskCompleteRequest| { &mut m.error_message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::tasks::ApplyPatchesTaskOutput>(
                "apply_patches_task_output",
                ReportTaskCompleteRequest::has_apply_patches_task_output,
                ReportTaskCompleteRequest::get_apply_patches_task_output,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::tasks::ExecStepTaskOutput>(
                "exec_step_task_output",
                ReportTaskCompleteRequest::has_exec_step_task_output,
                ReportTaskCompleteRequest::get_exec_step_task_output,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::tasks::ApplyConfigTaskOutput>(
                "apply_config_task_output",
                ReportTaskCompleteRequest::has_apply_config_task_output,
                ReportTaskCompleteRequest::get_apply_config_task_output,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportTaskCompleteRequest>(
                "ReportTaskCompleteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportTaskCompleteRequest {
        static instance: ::protobuf::rt::LazyV2<ReportTaskCompleteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportTaskCompleteRequest::new)
    }
}

impl ::protobuf::Clear for ReportTaskCompleteRequest {
    fn clear(&mut self) {
        self.instance_id_token.clear();
        self.task_id.clear();
        self.task_type = super::tasks::TaskType::TASK_TYPE_UNSPECIFIED;
        self.error_message.clear();
        self.output = ::std::option::Option::None;
        self.output = ::std::option::Option::None;
        self.output = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportTaskCompleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportTaskCompleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportTaskCompleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportTaskCompleteResponse {
    fn default() -> &'a ReportTaskCompleteResponse {
        <ReportTaskCompleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReportTaskCompleteResponse {
    pub fn new() -> ReportTaskCompleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ReportTaskCompleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportTaskCompleteResponse {
        ReportTaskCompleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportTaskCompleteResponse>(
                "ReportTaskCompleteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportTaskCompleteResponse {
        static instance: ::protobuf::rt::LazyV2<ReportTaskCompleteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportTaskCompleteResponse::new)
    }
}

impl ::protobuf::Clear for ReportTaskCompleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportTaskCompleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportTaskCompleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterAgentRequest {
    // message fields
    pub instance_id_token: ::std::string::String,
    pub agent_version: ::std::string::String,
    pub supported_capabilities: ::protobuf::RepeatedField<::std::string::String>,
    pub os_long_name: ::std::string::String,
    pub os_short_name: ::std::string::String,
    pub os_version: ::std::string::String,
    pub os_architecture: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterAgentRequest {
    fn default() -> &'a RegisterAgentRequest {
        <RegisterAgentRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterAgentRequest {
    pub fn new() -> RegisterAgentRequest {
        ::std::default::Default::default()
    }

    // string instance_id_token = 1;


    pub fn get_instance_id_token(&self) -> &str {
        &self.instance_id_token
    }
    pub fn clear_instance_id_token(&mut self) {
        self.instance_id_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id_token(&mut self, v: ::std::string::String) {
        self.instance_id_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id_token(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id_token
    }

    // Take field
    pub fn take_instance_id_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id_token, ::std::string::String::new())
    }

    // string agent_version = 2;


    pub fn get_agent_version(&self) -> &str {
        &self.agent_version
    }
    pub fn clear_agent_version(&mut self) {
        self.agent_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_agent_version(&mut self, v: ::std::string::String) {
        self.agent_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agent_version(&mut self) -> &mut ::std::string::String {
        &mut self.agent_version
    }

    // Take field
    pub fn take_agent_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.agent_version, ::std::string::String::new())
    }

    // repeated string supported_capabilities = 3;


    pub fn get_supported_capabilities(&self) -> &[::std::string::String] {
        &self.supported_capabilities
    }
    pub fn clear_supported_capabilities(&mut self) {
        self.supported_capabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_supported_capabilities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.supported_capabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_supported_capabilities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.supported_capabilities
    }

    // Take field
    pub fn take_supported_capabilities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.supported_capabilities, ::protobuf::RepeatedField::new())
    }

    // string os_long_name = 4;


    pub fn get_os_long_name(&self) -> &str {
        &self.os_long_name
    }
    pub fn clear_os_long_name(&mut self) {
        self.os_long_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_os_long_name(&mut self, v: ::std::string::String) {
        self.os_long_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_long_name(&mut self) -> &mut ::std::string::String {
        &mut self.os_long_name
    }

    // Take field
    pub fn take_os_long_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os_long_name, ::std::string::String::new())
    }

    // string os_short_name = 5;


    pub fn get_os_short_name(&self) -> &str {
        &self.os_short_name
    }
    pub fn clear_os_short_name(&mut self) {
        self.os_short_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_os_short_name(&mut self, v: ::std::string::String) {
        self.os_short_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_short_name(&mut self) -> &mut ::std::string::String {
        &mut self.os_short_name
    }

    // Take field
    pub fn take_os_short_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os_short_name, ::std::string::String::new())
    }

    // string os_version = 6;


    pub fn get_os_version(&self) -> &str {
        &self.os_version
    }
    pub fn clear_os_version(&mut self) {
        self.os_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_os_version(&mut self, v: ::std::string::String) {
        self.os_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_version(&mut self) -> &mut ::std::string::String {
        &mut self.os_version
    }

    // Take field
    pub fn take_os_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os_version, ::std::string::String::new())
    }

    // string os_architecture = 7;


    pub fn get_os_architecture(&self) -> &str {
        &self.os_architecture
    }
    pub fn clear_os_architecture(&mut self) {
        self.os_architecture.clear();
    }

    // Param is passed by value, moved
    pub fn set_os_architecture(&mut self, v: ::std::string::String) {
        self.os_architecture = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_architecture(&mut self) -> &mut ::std::string::String {
        &mut self.os_architecture
    }

    // Take field
    pub fn take_os_architecture(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os_architecture, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RegisterAgentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.agent_version)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.supported_capabilities)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os_long_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os_short_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os_version)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os_architecture)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.instance_id_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.instance_id_token);
        }
        if !self.agent_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.agent_version);
        }
        for value in &self.supported_capabilities {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.os_long_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.os_long_name);
        }
        if !self.os_short_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.os_short_name);
        }
        if !self.os_version.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.os_version);
        }
        if !self.os_architecture.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.os_architecture);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.instance_id_token.is_empty() {
            os.write_string(1, &self.instance_id_token)?;
        }
        if !self.agent_version.is_empty() {
            os.write_string(2, &self.agent_version)?;
        }
        for v in &self.supported_capabilities {
            os.write_string(3, &v)?;
        };
        if !self.os_long_name.is_empty() {
            os.write_string(4, &self.os_long_name)?;
        }
        if !self.os_short_name.is_empty() {
            os.write_string(5, &self.os_short_name)?;
        }
        if !self.os_version.is_empty() {
            os.write_string(6, &self.os_version)?;
        }
        if !self.os_architecture.is_empty() {
            os.write_string(7, &self.os_architecture)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterAgentRequest {
        RegisterAgentRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id_token",
                |m: &RegisterAgentRequest| { &m.instance_id_token },
                |m: &mut RegisterAgentRequest| { &mut m.instance_id_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "agent_version",
                |m: &RegisterAgentRequest| { &m.agent_version },
                |m: &mut RegisterAgentRequest| { &mut m.agent_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "supported_capabilities",
                |m: &RegisterAgentRequest| { &m.supported_capabilities },
                |m: &mut RegisterAgentRequest| { &mut m.supported_capabilities },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "os_long_name",
                |m: &RegisterAgentRequest| { &m.os_long_name },
                |m: &mut RegisterAgentRequest| { &mut m.os_long_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "os_short_name",
                |m: &RegisterAgentRequest| { &m.os_short_name },
                |m: &mut RegisterAgentRequest| { &mut m.os_short_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "os_version",
                |m: &RegisterAgentRequest| { &m.os_version },
                |m: &mut RegisterAgentRequest| { &mut m.os_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "os_architecture",
                |m: &RegisterAgentRequest| { &m.os_architecture },
                |m: &mut RegisterAgentRequest| { &mut m.os_architecture },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterAgentRequest>(
                "RegisterAgentRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterAgentRequest {
        static instance: ::protobuf::rt::LazyV2<RegisterAgentRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterAgentRequest::new)
    }
}

impl ::protobuf::Clear for RegisterAgentRequest {
    fn clear(&mut self) {
        self.instance_id_token.clear();
        self.agent_version.clear();
        self.supported_capabilities.clear();
        self.os_long_name.clear();
        self.os_short_name.clear();
        self.os_version.clear();
        self.os_architecture.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterAgentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterAgentRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterAgentResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterAgentResponse {
    fn default() -> &'a RegisterAgentResponse {
        <RegisterAgentResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterAgentResponse {
    pub fn new() -> RegisterAgentResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RegisterAgentResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterAgentResponse {
        RegisterAgentResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterAgentResponse>(
                "RegisterAgentResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterAgentResponse {
        static instance: ::protobuf::rt::LazyV2<RegisterAgentResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterAgentResponse::new)
    }
}

impl ::protobuf::Clear for RegisterAgentResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterAgentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterAgentResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportInventoryRequest {
    // message fields
    pub instance_id_token: ::std::string::String,
    pub inventory_checksum: ::std::string::String,
    pub inventory: ::protobuf::SingularPtrField<super::inventory::Inventory>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportInventoryRequest {
    fn default() -> &'a ReportInventoryRequest {
        <ReportInventoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReportInventoryRequest {
    pub fn new() -> ReportInventoryRequest {
        ::std::default::Default::default()
    }

    // string instance_id_token = 1;


    pub fn get_instance_id_token(&self) -> &str {
        &self.instance_id_token
    }
    pub fn clear_instance_id_token(&mut self) {
        self.instance_id_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id_token(&mut self, v: ::std::string::String) {
        self.instance_id_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id_token(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id_token
    }

    // Take field
    pub fn take_instance_id_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id_token, ::std::string::String::new())
    }

    // string inventory_checksum = 2;


    pub fn get_inventory_checksum(&self) -> &str {
        &self.inventory_checksum
    }
    pub fn clear_inventory_checksum(&mut self) {
        self.inventory_checksum.clear();
    }

    // Param is passed by value, moved
    pub fn set_inventory_checksum(&mut self, v: ::std::string::String) {
        self.inventory_checksum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inventory_checksum(&mut self) -> &mut ::std::string::String {
        &mut self.inventory_checksum
    }

    // Take field
    pub fn take_inventory_checksum(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inventory_checksum, ::std::string::String::new())
    }

    // .google.cloud.osconfig.agentendpoint.v1.Inventory inventory = 3;


    pub fn get_inventory(&self) -> &super::inventory::Inventory {
        self.inventory.as_ref().unwrap_or_else(|| <super::inventory::Inventory as ::protobuf::Message>::default_instance())
    }
    pub fn clear_inventory(&mut self) {
        self.inventory.clear();
    }

    pub fn has_inventory(&self) -> bool {
        self.inventory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inventory(&mut self, v: super::inventory::Inventory) {
        self.inventory = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inventory(&mut self) -> &mut super::inventory::Inventory {
        if self.inventory.is_none() {
            self.inventory.set_default();
        }
        self.inventory.as_mut().unwrap()
    }

    // Take field
    pub fn take_inventory(&mut self) -> super::inventory::Inventory {
        self.inventory.take().unwrap_or_else(|| super::inventory::Inventory::new())
    }
}

impl ::protobuf::Message for ReportInventoryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.inventory {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inventory_checksum)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.inventory)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.instance_id_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.instance_id_token);
        }
        if !self.inventory_checksum.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.inventory_checksum);
        }
        if let Some(ref v) = self.inventory.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.instance_id_token.is_empty() {
            os.write_string(1, &self.instance_id_token)?;
        }
        if !self.inventory_checksum.is_empty() {
            os.write_string(2, &self.inventory_checksum)?;
        }
        if let Some(ref v) = self.inventory.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportInventoryRequest {
        ReportInventoryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id_token",
                |m: &ReportInventoryRequest| { &m.instance_id_token },
                |m: &mut ReportInventoryRequest| { &mut m.instance_id_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inventory_checksum",
                |m: &ReportInventoryRequest| { &m.inventory_checksum },
                |m: &mut ReportInventoryRequest| { &mut m.inventory_checksum },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::inventory::Inventory>>(
                "inventory",
                |m: &ReportInventoryRequest| { &m.inventory },
                |m: &mut ReportInventoryRequest| { &mut m.inventory },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportInventoryRequest>(
                "ReportInventoryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportInventoryRequest {
        static instance: ::protobuf::rt::LazyV2<ReportInventoryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportInventoryRequest::new)
    }
}

impl ::protobuf::Clear for ReportInventoryRequest {
    fn clear(&mut self) {
        self.instance_id_token.clear();
        self.inventory_checksum.clear();
        self.inventory.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportInventoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportInventoryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportInventoryResponse {
    // message fields
    pub report_full_inventory: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportInventoryResponse {
    fn default() -> &'a ReportInventoryResponse {
        <ReportInventoryResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReportInventoryResponse {
    pub fn new() -> ReportInventoryResponse {
        ::std::default::Default::default()
    }

    // bool report_full_inventory = 1;


    pub fn get_report_full_inventory(&self) -> bool {
        self.report_full_inventory
    }
    pub fn clear_report_full_inventory(&mut self) {
        self.report_full_inventory = false;
    }

    // Param is passed by value, moved
    pub fn set_report_full_inventory(&mut self, v: bool) {
        self.report_full_inventory = v;
    }
}

impl ::protobuf::Message for ReportInventoryResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.report_full_inventory = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.report_full_inventory != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.report_full_inventory != false {
            os.write_bool(1, self.report_full_inventory)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportInventoryResponse {
        ReportInventoryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "report_full_inventory",
                |m: &ReportInventoryResponse| { &m.report_full_inventory },
                |m: &mut ReportInventoryResponse| { &mut m.report_full_inventory },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportInventoryResponse>(
                "ReportInventoryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportInventoryResponse {
        static instance: ::protobuf::rt::LazyV2<ReportInventoryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportInventoryResponse::new)
    }
}

impl ::protobuf::Clear for ReportInventoryResponse {
    fn clear(&mut self) {
        self.report_full_inventory = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportInventoryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportInventoryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n:google/cloud/osconfig/agentendpoint/v1/agentendpoint.proto\x12&google\
    .cloud.osconfig.agentendpoint.v1\x1a\x17google/api/client.proto\x1a\x1fg\
    oogle/api/field_behavior.proto\x1a6google/cloud/osconfig/agentendpoint/v\
    1/inventory.proto\x1a2google/cloud/osconfig/agentendpoint/v1/tasks.proto\
    \"{\n\x1eReceiveTaskNotificationRequest\x12/\n\x11instance_id_token\x18\
    \x01\x20\x01(\tR\x0finstanceIdTokenB\x03\xe0A\x02\x12(\n\ragent_version\
    \x18\x02\x20\x01(\tR\x0cagentVersionB\x03\xe0A\x02\"!\n\x1fReceiveTaskNo\
    tificationResponse\"G\n\x14StartNextTaskRequest\x12/\n\x11instance_id_to\
    ken\x18\x01\x20\x01(\tR\x0finstanceIdTokenB\x03\xe0A\x02\"Y\n\x15StartNe\
    xtTaskResponse\x12@\n\x04task\x18\x01\x20\x01(\x0b2,.google.cloud.osconf\
    ig.agentendpoint.v1.TaskR\x04task\"\xc5\x04\n\x19ReportTaskProgressReque\
    st\x12/\n\x11instance_id_token\x18\x01\x20\x01(\tR\x0finstanceIdTokenB\
    \x03\xe0A\x02\x12\x1c\n\x07task_id\x18\x02\x20\x01(\tR\x06taskIdB\x03\
    \xe0A\x02\x12R\n\ttask_type\x18\x03\x20\x01(\x0e20.google.cloud.osconfig\
    .agentendpoint.v1.TaskTypeR\x08taskTypeB\x03\xe0A\x02\x12\x81\x01\n\x1ba\
    pply_patches_task_progress\x18\x04\x20\x01(\x0b2@.google.cloud.osconfig.\
    agentendpoint.v1.ApplyPatchesTaskProgressH\0R\x18applyPatchesTaskProgres\
    s\x12u\n\x17exec_step_task_progress\x18\x05\x20\x01(\x0b2<.google.cloud.\
    osconfig.agentendpoint.v1.ExecStepTaskProgressH\0R\x14execStepTaskProgre\
    ss\x12~\n\x1aapply_config_task_progress\x18\x06\x20\x01(\x0b2?.google.cl\
    oud.osconfig.agentendpoint.v1.ApplyConfigTaskProgressH\0R\x17applyConfig\
    TaskProgressB\n\n\x08progress\"z\n\x1aReportTaskProgressResponse\x12\\\n\
    \x0etask_directive\x18\x01\x20\x01(\x0e25.google.cloud.osconfig.agentend\
    point.v1.TaskDirectiveR\rtaskDirective\"\xd5\x04\n\x19ReportTaskComplete\
    Request\x12/\n\x11instance_id_token\x18\x01\x20\x01(\tR\x0finstanceIdTok\
    enB\x03\xe0A\x02\x12\x1c\n\x07task_id\x18\x02\x20\x01(\tR\x06taskIdB\x03\
    \xe0A\x02\x12R\n\ttask_type\x18\x03\x20\x01(\x0e20.google.cloud.osconfig\
    .agentendpoint.v1.TaskTypeR\x08taskTypeB\x03\xe0A\x02\x12#\n\rerror_mess\
    age\x18\x04\x20\x01(\tR\x0cerrorMessage\x12{\n\x19apply_patches_task_out\
    put\x18\x05\x20\x01(\x0b2>.google.cloud.osconfig.agentendpoint.v1.ApplyP\
    atchesTaskOutputH\0R\x16applyPatchesTaskOutput\x12o\n\x15exec_step_task_\
    output\x18\x06\x20\x01(\x0b2:.google.cloud.osconfig.agentendpoint.v1.Exe\
    cStepTaskOutputH\0R\x12execStepTaskOutput\x12x\n\x18apply_config_task_ou\
    tput\x18\x07\x20\x01(\x0b2=.google.cloud.osconfig.agentendpoint.v1.Apply\
    ConfigTaskOutputH\0R\x15applyConfigTaskOutputB\x08\n\x06output\"\x1c\n\
    \x1aReportTaskCompleteResponse\"\xbb\x02\n\x14RegisterAgentRequest\x12/\
    \n\x11instance_id_token\x18\x01\x20\x01(\tR\x0finstanceIdTokenB\x03\xe0A\
    \x02\x12(\n\ragent_version\x18\x02\x20\x01(\tR\x0cagentVersionB\x03\xe0A\
    \x02\x12:\n\x16supported_capabilities\x18\x03\x20\x03(\tR\x15supportedCa\
    pabilitiesB\x03\xe0A\x02\x12\x20\n\x0cos_long_name\x18\x04\x20\x01(\tR\n\
    osLongName\x12\"\n\ros_short_name\x18\x05\x20\x01(\tR\x0bosShortName\x12\
    \x1d\n\nos_version\x18\x06\x20\x01(\tR\tosVersion\x12'\n\x0fos_architect\
    ure\x18\x07\x20\x01(\tR\x0eosArchitecture\"\x17\n\x15RegisterAgentRespon\
    se\"\xd3\x01\n\x16ReportInventoryRequest\x12/\n\x11instance_id_token\x18\
    \x01\x20\x01(\tR\x0finstanceIdTokenB\x03\xe0A\x02\x122\n\x12inventory_ch\
    ecksum\x18\x02\x20\x01(\tR\x11inventoryChecksumB\x03\xe0A\x02\x12T\n\tin\
    ventory\x18\x03\x20\x01(\x0b21.google.cloud.osconfig.agentendpoint.v1.In\
    ventoryR\tinventoryB\x03\xe0A\x01\"M\n\x17ReportInventoryResponse\x122\n\
    \x15report_full_inventory\x18\x01\x20\x01(\x08R\x13reportFullInventory2\
    \xd6\t\n\x14AgentEndpointService\x12\xd0\x01\n\x17ReceiveTaskNotificatio\
    n\x12F.google.cloud.osconfig.agentendpoint.v1.ReceiveTaskNotificationReq\
    uest\x1aG.google.cloud.osconfig.agentendpoint.v1.ReceiveTaskNotification\
    Response\"\"\xdaA\x1finstance_id_token,agent_version0\x01\x12\xa2\x01\n\
    \rStartNextTask\x12<.google.cloud.osconfig.agentendpoint.v1.StartNextTas\
    kRequest\x1a=.google.cloud.osconfig.agentendpoint.v1.StartNextTaskRespon\
    se\"\x14\xdaA\x11instance_id_token\x12\xc3\x01\n\x12ReportTaskProgress\
    \x12A.google.cloud.osconfig.agentendpoint.v1.ReportTaskProgressRequest\
    \x1aB.google.cloud.osconfig.agentendpoint.v1.ReportTaskProgressResponse\
    \"&\xdaA#instance_id_token,task_id,task_type\x12\xd1\x01\n\x12ReportTask\
    Complete\x12A.google.cloud.osconfig.agentendpoint.v1.ReportTaskCompleteR\
    equest\x1aB.google.cloud.osconfig.agentendpoint.v1.ReportTaskCompleteRes\
    ponse\"4\xdaA1instance_id_token,task_id,task_type,error_message\x12\xc7\
    \x01\n\rRegisterAgent\x12<.google.cloud.osconfig.agentendpoint.v1.Regist\
    erAgentRequest\x1a=.google.cloud.osconfig.agentendpoint.v1.RegisterAgent\
    Response\"9\xdaA6instance_id_token,agent_version,supported_capabilities\
    \x12\xc5\x01\n\x0fReportInventory\x12>.google.cloud.osconfig.agentendpoi\
    nt.v1.ReportInventoryRequest\x1a?.google.cloud.osconfig.agentendpoint.v1\
    .ReportInventoryResponse\"1\xdaA.instance_id_token,inventory_checksum,in\
    ventory\x1a\x1a\xcaA\x17osconfig.googleapis.comB\x94\x01\n*com.google.cl\
    oud.osconfig.agentendpoint.v1B\x12AgentEndpointProtoP\x01ZPcloud.google.\
    com/go/osconfig/agentendpoint/apiv1/agentendpointpb;agentendpointpbJ\xf0\
    C\n\x07\x12\x05\x0e\0\xe9\x01\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xb1\x04\x20Copyright\x202020\x20Google\x20LLC\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\0/\n\t\n\x02\x03\0\x12\x03\x12\0!\n\t\n\x02\x03\x01\x12\
    \x03\x13\0)\n\t\n\x02\x03\x02\x12\x03\x14\0@\n\t\n\x02\x03\x03\x12\x03\
    \x15\0<\n\x08\n\x01\x08\x12\x03\x17\0g\n\t\n\x02\x08\x0b\x12\x03\x17\0g\
    \n\x08\n\x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\x18\0\"\n\x08\n\
    \x01\x08\x12\x03\x19\03\n\t\n\x02\x08\x08\x12\x03\x19\03\n\x08\n\x01\x08\
    \x12\x03\x1a\0C\n\t\n\x02\x08\x01\x12\x03\x1a\0C\n+\n\x02\x06\0\x12\x04\
    \x1d\0>\x01\x1a\x1f\x20OS\x20Config\x20agent\x20endpoint\x20API.\n\n\n\n\
    \x03\x06\0\x01\x12\x03\x1d\x08\x1c\n\n\n\x03\x06\0\x03\x12\x03\x1e\x02?\
    \n\x0c\n\x05\x06\0\x03\x99\x08\x12\x03\x1e\x02?\nK\n\x04\x06\0\x02\0\x12\
    \x04!\x02#\x03\x1a=\x20Stream\x20established\x20by\x20client\x20to\x20re\
    ceive\x20Task\x20notifications.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03!\
    \x06\x1d\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03!\x1e<\n\x0c\n\x05\x06\0\x02\
    \0\x06\x12\x03!GM\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03!Nm\n\x0c\n\x05\x06\
    \0\x02\0\x04\x12\x03\"\x04M\n\x0f\n\x08\x06\0\x02\0\x04\x9b\x08\0\x12\
    \x03\"\x04M\nP\n\x04\x06\0\x02\x01\x12\x04&\x02(\x03\x1aB\x20Signals\x20\
    the\x20start\x20of\x20a\x20task\x20execution\x20and\x20returns\x20the\
    \x20task\x20info.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03&\x06\x13\n\x0c\
    \n\x05\x06\0\x02\x01\x02\x12\x03&\x14(\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x03&3H\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03'\x04?\n\x0f\n\x08\x06\0\
    \x02\x01\x04\x9b\x08\0\x12\x03'\x04?\nN\n\x04\x06\0\x02\x02\x12\x04+\x02\
    -\x03\x1a@\x20Signals\x20an\x20intermediary\x20progress\x20checkpoint\
    \x20in\x20task\x20execution.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03+\
    \x06\x18\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03+\x192\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03+=W\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03,\x04Q\n\
    \x0f\n\x08\x06\0\x02\x02\x04\x9b\x08\0\x12\x03,\x04Q\nb\n\x04\x06\0\x02\
    \x03\x12\x041\x023\x03\x1aT\x20Signals\x20that\x20the\x20task\x20executi\
    on\x20is\x20complete\x20and\x20optionally\x20returns\x20the\x20next\n\
    \x20task.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x031\x06\x18\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x031\x192\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x031=\
    W\n\x0c\n\x05\x06\0\x02\x03\x04\x12\x032\x04_\n\x0f\n\x08\x06\0\x02\x03\
    \x04\x9b\x08\0\x12\x032\x04_\n6\n\x04\x06\0\x02\x04\x12\x046\x028\x03\
    \x1a(\x20Registers\x20the\x20agent\x20running\x20on\x20the\x20VM.\n\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x036\x06\x13\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x036\x14(\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x0363H\n\x0c\n\x05\
    \x06\0\x02\x04\x04\x12\x037\x04d\n\x0f\n\x08\x06\0\x02\x04\x04\x9b\x08\0\
    \x12\x037\x04d\n2\n\x04\x06\0\x02\x05\x12\x04;\x02=\x03\x1a$\x20Reports\
    \x20the\x20VMs\x20current\x20inventory.\n\n\x0c\n\x05\x06\0\x02\x05\x01\
    \x12\x03;\x06\x15\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03;\x16,\n\x0c\n\
    \x05\x06\0\x02\x05\x03\x12\x03;7N\n\x0c\n\x05\x06\0\x02\x05\x04\x12\x03<\
    \x04\\\n\x0f\n\x08\x06\0\x02\x05\x04\x9b\x08\0\x12\x03<\x04\\\n>\n\x02\
    \x04\0\x12\x04A\0I\x01\x1a2\x20A\x20request\x20message\x20to\x20receive\
    \x20task\x20notifications.\n\n\n\n\x03\x04\0\x01\x12\x03A\x08&\n\xf1\x01\
    \n\x04\x04\0\x02\0\x12\x03E\x02H\x1a\xe3\x01\x20Required.\x20This\x20is\
    \x20the\x20Compute\x20Engine\x20instance\x20identity\x20token\x20describ\
    ed\x20in\n\x20https://cloud.google.com/compute/docs/instances/verifying-\
    instance-identity\n\x20where\x20the\x20audience\x20is\x20'osconfig.googl\
    eapis.com'\x20and\x20the\x20format\x20is\x20'full'.\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03E\t\x1a\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03E\x1d\x1e\n\x0c\n\x05\x04\0\x02\0\x08\
    \x12\x03E\x1fG\n\x0f\n\x08\x04\0\x02\0\x08\x9c\x08\0\x12\x03E\x20F\nE\n\
    \x04\x04\0\x02\x01\x12\x03H\x02D\x1a8\x20Required.\x20The\x20version\x20\
    of\x20the\x20agent\x20making\x20the\x20request.\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03H\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03H\t\x16\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03H\x19\x1a\n\x0c\n\x05\x04\0\x02\x01\
    \x08\x12\x03H\x1bC\n\x0f\n\x08\x04\0\x02\x01\x08\x9c\x08\0\x12\x03H\x1cB\
    \n{\n\x02\x04\x01\x12\x04M\0O\x01\x1ao\x20The\x20streaming\x20rpc\x20mes\
    sage\x20that\x20will\x20notify\x20the\x20agent\x20when\x20it\x20has\x20a\
    \x20task\n\x20it\x20needs\x20to\x20perform\x20on\x20the\x20instance.\n\n\
    \n\n\x03\x04\x01\x01\x12\x03M\x08'\nL\n\x02\x04\x02\x12\x04R\0W\x01\x1a@\
    \x20A\x20request\x20message\x20for\x20signaling\x20the\x20start\x20of\
    \x20a\x20task\x20execution.\n\n\n\n\x03\x04\x02\x01\x12\x03R\x08\x1c\n\
    \xf1\x01\n\x04\x04\x02\x02\0\x12\x03V\x02H\x1a\xe3\x01\x20Required.\x20T\
    his\x20is\x20the\x20Compute\x20Engine\x20instance\x20identity\x20token\
    \x20described\x20in\n\x20https://cloud.google.com/compute/docs/instances\
    /verifying-instance-identity\n\x20where\x20the\x20audience\x20is\x20'osc\
    onfig.googleapis.com'\x20and\x20the\x20format\x20is\x20'full'.\n\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03V\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03V\t\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03V\x1d\x1e\n\x0c\n\
    \x05\x04\x02\x02\0\x08\x12\x03V\x1fG\n\x0f\n\x08\x04\x02\x02\0\x08\x9c\
    \x08\0\x12\x03V\x20F\nR\n\x02\x04\x03\x12\x04Z\0^\x01\x1aF\x20A\x20respo\
    nse\x20message\x20that\x20contains\x20the\x20details\x20of\x20the\x20tas\
    k\x20to\x20work\x20on.\n\n\n\n\x03\x04\x03\x01\x12\x03Z\x08\x1d\ns\n\x04\
    \x04\x03\x02\0\x12\x03]\x02\x10\x1af\x20The\x20details\x20of\x20the\x20t\
    ask\x20that\x20should\x20be\x20worked\x20on.\x20\x20Can\x20be\x20empty\
    \x20if\x20there\n\x20is\x20no\x20new\x20task\x20to\x20work\x20on.\n\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03]\x02\x06\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03]\x07\x0b\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03]\x0e\x0f\nK\
    \n\x02\x04\x04\x12\x04a\0~\x01\x1a?\x20A\x20request\x20message\x20for\
    \x20reporting\x20the\x20progress\x20of\x20current\x20task.\n\n\n\n\x03\
    \x04\x04\x01\x12\x03a\x08!\n\xf1\x01\n\x04\x04\x04\x02\0\x12\x03e\x02H\
    \x1a\xe3\x01\x20Required.\x20This\x20is\x20the\x20Compute\x20Engine\x20i\
    nstance\x20identity\x20token\x20described\x20in\n\x20https://cloud.googl\
    e.com/compute/docs/instances/verifying-instance-identity\n\x20where\x20t\
    he\x20audience\x20is\x20'osconfig.googleapis.com'\x20and\x20the\x20forma\
    t\x20is\x20'full'.\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03e\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03e\t\x1a\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03e\x1d\x1e\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03e\x1fG\n\x0f\
    \n\x08\x04\x04\x02\0\x08\x9c\x08\0\x12\x03e\x20F\nG\n\x04\x04\x04\x02\
    \x01\x12\x03h\x02>\x1a:\x20Required.\x20Unique\x20identifier\x20of\x20th\
    e\x20task\x20this\x20applies\x20to.\n\n\x0c\n\x05\x04\x04\x02\x01\x05\
    \x12\x03h\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03h\t\x10\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03h\x13\x14\n\x0c\n\x05\x04\x04\x02\x01\
    \x08\x12\x03h\x15=\n\x0f\n\x08\x04\x04\x02\x01\x08\x9c\x08\0\x12\x03h\
    \x16<\n\xa3\x02\n\x04\x04\x04\x02\x02\x12\x03q\x02B\x1a\x95\x02\x20Requi\
    red.\x20The\x20type\x20of\x20task\x20to\x20report\x20progress\x20on.\n\n\
    \x20Progress\x20must\x20include\x20the\x20appropriate\x20message\x20base\
    d\x20on\x20this\x20enum\x20as\n\x20specified\x20below:\n\x20APPLY_PATCHE\
    S\x20=\x20ApplyPatchesTaskProgress\n\x20EXEC_STEP\x20=\x20Progress\x20no\
    t\x20supported\x20for\x20this\x20type.\n\x20APPLY_CONFIG_TASK\x20=\x20Ap\
    plyConfigTaskProgress\n\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03q\x02\n\n\
    \x0c\n\x05\x04\x04\x02\x02\x01\x12\x03q\x0b\x14\n\x0c\n\x05\x04\x04\x02\
    \x02\x03\x12\x03q\x17\x18\n\x0c\n\x05\x04\x04\x02\x02\x08\x12\x03q\x19A\
    \n\x0f\n\x08\x04\x04\x02\x02\x08\x9c\x08\0\x12\x03q\x1a@\n:\n\x04\x04\
    \x04\x08\0\x12\x04t\x02}\x03\x1a,\x20Intermediate\x20progress\x20of\x20t\
    he\x20current\x20task.\n\n\x0c\n\x05\x04\x04\x08\0\x01\x12\x03t\x08\x10\
    \nD\n\x04\x04\x04\x02\x03\x12\x03v\x04=\x1a7\x20Details\x20about\x20the\
    \x20progress\x20of\x20the\x20apply\x20patches\x20task.\n\n\x0c\n\x05\x04\
    \x04\x02\x03\x06\x12\x03v\x04\x1c\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\
    \x03v\x1d8\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03v;<\n@\n\x04\x04\x04\
    \x02\x04\x12\x03y\x045\x1a3\x20Details\x20about\x20the\x20progress\x20of\
    \x20the\x20exec\x20step\x20task.\n\n\x0c\n\x05\x04\x04\x02\x04\x06\x12\
    \x03y\x04\x18\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03y\x190\n\x0c\n\x05\
    \x04\x04\x02\x04\x03\x12\x03y34\nC\n\x04\x04\x04\x02\x05\x12\x03|\x04;\
    \x1a6\x20Details\x20about\x20the\x20progress\x20of\x20the\x20apply\x20co\
    nfig\x20task.\n\n\x0c\n\x05\x04\x04\x02\x05\x06\x12\x03|\x04\x1b\n\x0c\n\
    \x05\x04\x04\x02\x05\x01\x12\x03|\x1c6\n\x0c\n\x05\x04\x04\x02\x05\x03\
    \x12\x03|9:\nX\n\x02\x04\x05\x12\x06\x81\x01\0\x84\x01\x01\x1aJ\x20The\
    \x20response\x20message\x20after\x20the\x20agent\x20reported\x20the\x20c\
    urrent\x20task\x20progress.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x81\x01\
    \x08\"\n3\n\x04\x04\x05\x02\0\x12\x04\x83\x01\x02#\x1a%\x20Instructs\x20\
    agent\x20to\x20continue\x20or\x20not.\n\n\r\n\x05\x04\x05\x02\0\x06\x12\
    \x04\x83\x01\x02\x0f\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x83\x01\x10\x1e\
    \n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x83\x01!\"\nS\n\x02\x04\x06\x12\x06\
    \x87\x01\0\xa7\x01\x01\x1aE\x20A\x20request\x20message\x20for\x20signali\
    ng\x20the\x20completion\x20of\x20a\x20task\x20execution.\n\n\x0b\n\x03\
    \x04\x06\x01\x12\x04\x87\x01\x08!\n\xf2\x01\n\x04\x04\x06\x02\0\x12\x04\
    \x8b\x01\x02H\x1a\xe3\x01\x20Required.\x20This\x20is\x20the\x20Compute\
    \x20Engine\x20instance\x20identity\x20token\x20described\x20in\n\x20http\
    s://cloud.google.com/compute/docs/instances/verifying-instance-identity\
    \n\x20where\x20the\x20audience\x20is\x20'osconfig.googleapis.com'\x20and\
    \x20the\x20format\x20is\x20'full'.\n\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\
    \x8b\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\x8b\x01\t\x1a\n\r\n\
    \x05\x04\x06\x02\0\x03\x12\x04\x8b\x01\x1d\x1e\n\r\n\x05\x04\x06\x02\0\
    \x08\x12\x04\x8b\x01\x1fG\n\x10\n\x08\x04\x06\x02\0\x08\x9c\x08\0\x12\
    \x04\x8b\x01\x20F\nH\n\x04\x04\x06\x02\x01\x12\x04\x8e\x01\x02>\x1a:\x20\
    Required.\x20Unique\x20identifier\x20of\x20the\x20task\x20this\x20applie\
    s\x20to.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\x8e\x01\x02\x08\n\r\n\
    \x05\x04\x06\x02\x01\x01\x12\x04\x8e\x01\t\x10\n\r\n\x05\x04\x06\x02\x01\
    \x03\x12\x04\x8e\x01\x13\x14\n\r\n\x05\x04\x06\x02\x01\x08\x12\x04\x8e\
    \x01\x15=\n\x10\n\x08\x04\x06\x02\x01\x08\x9c\x08\0\x12\x04\x8e\x01\x16<\
    \n\x89\x02\n\x04\x04\x06\x02\x02\x12\x04\x97\x01\x02B\x1a\xfa\x01\x20Req\
    uired.\x20The\x20type\x20of\x20task\x20to\x20report\x20completed.\n\n\
    \x20Output\x20must\x20include\x20the\x20appropriate\x20message\x20based\
    \x20on\x20this\x20enum\x20as\n\x20specified\x20below:\n\x20APPLY_PATCHES\
    \x20=\x20ApplyPatchesTaskOutput\n\x20EXEC_STEP\x20=\x20ExecStepTaskOutpu\
    t\n\x20APPLY_CONFIG_TASK\x20=\x20ApplyConfigTaskOutput\n\n\r\n\x05\x04\
    \x06\x02\x02\x06\x12\x04\x97\x01\x02\n\n\r\n\x05\x04\x06\x02\x02\x01\x12\
    \x04\x97\x01\x0b\x14\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\x97\x01\x17\
    \x18\n\r\n\x05\x04\x06\x02\x02\x08\x12\x04\x97\x01\x19A\n\x10\n\x08\x04\
    \x06\x02\x02\x08\x9c\x08\0\x12\x04\x97\x01\x1a@\nO\n\x04\x04\x06\x02\x03\
    \x12\x04\x9a\x01\x02\x1b\x1aA\x20Descriptive\x20error\x20message\x20if\
    \x20the\x20task\x20execution\x20ended\x20in\x20error.\n\n\r\n\x05\x04\
    \x06\x02\x03\x05\x12\x04\x9a\x01\x02\x08\n\r\n\x05\x04\x06\x02\x03\x01\
    \x12\x04\x9a\x01\t\x16\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\x9a\x01\x19\
    \x1a\n;\n\x04\x04\x06\x08\0\x12\x06\x9d\x01\x02\xa6\x01\x03\x1a+\x20Fina\
    l\x20output\x20details\x20of\x20the\x20current\x20task.\n\n\r\n\x05\x04\
    \x06\x08\0\x01\x12\x04\x9d\x01\x08\x0e\n?\n\x04\x04\x06\x02\x04\x12\x04\
    \x9f\x01\x049\x1a1\x20Final\x20output\x20details\x20of\x20the\x20apply\
    \x20patches\x20task;\n\n\r\n\x05\x04\x06\x02\x04\x06\x12\x04\x9f\x01\x04\
    \x1a\n\r\n\x05\x04\x06\x02\x04\x01\x12\x04\x9f\x01\x1b4\n\r\n\x05\x04\
    \x06\x02\x04\x03\x12\x04\x9f\x0178\n;\n\x04\x04\x06\x02\x05\x12\x04\xa2\
    \x01\x041\x1a-\x20Final\x20output\x20details\x20of\x20the\x20exec\x20ste\
    p\x20task;\n\n\r\n\x05\x04\x06\x02\x05\x06\x12\x04\xa2\x01\x04\x16\n\r\n\
    \x05\x04\x06\x02\x05\x01\x12\x04\xa2\x01\x17,\n\r\n\x05\x04\x06\x02\x05\
    \x03\x12\x04\xa2\x01/0\n>\n\x04\x04\x06\x02\x06\x12\x04\xa5\x01\x047\x1a\
    0\x20Final\x20output\x20details\x20of\x20the\x20apply\x20config\x20task;\
    \n\n\r\n\x05\x04\x06\x02\x06\x06\x12\x04\xa5\x01\x04\x19\n\r\n\x05\x04\
    \x06\x02\x06\x01\x12\x04\xa5\x01\x1a2\n\r\n\x05\x04\x06\x02\x06\x03\x12\
    \x04\xa5\x0156\nX\n\x02\x04\x07\x12\x06\xaa\x01\0\xac\x01\x01\x1aJ\x20Th\
    e\x20response\x20message\x20after\x20the\x20agent\x20signaled\x20the\x20\
    current\x20task\x20complete.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xaa\x01\
    \x08\"\n>\n\x02\x04\x08\x12\x06\xaf\x01\0\xcc\x01\x01\x1a0\x20The\x20req\
    uest\x20message\x20for\x20registering\x20the\x20agent.\n\n\x0b\n\x03\x04\
    \x08\x01\x12\x04\xaf\x01\x08\x1c\n\xf2\x01\n\x04\x04\x08\x02\0\x12\x04\
    \xb3\x01\x02H\x1a\xe3\x01\x20Required.\x20This\x20is\x20the\x20Compute\
    \x20Engine\x20instance\x20identity\x20token\x20described\x20in\n\x20http\
    s://cloud.google.com/compute/docs/instances/verifying-instance-identity\
    \n\x20where\x20the\x20audience\x20is\x20'osconfig.googleapis.com'\x20and\
    \x20the\x20format\x20is\x20'full'.\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\
    \xb3\x01\x02\x08\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xb3\x01\t\x1a\n\r\n\
    \x05\x04\x08\x02\0\x03\x12\x04\xb3\x01\x1d\x1e\n\r\n\x05\x04\x08\x02\0\
    \x08\x12\x04\xb3\x01\x1fG\n\x10\n\x08\x04\x08\x02\0\x08\x9c\x08\0\x12\
    \x04\xb3\x01\x20F\n3\n\x04\x04\x08\x02\x01\x12\x04\xb6\x01\x02D\x1a%\x20\
    Required.\x20The\x20version\x20of\x20the\x20agent.\n\n\r\n\x05\x04\x08\
    \x02\x01\x05\x12\x04\xb6\x01\x02\x08\n\r\n\x05\x04\x08\x02\x01\x01\x12\
    \x04\xb6\x01\t\x16\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xb6\x01\x19\x1a\
    \n\r\n\x05\x04\x08\x02\x01\x08\x12\x04\xb6\x01\x1bC\n\x10\n\x08\x04\x08\
    \x02\x01\x08\x9c\x08\0\x12\x04\xb6\x01\x1cB\n\x80\x01\n\x04\x04\x08\x02\
    \x02\x12\x04\xbc\x01\x02V\x1ar\x20Required.\x20The\x20capabilities\x20su\
    pported\x20by\x20the\x20agent.\x20Supported\x20values\x20are:\n\x20PATCH\
    _GA\n\x20GUEST_POLICY_BETA\n\x20CONFIG_V1\n\n\r\n\x05\x04\x08\x02\x02\
    \x04\x12\x04\xbc\x01\x02\n\n\r\n\x05\x04\x08\x02\x02\x05\x12\x04\xbc\x01\
    \x0b\x11\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\xbc\x01\x12(\n\r\n\x05\
    \x04\x08\x02\x02\x03\x12\x04\xbc\x01+,\n\r\n\x05\x04\x08\x02\x02\x08\x12\
    \x04\xbc\x01-U\n\x10\n\x08\x04\x08\x02\x02\x08\x9c\x08\0\x12\x04\xbc\x01\
    .T\n\x80\x01\n\x04\x04\x08\x02\x03\x12\x04\xc1\x01\x02\x1a\x1ar\x20The\
    \x20operating\x20system\x20long\x20name.\n\x20For\x20example\x20'Debian\
    \x20GNU/Linux\x209'\x20or\x20'Microsoft\x20Window\x20Server\x202019\n\
    \x20Datacenter'.\n\n\r\n\x05\x04\x08\x02\x03\x05\x12\x04\xc1\x01\x02\x08\
    \n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\xc1\x01\t\x15\n\r\n\x05\x04\x08\
    \x02\x03\x03\x12\x04\xc1\x01\x18\x19\nU\n\x04\x04\x08\x02\x04\x12\x04\
    \xc5\x01\x02\x1b\x1aG\x20The\x20operating\x20system\x20short\x20name.\n\
    \x20For\x20example,\x20'windows'\x20or\x20'debian'.\n\n\r\n\x05\x04\x08\
    \x02\x04\x05\x12\x04\xc5\x01\x02\x08\n\r\n\x05\x04\x08\x02\x04\x01\x12\
    \x04\xc5\x01\t\x16\n\r\n\x05\x04\x08\x02\x04\x03\x12\x04\xc5\x01\x19\x1a\
    \n4\n\x04\x04\x08\x02\x05\x12\x04\xc8\x01\x02\x18\x1a&\x20The\x20version\
    \x20of\x20the\x20operating\x20system.\n\n\r\n\x05\x04\x08\x02\x05\x05\
    \x12\x04\xc8\x01\x02\x08\n\r\n\x05\x04\x08\x02\x05\x01\x12\x04\xc8\x01\t\
    \x13\n\r\n\x05\x04\x08\x02\x05\x03\x12\x04\xc8\x01\x16\x17\n@\n\x04\x04\
    \x08\x02\x06\x12\x04\xcb\x01\x02\x1d\x1a2\x20The\x20system\x20architectu\
    re\x20of\x20the\x20operating\x20system.\n\n\r\n\x05\x04\x08\x02\x06\x05\
    \x12\x04\xcb\x01\x02\x08\n\r\n\x05\x04\x08\x02\x06\x01\x12\x04\xcb\x01\t\
    \x18\n\r\n\x05\x04\x08\x02\x06\x03\x12\x04\xcb\x01\x1b\x1c\n@\n\x02\x04\
    \t\x12\x06\xcf\x01\0\xd1\x01\x01\x1a2\x20The\x20response\x20message\x20a\
    fter\x20the\x20agent\x20registered.\n\n\x0b\n\x03\x04\t\x01\x12\x04\xcf\
    \x01\x08\x1d\nJ\n\x02\x04\n\x12\x06\xd4\x01\0\xe3\x01\x01\x1a<\x20The\
    \x20request\x20message\x20for\x20having\x20the\x20agent\x20report\x20inv\
    entory.\n\n\x0b\n\x03\x04\n\x01\x12\x04\xd4\x01\x08\x1e\n\xf2\x01\n\x04\
    \x04\n\x02\0\x12\x04\xd8\x01\x02H\x1a\xe3\x01\x20Required.\x20This\x20is\
    \x20the\x20Compute\x20Engine\x20instance\x20identity\x20token\x20describ\
    ed\x20in\n\x20https://cloud.google.com/compute/docs/instances/verifying-\
    instance-identity\n\x20where\x20the\x20audience\x20is\x20'osconfig.googl\
    eapis.com'\x20and\x20the\x20format\x20is\x20'full'.\n\n\r\n\x05\x04\n\
    \x02\0\x05\x12\x04\xd8\x01\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xd8\
    \x01\t\x1a\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xd8\x01\x1d\x1e\n\r\n\x05\
    \x04\n\x02\0\x08\x12\x04\xd8\x01\x1fG\n\x10\n\x08\x04\n\x02\0\x08\x9c\
    \x08\0\x12\x04\xd8\x01\x20F\n\xe2\x01\n\x04\x04\n\x02\x01\x12\x04\xdd\
    \x01\x02I\x1a\xd3\x01\x20Required.\x20This\x20is\x20a\x20client\x20creat\
    ed\x20checksum\x20that\x20should\x20be\x20generated\x20based\x20on\x20th\
    e\n\x20contents\x20of\x20the\x20reported\x20inventory.\x20\x20This\x20wi\
    ll\x20be\x20used\x20by\x20the\x20service\x20to\n\x20determine\x20if\x20i\
    t\x20has\x20the\x20latest\x20version\x20of\x20inventory.\n\n\r\n\x05\x04\
    \n\x02\x01\x05\x12\x04\xdd\x01\x02\x08\n\r\n\x05\x04\n\x02\x01\x01\x12\
    \x04\xdd\x01\t\x1b\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xdd\x01\x1e\x1f\n\
    \r\n\x05\x04\n\x02\x01\x08\x12\x04\xdd\x01\x20H\n\x10\n\x08\x04\n\x02\
    \x01\x08\x9c\x08\0\x12\x04\xdd\x01!G\n\xca\x01\n\x04\x04\n\x02\x02\x12\
    \x04\xe2\x01\x02C\x1a\xbb\x01\x20Optional.\x20This\x20is\x20the\x20detai\
    ls\x20of\x20the\x20inventory.\x20\x20Should\x20only\x20be\x20provided\
    \x20if\x20the\n\x20inventory\x20has\x20changed\x20since\x20the\x20last\
    \x20report,\x20or\x20if\x20instructed\x20by\x20the\n\x20service\x20to\
    \x20provide\x20full\x20inventory.\n\n\r\n\x05\x04\n\x02\x02\x06\x12\x04\
    \xe2\x01\x02\x0b\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\xe2\x01\x0c\x15\n\r\
    \n\x05\x04\n\x02\x02\x03\x12\x04\xe2\x01\x18\x19\n\r\n\x05\x04\n\x02\x02\
    \x08\x12\x04\xe2\x01\x1aB\n\x10\n\x08\x04\n\x02\x02\x08\x9c\x08\0\x12\
    \x04\xe2\x01\x1bA\nL\n\x02\x04\x0b\x12\x06\xe6\x01\0\xe9\x01\x01\x1a>\
    \x20The\x20response\x20message\x20after\x20the\x20agent\x20has\x20report\
    ed\x20inventory.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xe6\x01\x08\x1f\nR\n\
    \x04\x04\x0b\x02\0\x12\x04\xe8\x01\x02!\x1aD\x20If\x20true,\x20the\x20fu\
    ll\x20inventory\x20should\x20be\x20reported\x20back\x20to\x20the\x20serv\
    er.\n\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xe8\x01\x02\x06\n\r\n\x05\x04\
    \x0b\x02\0\x01\x12\x04\xe8\x01\x07\x1c\n\r\n\x05\x04\x0b\x02\0\x03\x12\
    \x04\xe8\x01\x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
