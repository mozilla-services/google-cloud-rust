// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/osconfig/agentendpoint/v1/config_common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct OSPolicyResourceConfigStep {
    // message fields
    pub field_type: OSPolicyResourceConfigStep_Type,
    pub outcome: OSPolicyResourceConfigStep_Outcome,
    pub error_message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OSPolicyResourceConfigStep {
    fn default() -> &'a OSPolicyResourceConfigStep {
        <OSPolicyResourceConfigStep as ::protobuf::Message>::default_instance()
    }
}

impl OSPolicyResourceConfigStep {
    pub fn new() -> OSPolicyResourceConfigStep {
        ::std::default::Default::default()
    }

    // .google.cloud.osconfig.agentendpoint.v1.OSPolicyResourceConfigStep.Type type = 1;


    pub fn get_field_type(&self) -> OSPolicyResourceConfigStep_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = OSPolicyResourceConfigStep_Type::TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: OSPolicyResourceConfigStep_Type) {
        self.field_type = v;
    }

    // .google.cloud.osconfig.agentendpoint.v1.OSPolicyResourceConfigStep.Outcome outcome = 2;


    pub fn get_outcome(&self) -> OSPolicyResourceConfigStep_Outcome {
        self.outcome
    }
    pub fn clear_outcome(&mut self) {
        self.outcome = OSPolicyResourceConfigStep_Outcome::OUTCOME_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_outcome(&mut self, v: OSPolicyResourceConfigStep_Outcome) {
        self.outcome = v;
    }

    // string error_message = 3;


    pub fn get_error_message(&self) -> &str {
        &self.error_message
    }
    pub fn clear_error_message(&mut self) {
        self.error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.error_message
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OSPolicyResourceConfigStep {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.outcome, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != OSPolicyResourceConfigStep_Type::TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.outcome != OSPolicyResourceConfigStep_Outcome::OUTCOME_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.outcome);
        }
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != OSPolicyResourceConfigStep_Type::TYPE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.outcome != OSPolicyResourceConfigStep_Outcome::OUTCOME_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.outcome))?;
        }
        if !self.error_message.is_empty() {
            os.write_string(3, &self.error_message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OSPolicyResourceConfigStep {
        OSPolicyResourceConfigStep::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OSPolicyResourceConfigStep_Type>>(
                "type",
                |m: &OSPolicyResourceConfigStep| { &m.field_type },
                |m: &mut OSPolicyResourceConfigStep| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OSPolicyResourceConfigStep_Outcome>>(
                "outcome",
                |m: &OSPolicyResourceConfigStep| { &m.outcome },
                |m: &mut OSPolicyResourceConfigStep| { &mut m.outcome },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error_message",
                |m: &OSPolicyResourceConfigStep| { &m.error_message },
                |m: &mut OSPolicyResourceConfigStep| { &mut m.error_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OSPolicyResourceConfigStep>(
                "OSPolicyResourceConfigStep",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OSPolicyResourceConfigStep {
        static instance: ::protobuf::rt::LazyV2<OSPolicyResourceConfigStep> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OSPolicyResourceConfigStep::new)
    }
}

impl ::protobuf::Clear for OSPolicyResourceConfigStep {
    fn clear(&mut self) {
        self.field_type = OSPolicyResourceConfigStep_Type::TYPE_UNSPECIFIED;
        self.outcome = OSPolicyResourceConfigStep_Outcome::OUTCOME_UNSPECIFIED;
        self.error_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OSPolicyResourceConfigStep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OSPolicyResourceConfigStep {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OSPolicyResourceConfigStep_Type {
    TYPE_UNSPECIFIED = 0,
    VALIDATION = 1,
    DESIRED_STATE_CHECK = 2,
    DESIRED_STATE_ENFORCEMENT = 3,
    DESIRED_STATE_CHECK_POST_ENFORCEMENT = 4,
}

impl ::protobuf::ProtobufEnum for OSPolicyResourceConfigStep_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OSPolicyResourceConfigStep_Type> {
        match value {
            0 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Type::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Type::VALIDATION),
            2 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Type::DESIRED_STATE_CHECK),
            3 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Type::DESIRED_STATE_ENFORCEMENT),
            4 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Type::DESIRED_STATE_CHECK_POST_ENFORCEMENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OSPolicyResourceConfigStep_Type] = &[
            OSPolicyResourceConfigStep_Type::TYPE_UNSPECIFIED,
            OSPolicyResourceConfigStep_Type::VALIDATION,
            OSPolicyResourceConfigStep_Type::DESIRED_STATE_CHECK,
            OSPolicyResourceConfigStep_Type::DESIRED_STATE_ENFORCEMENT,
            OSPolicyResourceConfigStep_Type::DESIRED_STATE_CHECK_POST_ENFORCEMENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OSPolicyResourceConfigStep_Type>("OSPolicyResourceConfigStep.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OSPolicyResourceConfigStep_Type {
}

impl ::std::default::Default for OSPolicyResourceConfigStep_Type {
    fn default() -> Self {
        OSPolicyResourceConfigStep_Type::TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for OSPolicyResourceConfigStep_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OSPolicyResourceConfigStep_Outcome {
    OUTCOME_UNSPECIFIED = 0,
    SUCCEEDED = 1,
    FAILED = 2,
}

impl ::protobuf::ProtobufEnum for OSPolicyResourceConfigStep_Outcome {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OSPolicyResourceConfigStep_Outcome> {
        match value {
            0 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Outcome::OUTCOME_UNSPECIFIED),
            1 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Outcome::SUCCEEDED),
            2 => ::std::option::Option::Some(OSPolicyResourceConfigStep_Outcome::FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OSPolicyResourceConfigStep_Outcome] = &[
            OSPolicyResourceConfigStep_Outcome::OUTCOME_UNSPECIFIED,
            OSPolicyResourceConfigStep_Outcome::SUCCEEDED,
            OSPolicyResourceConfigStep_Outcome::FAILED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OSPolicyResourceConfigStep_Outcome>("OSPolicyResourceConfigStep.Outcome", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OSPolicyResourceConfigStep_Outcome {
}

impl ::std::default::Default for OSPolicyResourceConfigStep_Outcome {
    fn default() -> Self {
        OSPolicyResourceConfigStep_Outcome::OUTCOME_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for OSPolicyResourceConfigStep_Outcome {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OSPolicyResourceCompliance {
    // message fields
    pub os_policy_resource_id: ::std::string::String,
    pub config_steps: ::protobuf::RepeatedField<OSPolicyResourceConfigStep>,
    pub state: OSPolicyComplianceState,
    // message oneof groups
    pub output: ::std::option::Option<OSPolicyResourceCompliance_oneof_output>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OSPolicyResourceCompliance {
    fn default() -> &'a OSPolicyResourceCompliance {
        <OSPolicyResourceCompliance as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum OSPolicyResourceCompliance_oneof_output {
    exec_resource_output(OSPolicyResourceCompliance_ExecResourceOutput),
}

impl OSPolicyResourceCompliance {
    pub fn new() -> OSPolicyResourceCompliance {
        ::std::default::Default::default()
    }

    // string os_policy_resource_id = 1;


    pub fn get_os_policy_resource_id(&self) -> &str {
        &self.os_policy_resource_id
    }
    pub fn clear_os_policy_resource_id(&mut self) {
        self.os_policy_resource_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_os_policy_resource_id(&mut self, v: ::std::string::String) {
        self.os_policy_resource_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_policy_resource_id(&mut self) -> &mut ::std::string::String {
        &mut self.os_policy_resource_id
    }

    // Take field
    pub fn take_os_policy_resource_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.os_policy_resource_id, ::std::string::String::new())
    }

    // repeated .google.cloud.osconfig.agentendpoint.v1.OSPolicyResourceConfigStep config_steps = 2;


    pub fn get_config_steps(&self) -> &[OSPolicyResourceConfigStep] {
        &self.config_steps
    }
    pub fn clear_config_steps(&mut self) {
        self.config_steps.clear();
    }

    // Param is passed by value, moved
    pub fn set_config_steps(&mut self, v: ::protobuf::RepeatedField<OSPolicyResourceConfigStep>) {
        self.config_steps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_config_steps(&mut self) -> &mut ::protobuf::RepeatedField<OSPolicyResourceConfigStep> {
        &mut self.config_steps
    }

    // Take field
    pub fn take_config_steps(&mut self) -> ::protobuf::RepeatedField<OSPolicyResourceConfigStep> {
        ::std::mem::replace(&mut self.config_steps, ::protobuf::RepeatedField::new())
    }

    // .google.cloud.osconfig.agentendpoint.v1.OSPolicyComplianceState state = 3;


    pub fn get_state(&self) -> OSPolicyComplianceState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = OSPolicyComplianceState::OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: OSPolicyComplianceState) {
        self.state = v;
    }

    // .google.cloud.osconfig.agentendpoint.v1.OSPolicyResourceCompliance.ExecResourceOutput exec_resource_output = 4;


    pub fn get_exec_resource_output(&self) -> &OSPolicyResourceCompliance_ExecResourceOutput {
        match self.output {
            ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(ref v)) => v,
            _ => <OSPolicyResourceCompliance_ExecResourceOutput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exec_resource_output(&mut self) {
        self.output = ::std::option::Option::None;
    }

    pub fn has_exec_resource_output(&self) -> bool {
        match self.output {
            ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exec_resource_output(&mut self, v: OSPolicyResourceCompliance_ExecResourceOutput) {
        self.output = ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exec_resource_output(&mut self) -> &mut OSPolicyResourceCompliance_ExecResourceOutput {
        if let ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(_)) = self.output {
        } else {
            self.output = ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(OSPolicyResourceCompliance_ExecResourceOutput::new()));
        }
        match self.output {
            ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exec_resource_output(&mut self) -> OSPolicyResourceCompliance_ExecResourceOutput {
        if self.has_exec_resource_output() {
            match self.output.take() {
                ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(v)) => v,
                _ => panic!(),
            }
        } else {
            OSPolicyResourceCompliance_ExecResourceOutput::new()
        }
    }
}

impl ::protobuf::Message for OSPolicyResourceCompliance {
    fn is_initialized(&self) -> bool {
        for v in &self.config_steps {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(ref v)) = self.output {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.os_policy_resource_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.config_steps)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output = ::std::option::Option::Some(OSPolicyResourceCompliance_oneof_output::exec_resource_output(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.os_policy_resource_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.os_policy_resource_id);
        }
        for value in &self.config_steps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.state != OSPolicyComplianceState::OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        if let ::std::option::Option::Some(ref v) = self.output {
            match v {
                &OSPolicyResourceCompliance_oneof_output::exec_resource_output(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.os_policy_resource_id.is_empty() {
            os.write_string(1, &self.os_policy_resource_id)?;
        }
        for v in &self.config_steps {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.state != OSPolicyComplianceState::OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if let ::std::option::Option::Some(ref v) = self.output {
            match v {
                &OSPolicyResourceCompliance_oneof_output::exec_resource_output(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OSPolicyResourceCompliance {
        OSPolicyResourceCompliance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "os_policy_resource_id",
                |m: &OSPolicyResourceCompliance| { &m.os_policy_resource_id },
                |m: &mut OSPolicyResourceCompliance| { &mut m.os_policy_resource_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OSPolicyResourceConfigStep>>(
                "config_steps",
                |m: &OSPolicyResourceCompliance| { &m.config_steps },
                |m: &mut OSPolicyResourceCompliance| { &mut m.config_steps },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OSPolicyComplianceState>>(
                "state",
                |m: &OSPolicyResourceCompliance| { &m.state },
                |m: &mut OSPolicyResourceCompliance| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, OSPolicyResourceCompliance_ExecResourceOutput>(
                "exec_resource_output",
                OSPolicyResourceCompliance::has_exec_resource_output,
                OSPolicyResourceCompliance::get_exec_resource_output,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OSPolicyResourceCompliance>(
                "OSPolicyResourceCompliance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OSPolicyResourceCompliance {
        static instance: ::protobuf::rt::LazyV2<OSPolicyResourceCompliance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OSPolicyResourceCompliance::new)
    }
}

impl ::protobuf::Clear for OSPolicyResourceCompliance {
    fn clear(&mut self) {
        self.os_policy_resource_id.clear();
        self.config_steps.clear();
        self.state = OSPolicyComplianceState::OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED;
        self.output = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OSPolicyResourceCompliance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OSPolicyResourceCompliance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OSPolicyResourceCompliance_ExecResourceOutput {
    // message fields
    pub enforcement_output: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OSPolicyResourceCompliance_ExecResourceOutput {
    fn default() -> &'a OSPolicyResourceCompliance_ExecResourceOutput {
        <OSPolicyResourceCompliance_ExecResourceOutput as ::protobuf::Message>::default_instance()
    }
}

impl OSPolicyResourceCompliance_ExecResourceOutput {
    pub fn new() -> OSPolicyResourceCompliance_ExecResourceOutput {
        ::std::default::Default::default()
    }

    // bytes enforcement_output = 2;


    pub fn get_enforcement_output(&self) -> &[u8] {
        &self.enforcement_output
    }
    pub fn clear_enforcement_output(&mut self) {
        self.enforcement_output.clear();
    }

    // Param is passed by value, moved
    pub fn set_enforcement_output(&mut self, v: ::std::vec::Vec<u8>) {
        self.enforcement_output = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcement_output(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.enforcement_output
    }

    // Take field
    pub fn take_enforcement_output(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.enforcement_output, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OSPolicyResourceCompliance_ExecResourceOutput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.enforcement_output)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.enforcement_output.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.enforcement_output);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.enforcement_output.is_empty() {
            os.write_bytes(2, &self.enforcement_output)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OSPolicyResourceCompliance_ExecResourceOutput {
        OSPolicyResourceCompliance_ExecResourceOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "enforcement_output",
                |m: &OSPolicyResourceCompliance_ExecResourceOutput| { &m.enforcement_output },
                |m: &mut OSPolicyResourceCompliance_ExecResourceOutput| { &mut m.enforcement_output },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OSPolicyResourceCompliance_ExecResourceOutput>(
                "OSPolicyResourceCompliance.ExecResourceOutput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OSPolicyResourceCompliance_ExecResourceOutput {
        static instance: ::protobuf::rt::LazyV2<OSPolicyResourceCompliance_ExecResourceOutput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OSPolicyResourceCompliance_ExecResourceOutput::new)
    }
}

impl ::protobuf::Clear for OSPolicyResourceCompliance_ExecResourceOutput {
    fn clear(&mut self) {
        self.enforcement_output.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OSPolicyResourceCompliance_ExecResourceOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OSPolicyResourceCompliance_ExecResourceOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OSPolicyComplianceState {
    OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED = 0,
    COMPLIANT = 1,
    NON_COMPLIANT = 2,
    UNKNOWN = 3,
    NO_OS_POLICIES_APPLICABLE = 4,
}

impl ::protobuf::ProtobufEnum for OSPolicyComplianceState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OSPolicyComplianceState> {
        match value {
            0 => ::std::option::Option::Some(OSPolicyComplianceState::OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED),
            1 => ::std::option::Option::Some(OSPolicyComplianceState::COMPLIANT),
            2 => ::std::option::Option::Some(OSPolicyComplianceState::NON_COMPLIANT),
            3 => ::std::option::Option::Some(OSPolicyComplianceState::UNKNOWN),
            4 => ::std::option::Option::Some(OSPolicyComplianceState::NO_OS_POLICIES_APPLICABLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OSPolicyComplianceState] = &[
            OSPolicyComplianceState::OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED,
            OSPolicyComplianceState::COMPLIANT,
            OSPolicyComplianceState::NON_COMPLIANT,
            OSPolicyComplianceState::UNKNOWN,
            OSPolicyComplianceState::NO_OS_POLICIES_APPLICABLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OSPolicyComplianceState>("OSPolicyComplianceState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OSPolicyComplianceState {
}

impl ::std::default::Default for OSPolicyComplianceState {
    fn default() -> Self {
        OSPolicyComplianceState::OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for OSPolicyComplianceState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n:google/cloud/osconfig/agentendpoint/v1/config_common.proto\x12&google\
    .cloud.osconfig.agentendpoint.v1\"\xd4\x03\n\x1aOSPolicyResourceConfigSt\
    ep\x12[\n\x04type\x18\x01\x20\x01(\x0e2G.google.cloud.osconfig.agentendp\
    oint.v1.OSPolicyResourceConfigStep.TypeR\x04type\x12d\n\x07outcome\x18\
    \x02\x20\x01(\x0e2J.google.cloud.osconfig.agentendpoint.v1.OSPolicyResou\
    rceConfigStep.OutcomeR\x07outcome\x12#\n\rerror_message\x18\x03\x20\x01(\
    \tR\x0cerrorMessage\"\x8e\x01\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\
    \x10\0\x12\x0e\n\nVALIDATION\x10\x01\x12\x17\n\x13DESIRED_STATE_CHECK\
    \x10\x02\x12\x1d\n\x19DESIRED_STATE_ENFORCEMENT\x10\x03\x12(\n$DESIRED_S\
    TATE_CHECK_POST_ENFORCEMENT\x10\x04\"=\n\x07Outcome\x12\x17\n\x13OUTCOME\
    _UNSPECIFIED\x10\0\x12\r\n\tSUCCEEDED\x10\x01\x12\n\n\x06FAILED\x10\x02\
    \"\xe8\x03\n\x1aOSPolicyResourceCompliance\x121\n\x15os_policy_resource_\
    id\x18\x01\x20\x01(\tR\x12osPolicyResourceId\x12e\n\x0cconfig_steps\x18\
    \x02\x20\x03(\x0b2B.google.cloud.osconfig.agentendpoint.v1.OSPolicyResou\
    rceConfigStepR\x0bconfigSteps\x12U\n\x05state\x18\x03\x20\x01(\x0e2?.goo\
    gle.cloud.osconfig.agentendpoint.v1.OSPolicyComplianceStateR\x05state\
    \x12\x89\x01\n\x14exec_resource_output\x18\x04\x20\x01(\x0b2U.google.clo\
    ud.osconfig.agentendpoint.v1.OSPolicyResourceCompliance.ExecResourceOutp\
    utH\0R\x12execResourceOutput\x1aC\n\x12ExecResourceOutput\x12-\n\x12enfo\
    rcement_output\x18\x02\x20\x01(\x0cR\x11enforcementOutputB\x08\n\x06outp\
    ut*\x93\x01\n\x17OSPolicyComplianceState\x12*\n&OS_POLICY_COMPLIANCE_STA\
    TE_UNSPECIFIED\x10\0\x12\r\n\tCOMPLIANT\x10\x01\x12\x11\n\rNON_COMPLIANT\
    \x10\x02\x12\x0b\n\x07UNKNOWN\x10\x03\x12\x1d\n\x19NO_OS_POLICIES_APPLIC\
    ABLE\x10\x04B\x93\x01\n*com.google.cloud.osconfig.agentendpoint.v1B\x11C\
    onfigCommonProtoP\x01ZPcloud.google.com/go/osconfig/agentendpoint/apiv1/\
    agentendpointpb;agentendpointpbJ\xa6\x1c\n\x06\x12\x04\x0e\0t\x01\n\xbc\
    \x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202021\x20Google\
    \x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\
    \x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0/\n\x08\n\x01\x08\
    \x12\x03\x12\0g\n\t\n\x02\x08\x0b\x12\x03\x12\0g\n\x08\n\x01\x08\x12\x03\
    \x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\02\
    \n\t\n\x02\x08\x08\x12\x03\x14\02\n\x08\n\x01\x08\x12\x03\x15\0C\n\t\n\
    \x02\x08\x01\x12\x03\x15\0C\np\n\x02\x04\0\x12\x04\x19\0G\x01\x1ad\x20St\
    ep\x20performed\x20by\x20the\x20OS\x20Config\x20agent\x20for\x20configur\
    ing\x20an\x20`OSPolicyResource`\n\x20to\x20its\x20desired\x20state.\n\n\
    \n\n\x03\x04\0\x01\x12\x03\x19\x08\"\n2\n\x04\x04\0\x04\0\x12\x04\x1b\
    \x020\x03\x1a$\x20Supported\x20configuration\x20step\x20types\n\n\x0c\n\
    \x05\x04\0\x04\0\x01\x12\x03\x1b\x07\x0b\n5\n\x06\x04\0\x04\0\x02\0\x12\
    \x03\x1d\x04\x19\x1a&\x20Default\x20value.\x20This\x20value\x20is\x20unu\
    sed.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x1d\x04\x14\n\x0e\n\x07\
    \x04\0\x04\0\x02\0\x02\x12\x03\x1d\x17\x18\nM\n\x06\x04\0\x04\0\x02\x01\
    \x12\x03\x20\x04\x13\x1a>\x20Validation\x20to\x20detect\x20resource\x20c\
    onflicts,\x20schema\x20errors,\x20etc.\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x01\x12\x03\x20\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x20\
    \x11\x12\nH\n\x06\x04\0\x04\0\x02\x02\x12\x03#\x04\x1c\x1a9\x20Check\x20\
    the\x20current\x20desired\x20state\x20status\x20of\x20the\x20resource.\n\
    \n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03#\x04\x17\n\x0e\n\x07\x04\0\
    \x04\0\x02\x02\x02\x12\x03#\x1a\x1b\nW\n\x06\x04\0\x04\0\x02\x03\x12\x03\
    &\x04\"\x1aH\x20Enforce\x20the\x20desired\x20state\x20for\x20a\x20resour\
    ce\x20that\x20is\x20not\x20in\x20desired\x20state.\n\n\x0e\n\x07\x04\0\
    \x04\0\x02\x03\x01\x12\x03&\x04\x1d\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\
    \x12\x03&\x20!\n\x83\x03\n\x06\x04\0\x04\0\x02\x04\x12\x03/\x04-\x1a\xf3\
    \x02\x20Re-check\x20desired\x20state\x20status\x20for\x20a\x20resource\
    \x20after\x20enforcement\x20of\x20all\n\x20resources\x20in\x20the\x20cur\
    rent\x20configuration\x20run.\n\n\x20This\x20step\x20is\x20used\x20to\
    \x20determine\x20the\x20final\x20desired\x20state\x20status\x20for\x20th\
    e\n\x20resource.\x20It\x20accounts\x20for\x20any\x20resources\x20that\
    \x20might\x20have\x20drifted\x20from\n\x20their\x20desired\x20state\x20d\
    ue\x20to\x20side\x20effects\x20from\x20configuring\x20other\x20resources\
    \n\x20during\x20the\x20current\x20configuration\x20run.\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x04\x01\x12\x03/\x04(\n\x0e\n\x07\x04\0\x04\0\x02\x04\
    \x02\x12\x03/+,\n<\n\x04\x04\0\x04\x01\x12\x043\x02<\x03\x1a.\x20Support\
    ed\x20outcomes\x20for\x20a\x20configuration\x20step.\n\n\x0c\n\x05\x04\0\
    \x04\x01\x01\x12\x033\x07\x0e\n5\n\x06\x04\0\x04\x01\x02\0\x12\x035\x04\
    \x1c\x1a&\x20Default\x20value.\x20This\x20value\x20is\x20unused.\n\n\x0e\
    \n\x07\x04\0\x04\x01\x02\0\x01\x12\x035\x04\x17\n\x0e\n\x07\x04\0\x04\
    \x01\x02\0\x02\x12\x035\x1a\x1b\n$\n\x06\x04\0\x04\x01\x02\x01\x12\x038\
    \x04\x12\x1a\x15\x20The\x20step\x20succeeded.\n\n\x0e\n\x07\x04\0\x04\
    \x01\x02\x01\x01\x12\x038\x04\r\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x02\
    \x12\x038\x10\x11\n!\n\x06\x04\0\x04\x01\x02\x02\x12\x03;\x04\x0f\x1a\
    \x12\x20The\x20step\x20failed.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x01\
    \x12\x03;\x04\n\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x02\x12\x03;\r\x0e\n'\
    \n\x04\x04\0\x02\0\x12\x03?\x02\x10\x1a\x1a\x20Configuration\x20step\x20\
    type.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03?\x02\x06\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03?\x07\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03?\x0e\x0f\
    \n1\n\x04\x04\0\x02\x01\x12\x03B\x02\x16\x1a$\x20Outcome\x20of\x20the\
    \x20configuration\x20step.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03B\x02\
    \t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03B\n\x11\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03B\x14\x15\ns\n\x04\x04\0\x02\x02\x12\x03F\x02\x1b\x1af\
    \x20An\x20error\x20message\x20recorded\x20during\x20the\x20execution\x20\
    of\x20this\x20step.\n\x20Only\x20populated\x20when\x20outcome\x20is\x20F\
    AILED.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03F\t\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03F\x19\
    \x1a\n8\n\x02\x04\x01\x12\x04J\0a\x01\x1a,\x20Compliance\x20data\x20for\
    \x20an\x20OS\x20policy\x20resource.\n\n\n\n\x03\x04\x01\x01\x12\x03J\x08\
    \"\n-\n\x04\x04\x01\x03\0\x12\x04L\x02P\x03\x1a\x1f\x20ExecResource\x20s\
    pecific\x20output.\n\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03L\n\x1c\nk\n\
    \x06\x04\x01\x03\0\x02\0\x12\x03O\x04!\x1a\\\x20Output\x20from\x20Enforc\
    ement\x20phase\x20output\x20file\x20(if\x20run).\n\x20Output\x20size\x20\
    is\x20limited\x20to\x20100K\x20bytes.\n\n\x0e\n\x07\x04\x01\x03\0\x02\0\
    \x05\x12\x03O\x04\t\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\x12\x03O\n\x1c\n\
    \x0e\n\x07\x04\x01\x03\0\x02\0\x03\x12\x03O\x1f\x20\n0\n\x04\x04\x01\x02\
    \0\x12\x03S\x02#\x1a#\x20The\x20id\x20of\x20the\x20OS\x20policy\x20resou\
    rce.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03S\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03S\t\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03S!\"\
    \nb\n\x04\x04\x01\x02\x01\x12\x03W\x027\x1aU\x20Ordered\x20list\x20of\
    \x20configuration\x20steps\x20taken\x20by\x20the\x20agent\x20for\x20the\
    \x20OS\x20policy\n\x20resource.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\
    \x03W\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03W\x0b%\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03W&2\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03W\
    56\n:\n\x04\x04\x01\x02\x02\x12\x03Z\x02$\x1a-\x20Compliance\x20state\
    \x20of\x20the\x20OS\x20policy\x20resource.\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x06\x12\x03Z\x02\x19\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03Z\x1a\x1f\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x03Z\"#\n)\n\x04\x04\x01\x08\0\x12\
    \x04]\x02`\x03\x1a\x1b\x20Resource\x20specific\x20output.\n\n\x0c\n\x05\
    \x04\x01\x08\0\x01\x12\x03]\x08\x0e\n,\n\x04\x04\x01\x02\x03\x12\x03_\
    \x040\x1a\x1f\x20ExecResource\x20specific\x20output.\n\n\x0c\n\x05\x04\
    \x01\x02\x03\x06\x12\x03_\x04\x16\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03_\x17+\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03_./\n3\n\x02\x05\0\x12\
    \x04d\0t\x01\x1a'\x20Supported\x20OSPolicy\x20compliance\x20states.\n\n\
    \n\n\x03\x05\0\x01\x12\x03d\x05\x1c\n3\n\x04\x05\0\x02\0\x12\x03f\x02-\
    \x1a&\x20Default\x20value.\x20This\x20value\x20is\x20unused.\n\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03f\x02(\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03f+\
    ,\n\x1f\n\x04\x05\0\x02\x01\x12\x03i\x02\x10\x1a\x12\x20Compliant\x20sta\
    te.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03i\x02\x0b\n\x0c\n\x05\x05\0\
    \x02\x01\x02\x12\x03i\x0e\x0f\n\"\n\x04\x05\0\x02\x02\x12\x03l\x02\x14\
    \x1a\x15\x20Non-compliant\x20state\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03l\x02\x0f\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03l\x12\x13\n(\n\x04\
    \x05\0\x02\x03\x12\x03o\x02\x0e\x1a\x1b\x20Unknown\x20compliance\x20stat\
    e.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03o\x02\t\n\x0c\n\x05\x05\0\x02\
    \x03\x02\x12\x03o\x0c\r\nu\n\x04\x05\0\x02\x04\x12\x03s\x02\x20\x1ah\x20\
    No\x20applicable\x20OS\x20policies\x20were\x20found\x20for\x20the\x20ins\
    tance.\n\x20This\x20state\x20is\x20only\x20applicable\x20to\x20the\x20in\
    stance.\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03s\x02\x1b\n\x0c\n\x05\x05\
    \0\x02\x04\x02\x12\x03s\x1e\x1fb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
