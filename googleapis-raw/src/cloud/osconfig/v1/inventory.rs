// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/osconfig/v1/inventory.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Inventory {
    // message fields
    pub name: ::std::string::String,
    pub os_info: ::protobuf::SingularPtrField<Inventory_OsInfo>,
    pub items: ::std::collections::HashMap<::std::string::String, Inventory_Item>,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory {
    fn default() -> &'a Inventory {
        <Inventory as ::protobuf::Message>::default_instance()
    }
}

impl Inventory {
    pub fn new() -> Inventory {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.cloud.osconfig.v1.Inventory.OsInfo os_info = 1;


    pub fn get_os_info(&self) -> &Inventory_OsInfo {
        self.os_info.as_ref().unwrap_or_else(|| <Inventory_OsInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_os_info(&mut self) {
        self.os_info.clear();
    }

    pub fn has_os_info(&self) -> bool {
        self.os_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_info(&mut self, v: Inventory_OsInfo) {
        self.os_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_os_info(&mut self) -> &mut Inventory_OsInfo {
        if self.os_info.is_none() {
            self.os_info.set_default();
        }
        self.os_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_os_info(&mut self) -> Inventory_OsInfo {
        self.os_info.take().unwrap_or_else(|| Inventory_OsInfo::new())
    }

    // repeated .google.cloud.osconfig.v1.Inventory.ItemsEntry items = 2;


    pub fn get_items(&self) -> &::std::collections::HashMap<::std::string::String, Inventory_Item> {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::std::collections::HashMap<::std::string::String, Inventory_Item>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Inventory_Item> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::std::collections::HashMap<::std::string::String, Inventory_Item> {
        ::std::mem::replace(&mut self.items, ::std::collections::HashMap::new())
    }

    // .google.protobuf.Timestamp update_time = 4;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Inventory {
    fn is_initialized(&self) -> bool {
        for v in &self.os_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.os_info)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Inventory_Item>>(wire_type, is, &mut self.items)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if let Some(ref v) = self.os_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Inventory_Item>>(2, &self.items);
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if let Some(ref v) = self.os_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Inventory_Item>>(2, &self.items, os)?;
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory {
        Inventory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Inventory| { &m.name },
                |m: &mut Inventory| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Inventory_OsInfo>>(
                "os_info",
                |m: &Inventory| { &m.os_info },
                |m: &mut Inventory| { &mut m.os_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Inventory_Item>>(
                "items",
                |m: &Inventory| { &m.items },
                |m: &mut Inventory| { &mut m.items },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "update_time",
                |m: &Inventory| { &m.update_time },
                |m: &mut Inventory| { &mut m.update_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory>(
                "Inventory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory {
        static instance: ::protobuf::rt::LazyV2<Inventory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory::new)
    }
}

impl ::protobuf::Clear for Inventory {
    fn clear(&mut self) {
        self.name.clear();
        self.os_info.clear();
        self.items.clear();
        self.update_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_OsInfo {
    // message fields
    pub hostname: ::std::string::String,
    pub long_name: ::std::string::String,
    pub short_name: ::std::string::String,
    pub version: ::std::string::String,
    pub architecture: ::std::string::String,
    pub kernel_version: ::std::string::String,
    pub kernel_release: ::std::string::String,
    pub osconfig_agent_version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_OsInfo {
    fn default() -> &'a Inventory_OsInfo {
        <Inventory_OsInfo as ::protobuf::Message>::default_instance()
    }
}

impl Inventory_OsInfo {
    pub fn new() -> Inventory_OsInfo {
        ::std::default::Default::default()
    }

    // string hostname = 9;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }

    // string long_name = 2;


    pub fn get_long_name(&self) -> &str {
        &self.long_name
    }
    pub fn clear_long_name(&mut self) {
        self.long_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_long_name(&mut self, v: ::std::string::String) {
        self.long_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_long_name(&mut self) -> &mut ::std::string::String {
        &mut self.long_name
    }

    // Take field
    pub fn take_long_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.long_name, ::std::string::String::new())
    }

    // string short_name = 3;


    pub fn get_short_name(&self) -> &str {
        &self.short_name
    }
    pub fn clear_short_name(&mut self) {
        self.short_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_short_name(&mut self, v: ::std::string::String) {
        self.short_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_short_name(&mut self) -> &mut ::std::string::String {
        &mut self.short_name
    }

    // Take field
    pub fn take_short_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.short_name, ::std::string::String::new())
    }

    // string version = 4;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string architecture = 5;


    pub fn get_architecture(&self) -> &str {
        &self.architecture
    }
    pub fn clear_architecture(&mut self) {
        self.architecture.clear();
    }

    // Param is passed by value, moved
    pub fn set_architecture(&mut self, v: ::std::string::String) {
        self.architecture = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_architecture(&mut self) -> &mut ::std::string::String {
        &mut self.architecture
    }

    // Take field
    pub fn take_architecture(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.architecture, ::std::string::String::new())
    }

    // string kernel_version = 6;


    pub fn get_kernel_version(&self) -> &str {
        &self.kernel_version
    }
    pub fn clear_kernel_version(&mut self) {
        self.kernel_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_kernel_version(&mut self, v: ::std::string::String) {
        self.kernel_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kernel_version(&mut self) -> &mut ::std::string::String {
        &mut self.kernel_version
    }

    // Take field
    pub fn take_kernel_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kernel_version, ::std::string::String::new())
    }

    // string kernel_release = 7;


    pub fn get_kernel_release(&self) -> &str {
        &self.kernel_release
    }
    pub fn clear_kernel_release(&mut self) {
        self.kernel_release.clear();
    }

    // Param is passed by value, moved
    pub fn set_kernel_release(&mut self, v: ::std::string::String) {
        self.kernel_release = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kernel_release(&mut self) -> &mut ::std::string::String {
        &mut self.kernel_release
    }

    // Take field
    pub fn take_kernel_release(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kernel_release, ::std::string::String::new())
    }

    // string osconfig_agent_version = 8;


    pub fn get_osconfig_agent_version(&self) -> &str {
        &self.osconfig_agent_version
    }
    pub fn clear_osconfig_agent_version(&mut self) {
        self.osconfig_agent_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_osconfig_agent_version(&mut self, v: ::std::string::String) {
        self.osconfig_agent_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_osconfig_agent_version(&mut self) -> &mut ::std::string::String {
        &mut self.osconfig_agent_version
    }

    // Take field
    pub fn take_osconfig_agent_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.osconfig_agent_version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Inventory_OsInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.long_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.short_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.architecture)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kernel_version)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kernel_release)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.osconfig_agent_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.hostname);
        }
        if !self.long_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.long_name);
        }
        if !self.short_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.short_name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.version);
        }
        if !self.architecture.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.architecture);
        }
        if !self.kernel_version.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.kernel_version);
        }
        if !self.kernel_release.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.kernel_release);
        }
        if !self.osconfig_agent_version.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.osconfig_agent_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hostname.is_empty() {
            os.write_string(9, &self.hostname)?;
        }
        if !self.long_name.is_empty() {
            os.write_string(2, &self.long_name)?;
        }
        if !self.short_name.is_empty() {
            os.write_string(3, &self.short_name)?;
        }
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        if !self.architecture.is_empty() {
            os.write_string(5, &self.architecture)?;
        }
        if !self.kernel_version.is_empty() {
            os.write_string(6, &self.kernel_version)?;
        }
        if !self.kernel_release.is_empty() {
            os.write_string(7, &self.kernel_release)?;
        }
        if !self.osconfig_agent_version.is_empty() {
            os.write_string(8, &self.osconfig_agent_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_OsInfo {
        Inventory_OsInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &Inventory_OsInfo| { &m.hostname },
                |m: &mut Inventory_OsInfo| { &mut m.hostname },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "long_name",
                |m: &Inventory_OsInfo| { &m.long_name },
                |m: &mut Inventory_OsInfo| { &mut m.long_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "short_name",
                |m: &Inventory_OsInfo| { &m.short_name },
                |m: &mut Inventory_OsInfo| { &mut m.short_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Inventory_OsInfo| { &m.version },
                |m: &mut Inventory_OsInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "architecture",
                |m: &Inventory_OsInfo| { &m.architecture },
                |m: &mut Inventory_OsInfo| { &mut m.architecture },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kernel_version",
                |m: &Inventory_OsInfo| { &m.kernel_version },
                |m: &mut Inventory_OsInfo| { &mut m.kernel_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kernel_release",
                |m: &Inventory_OsInfo| { &m.kernel_release },
                |m: &mut Inventory_OsInfo| { &mut m.kernel_release },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "osconfig_agent_version",
                |m: &Inventory_OsInfo| { &m.osconfig_agent_version },
                |m: &mut Inventory_OsInfo| { &mut m.osconfig_agent_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_OsInfo>(
                "Inventory.OsInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_OsInfo {
        static instance: ::protobuf::rt::LazyV2<Inventory_OsInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_OsInfo::new)
    }
}

impl ::protobuf::Clear for Inventory_OsInfo {
    fn clear(&mut self) {
        self.hostname.clear();
        self.long_name.clear();
        self.short_name.clear();
        self.version.clear();
        self.architecture.clear();
        self.kernel_version.clear();
        self.kernel_release.clear();
        self.osconfig_agent_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_OsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_OsInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_Item {
    // message fields
    pub id: ::std::string::String,
    pub origin_type: Inventory_Item_OriginType,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub field_type: Inventory_Item_Type,
    // message oneof groups
    pub details: ::std::option::Option<Inventory_Item_oneof_details>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_Item {
    fn default() -> &'a Inventory_Item {
        <Inventory_Item as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Inventory_Item_oneof_details {
    installed_package(Inventory_SoftwarePackage),
    available_package(Inventory_SoftwarePackage),
}

impl Inventory_Item {
    pub fn new() -> Inventory_Item {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .google.cloud.osconfig.v1.Inventory.Item.OriginType origin_type = 2;


    pub fn get_origin_type(&self) -> Inventory_Item_OriginType {
        self.origin_type
    }
    pub fn clear_origin_type(&mut self) {
        self.origin_type = Inventory_Item_OriginType::ORIGIN_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_origin_type(&mut self, v: Inventory_Item_OriginType) {
        self.origin_type = v;
    }

    // .google.protobuf.Timestamp create_time = 8;


    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp update_time = 9;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.cloud.osconfig.v1.Inventory.Item.Type type = 5;


    pub fn get_field_type(&self) -> Inventory_Item_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Inventory_Item_Type::TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Inventory_Item_Type) {
        self.field_type = v;
    }

    // .google.cloud.osconfig.v1.Inventory.SoftwarePackage installed_package = 6;


    pub fn get_installed_package(&self) -> &Inventory_SoftwarePackage {
        match self.details {
            ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(ref v)) => v,
            _ => <Inventory_SoftwarePackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_installed_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_installed_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_installed_package(&mut self, v: Inventory_SoftwarePackage) {
        self.details = ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_installed_package(&mut self) -> &mut Inventory_SoftwarePackage {
        if let ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(Inventory_SoftwarePackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_installed_package(&mut self) -> Inventory_SoftwarePackage {
        if self.has_installed_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_SoftwarePackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.SoftwarePackage available_package = 7;


    pub fn get_available_package(&self) -> &Inventory_SoftwarePackage {
        match self.details {
            ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(ref v)) => v,
            _ => <Inventory_SoftwarePackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_available_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_available_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_available_package(&mut self, v: Inventory_SoftwarePackage) {
        self.details = ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_available_package(&mut self) -> &mut Inventory_SoftwarePackage {
        if let ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(Inventory_SoftwarePackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_available_package(&mut self) -> Inventory_SoftwarePackage {
        if self.has_available_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_SoftwarePackage::new()
        }
    }
}

impl ::protobuf::Message for Inventory_Item {
    fn is_initialized(&self) -> bool {
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Inventory_Item_oneof_details::installed_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_Item_oneof_details::available_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.origin_type, 2, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 5, &mut self.unknown_fields)?
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_Item_oneof_details::installed_package(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_Item_oneof_details::available_package(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.origin_type != Inventory_Item_OriginType::ORIGIN_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.origin_type);
        }
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.field_type != Inventory_Item_Type::TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.field_type);
        }
        if let ::std::option::Option::Some(ref v) = self.details {
            match v {
                &Inventory_Item_oneof_details::installed_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_Item_oneof_details::available_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.origin_type != Inventory_Item_OriginType::ORIGIN_TYPE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.origin_type))?;
        }
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.field_type != Inventory_Item_Type::TYPE_UNSPECIFIED {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.details {
            match v {
                &Inventory_Item_oneof_details::installed_package(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_Item_oneof_details::available_package(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_Item {
        Inventory_Item::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Inventory_Item| { &m.id },
                |m: &mut Inventory_Item| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Inventory_Item_OriginType>>(
                "origin_type",
                |m: &Inventory_Item| { &m.origin_type },
                |m: &mut Inventory_Item| { &mut m.origin_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "create_time",
                |m: &Inventory_Item| { &m.create_time },
                |m: &mut Inventory_Item| { &mut m.create_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "update_time",
                |m: &Inventory_Item| { &m.update_time },
                |m: &mut Inventory_Item| { &mut m.update_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Inventory_Item_Type>>(
                "type",
                |m: &Inventory_Item| { &m.field_type },
                |m: &mut Inventory_Item| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_SoftwarePackage>(
                "installed_package",
                Inventory_Item::has_installed_package,
                Inventory_Item::get_installed_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_SoftwarePackage>(
                "available_package",
                Inventory_Item::has_available_package,
                Inventory_Item::get_available_package,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_Item>(
                "Inventory.Item",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_Item {
        static instance: ::protobuf::rt::LazyV2<Inventory_Item> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_Item::new)
    }
}

impl ::protobuf::Clear for Inventory_Item {
    fn clear(&mut self) {
        self.id.clear();
        self.origin_type = Inventory_Item_OriginType::ORIGIN_TYPE_UNSPECIFIED;
        self.create_time.clear();
        self.update_time.clear();
        self.field_type = Inventory_Item_Type::TYPE_UNSPECIFIED;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_Item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_Item {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Inventory_Item_OriginType {
    ORIGIN_TYPE_UNSPECIFIED = 0,
    INVENTORY_REPORT = 1,
}

impl ::protobuf::ProtobufEnum for Inventory_Item_OriginType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Inventory_Item_OriginType> {
        match value {
            0 => ::std::option::Option::Some(Inventory_Item_OriginType::ORIGIN_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Inventory_Item_OriginType::INVENTORY_REPORT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Inventory_Item_OriginType] = &[
            Inventory_Item_OriginType::ORIGIN_TYPE_UNSPECIFIED,
            Inventory_Item_OriginType::INVENTORY_REPORT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Inventory_Item_OriginType>("Inventory.Item.OriginType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Inventory_Item_OriginType {
}

impl ::std::default::Default for Inventory_Item_OriginType {
    fn default() -> Self {
        Inventory_Item_OriginType::ORIGIN_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_Item_OriginType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Inventory_Item_Type {
    TYPE_UNSPECIFIED = 0,
    INSTALLED_PACKAGE = 1,
    AVAILABLE_PACKAGE = 2,
}

impl ::protobuf::ProtobufEnum for Inventory_Item_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Inventory_Item_Type> {
        match value {
            0 => ::std::option::Option::Some(Inventory_Item_Type::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Inventory_Item_Type::INSTALLED_PACKAGE),
            2 => ::std::option::Option::Some(Inventory_Item_Type::AVAILABLE_PACKAGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Inventory_Item_Type] = &[
            Inventory_Item_Type::TYPE_UNSPECIFIED,
            Inventory_Item_Type::INSTALLED_PACKAGE,
            Inventory_Item_Type::AVAILABLE_PACKAGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Inventory_Item_Type>("Inventory.Item.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Inventory_Item_Type {
}

impl ::std::default::Default for Inventory_Item_Type {
    fn default() -> Self {
        Inventory_Item_Type::TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_Item_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_SoftwarePackage {
    // message oneof groups
    pub details: ::std::option::Option<Inventory_SoftwarePackage_oneof_details>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_SoftwarePackage {
    fn default() -> &'a Inventory_SoftwarePackage {
        <Inventory_SoftwarePackage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Inventory_SoftwarePackage_oneof_details {
    yum_package(Inventory_VersionedPackage),
    apt_package(Inventory_VersionedPackage),
    zypper_package(Inventory_VersionedPackage),
    googet_package(Inventory_VersionedPackage),
    zypper_patch(Inventory_ZypperPatch),
    wua_package(Inventory_WindowsUpdatePackage),
    qfe_package(Inventory_WindowsQuickFixEngineeringPackage),
    cos_package(Inventory_VersionedPackage),
    windows_application(Inventory_WindowsApplication),
}

impl Inventory_SoftwarePackage {
    pub fn new() -> Inventory_SoftwarePackage {
        ::std::default::Default::default()
    }

    // .google.cloud.osconfig.v1.Inventory.VersionedPackage yum_package = 1;


    pub fn get_yum_package(&self) -> &Inventory_VersionedPackage {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(ref v)) => v,
            _ => <Inventory_VersionedPackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_yum_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_yum_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_yum_package(&mut self, v: Inventory_VersionedPackage) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_yum_package(&mut self) -> &mut Inventory_VersionedPackage {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(Inventory_VersionedPackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_yum_package(&mut self) -> Inventory_VersionedPackage {
        if self.has_yum_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_VersionedPackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.VersionedPackage apt_package = 2;


    pub fn get_apt_package(&self) -> &Inventory_VersionedPackage {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(ref v)) => v,
            _ => <Inventory_VersionedPackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_apt_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_apt_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_apt_package(&mut self, v: Inventory_VersionedPackage) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_apt_package(&mut self) -> &mut Inventory_VersionedPackage {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(Inventory_VersionedPackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_apt_package(&mut self) -> Inventory_VersionedPackage {
        if self.has_apt_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_VersionedPackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.VersionedPackage zypper_package = 3;


    pub fn get_zypper_package(&self) -> &Inventory_VersionedPackage {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(ref v)) => v,
            _ => <Inventory_VersionedPackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_zypper_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_zypper_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_zypper_package(&mut self, v: Inventory_VersionedPackage) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_zypper_package(&mut self) -> &mut Inventory_VersionedPackage {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(Inventory_VersionedPackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_zypper_package(&mut self) -> Inventory_VersionedPackage {
        if self.has_zypper_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_VersionedPackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.VersionedPackage googet_package = 4;


    pub fn get_googet_package(&self) -> &Inventory_VersionedPackage {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(ref v)) => v,
            _ => <Inventory_VersionedPackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_googet_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_googet_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_googet_package(&mut self, v: Inventory_VersionedPackage) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_googet_package(&mut self) -> &mut Inventory_VersionedPackage {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(Inventory_VersionedPackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_googet_package(&mut self) -> Inventory_VersionedPackage {
        if self.has_googet_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_VersionedPackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.ZypperPatch zypper_patch = 5;


    pub fn get_zypper_patch(&self) -> &Inventory_ZypperPatch {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(ref v)) => v,
            _ => <Inventory_ZypperPatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_zypper_patch(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_zypper_patch(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_zypper_patch(&mut self, v: Inventory_ZypperPatch) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_zypper_patch(&mut self) -> &mut Inventory_ZypperPatch {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(Inventory_ZypperPatch::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_zypper_patch(&mut self) -> Inventory_ZypperPatch {
        if self.has_zypper_patch() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_ZypperPatch::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.WindowsUpdatePackage wua_package = 6;


    pub fn get_wua_package(&self) -> &Inventory_WindowsUpdatePackage {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(ref v)) => v,
            _ => <Inventory_WindowsUpdatePackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_wua_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_wua_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_wua_package(&mut self, v: Inventory_WindowsUpdatePackage) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_wua_package(&mut self) -> &mut Inventory_WindowsUpdatePackage {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(Inventory_WindowsUpdatePackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_wua_package(&mut self) -> Inventory_WindowsUpdatePackage {
        if self.has_wua_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_WindowsUpdatePackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.WindowsQuickFixEngineeringPackage qfe_package = 7;


    pub fn get_qfe_package(&self) -> &Inventory_WindowsQuickFixEngineeringPackage {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(ref v)) => v,
            _ => <Inventory_WindowsQuickFixEngineeringPackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_qfe_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_qfe_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_qfe_package(&mut self, v: Inventory_WindowsQuickFixEngineeringPackage) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_qfe_package(&mut self) -> &mut Inventory_WindowsQuickFixEngineeringPackage {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(Inventory_WindowsQuickFixEngineeringPackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_qfe_package(&mut self) -> Inventory_WindowsQuickFixEngineeringPackage {
        if self.has_qfe_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_WindowsQuickFixEngineeringPackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.VersionedPackage cos_package = 8;


    pub fn get_cos_package(&self) -> &Inventory_VersionedPackage {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(ref v)) => v,
            _ => <Inventory_VersionedPackage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cos_package(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_cos_package(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cos_package(&mut self, v: Inventory_VersionedPackage) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cos_package(&mut self) -> &mut Inventory_VersionedPackage {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(Inventory_VersionedPackage::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cos_package(&mut self) -> Inventory_VersionedPackage {
        if self.has_cos_package() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_VersionedPackage::new()
        }
    }

    // .google.cloud.osconfig.v1.Inventory.WindowsApplication windows_application = 9;


    pub fn get_windows_application(&self) -> &Inventory_WindowsApplication {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(ref v)) => v,
            _ => <Inventory_WindowsApplication as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_windows_application(&mut self) {
        self.details = ::std::option::Option::None;
    }

    pub fn has_windows_application(&self) -> bool {
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_windows_application(&mut self, v: Inventory_WindowsApplication) {
        self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(v))
    }

    // Mutable pointer to the field.
    pub fn mut_windows_application(&mut self) -> &mut Inventory_WindowsApplication {
        if let ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(_)) = self.details {
        } else {
            self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(Inventory_WindowsApplication::new()));
        }
        match self.details {
            ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_windows_application(&mut self) -> Inventory_WindowsApplication {
        if self.has_windows_application() {
            match self.details.take() {
                ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(v)) => v,
                _ => panic!(),
            }
        } else {
            Inventory_WindowsApplication::new()
        }
    }
}

impl ::protobuf::Message for Inventory_SoftwarePackage {
    fn is_initialized(&self) -> bool {
        if let Some(Inventory_SoftwarePackage_oneof_details::yum_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::apt_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::zypper_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::googet_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::wua_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::qfe_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::cos_package(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Inventory_SoftwarePackage_oneof_details::windows_application(ref v)) = self.details {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::yum_package(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::apt_package(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_package(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::googet_package(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::zypper_patch(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::wua_package(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::qfe_package(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::cos_package(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.details = ::std::option::Option::Some(Inventory_SoftwarePackage_oneof_details::windows_application(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.details {
            match v {
                &Inventory_SoftwarePackage_oneof_details::yum_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::apt_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::zypper_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::googet_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::zypper_patch(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::wua_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::qfe_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::cos_package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Inventory_SoftwarePackage_oneof_details::windows_application(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.details {
            match v {
                &Inventory_SoftwarePackage_oneof_details::yum_package(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::apt_package(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::zypper_package(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::googet_package(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::zypper_patch(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::wua_package(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::qfe_package(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::cos_package(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Inventory_SoftwarePackage_oneof_details::windows_application(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_SoftwarePackage {
        Inventory_SoftwarePackage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_VersionedPackage>(
                "yum_package",
                Inventory_SoftwarePackage::has_yum_package,
                Inventory_SoftwarePackage::get_yum_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_VersionedPackage>(
                "apt_package",
                Inventory_SoftwarePackage::has_apt_package,
                Inventory_SoftwarePackage::get_apt_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_VersionedPackage>(
                "zypper_package",
                Inventory_SoftwarePackage::has_zypper_package,
                Inventory_SoftwarePackage::get_zypper_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_VersionedPackage>(
                "googet_package",
                Inventory_SoftwarePackage::has_googet_package,
                Inventory_SoftwarePackage::get_googet_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_ZypperPatch>(
                "zypper_patch",
                Inventory_SoftwarePackage::has_zypper_patch,
                Inventory_SoftwarePackage::get_zypper_patch,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_WindowsUpdatePackage>(
                "wua_package",
                Inventory_SoftwarePackage::has_wua_package,
                Inventory_SoftwarePackage::get_wua_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_WindowsQuickFixEngineeringPackage>(
                "qfe_package",
                Inventory_SoftwarePackage::has_qfe_package,
                Inventory_SoftwarePackage::get_qfe_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_VersionedPackage>(
                "cos_package",
                Inventory_SoftwarePackage::has_cos_package,
                Inventory_SoftwarePackage::get_cos_package,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Inventory_WindowsApplication>(
                "windows_application",
                Inventory_SoftwarePackage::has_windows_application,
                Inventory_SoftwarePackage::get_windows_application,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_SoftwarePackage>(
                "Inventory.SoftwarePackage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_SoftwarePackage {
        static instance: ::protobuf::rt::LazyV2<Inventory_SoftwarePackage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_SoftwarePackage::new)
    }
}

impl ::protobuf::Clear for Inventory_SoftwarePackage {
    fn clear(&mut self) {
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.details = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_SoftwarePackage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_SoftwarePackage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_VersionedPackage {
    // message fields
    pub package_name: ::std::string::String,
    pub architecture: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_VersionedPackage {
    fn default() -> &'a Inventory_VersionedPackage {
        <Inventory_VersionedPackage as ::protobuf::Message>::default_instance()
    }
}

impl Inventory_VersionedPackage {
    pub fn new() -> Inventory_VersionedPackage {
        ::std::default::Default::default()
    }

    // string package_name = 4;


    pub fn get_package_name(&self) -> &str {
        &self.package_name
    }
    pub fn clear_package_name(&mut self) {
        self.package_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_name(&mut self, v: ::std::string::String) {
        self.package_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package_name(&mut self) -> &mut ::std::string::String {
        &mut self.package_name
    }

    // Take field
    pub fn take_package_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.package_name, ::std::string::String::new())
    }

    // string architecture = 2;


    pub fn get_architecture(&self) -> &str {
        &self.architecture
    }
    pub fn clear_architecture(&mut self) {
        self.architecture.clear();
    }

    // Param is passed by value, moved
    pub fn set_architecture(&mut self, v: ::std::string::String) {
        self.architecture = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_architecture(&mut self) -> &mut ::std::string::String {
        &mut self.architecture
    }

    // Take field
    pub fn take_architecture(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.architecture, ::std::string::String::new())
    }

    // string version = 3;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Inventory_VersionedPackage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.package_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.architecture)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.package_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.package_name);
        }
        if !self.architecture.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.architecture);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.package_name.is_empty() {
            os.write_string(4, &self.package_name)?;
        }
        if !self.architecture.is_empty() {
            os.write_string(2, &self.architecture)?;
        }
        if !self.version.is_empty() {
            os.write_string(3, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_VersionedPackage {
        Inventory_VersionedPackage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "package_name",
                |m: &Inventory_VersionedPackage| { &m.package_name },
                |m: &mut Inventory_VersionedPackage| { &mut m.package_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "architecture",
                |m: &Inventory_VersionedPackage| { &m.architecture },
                |m: &mut Inventory_VersionedPackage| { &mut m.architecture },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Inventory_VersionedPackage| { &m.version },
                |m: &mut Inventory_VersionedPackage| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_VersionedPackage>(
                "Inventory.VersionedPackage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_VersionedPackage {
        static instance: ::protobuf::rt::LazyV2<Inventory_VersionedPackage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_VersionedPackage::new)
    }
}

impl ::protobuf::Clear for Inventory_VersionedPackage {
    fn clear(&mut self) {
        self.package_name.clear();
        self.architecture.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_VersionedPackage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_VersionedPackage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_ZypperPatch {
    // message fields
    pub patch_name: ::std::string::String,
    pub category: ::std::string::String,
    pub severity: ::std::string::String,
    pub summary: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_ZypperPatch {
    fn default() -> &'a Inventory_ZypperPatch {
        <Inventory_ZypperPatch as ::protobuf::Message>::default_instance()
    }
}

impl Inventory_ZypperPatch {
    pub fn new() -> Inventory_ZypperPatch {
        ::std::default::Default::default()
    }

    // string patch_name = 5;


    pub fn get_patch_name(&self) -> &str {
        &self.patch_name
    }
    pub fn clear_patch_name(&mut self) {
        self.patch_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_patch_name(&mut self, v: ::std::string::String) {
        self.patch_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_patch_name(&mut self) -> &mut ::std::string::String {
        &mut self.patch_name
    }

    // Take field
    pub fn take_patch_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.patch_name, ::std::string::String::new())
    }

    // string category = 2;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // string severity = 3;


    pub fn get_severity(&self) -> &str {
        &self.severity
    }
    pub fn clear_severity(&mut self) {
        self.severity.clear();
    }

    // Param is passed by value, moved
    pub fn set_severity(&mut self, v: ::std::string::String) {
        self.severity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_severity(&mut self) -> &mut ::std::string::String {
        &mut self.severity
    }

    // Take field
    pub fn take_severity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.severity, ::std::string::String::new())
    }

    // string summary = 4;


    pub fn get_summary(&self) -> &str {
        &self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: ::std::string::String) {
        self.summary = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary(&mut self) -> &mut ::std::string::String {
        &mut self.summary
    }

    // Take field
    pub fn take_summary(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.summary, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Inventory_ZypperPatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.patch_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.severity)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.summary)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.patch_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.patch_name);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.category);
        }
        if !self.severity.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.severity);
        }
        if !self.summary.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.summary);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.patch_name.is_empty() {
            os.write_string(5, &self.patch_name)?;
        }
        if !self.category.is_empty() {
            os.write_string(2, &self.category)?;
        }
        if !self.severity.is_empty() {
            os.write_string(3, &self.severity)?;
        }
        if !self.summary.is_empty() {
            os.write_string(4, &self.summary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_ZypperPatch {
        Inventory_ZypperPatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "patch_name",
                |m: &Inventory_ZypperPatch| { &m.patch_name },
                |m: &mut Inventory_ZypperPatch| { &mut m.patch_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &Inventory_ZypperPatch| { &m.category },
                |m: &mut Inventory_ZypperPatch| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "severity",
                |m: &Inventory_ZypperPatch| { &m.severity },
                |m: &mut Inventory_ZypperPatch| { &mut m.severity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "summary",
                |m: &Inventory_ZypperPatch| { &m.summary },
                |m: &mut Inventory_ZypperPatch| { &mut m.summary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_ZypperPatch>(
                "Inventory.ZypperPatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_ZypperPatch {
        static instance: ::protobuf::rt::LazyV2<Inventory_ZypperPatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_ZypperPatch::new)
    }
}

impl ::protobuf::Clear for Inventory_ZypperPatch {
    fn clear(&mut self) {
        self.patch_name.clear();
        self.category.clear();
        self.severity.clear();
        self.summary.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_ZypperPatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_ZypperPatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_WindowsUpdatePackage {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub categories: ::protobuf::RepeatedField<Inventory_WindowsUpdatePackage_WindowsUpdateCategory>,
    pub kb_article_ids: ::protobuf::RepeatedField<::std::string::String>,
    pub support_url: ::std::string::String,
    pub more_info_urls: ::protobuf::RepeatedField<::std::string::String>,
    pub update_id: ::std::string::String,
    pub revision_number: i32,
    pub last_deployment_change_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_WindowsUpdatePackage {
    fn default() -> &'a Inventory_WindowsUpdatePackage {
        <Inventory_WindowsUpdatePackage as ::protobuf::Message>::default_instance()
    }
}

impl Inventory_WindowsUpdatePackage {
    pub fn new() -> Inventory_WindowsUpdatePackage {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated .google.cloud.osconfig.v1.Inventory.WindowsUpdatePackage.WindowsUpdateCategory categories = 3;


    pub fn get_categories(&self) -> &[Inventory_WindowsUpdatePackage_WindowsUpdateCategory] {
        &self.categories
    }
    pub fn clear_categories(&mut self) {
        self.categories.clear();
    }

    // Param is passed by value, moved
    pub fn set_categories(&mut self, v: ::protobuf::RepeatedField<Inventory_WindowsUpdatePackage_WindowsUpdateCategory>) {
        self.categories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_categories(&mut self) -> &mut ::protobuf::RepeatedField<Inventory_WindowsUpdatePackage_WindowsUpdateCategory> {
        &mut self.categories
    }

    // Take field
    pub fn take_categories(&mut self) -> ::protobuf::RepeatedField<Inventory_WindowsUpdatePackage_WindowsUpdateCategory> {
        ::std::mem::replace(&mut self.categories, ::protobuf::RepeatedField::new())
    }

    // repeated string kb_article_ids = 4;


    pub fn get_kb_article_ids(&self) -> &[::std::string::String] {
        &self.kb_article_ids
    }
    pub fn clear_kb_article_ids(&mut self) {
        self.kb_article_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_kb_article_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.kb_article_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_kb_article_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.kb_article_ids
    }

    // Take field
    pub fn take_kb_article_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.kb_article_ids, ::protobuf::RepeatedField::new())
    }

    // string support_url = 11;


    pub fn get_support_url(&self) -> &str {
        &self.support_url
    }
    pub fn clear_support_url(&mut self) {
        self.support_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_support_url(&mut self, v: ::std::string::String) {
        self.support_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_support_url(&mut self) -> &mut ::std::string::String {
        &mut self.support_url
    }

    // Take field
    pub fn take_support_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.support_url, ::std::string::String::new())
    }

    // repeated string more_info_urls = 5;


    pub fn get_more_info_urls(&self) -> &[::std::string::String] {
        &self.more_info_urls
    }
    pub fn clear_more_info_urls(&mut self) {
        self.more_info_urls.clear();
    }

    // Param is passed by value, moved
    pub fn set_more_info_urls(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.more_info_urls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_more_info_urls(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.more_info_urls
    }

    // Take field
    pub fn take_more_info_urls(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.more_info_urls, ::protobuf::RepeatedField::new())
    }

    // string update_id = 6;


    pub fn get_update_id(&self) -> &str {
        &self.update_id
    }
    pub fn clear_update_id(&mut self) {
        self.update_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_update_id(&mut self, v: ::std::string::String) {
        self.update_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_id(&mut self) -> &mut ::std::string::String {
        &mut self.update_id
    }

    // Take field
    pub fn take_update_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.update_id, ::std::string::String::new())
    }

    // int32 revision_number = 7;


    pub fn get_revision_number(&self) -> i32 {
        self.revision_number
    }
    pub fn clear_revision_number(&mut self) {
        self.revision_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision_number(&mut self, v: i32) {
        self.revision_number = v;
    }

    // .google.protobuf.Timestamp last_deployment_change_time = 10;


    pub fn get_last_deployment_change_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_deployment_change_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_last_deployment_change_time(&mut self) {
        self.last_deployment_change_time.clear();
    }

    pub fn has_last_deployment_change_time(&self) -> bool {
        self.last_deployment_change_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_deployment_change_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_deployment_change_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_deployment_change_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_deployment_change_time.is_none() {
            self.last_deployment_change_time.set_default();
        }
        self.last_deployment_change_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_deployment_change_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_deployment_change_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Inventory_WindowsUpdatePackage {
    fn is_initialized(&self) -> bool {
        for v in &self.categories {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_deployment_change_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.categories)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.kb_article_ids)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.support_url)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.more_info_urls)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.update_id)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.revision_number = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_deployment_change_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.categories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.kb_article_ids {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.support_url.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.support_url);
        }
        for value in &self.more_info_urls {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if !self.update_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.update_id);
        }
        if self.revision_number != 0 {
            my_size += ::protobuf::rt::value_size(7, self.revision_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.last_deployment_change_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.categories {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.kb_article_ids {
            os.write_string(4, &v)?;
        };
        if !self.support_url.is_empty() {
            os.write_string(11, &self.support_url)?;
        }
        for v in &self.more_info_urls {
            os.write_string(5, &v)?;
        };
        if !self.update_id.is_empty() {
            os.write_string(6, &self.update_id)?;
        }
        if self.revision_number != 0 {
            os.write_int32(7, self.revision_number)?;
        }
        if let Some(ref v) = self.last_deployment_change_time.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_WindowsUpdatePackage {
        Inventory_WindowsUpdatePackage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Inventory_WindowsUpdatePackage| { &m.title },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Inventory_WindowsUpdatePackage| { &m.description },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Inventory_WindowsUpdatePackage_WindowsUpdateCategory>>(
                "categories",
                |m: &Inventory_WindowsUpdatePackage| { &m.categories },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.categories },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kb_article_ids",
                |m: &Inventory_WindowsUpdatePackage| { &m.kb_article_ids },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.kb_article_ids },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "support_url",
                |m: &Inventory_WindowsUpdatePackage| { &m.support_url },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.support_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "more_info_urls",
                |m: &Inventory_WindowsUpdatePackage| { &m.more_info_urls },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.more_info_urls },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "update_id",
                |m: &Inventory_WindowsUpdatePackage| { &m.update_id },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.update_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "revision_number",
                |m: &Inventory_WindowsUpdatePackage| { &m.revision_number },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.revision_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "last_deployment_change_time",
                |m: &Inventory_WindowsUpdatePackage| { &m.last_deployment_change_time },
                |m: &mut Inventory_WindowsUpdatePackage| { &mut m.last_deployment_change_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_WindowsUpdatePackage>(
                "Inventory.WindowsUpdatePackage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_WindowsUpdatePackage {
        static instance: ::protobuf::rt::LazyV2<Inventory_WindowsUpdatePackage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_WindowsUpdatePackage::new)
    }
}

impl ::protobuf::Clear for Inventory_WindowsUpdatePackage {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.categories.clear();
        self.kb_article_ids.clear();
        self.support_url.clear();
        self.more_info_urls.clear();
        self.update_id.clear();
        self.revision_number = 0;
        self.last_deployment_change_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_WindowsUpdatePackage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_WindowsUpdatePackage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    fn default() -> &'a Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
        <Inventory_WindowsUpdatePackage_WindowsUpdateCategory as ::protobuf::Message>::default_instance()
    }
}

impl Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    pub fn new() -> Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
        Inventory_WindowsUpdatePackage_WindowsUpdateCategory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Inventory_WindowsUpdatePackage_WindowsUpdateCategory| { &m.id },
                |m: &mut Inventory_WindowsUpdatePackage_WindowsUpdateCategory| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Inventory_WindowsUpdatePackage_WindowsUpdateCategory| { &m.name },
                |m: &mut Inventory_WindowsUpdatePackage_WindowsUpdateCategory| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_WindowsUpdatePackage_WindowsUpdateCategory>(
                "Inventory.WindowsUpdatePackage.WindowsUpdateCategory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
        static instance: ::protobuf::rt::LazyV2<Inventory_WindowsUpdatePackage_WindowsUpdateCategory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_WindowsUpdatePackage_WindowsUpdateCategory::new)
    }
}

impl ::protobuf::Clear for Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_WindowsUpdatePackage_WindowsUpdateCategory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_WindowsQuickFixEngineeringPackage {
    // message fields
    pub caption: ::std::string::String,
    pub description: ::std::string::String,
    pub hot_fix_id: ::std::string::String,
    pub install_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_WindowsQuickFixEngineeringPackage {
    fn default() -> &'a Inventory_WindowsQuickFixEngineeringPackage {
        <Inventory_WindowsQuickFixEngineeringPackage as ::protobuf::Message>::default_instance()
    }
}

impl Inventory_WindowsQuickFixEngineeringPackage {
    pub fn new() -> Inventory_WindowsQuickFixEngineeringPackage {
        ::std::default::Default::default()
    }

    // string caption = 1;


    pub fn get_caption(&self) -> &str {
        &self.caption
    }
    pub fn clear_caption(&mut self) {
        self.caption.clear();
    }

    // Param is passed by value, moved
    pub fn set_caption(&mut self, v: ::std::string::String) {
        self.caption = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_caption(&mut self) -> &mut ::std::string::String {
        &mut self.caption
    }

    // Take field
    pub fn take_caption(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.caption, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string hot_fix_id = 3;


    pub fn get_hot_fix_id(&self) -> &str {
        &self.hot_fix_id
    }
    pub fn clear_hot_fix_id(&mut self) {
        self.hot_fix_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_hot_fix_id(&mut self, v: ::std::string::String) {
        self.hot_fix_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hot_fix_id(&mut self) -> &mut ::std::string::String {
        &mut self.hot_fix_id
    }

    // Take field
    pub fn take_hot_fix_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hot_fix_id, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp install_time = 5;


    pub fn get_install_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.install_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_install_time(&mut self) {
        self.install_time.clear();
    }

    pub fn has_install_time(&self) -> bool {
        self.install_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_install_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.install_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_install_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.install_time.is_none() {
            self.install_time.set_default();
        }
        self.install_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_install_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.install_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Inventory_WindowsQuickFixEngineeringPackage {
    fn is_initialized(&self) -> bool {
        for v in &self.install_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.caption)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hot_fix_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.install_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.caption.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.caption);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.hot_fix_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hot_fix_id);
        }
        if let Some(ref v) = self.install_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.caption.is_empty() {
            os.write_string(1, &self.caption)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.hot_fix_id.is_empty() {
            os.write_string(3, &self.hot_fix_id)?;
        }
        if let Some(ref v) = self.install_time.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_WindowsQuickFixEngineeringPackage {
        Inventory_WindowsQuickFixEngineeringPackage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "caption",
                |m: &Inventory_WindowsQuickFixEngineeringPackage| { &m.caption },
                |m: &mut Inventory_WindowsQuickFixEngineeringPackage| { &mut m.caption },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Inventory_WindowsQuickFixEngineeringPackage| { &m.description },
                |m: &mut Inventory_WindowsQuickFixEngineeringPackage| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hot_fix_id",
                |m: &Inventory_WindowsQuickFixEngineeringPackage| { &m.hot_fix_id },
                |m: &mut Inventory_WindowsQuickFixEngineeringPackage| { &mut m.hot_fix_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "install_time",
                |m: &Inventory_WindowsQuickFixEngineeringPackage| { &m.install_time },
                |m: &mut Inventory_WindowsQuickFixEngineeringPackage| { &mut m.install_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_WindowsQuickFixEngineeringPackage>(
                "Inventory.WindowsQuickFixEngineeringPackage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_WindowsQuickFixEngineeringPackage {
        static instance: ::protobuf::rt::LazyV2<Inventory_WindowsQuickFixEngineeringPackage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_WindowsQuickFixEngineeringPackage::new)
    }
}

impl ::protobuf::Clear for Inventory_WindowsQuickFixEngineeringPackage {
    fn clear(&mut self) {
        self.caption.clear();
        self.description.clear();
        self.hot_fix_id.clear();
        self.install_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_WindowsQuickFixEngineeringPackage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_WindowsQuickFixEngineeringPackage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Inventory_WindowsApplication {
    // message fields
    pub display_name: ::std::string::String,
    pub display_version: ::std::string::String,
    pub publisher: ::std::string::String,
    pub install_date: ::protobuf::SingularPtrField<super::date::Date>,
    pub help_link: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Inventory_WindowsApplication {
    fn default() -> &'a Inventory_WindowsApplication {
        <Inventory_WindowsApplication as ::protobuf::Message>::default_instance()
    }
}

impl Inventory_WindowsApplication {
    pub fn new() -> Inventory_WindowsApplication {
        ::std::default::Default::default()
    }

    // string display_name = 1;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string display_version = 2;


    pub fn get_display_version(&self) -> &str {
        &self.display_version
    }
    pub fn clear_display_version(&mut self) {
        self.display_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_version(&mut self, v: ::std::string::String) {
        self.display_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_version(&mut self) -> &mut ::std::string::String {
        &mut self.display_version
    }

    // Take field
    pub fn take_display_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_version, ::std::string::String::new())
    }

    // string publisher = 3;


    pub fn get_publisher(&self) -> &str {
        &self.publisher
    }
    pub fn clear_publisher(&mut self) {
        self.publisher.clear();
    }

    // Param is passed by value, moved
    pub fn set_publisher(&mut self, v: ::std::string::String) {
        self.publisher = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publisher(&mut self) -> &mut ::std::string::String {
        &mut self.publisher
    }

    // Take field
    pub fn take_publisher(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.publisher, ::std::string::String::new())
    }

    // .google.type.Date install_date = 4;


    pub fn get_install_date(&self) -> &super::date::Date {
        self.install_date.as_ref().unwrap_or_else(|| <super::date::Date as ::protobuf::Message>::default_instance())
    }
    pub fn clear_install_date(&mut self) {
        self.install_date.clear();
    }

    pub fn has_install_date(&self) -> bool {
        self.install_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_install_date(&mut self, v: super::date::Date) {
        self.install_date = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_install_date(&mut self) -> &mut super::date::Date {
        if self.install_date.is_none() {
            self.install_date.set_default();
        }
        self.install_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_install_date(&mut self) -> super::date::Date {
        self.install_date.take().unwrap_or_else(|| super::date::Date::new())
    }

    // string help_link = 5;


    pub fn get_help_link(&self) -> &str {
        &self.help_link
    }
    pub fn clear_help_link(&mut self) {
        self.help_link.clear();
    }

    // Param is passed by value, moved
    pub fn set_help_link(&mut self, v: ::std::string::String) {
        self.help_link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_help_link(&mut self) -> &mut ::std::string::String {
        &mut self.help_link
    }

    // Take field
    pub fn take_help_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.help_link, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Inventory_WindowsApplication {
    fn is_initialized(&self) -> bool {
        for v in &self.install_date {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.publisher)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.install_date)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.help_link)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.display_name);
        }
        if !self.display_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_version);
        }
        if !self.publisher.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.publisher);
        }
        if let Some(ref v) = self.install_date.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.help_link.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.help_link);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.display_name.is_empty() {
            os.write_string(1, &self.display_name)?;
        }
        if !self.display_version.is_empty() {
            os.write_string(2, &self.display_version)?;
        }
        if !self.publisher.is_empty() {
            os.write_string(3, &self.publisher)?;
        }
        if let Some(ref v) = self.install_date.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.help_link.is_empty() {
            os.write_string(5, &self.help_link)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Inventory_WindowsApplication {
        Inventory_WindowsApplication::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Inventory_WindowsApplication| { &m.display_name },
                |m: &mut Inventory_WindowsApplication| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_version",
                |m: &Inventory_WindowsApplication| { &m.display_version },
                |m: &mut Inventory_WindowsApplication| { &mut m.display_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "publisher",
                |m: &Inventory_WindowsApplication| { &m.publisher },
                |m: &mut Inventory_WindowsApplication| { &mut m.publisher },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::date::Date>>(
                "install_date",
                |m: &Inventory_WindowsApplication| { &m.install_date },
                |m: &mut Inventory_WindowsApplication| { &mut m.install_date },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "help_link",
                |m: &Inventory_WindowsApplication| { &m.help_link },
                |m: &mut Inventory_WindowsApplication| { &mut m.help_link },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Inventory_WindowsApplication>(
                "Inventory.WindowsApplication",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Inventory_WindowsApplication {
        static instance: ::protobuf::rt::LazyV2<Inventory_WindowsApplication> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Inventory_WindowsApplication::new)
    }
}

impl ::protobuf::Clear for Inventory_WindowsApplication {
    fn clear(&mut self) {
        self.display_name.clear();
        self.display_version.clear();
        self.publisher.clear();
        self.install_date.clear();
        self.help_link.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Inventory_WindowsApplication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inventory_WindowsApplication {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInventoryRequest {
    // message fields
    pub name: ::std::string::String,
    pub view: InventoryView,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInventoryRequest {
    fn default() -> &'a GetInventoryRequest {
        <GetInventoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInventoryRequest {
    pub fn new() -> GetInventoryRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.cloud.osconfig.v1.InventoryView view = 2;


    pub fn get_view(&self) -> InventoryView {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = InventoryView::INVENTORY_VIEW_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: InventoryView) {
        self.view = v;
    }
}

impl ::protobuf::Message for GetInventoryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.view, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.view != InventoryView::INVENTORY_VIEW_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.view);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.view != InventoryView::INVENTORY_VIEW_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.view))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInventoryRequest {
        GetInventoryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetInventoryRequest| { &m.name },
                |m: &mut GetInventoryRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InventoryView>>(
                "view",
                |m: &GetInventoryRequest| { &m.view },
                |m: &mut GetInventoryRequest| { &mut m.view },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInventoryRequest>(
                "GetInventoryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInventoryRequest {
        static instance: ::protobuf::rt::LazyV2<GetInventoryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInventoryRequest::new)
    }
}

impl ::protobuf::Clear for GetInventoryRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.view = InventoryView::INVENTORY_VIEW_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInventoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInventoryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInventoriesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub view: InventoryView,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInventoriesRequest {
    fn default() -> &'a ListInventoriesRequest {
        <ListInventoriesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInventoriesRequest {
    pub fn new() -> ListInventoriesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // .google.cloud.osconfig.v1.InventoryView view = 2;


    pub fn get_view(&self) -> InventoryView {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = InventoryView::INVENTORY_VIEW_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: InventoryView) {
        self.view = v;
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }

    // string filter = 5;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInventoriesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.view, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.view != InventoryView::INVENTORY_VIEW_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.view);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.view != InventoryView::INVENTORY_VIEW_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.view))?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        if !self.filter.is_empty() {
            os.write_string(5, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInventoriesRequest {
        ListInventoriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInventoriesRequest| { &m.parent },
                |m: &mut ListInventoriesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InventoryView>>(
                "view",
                |m: &ListInventoriesRequest| { &m.view },
                |m: &mut ListInventoriesRequest| { &mut m.view },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListInventoriesRequest| { &m.page_size },
                |m: &mut ListInventoriesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInventoriesRequest| { &m.page_token },
                |m: &mut ListInventoriesRequest| { &mut m.page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListInventoriesRequest| { &m.filter },
                |m: &mut ListInventoriesRequest| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInventoriesRequest>(
                "ListInventoriesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInventoriesRequest {
        static instance: ::protobuf::rt::LazyV2<ListInventoriesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInventoriesRequest::new)
    }
}

impl ::protobuf::Clear for ListInventoriesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.view = InventoryView::INVENTORY_VIEW_UNSPECIFIED;
        self.page_size = 0;
        self.page_token.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInventoriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInventoriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInventoriesResponse {
    // message fields
    pub inventories: ::protobuf::RepeatedField<Inventory>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInventoriesResponse {
    fn default() -> &'a ListInventoriesResponse {
        <ListInventoriesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInventoriesResponse {
    pub fn new() -> ListInventoriesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.osconfig.v1.Inventory inventories = 1;


    pub fn get_inventories(&self) -> &[Inventory] {
        &self.inventories
    }
    pub fn clear_inventories(&mut self) {
        self.inventories.clear();
    }

    // Param is passed by value, moved
    pub fn set_inventories(&mut self, v: ::protobuf::RepeatedField<Inventory>) {
        self.inventories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inventories(&mut self) -> &mut ::protobuf::RepeatedField<Inventory> {
        &mut self.inventories
    }

    // Take field
    pub fn take_inventories(&mut self) -> ::protobuf::RepeatedField<Inventory> {
        ::std::mem::replace(&mut self.inventories, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInventoriesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.inventories {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inventories)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.inventories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.inventories {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInventoriesResponse {
        ListInventoriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Inventory>>(
                "inventories",
                |m: &ListInventoriesResponse| { &m.inventories },
                |m: &mut ListInventoriesResponse| { &mut m.inventories },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInventoriesResponse| { &m.next_page_token },
                |m: &mut ListInventoriesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInventoriesResponse>(
                "ListInventoriesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInventoriesResponse {
        static instance: ::protobuf::rt::LazyV2<ListInventoriesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInventoriesResponse::new)
    }
}

impl ::protobuf::Clear for ListInventoriesResponse {
    fn clear(&mut self) {
        self.inventories.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInventoriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInventoriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InventoryView {
    INVENTORY_VIEW_UNSPECIFIED = 0,
    BASIC = 1,
    FULL = 2,
}

impl ::protobuf::ProtobufEnum for InventoryView {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InventoryView> {
        match value {
            0 => ::std::option::Option::Some(InventoryView::INVENTORY_VIEW_UNSPECIFIED),
            1 => ::std::option::Option::Some(InventoryView::BASIC),
            2 => ::std::option::Option::Some(InventoryView::FULL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InventoryView] = &[
            InventoryView::INVENTORY_VIEW_UNSPECIFIED,
            InventoryView::BASIC,
            InventoryView::FULL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<InventoryView>("InventoryView", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for InventoryView {
}

impl ::std::default::Default for InventoryView {
    fn default() -> Self {
        InventoryView::INVENTORY_VIEW_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for InventoryView {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(google/cloud/osconfig/v1/inventory.proto\x12\x18google.cloud.osconfig\
    .v1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.pr\
    oto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16google/type/date.proto\
    \"\xfa\x1a\n\tInventory\x12\x17\n\x04name\x18\x03\x20\x01(\tR\x04nameB\
    \x03\xe0A\x03\x12C\n\x07os_info\x18\x01\x20\x01(\x0b2*.google.cloud.osco\
    nfig.v1.Inventory.OsInfoR\x06osInfo\x12D\n\x05items\x18\x02\x20\x03(\x0b\
    2..google.cloud.osconfig.v1.Inventory.ItemsEntryR\x05items\x12@\n\x0bupd\
    ate_time\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nupdateTim\
    eB\x03\xe0A\x03\x1a\xa2\x02\n\x06OsInfo\x12\x1a\n\x08hostname\x18\t\x20\
    \x01(\tR\x08hostname\x12\x1b\n\tlong_name\x18\x02\x20\x01(\tR\x08longNam\
    e\x12\x1d\n\nshort_name\x18\x03\x20\x01(\tR\tshortName\x12\x18\n\x07vers\
    ion\x18\x04\x20\x01(\tR\x07version\x12\"\n\x0carchitecture\x18\x05\x20\
    \x01(\tR\x0carchitecture\x12%\n\x0ekernel_version\x18\x06\x20\x01(\tR\rk\
    ernelVersion\x12%\n\x0ekernel_release\x18\x07\x20\x01(\tR\rkernelRelease\
    \x124\n\x16osconfig_agent_version\x18\x08\x20\x01(\tR\x14osconfigAgentVe\
    rsion\x1a\x89\x05\n\x04Item\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12T\n\x0borigin_type\x18\x02\x20\x01(\x0e23.google.cloud.osconfig.v1.I\
    nventory.Item.OriginTypeR\noriginType\x12;\n\x0bcreate_time\x18\x08\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\ncreateTime\x12;\n\x0bupdate_t\
    ime\x18\t\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nupdateTime\x12A\
    \n\x04type\x18\x05\x20\x01(\x0e2-.google.cloud.osconfig.v1.Inventory.Ite\
    m.TypeR\x04type\x12b\n\x11installed_package\x18\x06\x20\x01(\x0b23.googl\
    e.cloud.osconfig.v1.Inventory.SoftwarePackageH\0R\x10installedPackage\
    \x12b\n\x11available_package\x18\x07\x20\x01(\x0b23.google.cloud.osconfi\
    g.v1.Inventory.SoftwarePackageH\0R\x10availablePackage\"?\n\nOriginType\
    \x12\x1b\n\x17ORIGIN_TYPE_UNSPECIFIED\x10\0\x12\x14\n\x10INVENTORY_REPOR\
    T\x10\x01\"J\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\0\x12\x15\n\x11\
    INSTALLED_PACKAGE\x10\x01\x12\x15\n\x11AVAILABLE_PACKAGE\x10\x02B\t\n\
    \x07details\x1a\xed\x06\n\x0fSoftwarePackage\x12W\n\x0byum_package\x18\
    \x01\x20\x01(\x0b24.google.cloud.osconfig.v1.Inventory.VersionedPackageH\
    \0R\nyumPackage\x12W\n\x0bapt_package\x18\x02\x20\x01(\x0b24.google.clou\
    d.osconfig.v1.Inventory.VersionedPackageH\0R\naptPackage\x12]\n\x0ezyppe\
    r_package\x18\x03\x20\x01(\x0b24.google.cloud.osconfig.v1.Inventory.Vers\
    ionedPackageH\0R\rzypperPackage\x12]\n\x0egooget_package\x18\x04\x20\x01\
    (\x0b24.google.cloud.osconfig.v1.Inventory.VersionedPackageH\0R\rgoogetP\
    ackage\x12T\n\x0czypper_patch\x18\x05\x20\x01(\x0b2/.google.cloud.osconf\
    ig.v1.Inventory.ZypperPatchH\0R\x0bzypperPatch\x12[\n\x0bwua_package\x18\
    \x06\x20\x01(\x0b28.google.cloud.osconfig.v1.Inventory.WindowsUpdatePack\
    ageH\0R\nwuaPackage\x12h\n\x0bqfe_package\x18\x07\x20\x01(\x0b2E.google.\
    cloud.osconfig.v1.Inventory.WindowsQuickFixEngineeringPackageH\0R\nqfePa\
    ckage\x12W\n\x0bcos_package\x18\x08\x20\x01(\x0b24.google.cloud.osconfig\
    .v1.Inventory.VersionedPackageH\0R\ncosPackage\x12i\n\x13windows_applica\
    tion\x18\t\x20\x01(\x0b26.google.cloud.osconfig.v1.Inventory.WindowsAppl\
    icationH\0R\x12windowsApplicationB\t\n\x07details\x1as\n\x10VersionedPac\
    kage\x12!\n\x0cpackage_name\x18\x04\x20\x01(\tR\x0bpackageName\x12\"\n\
    \x0carchitecture\x18\x02\x20\x01(\tR\x0carchitecture\x12\x18\n\x07versio\
    n\x18\x03\x20\x01(\tR\x07version\x1a~\n\x0bZypperPatch\x12\x1d\n\npatch_\
    name\x18\x05\x20\x01(\tR\tpatchName\x12\x1a\n\x08category\x18\x02\x20\
    \x01(\tR\x08category\x12\x1a\n\x08severity\x18\x03\x20\x01(\tR\x08severi\
    ty\x12\x18\n\x07summary\x18\x04\x20\x01(\tR\x07summary\x1a\x89\x04\n\x14\
    WindowsUpdatePackage\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05title\x12\
    \x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x12n\n\ncategor\
    ies\x18\x03\x20\x03(\x0b2N.google.cloud.osconfig.v1.Inventory.WindowsUpd\
    atePackage.WindowsUpdateCategoryR\ncategories\x12$\n\x0ekb_article_ids\
    \x18\x04\x20\x03(\tR\x0ckbArticleIds\x12\x1f\n\x0bsupport_url\x18\x0b\
    \x20\x01(\tR\nsupportUrl\x12$\n\x0emore_info_urls\x18\x05\x20\x03(\tR\
    \x0cmoreInfoUrls\x12\x1b\n\tupdate_id\x18\x06\x20\x01(\tR\x08updateId\
    \x12'\n\x0frevision_number\x18\x07\x20\x01(\x05R\x0erevisionNumber\x12Y\
    \n\x1blast_deployment_change_time\x18\n\x20\x01(\x0b2\x1a.google.protobu\
    f.TimestampR\x18lastDeploymentChangeTime\x1a;\n\x15WindowsUpdateCategory\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x1a\xbc\x01\n!WindowsQuickFixEngineeringPackage\x12\x18\
    \n\x07caption\x18\x01\x20\x01(\tR\x07caption\x12\x20\n\x0bdescription\
    \x18\x02\x20\x01(\tR\x0bdescription\x12\x1c\n\nhot_fix_id\x18\x03\x20\
    \x01(\tR\x08hotFixId\x12=\n\x0cinstall_time\x18\x05\x20\x01(\x0b2\x1a.go\
    ogle.protobuf.TimestampR\x0binstallTime\x1a\xd1\x01\n\x12WindowsApplicat\
    ion\x12!\n\x0cdisplay_name\x18\x01\x20\x01(\tR\x0bdisplayName\x12'\n\x0f\
    display_version\x18\x02\x20\x01(\tR\x0edisplayVersion\x12\x1c\n\tpublish\
    er\x18\x03\x20\x01(\tR\tpublisher\x124\n\x0cinstall_date\x18\x04\x20\x01\
    (\x0b2\x11.google.type.DateR\x0binstallDate\x12\x1b\n\thelp_link\x18\x05\
    \x20\x01(\tR\x08helpLink\x1ab\n\nItemsEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12>\n\x05value\x18\x02\x20\x01(\x0b2(.google.cloud.osco\
    nfig.v1.Inventory.ItemR\x05value:\x028\x01:n\xeaAk\n!osconfig.googleapis\
    .com/Inventory\x12Fprojects/{project}/locations/{location}/instances/{in\
    stance}/inventory\"\x91\x01\n\x13GetInventoryRequest\x12=\n\x04name\x18\
    \x01\x20\x01(\tR\x04nameB)\xfaA#\n!osconfig.googleapis.com/Inventory\xe0\
    A\x02\x12;\n\x04view\x18\x02\x20\x01(\x0e2'.google.cloud.osconfig.v1.Inv\
    entoryViewR\x04view\"\xea\x01\n\x16ListInventoriesRequest\x12?\n\x06pare\
    nt\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\n\x1fcompute.googleapis.com/Ins\
    tance\xe0A\x02\x12;\n\x04view\x18\x02\x20\x01(\x0e2'.google.cloud.osconf\
    ig.v1.InventoryViewR\x04view\x12\x1b\n\tpage_size\x18\x03\x20\x01(\x05R\
    \x08pageSize\x12\x1d\n\npage_token\x18\x04\x20\x01(\tR\tpageToken\x12\
    \x16\n\x06filter\x18\x05\x20\x01(\tR\x06filter\"\x88\x01\n\x17ListInvent\
    oriesResponse\x12E\n\x0binventories\x18\x01\x20\x03(\x0b2#.google.cloud.\
    osconfig.v1.InventoryR\x0binventories\x12&\n\x0fnext_page_token\x18\x02\
    \x20\x01(\tR\rnextPageToken*D\n\rInventoryView\x12\x1e\n\x1aINVENTORY_VI\
    EW_UNSPECIFIED\x10\0\x12\t\n\x05BASIC\x10\x01\x12\x08\n\x04FULL\x10\x02B\
    \xbb\x01\n\x1ccom.google.cloud.osconfig.v1B\x0bInventoriesP\x01Z8cloud.g\
    oogle.com/go/osconfig/apiv1/osconfigpb;osconfigpb\xaa\x02\x18Google.Clou\
    d.OsConfig.V1\xca\x02\x18Google\\Cloud\\OsConfig\\V1\xea\x02\x1bGoogle::\
    Cloud::OsConfig::V1J\xfcl\n\x07\x12\x05\x0e\0\xff\x02\x01\n\xbc\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202021\x20Google\x20LL\
    C\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.\
    0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0!\n\t\n\x02\x03\0\x12\x03\
    \x12\0)\n\t\n\x02\x03\x01\x12\x03\x13\0#\n\t\n\x02\x03\x02\x12\x03\x14\0\
    )\n\t\n\x02\x03\x03\x12\x03\x15\0\x20\n\x08\n\x01\x08\x12\x03\x17\05\n\t\
    \n\x02\x08%\x12\x03\x17\05\n\x08\n\x01\x08\x12\x03\x18\0O\n\t\n\x02\x08\
    \x0b\x12\x03\x18\0O\n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08\n\x12\
    \x03\x19\0\"\n\x08\n\x01\x08\x12\x03\x1a\0,\n\t\n\x02\x08\x08\x12\x03\
    \x1a\0,\n\x08\n\x01\x08\x12\x03\x1b\05\n\t\n\x02\x08\x01\x12\x03\x1b\05\
    \n\x08\n\x01\x08\x12\x03\x1c\05\n\t\n\x02\x08)\x12\x03\x1c\05\n\x08\n\
    \x01\x08\x12\x03\x1d\04\n\t\n\x02\x08-\x12\x03\x1d\04\n\x87\x04\n\x02\
    \x04\0\x12\x05)\0\xb2\x02\x01\x1a\xfd\x02\x20This\x20API\x20resource\x20\
    represents\x20the\x20available\x20inventory\x20data\x20for\x20a\n\x20Com\
    pute\x20Engine\x20virtual\x20machine\x20(VM)\x20instance\x20at\x20a\x20g\
    iven\x20point\x20in\x20time.\n\n\x20You\x20can\x20use\x20this\x20API\x20\
    resource\x20to\x20determine\x20the\x20inventory\x20data\x20of\x20your\
    \x20VM.\n\n\x20For\x20more\x20information,\x20see\x20[Information\x20pro\
    vided\x20by\x20OS\x20inventory\n\x20management](https://cloud.google.com\
    /compute/docs/instances/os-inventory-management#data-collected).\n2z\x20\
    OS\x20Config\x20Inventory\x20is\x20a\x20service\x20for\x20collecting\x20\
    and\x20reporting\x20operating\n\x20system\x20and\x20package\x20informati\
    on\x20on\x20VM\x20instances.\n\n\n\n\x03\x04\0\x01\x12\x03)\x08\x11\n\
    \x0b\n\x03\x04\0\x07\x12\x04*\x02-\x04\n\r\n\x05\x04\0\x07\x9d\x08\x12\
    \x04*\x02-\x04\n8\n\x04\x04\0\x03\0\x12\x040\x02K\x03\x1a*\x20Operating\
    \x20system\x20information\x20for\x20the\x20VM.\n\n\x0c\n\x05\x04\0\x03\0\
    \x01\x12\x030\n\x10\n!\n\x06\x04\0\x03\0\x02\0\x12\x032\x04\x18\x1a\x12\
    \x20The\x20VM\x20hostname.\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x032\
    \x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x032\x0b\x13\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x03\x12\x032\x16\x17\n\x81\x01\n\x06\x04\0\x03\0\x02\
    \x01\x12\x037\x04\x19\x1ar\x20The\x20operating\x20system\x20long\x20name\
    .\n\x20For\x20example\x20'Debian\x20GNU/Linux\x209'\x20or\x20'Microsoft\
    \x20Window\x20Server\x202019\n\x20Datacenter'.\n\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x05\x12\x037\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x037\
    \x0b\x14\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x037\x17\x18\nV\n\x06\
    \x04\0\x03\0\x02\x02\x12\x03;\x04\x1a\x1aG\x20The\x20operating\x20system\
    \x20short\x20name.\n\x20For\x20example,\x20'windows'\x20or\x20'debian'.\
    \n\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03;\x04\n\n\x0e\n\x07\x04\0\
    \x03\0\x02\x02\x01\x12\x03;\x0b\x15\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\
    \x12\x03;\x18\x19\n5\n\x06\x04\0\x03\0\x02\x03\x12\x03>\x04\x17\x1a&\x20\
    The\x20version\x20of\x20the\x20operating\x20system.\n\n\x0e\n\x07\x04\0\
    \x03\0\x02\x03\x05\x12\x03>\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x03\x01\
    \x12\x03>\x0b\x12\n\x0e\n\x07\x04\0\x03\0\x02\x03\x03\x12\x03>\x15\x16\n\
    A\n\x06\x04\0\x03\0\x02\x04\x12\x03A\x04\x1c\x1a2\x20The\x20system\x20ar\
    chitecture\x20of\x20the\x20operating\x20system.\n\n\x0e\n\x07\x04\0\x03\
    \0\x02\x04\x05\x12\x03A\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x04\x01\x12\
    \x03A\x0b\x17\n\x0e\n\x07\x04\0\x03\0\x02\x04\x03\x12\x03A\x1a\x1b\n<\n\
    \x06\x04\0\x03\0\x02\x05\x12\x03D\x04\x1e\x1a-\x20The\x20kernel\x20versi\
    on\x20of\x20the\x20operating\x20system.\n\n\x0e\n\x07\x04\0\x03\0\x02\
    \x05\x05\x12\x03D\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x05\x01\x12\x03D\x0b\
    \x19\n\x0e\n\x07\x04\0\x03\0\x02\x05\x03\x12\x03D\x1c\x1d\n<\n\x06\x04\0\
    \x03\0\x02\x06\x12\x03G\x04\x1e\x1a-\x20The\x20kernel\x20release\x20of\
    \x20the\x20operating\x20system.\n\n\x0e\n\x07\x04\0\x03\0\x02\x06\x05\
    \x12\x03G\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x06\x01\x12\x03G\x0b\x19\n\
    \x0e\n\x07\x04\0\x03\0\x02\x06\x03\x12\x03G\x1c\x1d\nN\n\x06\x04\0\x03\0\
    \x02\x07\x12\x03J\x04&\x1a?\x20The\x20current\x20version\x20of\x20the\
    \x20OS\x20Config\x20agent\x20running\x20on\x20the\x20VM.\n\n\x0e\n\x07\
    \x04\0\x03\0\x02\x07\x05\x12\x03J\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x07\
    \x01\x12\x03J\x0b!\n\x0e\n\x07\x04\0\x03\0\x02\x07\x03\x12\x03J$%\n4\n\
    \x04\x04\0\x03\x01\x12\x04N\x02|\x03\x1a&\x20A\x20single\x20piece\x20of\
    \x20inventory\x20on\x20a\x20VM.\n\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03N\
    \n\x0e\n:\n\x06\x04\0\x03\x01\x04\0\x12\x04P\x04W\x05\x1a*\x20The\x20ori\
    gin\x20of\x20a\x20specific\x20inventory\x20item.\n\n\x0e\n\x07\x04\0\x03\
    \x01\x04\0\x01\x12\x03P\t\x13\n=\n\x08\x04\0\x03\x01\x04\0\x02\0\x12\x03\
    R\x06\"\x1a,\x20Invalid.\x20An\x20origin\x20type\x20must\x20be\x20specif\
    ied.\n\n\x10\n\t\x04\0\x03\x01\x04\0\x02\0\x01\x12\x03R\x06\x1d\n\x10\n\
    \t\x04\0\x03\x01\x04\0\x02\0\x02\x12\x03R\x20!\n|\n\x08\x04\0\x03\x01\
    \x04\0\x02\x01\x12\x03V\x06\x1b\x1ak\x20This\x20inventory\x20item\x20was\
    \x20discovered\x20as\x20the\x20result\x20of\x20the\x20agent\n\x20reporti\
    ng\x20inventory\x20via\x20the\x20reporting\x20API.\n\n\x10\n\t\x04\0\x03\
    \x01\x04\0\x02\x01\x01\x12\x03V\x06\x16\n\x10\n\t\x04\0\x03\x01\x04\0\
    \x02\x01\x02\x12\x03V\x19\x1a\nL\n\x06\x04\0\x03\x01\x04\x01\x12\x04Z\
    \x04c\x05\x1a<\x20The\x20different\x20types\x20of\x20inventory\x20that\
    \x20are\x20tracked\x20on\x20a\x20VM.\n\n\x0e\n\x07\x04\0\x03\x01\x04\x01\
    \x01\x12\x03Z\t\r\n6\n\x08\x04\0\x03\x01\x04\x01\x02\0\x12\x03\\\x06\x1b\
    \x1a%\x20Invalid.\x20An\x20type\x20must\x20be\x20specified.\n\n\x10\n\t\
    \x04\0\x03\x01\x04\x01\x02\0\x01\x12\x03\\\x06\x16\n\x10\n\t\x04\0\x03\
    \x01\x04\x01\x02\0\x02\x12\x03\\\x19\x1a\nI\n\x08\x04\0\x03\x01\x04\x01\
    \x02\x01\x12\x03_\x06\x1c\x1a8\x20This\x20represents\x20a\x20package\x20\
    that\x20is\x20installed\x20on\x20the\x20VM.\n\n\x10\n\t\x04\0\x03\x01\
    \x04\x01\x02\x01\x01\x12\x03_\x06\x17\n\x10\n\t\x04\0\x03\x01\x04\x01\
    \x02\x01\x02\x12\x03_\x1a\x1b\nM\n\x08\x04\0\x03\x01\x04\x01\x02\x02\x12\
    \x03b\x06\x1c\x1a<\x20This\x20represents\x20an\x20update\x20that\x20is\
    \x20available\x20for\x20a\x20package.\n\n\x10\n\t\x04\0\x03\x01\x04\x01\
    \x02\x02\x01\x12\x03b\x06\x17\n\x10\n\t\x04\0\x03\x01\x04\x01\x02\x02\
    \x02\x12\x03b\x1a\x1b\nK\n\x06\x04\0\x03\x01\x02\0\x12\x03f\x04\x12\x1a<\
    \x20Identifier\x20for\x20this\x20item,\x20unique\x20across\x20items\x20f\
    or\x20this\x20VM.\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03f\x04\n\n\
    \x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\x03f\x0b\r\n\x0e\n\x07\x04\0\x03\
    \x01\x02\0\x03\x12\x03f\x10\x11\n3\n\x06\x04\0\x03\x01\x02\x01\x12\x03i\
    \x04\x1f\x1a$\x20The\x20origin\x20of\x20this\x20inventory\x20item.\n\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x01\x06\x12\x03i\x04\x0e\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x01\x01\x12\x03i\x0f\x1a\n\x0e\n\x07\x04\0\x03\x01\x02\x01\
    \x03\x12\x03i\x1d\x1e\n=\n\x06\x04\0\x03\x01\x02\x02\x12\x03l\x04.\x1a.\
    \x20When\x20this\x20inventory\x20item\x20was\x20first\x20detected.\n\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x02\x06\x12\x03l\x04\x1d\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x02\x01\x12\x03l\x1e)\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x03\
    \x12\x03l,-\n<\n\x06\x04\0\x03\x01\x02\x03\x12\x03o\x04.\x1a-\x20When\
    \x20this\x20inventory\x20item\x20was\x20last\x20modified.\n\n\x0e\n\x07\
    \x04\0\x03\x01\x02\x03\x06\x12\x03o\x04\x1d\n\x0e\n\x07\x04\0\x03\x01\
    \x02\x03\x01\x12\x03o\x1e)\n\x0e\n\x07\x04\0\x03\x01\x02\x03\x03\x12\x03\
    o,-\nU\n\x06\x04\0\x03\x01\x02\x04\x12\x03r\x04\x12\x1aF\x20The\x20speci\
    fic\x20type\x20of\x20inventory,\x20correlating\x20to\x20its\x20specific\
    \x20details.\n\n\x0e\n\x07\x04\0\x03\x01\x02\x04\x06\x12\x03r\x04\x08\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x04\x01\x12\x03r\t\r\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x04\x03\x12\x03r\x10\x11\nL\n\x06\x04\0\x03\x01\x08\0\x12\x04u\
    \x04{\x05\x1a<\x20Specific\x20details\x20of\x20this\x20inventory\x20item\
    \x20based\x20on\x20its\x20type.\n\n\x0e\n\x07\x04\0\x03\x01\x08\0\x01\
    \x12\x03u\n\x11\n=\n\x06\x04\0\x03\x01\x02\x05\x12\x03w\x06,\x1a.\x20Sof\
    tware\x20package\x20present\x20on\x20the\x20VM\x20instance.\n\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x05\x06\x12\x03w\x06\x15\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x05\x01\x12\x03w\x16'\n\x0e\n\x07\x04\0\x03\x01\x02\x05\x03\x12\
    \x03w*+\nO\n\x06\x04\0\x03\x01\x02\x06\x12\x03z\x06,\x1a@\x20Software\
    \x20package\x20available\x20to\x20be\x20installed\x20on\x20the\x20VM\x20\
    instance.\n\n\x0e\n\x07\x04\0\x03\x01\x02\x06\x06\x12\x03z\x06\x15\n\x0e\
    \n\x07\x04\0\x03\x01\x02\x06\x01\x12\x03z\x16'\n\x0e\n\x07\x04\0\x03\x01\
    \x02\x06\x03\x12\x03z*+\nF\n\x04\x04\0\x03\x02\x12\x05\x7f\x02\xac\x01\
    \x03\x1a7\x20Software\x20package\x20information\x20of\x20the\x20operatin\
    g\x20system.\n\n\x0c\n\x05\x04\0\x03\x02\x01\x12\x03\x7f\n\x19\nO\n\x06\
    \x04\0\x03\x02\x08\0\x12\x06\x81\x01\x04\xab\x01\x05\x1a=\x20Information\
    \x20about\x20the\x20different\x20types\x20of\x20software\x20packages.\n\
    \n\x0f\n\x07\x04\0\x03\x02\x08\0\x01\x12\x04\x81\x01\n\x11\n\xbc\x01\n\
    \x06\x04\0\x03\x02\x02\0\x12\x04\x85\x01\x06'\x1a\xab\x01\x20Yum\x20pack\
    age\x20info.\n\x20For\x20details\x20about\x20the\x20yum\x20package\x20ma\
    nager,\x20see\n\x20https://access.redhat.com/documentation/en-us/red_hat\
    _enterprise_linux/6/html/deployment_guide/ch-yum.\n\n\x0f\n\x07\x04\0\
    \x03\x02\x02\0\x06\x12\x04\x85\x01\x06\x16\n\x0f\n\x07\x04\0\x03\x02\x02\
    \0\x01\x12\x04\x85\x01\x17\"\n\x0f\n\x07\x04\0\x03\x02\x02\0\x03\x12\x04\
    \x85\x01%&\nz\n\x06\x04\0\x03\x02\x02\x01\x12\x04\x8a\x01\x06'\x1aj\x20D\
    etails\x20of\x20an\x20APT\x20package.\n\x20For\x20details\x20about\x20th\
    e\x20apt\x20package\x20manager,\x20see\n\x20https://wiki.debian.org/Apt.\
    \n\n\x0f\n\x07\x04\0\x03\x02\x02\x01\x06\x12\x04\x8a\x01\x06\x16\n\x0f\n\
    \x07\x04\0\x03\x02\x02\x01\x01\x12\x04\x8a\x01\x17\"\n\x0f\n\x07\x04\0\
    \x03\x02\x02\x01\x03\x12\x04\x8a\x01%&\n\x8d\x01\n\x06\x04\0\x03\x02\x02\
    \x02\x12\x04\x8f\x01\x06*\x1a}\x20Details\x20of\x20a\x20Zypper\x20packag\
    e.\n\x20For\x20details\x20about\x20the\x20Zypper\x20package\x20manager,\
    \x20see\n\x20https://en.opensuse.org/SDB:Zypper_manual.\n\n\x0f\n\x07\
    \x04\0\x03\x02\x02\x02\x06\x12\x04\x8f\x01\x06\x16\n\x0f\n\x07\x04\0\x03\
    \x02\x02\x02\x01\x12\x04\x8f\x01\x17%\n\x0f\n\x07\x04\0\x03\x02\x02\x02\
    \x03\x12\x04\x8f\x01()\n\x86\x01\n\x06\x04\0\x03\x02\x02\x03\x12\x04\x94\
    \x01\x06*\x1av\x20Details\x20of\x20a\x20Googet\x20package.\n\x20\x20For\
    \x20details\x20about\x20the\x20googet\x20package\x20manager,\x20see\n\
    \x20\x20https://github.com/google/googet.\n\n\x0f\n\x07\x04\0\x03\x02\
    \x02\x03\x06\x12\x04\x94\x01\x06\x16\n\x0f\n\x07\x04\0\x03\x02\x02\x03\
    \x01\x12\x04\x94\x01\x17%\n\x0f\n\x07\x04\0\x03\x02\x02\x03\x03\x12\x04\
    \x94\x01()\n\x8b\x01\n\x06\x04\0\x03\x02\x02\x04\x12\x04\x99\x01\x06#\
    \x1a{\x20Details\x20of\x20a\x20Zypper\x20patch.\n\x20For\x20details\x20a\
    bout\x20the\x20Zypper\x20package\x20manager,\x20see\n\x20https://en.open\
    suse.org/SDB:Zypper_manual.\n\n\x0f\n\x07\x04\0\x03\x02\x02\x04\x06\x12\
    \x04\x99\x01\x06\x11\n\x0f\n\x07\x04\0\x03\x02\x02\x04\x01\x12\x04\x99\
    \x01\x12\x1e\n\x0f\n\x07\x04\0\x03\x02\x02\x04\x03\x12\x04\x99\x01!\"\n\
    \x9c\x01\n\x06\x04\0\x03\x02\x02\x05\x12\x04\x9e\x01\x06+\x1a\x8b\x01\
    \x20Details\x20of\x20a\x20Windows\x20Update\x20package.\n\x20See\x20http\
    s://docs.microsoft.com/en-us/windows/win32/api/_wua/\x20for\n\x20informa\
    tion\x20about\x20Windows\x20Update.\n\n\x0f\n\x07\x04\0\x03\x02\x02\x05\
    \x06\x12\x04\x9e\x01\x06\x1a\n\x0f\n\x07\x04\0\x03\x02\x02\x05\x01\x12\
    \x04\x9e\x01\x1b&\n\x0f\n\x07\x04\0\x03\x02\x02\x05\x03\x12\x04\x9e\x01)\
    *\n\xce\x01\n\x06\x04\0\x03\x02\x02\x06\x12\x04\xa4\x01\x068\x1a\xbd\x01\
    \x20Details\x20of\x20a\x20Windows\x20Quick\x20Fix\x20engineering\x20pack\
    age.\n\x20See\n\x20https://docs.microsoft.com/en-us/windows/win32/cimwin\
    32prov/win32-quickfixengineering\n\x20for\x20info\x20in\x20Windows\x20Qu\
    ick\x20Fix\x20Engineering.\n\n\x0f\n\x07\x04\0\x03\x02\x02\x06\x06\x12\
    \x04\xa4\x01\x06'\n\x0f\n\x07\x04\0\x03\x02\x02\x06\x01\x12\x04\xa4\x01(\
    3\n\x0f\n\x07\x04\0\x03\x02\x02\x06\x03\x12\x04\xa4\x0167\n+\n\x06\x04\0\
    \x03\x02\x02\x07\x12\x04\xa7\x01\x06'\x1a\x1b\x20Details\x20of\x20a\x20C\
    OS\x20package.\n\n\x0f\n\x07\x04\0\x03\x02\x02\x07\x06\x12\x04\xa7\x01\
    \x06\x16\n\x0f\n\x07\x04\0\x03\x02\x02\x07\x01\x12\x04\xa7\x01\x17\"\n\
    \x0f\n\x07\x04\0\x03\x02\x02\x07\x03\x12\x04\xa7\x01%&\n1\n\x06\x04\0\
    \x03\x02\x02\x08\x12\x04\xaa\x01\x061\x1a!\x20Details\x20of\x20Windows\
    \x20Application.\n\n\x0f\n\x07\x04\0\x03\x02\x02\x08\x06\x12\x04\xaa\x01\
    \x06\x18\n\x0f\n\x07\x04\0\x03\x02\x02\x08\x01\x12\x04\xaa\x01\x19,\n\
    \x0f\n\x07\x04\0\x03\x02\x02\x08\x03\x12\x04\xaa\x01/0\n\x9b\x01\n\x04\
    \x04\0\x03\x03\x12\x06\xb0\x01\x02\xb9\x01\x03\x1a\x8a\x01\x20Informatio\
    n\x20related\x20to\x20the\x20a\x20standard\x20versioned\x20package.\x20\
    \x20This\x20includes\n\x20package\x20info\x20for\x20APT,\x20Yum,\x20Zypp\
    er,\x20and\x20Googet\x20package\x20managers.\n\n\r\n\x05\x04\0\x03\x03\
    \x01\x12\x04\xb0\x01\n\x1a\n*\n\x06\x04\0\x03\x03\x02\0\x12\x04\xb2\x01\
    \x04\x1c\x1a\x1a\x20The\x20name\x20of\x20the\x20package.\n\n\x0f\n\x07\
    \x04\0\x03\x03\x02\0\x05\x12\x04\xb2\x01\x04\n\n\x0f\n\x07\x04\0\x03\x03\
    \x02\0\x01\x12\x04\xb2\x01\x0b\x17\n\x0f\n\x07\x04\0\x03\x03\x02\0\x03\
    \x12\x04\xb2\x01\x1a\x1b\nG\n\x06\x04\0\x03\x03\x02\x01\x12\x04\xb5\x01\
    \x04\x1c\x1a7\x20The\x20system\x20architecture\x20this\x20package\x20is\
    \x20intended\x20for.\n\n\x0f\n\x07\x04\0\x03\x03\x02\x01\x05\x12\x04\xb5\
    \x01\x04\n\n\x0f\n\x07\x04\0\x03\x03\x02\x01\x01\x12\x04\xb5\x01\x0b\x17\
    \n\x0f\n\x07\x04\0\x03\x03\x02\x01\x03\x12\x04\xb5\x01\x1a\x1b\n-\n\x06\
    \x04\0\x03\x03\x02\x02\x12\x04\xb8\x01\x04\x17\x1a\x1d\x20The\x20version\
    \x20of\x20the\x20package.\n\n\x0f\n\x07\x04\0\x03\x03\x02\x02\x05\x12\
    \x04\xb8\x01\x04\n\n\x0f\n\x07\x04\0\x03\x03\x02\x02\x01\x12\x04\xb8\x01\
    \x0b\x12\n\x0f\n\x07\x04\0\x03\x03\x02\x02\x03\x12\x04\xb8\x01\x15\x16\n\
    4\n\x04\x04\0\x03\x04\x12\x06\xbc\x01\x02\xc8\x01\x03\x1a$\x20Details\
    \x20related\x20to\x20a\x20Zypper\x20Patch.\n\n\r\n\x05\x04\0\x03\x04\x01\
    \x12\x04\xbc\x01\n\x15\n(\n\x06\x04\0\x03\x04\x02\0\x12\x04\xbe\x01\x04\
    \x1a\x1a\x18\x20The\x20name\x20of\x20the\x20patch.\n\n\x0f\n\x07\x04\0\
    \x03\x04\x02\0\x05\x12\x04\xbe\x01\x04\n\n\x0f\n\x07\x04\0\x03\x04\x02\0\
    \x01\x12\x04\xbe\x01\x0b\x15\n\x0f\n\x07\x04\0\x03\x04\x02\0\x03\x12\x04\
    \xbe\x01\x18\x19\n,\n\x06\x04\0\x03\x04\x02\x01\x12\x04\xc1\x01\x04\x18\
    \x1a\x1c\x20The\x20category\x20of\x20the\x20patch.\n\n\x0f\n\x07\x04\0\
    \x03\x04\x02\x01\x05\x12\x04\xc1\x01\x04\n\n\x0f\n\x07\x04\0\x03\x04\x02\
    \x01\x01\x12\x04\xc1\x01\x0b\x13\n\x0f\n\x07\x04\0\x03\x04\x02\x01\x03\
    \x12\x04\xc1\x01\x16\x17\n7\n\x06\x04\0\x03\x04\x02\x02\x12\x04\xc4\x01\
    \x04\x18\x1a'\x20The\x20severity\x20specified\x20for\x20this\x20patch\n\
    \n\x0f\n\x07\x04\0\x03\x04\x02\x02\x05\x12\x04\xc4\x01\x04\n\n\x0f\n\x07\
    \x04\0\x03\x04\x02\x02\x01\x12\x04\xc4\x01\x0b\x13\n\x0f\n\x07\x04\0\x03\
    \x04\x02\x02\x03\x12\x04\xc4\x01\x16\x17\nD\n\x06\x04\0\x03\x04\x02\x03\
    \x12\x04\xc7\x01\x04\x17\x1a4\x20Any\x20summary\x20information\x20provid\
    ed\x20about\x20this\x20patch.\n\n\x0f\n\x07\x04\0\x03\x04\x02\x03\x05\
    \x12\x04\xc7\x01\x04\n\n\x0f\n\x07\x04\0\x03\x04\x02\x03\x01\x12\x04\xc7\
    \x01\x0b\x12\n\x0f\n\x07\x04\0\x03\x04\x02\x03\x03\x12\x04\xc7\x01\x15\
    \x16\n\xb0\x02\n\x04\x04\0\x03\x05\x12\x06\xcf\x01\x02\xf6\x01\x03\x1a\
    \x9f\x02\x20Details\x20related\x20to\x20a\x20Windows\x20Update\x20packag\
    e.\n\x20Field\x20data\x20and\x20names\x20are\x20taken\x20from\x20Windows\
    \x20Update\x20API\x20IUpdate\x20Interface:\n\x20https://docs.microsoft.c\
    om/en-us/windows/win32/api/_wua/\n\x20Descriptive\x20fields\x20like\x20t\
    itle,\x20and\x20description\x20are\x20localized\x20based\x20on\n\x20the\
    \x20locale\x20of\x20the\x20VM\x20being\x20updated.\n\n\r\n\x05\x04\0\x03\
    \x05\x01\x12\x04\xcf\x01\n\x1e\n?\n\x06\x04\0\x03\x05\x03\0\x12\x06\xd1\
    \x01\x04\xd7\x01\x05\x1a-\x20Categories\x20specified\x20by\x20the\x20Win\
    dows\x20Update.\n\n\x0f\n\x07\x04\0\x03\x05\x03\0\x01\x12\x04\xd1\x01\
    \x0c!\nB\n\x08\x04\0\x03\x05\x03\0\x02\0\x12\x04\xd3\x01\x06\x14\x1a0\
    \x20The\x20identifier\x20of\x20the\x20windows\x20update\x20category.\n\n\
    \x11\n\t\x04\0\x03\x05\x03\0\x02\0\x05\x12\x04\xd3\x01\x06\x0c\n\x11\n\t\
    \x04\0\x03\x05\x03\0\x02\0\x01\x12\x04\xd3\x01\r\x0f\n\x11\n\t\x04\0\x03\
    \x05\x03\0\x02\0\x03\x12\x04\xd3\x01\x12\x13\n<\n\x08\x04\0\x03\x05\x03\
    \0\x02\x01\x12\x04\xd6\x01\x06\x16\x1a*\x20The\x20name\x20of\x20the\x20w\
    indows\x20update\x20category.\n\n\x11\n\t\x04\0\x03\x05\x03\0\x02\x01\
    \x05\x12\x04\xd6\x01\x06\x0c\n\x11\n\t\x04\0\x03\x05\x03\0\x02\x01\x01\
    \x12\x04\xd6\x01\r\x11\n\x11\n\t\x04\0\x03\x05\x03\0\x02\x01\x03\x12\x04\
    \xd6\x01\x14\x15\n<\n\x06\x04\0\x03\x05\x02\0\x12\x04\xda\x01\x04\x15\
    \x1a,\x20The\x20localized\x20title\x20of\x20the\x20update\x20package.\n\
    \n\x0f\n\x07\x04\0\x03\x05\x02\0\x05\x12\x04\xda\x01\x04\n\n\x0f\n\x07\
    \x04\0\x03\x05\x02\0\x01\x12\x04\xda\x01\x0b\x10\n\x0f\n\x07\x04\0\x03\
    \x05\x02\0\x03\x12\x04\xda\x01\x13\x14\nB\n\x06\x04\0\x03\x05\x02\x01\
    \x12\x04\xdd\x01\x04\x1b\x1a2\x20The\x20localized\x20description\x20of\
    \x20the\x20update\x20package.\n\n\x0f\n\x07\x04\0\x03\x05\x02\x01\x05\
    \x12\x04\xdd\x01\x04\n\n\x0f\n\x07\x04\0\x03\x05\x02\x01\x01\x12\x04\xdd\
    \x01\x0b\x16\n\x0f\n\x07\x04\0\x03\x05\x02\x01\x03\x12\x04\xdd\x01\x19\
    \x1a\nN\n\x06\x04\0\x03\x05\x02\x02\x12\x04\xe0\x01\x042\x1a>\x20The\x20\
    categories\x20that\x20are\x20associated\x20with\x20this\x20update\x20pac\
    kage.\n\n\x0f\n\x07\x04\0\x03\x05\x02\x02\x04\x12\x04\xe0\x01\x04\x0c\n\
    \x0f\n\x07\x04\0\x03\x05\x02\x02\x06\x12\x04\xe0\x01\r\"\n\x0f\n\x07\x04\
    \0\x03\x05\x02\x02\x01\x12\x04\xe0\x01#-\n\x0f\n\x07\x04\0\x03\x05\x02\
    \x02\x03\x12\x04\xe0\x0101\nt\n\x06\x04\0\x03\x05\x02\x03\x12\x04\xe4\
    \x01\x04'\x1ad\x20A\x20collection\x20of\x20Microsoft\x20Knowledge\x20Bas\
    e\x20article\x20IDs\x20that\x20are\x20associated\n\x20with\x20the\x20upd\
    ate\x20package.\n\n\x0f\n\x07\x04\0\x03\x05\x02\x03\x04\x12\x04\xe4\x01\
    \x04\x0c\n\x0f\n\x07\x04\0\x03\x05\x02\x03\x05\x12\x04\xe4\x01\r\x13\n\
    \x0f\n\x07\x04\0\x03\x05\x02\x03\x01\x12\x04\xe4\x01\x14\"\n\x0f\n\x07\
    \x04\0\x03\x05\x02\x03\x03\x12\x04\xe4\x01%&\nZ\n\x06\x04\0\x03\x05\x02\
    \x04\x12\x04\xe7\x01\x04\x1c\x1aJ\x20A\x20hyperlink\x20to\x20the\x20lang\
    uage-specific\x20support\x20information\x20for\x20the\x20update.\n\n\x0f\
    \n\x07\x04\0\x03\x05\x02\x04\x05\x12\x04\xe7\x01\x04\n\n\x0f\n\x07\x04\0\
    \x03\x05\x02\x04\x01\x12\x04\xe7\x01\x0b\x16\n\x0f\n\x07\x04\0\x03\x05\
    \x02\x04\x03\x12\x04\xe7\x01\x19\x1b\n_\n\x06\x04\0\x03\x05\x02\x05\x12\
    \x04\xeb\x01\x04'\x1aO\x20A\x20collection\x20of\x20URLs\x20that\x20provi\
    de\x20more\x20information\x20about\x20the\x20update\n\x20package.\n\n\
    \x0f\n\x07\x04\0\x03\x05\x02\x05\x04\x12\x04\xeb\x01\x04\x0c\n\x0f\n\x07\
    \x04\0\x03\x05\x02\x05\x05\x12\x04\xeb\x01\r\x13\n\x0f\n\x07\x04\0\x03\
    \x05\x02\x05\x01\x12\x04\xeb\x01\x14\"\n\x0f\n\x07\x04\0\x03\x05\x02\x05\
    \x03\x12\x04\xeb\x01%&\n^\n\x06\x04\0\x03\x05\x02\x06\x12\x04\xef\x01\
    \x04\x19\x1aN\x20Gets\x20the\x20identifier\x20of\x20an\x20update\x20pack\
    age.\x20\x20Stays\x20the\x20same\x20across\n\x20revisions.\n\n\x0f\n\x07\
    \x04\0\x03\x05\x02\x06\x05\x12\x04\xef\x01\x04\n\n\x0f\n\x07\x04\0\x03\
    \x05\x02\x06\x01\x12\x04\xef\x01\x0b\x14\n\x0f\n\x07\x04\0\x03\x05\x02\
    \x06\x03\x12\x04\xef\x01\x17\x18\n=\n\x06\x04\0\x03\x05\x02\x07\x12\x04\
    \xf2\x01\x04\x1e\x1a-\x20The\x20revision\x20number\x20of\x20this\x20upda\
    te\x20package.\n\n\x0f\n\x07\x04\0\x03\x05\x02\x07\x05\x12\x04\xf2\x01\
    \x04\t\n\x0f\n\x07\x04\0\x03\x05\x02\x07\x01\x12\x04\xf2\x01\n\x19\n\x0f\
    \n\x07\x04\0\x03\x05\x02\x07\x03\x12\x04\xf2\x01\x1c\x1d\nP\n\x06\x04\0\
    \x03\x05\x02\x08\x12\x04\xf5\x01\x04?\x1a@\x20The\x20last\x20published\
    \x20date\x20of\x20the\x20update,\x20in\x20(UTC)\x20date\x20and\x20time.\
    \n\n\x0f\n\x07\x04\0\x03\x05\x02\x08\x06\x12\x04\xf5\x01\x04\x1d\n\x0f\n\
    \x07\x04\0\x03\x05\x02\x08\x01\x12\x04\xf5\x01\x1e9\n\x0f\n\x07\x04\0\
    \x03\x05\x02\x08\x03\x12\x04\xf5\x01<>\n\xfb\x01\n\x04\x04\0\x03\x06\x12\
    \x06\xfc\x01\x02\x88\x02\x03\x1a\xea\x01\x20Information\x20related\x20to\
    \x20a\x20Quick\x20Fix\x20Engineering\x20package.\n\x20Fields\x20are\x20t\
    aken\x20from\x20Windows\x20QuickFixEngineering\x20Interface\x20and\x20ma\
    tch\n\x20the\x20source\x20names:\n\x20https://docs.microsoft.com/en-us/w\
    indows/win32/cimwin32prov/win32-quickfixengineering\n\n\r\n\x05\x04\0\
    \x03\x06\x01\x12\x04\xfc\x01\n+\n@\n\x06\x04\0\x03\x06\x02\0\x12\x04\xfe\
    \x01\x04\x17\x1a0\x20A\x20short\x20textual\x20description\x20of\x20the\
    \x20QFE\x20update.\n\n\x0f\n\x07\x04\0\x03\x06\x02\0\x05\x12\x04\xfe\x01\
    \x04\n\n\x0f\n\x07\x04\0\x03\x06\x02\0\x01\x12\x04\xfe\x01\x0b\x12\n\x0f\
    \n\x07\x04\0\x03\x06\x02\0\x03\x12\x04\xfe\x01\x15\x16\n:\n\x06\x04\0\
    \x03\x06\x02\x01\x12\x04\x81\x02\x04\x1b\x1a*\x20A\x20textual\x20descrip\
    tion\x20of\x20the\x20QFE\x20update.\n\n\x0f\n\x07\x04\0\x03\x06\x02\x01\
    \x05\x12\x04\x81\x02\x04\n\n\x0f\n\x07\x04\0\x03\x06\x02\x01\x01\x12\x04\
    \x81\x02\x0b\x16\n\x0f\n\x07\x04\0\x03\x06\x02\x01\x03\x12\x04\x81\x02\
    \x19\x1a\nL\n\x06\x04\0\x03\x06\x02\x02\x12\x04\x84\x02\x04\x1a\x1a<\x20\
    Unique\x20identifier\x20associated\x20with\x20a\x20particular\x20QFE\x20\
    update.\n\n\x0f\n\x07\x04\0\x03\x06\x02\x02\x05\x12\x04\x84\x02\x04\n\n\
    \x0f\n\x07\x04\0\x03\x06\x02\x02\x01\x12\x04\x84\x02\x0b\x15\n\x0f\n\x07\
    \x04\0\x03\x06\x02\x02\x03\x12\x04\x84\x02\x18\x19\nZ\n\x06\x04\0\x03\
    \x06\x02\x03\x12\x04\x87\x02\x04/\x1aJ\x20Date\x20that\x20the\x20QFE\x20\
    update\x20was\x20installed.\x20\x20Mapped\x20from\x20installed_on\x20fie\
    ld.\n\n\x0f\n\x07\x04\0\x03\x06\x02\x03\x06\x12\x04\x87\x02\x04\x1d\n\
    \x0f\n\x07\x04\0\x03\x06\x02\x03\x01\x12\x04\x87\x02\x1e*\n\x0f\n\x07\
    \x04\0\x03\x06\x02\x03\x03\x12\x04\x87\x02-.\n\xea\x01\n\x04\x04\0\x03\
    \x07\x12\x06\x8d\x02\x02\x9e\x02\x03\x1a\xd9\x01\x20Contains\x20informat\
    ion\x20about\x20a\x20Windows\x20application\x20that\x20is\x20retrieved\
    \x20from\x20the\n\x20Windows\x20Registry.\x20For\x20more\x20information\
    \x20about\x20these\x20fields,\x20see:\n\x20https://docs.microsoft.com/en\
    -us/windows/win32/msi/uninstall-registry-key\n\n\r\n\x05\x04\0\x03\x07\
    \x01\x12\x04\x8d\x02\n\x1c\n9\n\x06\x04\0\x03\x07\x02\0\x12\x04\x8f\x02\
    \x04\x1c\x1a)\x20The\x20name\x20of\x20the\x20application\x20or\x20produc\
    t.\n\n\x0f\n\x07\x04\0\x03\x07\x02\0\x05\x12\x04\x8f\x02\x04\n\n\x0f\n\
    \x07\x04\0\x03\x07\x02\0\x01\x12\x04\x8f\x02\x0b\x17\n\x0f\n\x07\x04\0\
    \x03\x07\x02\0\x03\x12\x04\x8f\x02\x1a\x1b\nM\n\x06\x04\0\x03\x07\x02\
    \x01\x12\x04\x92\x02\x04\x1f\x1a=\x20The\x20version\x20of\x20the\x20prod\
    uct\x20or\x20application\x20in\x20string\x20format.\n\n\x0f\n\x07\x04\0\
    \x03\x07\x02\x01\x05\x12\x04\x92\x02\x04\n\n\x0f\n\x07\x04\0\x03\x07\x02\
    \x01\x01\x12\x04\x92\x02\x0b\x1a\n\x0f\n\x07\x04\0\x03\x07\x02\x01\x03\
    \x12\x04\x92\x02\x1d\x1e\nN\n\x06\x04\0\x03\x07\x02\x02\x12\x04\x95\x02\
    \x04\x19\x1a>\x20The\x20name\x20of\x20the\x20manufacturer\x20for\x20the\
    \x20product\x20or\x20application.\n\n\x0f\n\x07\x04\0\x03\x07\x02\x02\
    \x05\x12\x04\x95\x02\x04\n\n\x0f\n\x07\x04\0\x03\x07\x02\x02\x01\x12\x04\
    \x95\x02\x0b\x14\n\x0f\n\x07\x04\0\x03\x07\x02\x02\x03\x12\x04\x95\x02\
    \x17\x18\n\xdb\x01\n\x06\x04\0\x03\x07\x02\x03\x12\x04\x9a\x02\x04&\x1a\
    \xca\x01\x20The\x20last\x20time\x20this\x20product\x20received\x20servic\
    e.\x20The\x20value\x20of\x20this\x20property\n\x20is\x20replaced\x20each\
    \x20time\x20a\x20patch\x20is\x20applied\x20or\x20removed\x20from\x20the\
    \x20product\x20or\n\x20the\x20command-line\x20option\x20is\x20used\x20to\
    \x20repair\x20the\x20product.\n\n\x0f\n\x07\x04\0\x03\x07\x02\x03\x06\
    \x12\x04\x9a\x02\x04\x14\n\x0f\n\x07\x04\0\x03\x07\x02\x03\x01\x12\x04\
    \x9a\x02\x15!\n\x0f\n\x07\x04\0\x03\x07\x02\x03\x03\x12\x04\x9a\x02$%\n=\
    \n\x06\x04\0\x03\x07\x02\x04\x12\x04\x9d\x02\x04\x19\x1a-\x20The\x20inte\
    rnet\x20address\x20for\x20technical\x20support.\n\n\x0f\n\x07\x04\0\x03\
    \x07\x02\x04\x05\x12\x04\x9d\x02\x04\n\n\x0f\n\x07\x04\0\x03\x07\x02\x04\
    \x01\x12\x04\x9d\x02\x0b\x14\n\x0f\n\x07\x04\0\x03\x07\x02\x04\x03\x12\
    \x04\x9d\x02\x17\x18\n\x9e\x01\n\x04\x04\0\x02\0\x12\x04\xa4\x02\x02>\
    \x1a\x8f\x01\x20Output\x20only.\x20The\x20`Inventory`\x20API\x20resource\
    \x20name.\n\n\x20Format:\n\x20`projects/{project_number}/locations/{loca\
    tion}/instances/{instance_id}/inventory`\n\n\r\n\x05\x04\0\x02\0\x05\x12\
    \x04\xa4\x02\x02\x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\xa4\x02\t\r\n\r\n\
    \x05\x04\0\x02\0\x03\x12\x04\xa4\x02\x10\x11\n\r\n\x05\x04\0\x02\0\x08\
    \x12\x04\xa4\x02\x12=\n\x10\n\x08\x04\0\x02\0\x08\x9c\x08\0\x12\x04\xa4\
    \x02\x13<\nC\n\x04\x04\0\x02\x01\x12\x04\xa7\x02\x02\x15\x1a5\x20Base\
    \x20level\x20operating\x20system\x20information\x20for\x20the\x20VM.\n\n\
    \r\n\x05\x04\0\x02\x01\x06\x12\x04\xa7\x02\x02\x08\n\r\n\x05\x04\0\x02\
    \x01\x01\x12\x04\xa7\x02\t\x10\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\xa7\
    \x02\x13\x14\n\xf3\x01\n\x04\x04\0\x02\x02\x12\x04\xad\x02\x02\x1e\x1a\
    \xe4\x01\x20Inventory\x20items\x20related\x20to\x20the\x20VM\x20keyed\
    \x20by\x20an\x20opaque\x20unique\x20identifier\x20for\n\x20each\x20inven\
    tory\x20item.\x20\x20The\x20identifier\x20is\x20unique\x20to\x20each\x20\
    distinct\x20and\n\x20addressable\x20inventory\x20item\x20and\x20will\x20\
    change,\x20when\x20there\x20is\x20a\x20new\x20package\n\x20version.\n\n\
    \r\n\x05\x04\0\x02\x02\x06\x12\x04\xad\x02\x02\x13\n\r\n\x05\x04\0\x02\
    \x02\x01\x12\x04\xad\x02\x14\x19\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\xad\
    \x02\x1c\x1d\nS\n\x04\x04\0\x02\x03\x12\x06\xb0\x02\x02\xb1\x022\x1aC\
    \x20Output\x20only.\x20Timestamp\x20of\x20the\x20last\x20reported\x20inv\
    entory\x20for\x20the\x20VM.\n\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\xb0\
    \x02\x02\x1b\n\r\n\x05\x04\0\x02\x03\x01\x12\x04\xb0\x02\x1c'\n\r\n\x05\
    \x04\0\x02\x03\x03\x12\x04\xb0\x02*+\n\r\n\x05\x04\0\x02\x03\x08\x12\x04\
    \xb1\x02\x061\n\x10\n\x08\x04\0\x02\x03\x08\x9c\x08\0\x12\x04\xb1\x02\
    \x070\nR\n\x02\x04\x01\x12\x06\xb5\x02\0\xc8\x02\x01\x1aD\x20A\x20reques\
    t\x20message\x20for\x20getting\x20inventory\x20data\x20for\x20the\x20spe\
    cified\x20VM.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xb5\x02\x08\x1b\n\xc3\
    \x02\n\x04\x04\x01\x02\0\x12\x06\xbe\x02\x02\xc3\x02\x04\x1a\xb2\x02\x20\
    Required.\x20API\x20resource\x20name\x20for\x20inventory\x20resource.\n\
    \n\x20Format:\n\x20`projects/{project}/locations/{location}/instances/{i\
    nstance}/inventory`\n\n\x20For\x20`{project}`,\x20either\x20`project-num\
    ber`\x20or\x20`project-id`\x20can\x20be\x20provided.\n\x20For\x20`{insta\
    nce}`,\x20either\x20Compute\x20Engine\x20\x20`instance-id`\x20or\x20`ins\
    tance-name`\n\x20can\x20be\x20provided.\n\n\r\n\x05\x04\x01\x02\0\x05\
    \x12\x04\xbe\x02\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xbe\x02\t\r\
    \n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xbe\x02\x10\x11\n\x0f\n\x05\x04\x01\
    \x02\0\x08\x12\x06\xbe\x02\x12\xc3\x02\x03\n\x10\n\x08\x04\x01\x02\0\x08\
    \x9c\x08\0\x12\x04\xbf\x02\x04*\n\x11\n\x07\x04\x01\x02\0\x08\x9f\x08\
    \x12\x06\xc0\x02\x04\xc2\x02\x05\n\x95\x01\n\x04\x04\x01\x02\x01\x12\x04\
    \xc7\x02\x02\x19\x1a\x86\x01\x20Inventory\x20view\x20indicating\x20what\
    \x20information\x20should\x20be\x20included\x20in\x20the\n\x20inventory\
    \x20resource.\x20If\x20unspecified,\x20the\x20default\x20view\x20is\x20B\
    ASIC.\n\n\r\n\x05\x04\x01\x02\x01\x06\x12\x04\xc7\x02\x02\x0f\n\r\n\x05\
    \x04\x01\x02\x01\x01\x12\x04\xc7\x02\x10\x14\n\r\n\x05\x04\x01\x02\x01\
    \x03\x12\x04\xc7\x02\x17\x18\nd\n\x02\x04\x02\x12\x06\xcc\x02\0\xe8\x02\
    \x01\x1aV\x20A\x20request\x20message\x20for\x20listing\x20inventory\x20d\
    ata\x20for\x20all\x20VMs\x20in\x20the\x20specified\n\x20location.\n\n\
    \x0b\n\x03\x04\x02\x01\x12\x04\xcc\x02\x08\x1e\n\xc2\x01\n\x04\x04\x02\
    \x02\0\x12\x06\xd2\x02\x02\xd7\x02\x04\x1a\xb1\x01\x20Required.\x20The\
    \x20parent\x20resource\x20name.\n\n\x20Format:\x20`projects/{project}/lo\
    cations/{location}/instances/-`\n\n\x20For\x20`{project}`,\x20either\x20\
    `project-number`\x20or\x20`project-id`\x20can\x20be\x20provided.\n\n\r\n\
    \x05\x04\x02\x02\0\x05\x12\x04\xd2\x02\x02\x08\n\r\n\x05\x04\x02\x02\0\
    \x01\x12\x04\xd2\x02\t\x0f\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xd2\x02\
    \x12\x13\n\x0f\n\x05\x04\x02\x02\0\x08\x12\x06\xd2\x02\x14\xd7\x02\x03\n\
    \x10\n\x08\x04\x02\x02\0\x08\x9c\x08\0\x12\x04\xd3\x02\x04*\n\x11\n\x07\
    \x04\x02\x02\0\x08\x9f\x08\x12\x06\xd4\x02\x04\xd6\x02\x05\n\x95\x01\n\
    \x04\x04\x02\x02\x01\x12\x04\xdb\x02\x02\x19\x1a\x86\x01\x20Inventory\
    \x20view\x20indicating\x20what\x20information\x20should\x20be\x20include\
    d\x20in\x20the\n\x20inventory\x20resource.\x20If\x20unspecified,\x20the\
    \x20default\x20view\x20is\x20BASIC.\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\
    \x04\xdb\x02\x02\x0f\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xdb\x02\x10\
    \x14\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xdb\x02\x17\x18\n8\n\x04\x04\
    \x02\x02\x02\x12\x04\xde\x02\x02\x16\x1a*\x20The\x20maximum\x20number\
    \x20of\x20results\x20to\x20return.\n\n\r\n\x05\x04\x02\x02\x02\x05\x12\
    \x04\xde\x02\x02\x07\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\xde\x02\x08\
    \x11\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\xde\x02\x14\x15\n\x90\x01\n\
    \x04\x04\x02\x02\x03\x12\x04\xe3\x02\x02\x18\x1a\x81\x01\x20A\x20paginat\
    ion\x20token\x20returned\x20from\x20a\x20previous\x20call\x20to\n\x20`Li\
    stInventories`\x20that\x20indicates\x20where\x20this\x20listing\n\x20sho\
    uld\x20continue\x20from.\n\n\r\n\x05\x04\x02\x02\x03\x05\x12\x04\xe3\x02\
    \x02\x08\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\xe3\x02\t\x13\n\r\n\x05\
    \x04\x02\x02\x03\x03\x12\x04\xe3\x02\x16\x17\n\x8f\x01\n\x04\x04\x02\x02\
    \x04\x12\x04\xe7\x02\x02\x14\x1a\x80\x01\x20If\x20provided,\x20this\x20f\
    ield\x20specifies\x20the\x20criteria\x20that\x20must\x20be\x20met\x20by\
    \x20a\n\x20`Inventory`\x20API\x20resource\x20to\x20be\x20included\x20in\
    \x20the\x20response.\n\n\r\n\x05\x04\x02\x02\x04\x05\x12\x04\xe7\x02\x02\
    \x08\n\r\n\x05\x04\x02\x02\x04\x01\x12\x04\xe7\x02\t\x0f\n\r\n\x05\x04\
    \x02\x02\x04\x03\x12\x04\xe7\x02\x12\x13\nc\n\x02\x04\x03\x12\x06\xec\
    \x02\0\xf2\x02\x01\x1aU\x20A\x20response\x20message\x20for\x20listing\
    \x20inventory\x20data\x20for\x20all\x20VMs\x20in\x20a\x20specified\n\x20\
    location.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xec\x02\x08\x1f\n*\n\x04\x04\
    \x03\x02\0\x12\x04\xee\x02\x02%\x1a\x1c\x20List\x20of\x20inventory\x20ob\
    jects.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\xee\x02\x02\n\n\r\n\x05\x04\
    \x03\x02\0\x06\x12\x04\xee\x02\x0b\x14\n\r\n\x05\x04\x03\x02\0\x01\x12\
    \x04\xee\x02\x15\x20\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xee\x02#$\nT\n\
    \x04\x04\x03\x02\x01\x12\x04\xf1\x02\x02\x1d\x1aF\x20The\x20pagination\
    \x20token\x20to\x20retrieve\x20the\x20next\x20page\x20of\x20inventory\
    \x20objects.\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xf1\x02\x02\x08\n\r\
    \n\x05\x04\x03\x02\x01\x01\x12\x04\xf1\x02\t\x18\n\r\n\x05\x04\x03\x02\
    \x01\x03\x12\x04\xf1\x02\x1b\x1c\n/\n\x02\x05\0\x12\x06\xf5\x02\0\xff\
    \x02\x01\x1a!\x20The\x20view\x20for\x20inventory\x20objects.\n\n\x0b\n\
    \x03\x05\0\x01\x12\x04\xf5\x02\x05\x12\nG\n\x04\x05\0\x02\0\x12\x04\xf8\
    \x02\x02!\x1a9\x20The\x20default\x20value.\n\x20The\x20API\x20defaults\
    \x20to\x20the\x20BASIC\x20view.\n\n\r\n\x05\x05\0\x02\0\x01\x12\x04\xf8\
    \x02\x02\x1c\n\r\n\x05\x05\0\x02\0\x02\x12\x04\xf8\x02\x1f\x20\nP\n\x04\
    \x05\0\x02\x01\x12\x04\xfb\x02\x02\x0c\x1aB\x20Returns\x20the\x20basic\
    \x20inventory\x20information\x20that\x20includes\x20`os_info`.\n\n\r\n\
    \x05\x05\0\x02\x01\x01\x12\x04\xfb\x02\x02\x07\n\r\n\x05\x05\0\x02\x01\
    \x02\x12\x04\xfb\x02\n\x0b\n#\n\x04\x05\0\x02\x02\x12\x04\xfe\x02\x02\
    \x0b\x1a\x15\x20Returns\x20all\x20fields.\n\n\r\n\x05\x05\0\x02\x02\x01\
    \x12\x04\xfe\x02\x02\x06\n\r\n\x05\x05\0\x02\x02\x02\x12\x04\xfe\x02\t\n\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
