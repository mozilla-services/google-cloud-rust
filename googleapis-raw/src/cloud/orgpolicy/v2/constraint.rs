// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/orgpolicy/v2/constraint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Constraint {
    // message fields
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub description: ::std::string::String,
    pub constraint_default: Constraint_ConstraintDefault,
    pub supports_dry_run: bool,
    // message oneof groups
    pub constraint_type: ::std::option::Option<Constraint_oneof_constraint_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Constraint {
    fn default() -> &'a Constraint {
        <Constraint as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Constraint_oneof_constraint_type {
    list_constraint(Constraint_ListConstraint),
    boolean_constraint(Constraint_BooleanConstraint),
}

impl Constraint {
    pub fn new() -> Constraint {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .google.cloud.orgpolicy.v2.Constraint.ConstraintDefault constraint_default = 4;


    pub fn get_constraint_default(&self) -> Constraint_ConstraintDefault {
        self.constraint_default
    }
    pub fn clear_constraint_default(&mut self) {
        self.constraint_default = Constraint_ConstraintDefault::CONSTRAINT_DEFAULT_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_constraint_default(&mut self, v: Constraint_ConstraintDefault) {
        self.constraint_default = v;
    }

    // .google.cloud.orgpolicy.v2.Constraint.ListConstraint list_constraint = 5;


    pub fn get_list_constraint(&self) -> &Constraint_ListConstraint {
        match self.constraint_type {
            ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(ref v)) => v,
            _ => <Constraint_ListConstraint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_list_constraint(&mut self) {
        self.constraint_type = ::std::option::Option::None;
    }

    pub fn has_list_constraint(&self) -> bool {
        match self.constraint_type {
            ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_constraint(&mut self, v: Constraint_ListConstraint) {
        self.constraint_type = ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list_constraint(&mut self) -> &mut Constraint_ListConstraint {
        if let ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(_)) = self.constraint_type {
        } else {
            self.constraint_type = ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(Constraint_ListConstraint::new()));
        }
        match self.constraint_type {
            ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_constraint(&mut self) -> Constraint_ListConstraint {
        if self.has_list_constraint() {
            match self.constraint_type.take() {
                ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(v)) => v,
                _ => panic!(),
            }
        } else {
            Constraint_ListConstraint::new()
        }
    }

    // .google.cloud.orgpolicy.v2.Constraint.BooleanConstraint boolean_constraint = 6;


    pub fn get_boolean_constraint(&self) -> &Constraint_BooleanConstraint {
        match self.constraint_type {
            ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(ref v)) => v,
            _ => <Constraint_BooleanConstraint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_boolean_constraint(&mut self) {
        self.constraint_type = ::std::option::Option::None;
    }

    pub fn has_boolean_constraint(&self) -> bool {
        match self.constraint_type {
            ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boolean_constraint(&mut self, v: Constraint_BooleanConstraint) {
        self.constraint_type = ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_boolean_constraint(&mut self) -> &mut Constraint_BooleanConstraint {
        if let ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(_)) = self.constraint_type {
        } else {
            self.constraint_type = ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(Constraint_BooleanConstraint::new()));
        }
        match self.constraint_type {
            ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_boolean_constraint(&mut self) -> Constraint_BooleanConstraint {
        if self.has_boolean_constraint() {
            match self.constraint_type.take() {
                ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(v)) => v,
                _ => panic!(),
            }
        } else {
            Constraint_BooleanConstraint::new()
        }
    }

    // bool supports_dry_run = 7;


    pub fn get_supports_dry_run(&self) -> bool {
        self.supports_dry_run
    }
    pub fn clear_supports_dry_run(&mut self) {
        self.supports_dry_run = false;
    }

    // Param is passed by value, moved
    pub fn set_supports_dry_run(&mut self, v: bool) {
        self.supports_dry_run = v;
    }
}

impl ::protobuf::Message for Constraint {
    fn is_initialized(&self) -> bool {
        if let Some(Constraint_oneof_constraint_type::list_constraint(ref v)) = self.constraint_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Constraint_oneof_constraint_type::boolean_constraint(ref v)) = self.constraint_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.constraint_default, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constraint_type = ::std::option::Option::Some(Constraint_oneof_constraint_type::list_constraint(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constraint_type = ::std::option::Option::Some(Constraint_oneof_constraint_type::boolean_constraint(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.supports_dry_run = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.constraint_default != Constraint_ConstraintDefault::CONSTRAINT_DEFAULT_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.constraint_default);
        }
        if self.supports_dry_run != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.constraint_type {
            match v {
                &Constraint_oneof_constraint_type::list_constraint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Constraint_oneof_constraint_type::boolean_constraint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.constraint_default != Constraint_ConstraintDefault::CONSTRAINT_DEFAULT_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.constraint_default))?;
        }
        if self.supports_dry_run != false {
            os.write_bool(7, self.supports_dry_run)?;
        }
        if let ::std::option::Option::Some(ref v) = self.constraint_type {
            match v {
                &Constraint_oneof_constraint_type::list_constraint(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Constraint_oneof_constraint_type::boolean_constraint(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Constraint {
        Constraint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Constraint| { &m.name },
                |m: &mut Constraint| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Constraint| { &m.display_name },
                |m: &mut Constraint| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Constraint| { &m.description },
                |m: &mut Constraint| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Constraint_ConstraintDefault>>(
                "constraint_default",
                |m: &Constraint| { &m.constraint_default },
                |m: &mut Constraint| { &mut m.constraint_default },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Constraint_ListConstraint>(
                "list_constraint",
                Constraint::has_list_constraint,
                Constraint::get_list_constraint,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Constraint_BooleanConstraint>(
                "boolean_constraint",
                Constraint::has_boolean_constraint,
                Constraint::get_boolean_constraint,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "supports_dry_run",
                |m: &Constraint| { &m.supports_dry_run },
                |m: &mut Constraint| { &mut m.supports_dry_run },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Constraint>(
                "Constraint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Constraint {
        static instance: ::protobuf::rt::LazyV2<Constraint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Constraint::new)
    }
}

impl ::protobuf::Clear for Constraint {
    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.description.clear();
        self.constraint_default = Constraint_ConstraintDefault::CONSTRAINT_DEFAULT_UNSPECIFIED;
        self.constraint_type = ::std::option::Option::None;
        self.constraint_type = ::std::option::Option::None;
        self.supports_dry_run = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Constraint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Constraint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Constraint_ListConstraint {
    // message fields
    pub supports_in: bool,
    pub supports_under: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Constraint_ListConstraint {
    fn default() -> &'a Constraint_ListConstraint {
        <Constraint_ListConstraint as ::protobuf::Message>::default_instance()
    }
}

impl Constraint_ListConstraint {
    pub fn new() -> Constraint_ListConstraint {
        ::std::default::Default::default()
    }

    // bool supports_in = 1;


    pub fn get_supports_in(&self) -> bool {
        self.supports_in
    }
    pub fn clear_supports_in(&mut self) {
        self.supports_in = false;
    }

    // Param is passed by value, moved
    pub fn set_supports_in(&mut self, v: bool) {
        self.supports_in = v;
    }

    // bool supports_under = 2;


    pub fn get_supports_under(&self) -> bool {
        self.supports_under
    }
    pub fn clear_supports_under(&mut self) {
        self.supports_under = false;
    }

    // Param is passed by value, moved
    pub fn set_supports_under(&mut self, v: bool) {
        self.supports_under = v;
    }
}

impl ::protobuf::Message for Constraint_ListConstraint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.supports_in = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.supports_under = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.supports_in != false {
            my_size += 2;
        }
        if self.supports_under != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.supports_in != false {
            os.write_bool(1, self.supports_in)?;
        }
        if self.supports_under != false {
            os.write_bool(2, self.supports_under)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Constraint_ListConstraint {
        Constraint_ListConstraint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "supports_in",
                |m: &Constraint_ListConstraint| { &m.supports_in },
                |m: &mut Constraint_ListConstraint| { &mut m.supports_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "supports_under",
                |m: &Constraint_ListConstraint| { &m.supports_under },
                |m: &mut Constraint_ListConstraint| { &mut m.supports_under },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Constraint_ListConstraint>(
                "Constraint.ListConstraint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Constraint_ListConstraint {
        static instance: ::protobuf::rt::LazyV2<Constraint_ListConstraint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Constraint_ListConstraint::new)
    }
}

impl ::protobuf::Clear for Constraint_ListConstraint {
    fn clear(&mut self) {
        self.supports_in = false;
        self.supports_under = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Constraint_ListConstraint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Constraint_ListConstraint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Constraint_BooleanConstraint {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Constraint_BooleanConstraint {
    fn default() -> &'a Constraint_BooleanConstraint {
        <Constraint_BooleanConstraint as ::protobuf::Message>::default_instance()
    }
}

impl Constraint_BooleanConstraint {
    pub fn new() -> Constraint_BooleanConstraint {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Constraint_BooleanConstraint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Constraint_BooleanConstraint {
        Constraint_BooleanConstraint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Constraint_BooleanConstraint>(
                "Constraint.BooleanConstraint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Constraint_BooleanConstraint {
        static instance: ::protobuf::rt::LazyV2<Constraint_BooleanConstraint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Constraint_BooleanConstraint::new)
    }
}

impl ::protobuf::Clear for Constraint_BooleanConstraint {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Constraint_BooleanConstraint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Constraint_BooleanConstraint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Constraint_ConstraintDefault {
    CONSTRAINT_DEFAULT_UNSPECIFIED = 0,
    ALLOW = 1,
    DENY = 2,
}

impl ::protobuf::ProtobufEnum for Constraint_ConstraintDefault {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Constraint_ConstraintDefault> {
        match value {
            0 => ::std::option::Option::Some(Constraint_ConstraintDefault::CONSTRAINT_DEFAULT_UNSPECIFIED),
            1 => ::std::option::Option::Some(Constraint_ConstraintDefault::ALLOW),
            2 => ::std::option::Option::Some(Constraint_ConstraintDefault::DENY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Constraint_ConstraintDefault] = &[
            Constraint_ConstraintDefault::CONSTRAINT_DEFAULT_UNSPECIFIED,
            Constraint_ConstraintDefault::ALLOW,
            Constraint_ConstraintDefault::DENY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Constraint_ConstraintDefault>("Constraint.ConstraintDefault", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Constraint_ConstraintDefault {
}

impl ::std::default::Default for Constraint_ConstraintDefault {
    fn default() -> Self {
        Constraint_ConstraintDefault::CONSTRAINT_DEFAULT_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Constraint_ConstraintDefault {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CustomConstraint {
    // message fields
    pub name: ::std::string::String,
    pub resource_types: ::protobuf::RepeatedField<::std::string::String>,
    pub method_types: ::std::vec::Vec<CustomConstraint_MethodType>,
    pub condition: ::std::string::String,
    pub action_type: CustomConstraint_ActionType,
    pub display_name: ::std::string::String,
    pub description: ::std::string::String,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomConstraint {
    fn default() -> &'a CustomConstraint {
        <CustomConstraint as ::protobuf::Message>::default_instance()
    }
}

impl CustomConstraint {
    pub fn new() -> CustomConstraint {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated string resource_types = 2;


    pub fn get_resource_types(&self) -> &[::std::string::String] {
        &self.resource_types
    }
    pub fn clear_resource_types(&mut self) {
        self.resource_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_types(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.resource_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resource_types(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.resource_types
    }

    // Take field
    pub fn take_resource_types(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.resource_types, ::protobuf::RepeatedField::new())
    }

    // repeated .google.cloud.orgpolicy.v2.CustomConstraint.MethodType method_types = 3;


    pub fn get_method_types(&self) -> &[CustomConstraint_MethodType] {
        &self.method_types
    }
    pub fn clear_method_types(&mut self) {
        self.method_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_method_types(&mut self, v: ::std::vec::Vec<CustomConstraint_MethodType>) {
        self.method_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_method_types(&mut self) -> &mut ::std::vec::Vec<CustomConstraint_MethodType> {
        &mut self.method_types
    }

    // Take field
    pub fn take_method_types(&mut self) -> ::std::vec::Vec<CustomConstraint_MethodType> {
        ::std::mem::replace(&mut self.method_types, ::std::vec::Vec::new())
    }

    // string condition = 4;


    pub fn get_condition(&self) -> &str {
        &self.condition
    }
    pub fn clear_condition(&mut self) {
        self.condition.clear();
    }

    // Param is passed by value, moved
    pub fn set_condition(&mut self, v: ::std::string::String) {
        self.condition = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_condition(&mut self) -> &mut ::std::string::String {
        &mut self.condition
    }

    // Take field
    pub fn take_condition(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.condition, ::std::string::String::new())
    }

    // .google.cloud.orgpolicy.v2.CustomConstraint.ActionType action_type = 5;


    pub fn get_action_type(&self) -> CustomConstraint_ActionType {
        self.action_type
    }
    pub fn clear_action_type(&mut self) {
        self.action_type = CustomConstraint_ActionType::ACTION_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_action_type(&mut self, v: CustomConstraint_ActionType) {
        self.action_type = v;
    }

    // string display_name = 6;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string description = 7;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp update_time = 8;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CustomConstraint {
    fn is_initialized(&self) -> bool {
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.resource_types)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.method_types, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.condition)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action_type, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.resource_types {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.method_types {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        if !self.condition.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.condition);
        }
        if self.action_type != CustomConstraint_ActionType::ACTION_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.action_type);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.display_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.description);
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.resource_types {
            os.write_string(2, &v)?;
        };
        for v in &self.method_types {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(v))?;
        };
        if !self.condition.is_empty() {
            os.write_string(4, &self.condition)?;
        }
        if self.action_type != CustomConstraint_ActionType::ACTION_TYPE_UNSPECIFIED {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.action_type))?;
        }
        if !self.display_name.is_empty() {
            os.write_string(6, &self.display_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(7, &self.description)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomConstraint {
        CustomConstraint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CustomConstraint| { &m.name },
                |m: &mut CustomConstraint| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_types",
                |m: &CustomConstraint| { &m.resource_types },
                |m: &mut CustomConstraint| { &mut m.resource_types },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CustomConstraint_MethodType>>(
                "method_types",
                |m: &CustomConstraint| { &m.method_types },
                |m: &mut CustomConstraint| { &mut m.method_types },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "condition",
                |m: &CustomConstraint| { &m.condition },
                |m: &mut CustomConstraint| { &mut m.condition },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CustomConstraint_ActionType>>(
                "action_type",
                |m: &CustomConstraint| { &m.action_type },
                |m: &mut CustomConstraint| { &mut m.action_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &CustomConstraint| { &m.display_name },
                |m: &mut CustomConstraint| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &CustomConstraint| { &m.description },
                |m: &mut CustomConstraint| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "update_time",
                |m: &CustomConstraint| { &m.update_time },
                |m: &mut CustomConstraint| { &mut m.update_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomConstraint>(
                "CustomConstraint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomConstraint {
        static instance: ::protobuf::rt::LazyV2<CustomConstraint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomConstraint::new)
    }
}

impl ::protobuf::Clear for CustomConstraint {
    fn clear(&mut self) {
        self.name.clear();
        self.resource_types.clear();
        self.method_types.clear();
        self.condition.clear();
        self.action_type = CustomConstraint_ActionType::ACTION_TYPE_UNSPECIFIED;
        self.display_name.clear();
        self.description.clear();
        self.update_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomConstraint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomConstraint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CustomConstraint_MethodType {
    METHOD_TYPE_UNSPECIFIED = 0,
    CREATE = 1,
    UPDATE = 2,
    DELETE = 3,
}

impl ::protobuf::ProtobufEnum for CustomConstraint_MethodType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CustomConstraint_MethodType> {
        match value {
            0 => ::std::option::Option::Some(CustomConstraint_MethodType::METHOD_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(CustomConstraint_MethodType::CREATE),
            2 => ::std::option::Option::Some(CustomConstraint_MethodType::UPDATE),
            3 => ::std::option::Option::Some(CustomConstraint_MethodType::DELETE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CustomConstraint_MethodType] = &[
            CustomConstraint_MethodType::METHOD_TYPE_UNSPECIFIED,
            CustomConstraint_MethodType::CREATE,
            CustomConstraint_MethodType::UPDATE,
            CustomConstraint_MethodType::DELETE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CustomConstraint_MethodType>("CustomConstraint.MethodType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CustomConstraint_MethodType {
}

impl ::std::default::Default for CustomConstraint_MethodType {
    fn default() -> Self {
        CustomConstraint_MethodType::METHOD_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomConstraint_MethodType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CustomConstraint_ActionType {
    ACTION_TYPE_UNSPECIFIED = 0,
    ALLOW = 1,
    DENY = 2,
}

impl ::protobuf::ProtobufEnum for CustomConstraint_ActionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CustomConstraint_ActionType> {
        match value {
            0 => ::std::option::Option::Some(CustomConstraint_ActionType::ACTION_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(CustomConstraint_ActionType::ALLOW),
            2 => ::std::option::Option::Some(CustomConstraint_ActionType::DENY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CustomConstraint_ActionType] = &[
            CustomConstraint_ActionType::ACTION_TYPE_UNSPECIFIED,
            CustomConstraint_ActionType::ALLOW,
            CustomConstraint_ActionType::DENY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CustomConstraint_ActionType>("CustomConstraint.ActionType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CustomConstraint_ActionType {
}

impl ::std::default::Default for CustomConstraint_ActionType {
    fn default() -> Self {
        CustomConstraint_ActionType::ACTION_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomConstraint_ActionType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*google/cloud/orgpolicy/v2/constraint.proto\x12\x19google.cloud.orgpol\
    icy.v2\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource\
    .proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd2\x06\n\nConstraint\
    \x12\x17\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x03\xe0A\x05\x12!\n\x0cd\
    isplay_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12\x20\n\x0bdescription\
    \x18\x03\x20\x01(\tR\x0bdescription\x12f\n\x12constraint_default\x18\x04\
    \x20\x01(\x0e27.google.cloud.orgpolicy.v2.Constraint.ConstraintDefaultR\
    \x11constraintDefault\x12_\n\x0flist_constraint\x18\x05\x20\x01(\x0b24.g\
    oogle.cloud.orgpolicy.v2.Constraint.ListConstraintH\0R\x0elistConstraint\
    \x12h\n\x12boolean_constraint\x18\x06\x20\x01(\x0b27.google.cloud.orgpol\
    icy.v2.Constraint.BooleanConstraintH\0R\x11booleanConstraint\x12(\n\x10s\
    upports_dry_run\x18\x07\x20\x01(\x08R\x0esupportsDryRun\x1aX\n\x0eListCo\
    nstraint\x12\x1f\n\x0bsupports_in\x18\x01\x20\x01(\x08R\nsupportsIn\x12%\
    \n\x0esupports_under\x18\x02\x20\x01(\x08R\rsupportsUnder\x1a\x13\n\x11B\
    ooleanConstraint\"L\n\x11ConstraintDefault\x12\"\n\x1eCONSTRAINT_DEFAULT\
    _UNSPECIFIED\x10\0\x12\t\n\x05ALLOW\x10\x01\x12\x08\n\x04DENY\x10\x02B\
    \x11\n\x0fconstraint_type:\xb8\x01\xeaA\xb4\x01\n#orgpolicy.googleapis.c\
    om/Constraint\x12+projects/{project}/constraints/{constraint}\x12)folder\
    s/{folder}/constraints/{constraint}\x125organizations/{organization}/con\
    straints/{constraint}\"\xb3\x05\n\x10CustomConstraint\x12\x17\n\x04name\
    \x18\x01\x20\x01(\tR\x04nameB\x03\xe0A\x05\x12*\n\x0eresource_types\x18\
    \x02\x20\x03(\tR\rresourceTypesB\x03\xe0A\x05\x12Y\n\x0cmethod_types\x18\
    \x03\x20\x03(\x0e26.google.cloud.orgpolicy.v2.CustomConstraint.MethodTyp\
    eR\x0bmethodTypes\x12\x1c\n\tcondition\x18\x04\x20\x01(\tR\tcondition\
    \x12W\n\x0baction_type\x18\x05\x20\x01(\x0e26.google.cloud.orgpolicy.v2.\
    CustomConstraint.ActionTypeR\nactionType\x12!\n\x0cdisplay_name\x18\x06\
    \x20\x01(\tR\x0bdisplayName\x12\x20\n\x0bdescription\x18\x07\x20\x01(\tR\
    \x0bdescription\x12@\n\x0bupdate_time\x18\x08\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\nupdateTimeB\x03\xe0A\x03\"M\n\nMethodType\x12\x1b\n\
    \x17METHOD_TYPE_UNSPECIFIED\x10\0\x12\n\n\x06CREATE\x10\x01\x12\n\n\x06U\
    PDATE\x10\x02\x12\n\n\x06DELETE\x10\x03\">\n\nActionType\x12\x1b\n\x17AC\
    TION_TYPE_UNSPECIFIED\x10\0\x12\t\n\x05ALLOW\x10\x01\x12\x08\n\x04DENY\
    \x10\x02:r\xeaAo\n)orgpolicy.googleapis.com/CustomConstraint\x12Borganiz\
    ations/{organization}/customConstraints/{custom_constraint}B\xc6\x01\n\
    \x1dcom.google.cloud.orgpolicy.v2B\x0fConstraintProtoP\x01Z;cloud.google\
    .com/go/orgpolicy/apiv2/orgpolicypb;orgpolicypb\xaa\x02\x19Google.Cloud.\
    OrgPolicy.V2\xca\x02\x19Google\\Cloud\\OrgPolicy\\V2\xea\x02\x1cGoogle::\
    Cloud::OrgPolicy::V2J\xbb>\n\x07\x12\x05\x0e\0\xdc\x01\x01\n\xbc\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202023\x20Google\x20LL\
    C\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.\
    0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\"\n\t\n\x02\x03\0\x12\x03\
    \x12\0)\n\t\n\x02\x03\x01\x12\x03\x13\0#\n\t\n\x02\x03\x02\x12\x03\x14\0\
    )\n\x08\n\x01\x08\x12\x03\x16\06\n\t\n\x02\x08%\x12\x03\x16\06\n\x08\n\
    \x01\x08\x12\x03\x17\0R\n\t\n\x02\x08\x0b\x12\x03\x17\0R\n\x08\n\x01\x08\
    \x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\x18\0\"\n\x08\n\x01\x08\x12\x03\
    \x19\00\n\t\n\x02\x08\x08\x12\x03\x19\00\n\x08\n\x01\x08\x12\x03\x1a\06\
    \n\t\n\x02\x08\x01\x12\x03\x1a\06\n\x08\n\x01\x08\x12\x03\x1b\06\n\t\n\
    \x02\x08)\x12\x03\x1b\06\n\x08\n\x01\x08\x12\x03\x1c\05\n\t\n\x02\x08-\
    \x12\x03\x1c\05\n\xae\x07\n\x02\x04\0\x12\x05,\0\x81\x01\x01\x1a\xa0\x07\
    \x20A\x20constraint\x20describes\x20a\x20way\x20to\x20restrict\x20resour\
    ce's\x20configuration.\x20For\n\x20example,\x20you\x20could\x20enforce\
    \x20a\x20constraint\x20that\x20controls\x20which\x20Google\x20Cloud\n\
    \x20services\x20can\x20be\x20activated\x20across\x20an\x20organization,\
    \x20or\x20whether\x20a\x20Compute\x20Engine\n\x20instance\x20can\x20have\
    \x20serial\x20port\x20connections\x20established.\x20Constraints\x20can\
    \x20be\n\x20configured\x20by\x20the\x20organization\x20policy\x20adminis\
    trator\x20to\x20fit\x20the\x20needs\x20of\x20the\n\x20organization\x20by\
    \x20setting\x20a\x20policy\x20that\x20includes\x20constraints\x20at\x20d\
    ifferent\n\x20locations\x20in\x20the\x20organization's\x20resource\x20hi\
    erarchy.\x20Policies\x20are\x20inherited\n\x20down\x20the\x20resource\
    \x20hierarchy\x20from\x20higher\x20levels,\x20but\x20can\x20also\x20be\
    \x20overridden.\n\x20For\x20details\x20about\x20the\x20inheritance\x20ru\
    les\x20please\x20read\x20about\n\x20[`policies`][google.cloud.OrgPolicy.\
    v2.Policy].\n\n\x20Constraints\x20have\x20a\x20default\x20behavior\x20de\
    termined\x20by\x20the\x20`constraint_default`\n\x20field,\x20which\x20is\
    \x20the\x20enforcement\x20behavior\x20that\x20is\x20used\x20in\x20the\
    \x20absence\x20of\x20a\n\x20policy\x20being\x20defined\x20or\x20inherite\
    d\x20for\x20the\x20resource\x20in\x20question.\n\n\n\n\x03\x04\0\x01\x12\
    \x03,\x08\x12\n\x0b\n\x03\x04\0\x07\x12\x04-\x022\x04\n\r\n\x05\x04\0\
    \x07\x9d\x08\x12\x04-\x022\x04\n\xb0\x01\n\x04\x04\0\x04\0\x12\x048\x02D\
    \x03\x1a\xa1\x01\x20Specifies\x20the\x20default\x20behavior\x20in\x20the\
    \x20absence\x20of\x20any\x20policy\x20for\x20the\n\x20constraint.\x20Thi\
    s\x20must\x20not\x20be\x20`CONSTRAINT_DEFAULT_UNSPECIFIED`.\n\n\x20Immut\
    able\x20after\x20creation.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x038\x07\
    \x18\n]\n\x06\x04\0\x04\0\x02\0\x12\x03;\x04'\x1aN\x20This\x20is\x20only\
    \x20used\x20for\x20distinguishing\x20unset\x20values\x20and\x20should\
    \x20never\x20be\n\x20used.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03;\
    \x04\"\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03;%&\n\x86\x01\n\x06\x04\
    \0\x04\0\x02\x01\x12\x03?\x04\x0e\x1aw\x20Indicate\x20that\x20all\x20val\
    ues\x20are\x20allowed\x20for\x20list\x20constraints.\n\x20Indicate\x20th\
    at\x20enforcement\x20is\x20off\x20for\x20boolean\x20constraints.\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x01\x01\x12\x03?\x04\t\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x02\x12\x03?\x0c\r\n\x84\x01\n\x06\x04\0\x04\0\x02\x02\x12\x03C\
    \x04\r\x1au\x20Indicate\x20that\x20all\x20values\x20are\x20denied\x20for\
    \x20list\x20constraints.\n\x20Indicate\x20that\x20enforcement\x20is\x20o\
    n\x20for\x20boolean\x20constraints.\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\
    \x01\x12\x03C\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03C\x0b\
    \x0c\n\x9c\x01\n\x04\x04\0\x03\0\x12\x04H\x02S\x03\x1a\x8d\x01\x20A\x20c\
    onstraint\x20that\x20allows\x20or\x20disallows\x20a\x20list\x20of\x20str\
    ing\x20values,\x20which\x20are\n\x20configured\x20by\x20an\x20Organizati\
    on\x20Policy\x20administrator\x20with\x20a\x20policy.\n\n\x0c\n\x05\x04\
    \0\x03\0\x01\x12\x03H\n\x18\n\xcf\x01\n\x06\x04\0\x03\0\x02\0\x12\x03L\
    \x04\x19\x1a\xbf\x01\x20Indicates\x20whether\x20values\x20grouped\x20int\
    o\x20categories\x20can\x20be\x20used\x20in\n\x20`Policy.allowed_values`\
    \x20and\x20`Policy.denied_values`.\x20For\x20example,\n\x20`\"in:Python\
    \"`\x20would\x20match\x20any\x20value\x20in\x20the\x20'Python'\x20group.\
    \n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03L\x04\x08\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x01\x12\x03L\t\x14\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\
    \x03L\x17\x18\n\xf9\x01\n\x06\x04\0\x03\0\x02\x01\x12\x03R\x04\x1c\x1a\
    \xe9\x01\x20Indicates\x20whether\x20subtrees\x20of\x20the\x20Resource\
    \x20Manager\x20resource\x20hierarchy\n\x20can\x20be\x20used\x20in\x20`Po\
    licy.allowed_values`\x20and\x20`Policy.denied_values`.\x20For\n\x20examp\
    le,\x20`\"under:folders/123\"`\x20would\x20match\x20any\x20resource\x20u\
    nder\x20the\n\x20'folders/123'\x20folder.\n\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x05\x12\x03R\x04\x08\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03R\t\
    \x17\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03R\x1a\x1b\n\xea\x01\n\
    \x04\x04\0\x03\x01\x12\x03Z\x02\x1e\x1a\xdc\x01\x20A\x20constraint\x20th\
    at\x20is\x20either\x20enforced\x20or\x20not.\n\n\x20For\x20example,\x20a\
    \x20constraint\x20`constraints/compute.disableSerialPortAccess`.\n\x20If\
    \x20it\x20is\x20enforced\x20on\x20a\x20VM\x20instance,\x20serial\x20port\
    \x20connections\x20will\x20not\x20be\n\x20opened\x20to\x20that\x20instan\
    ce.\n\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03Z\n\x1b\n\xeb\x02\n\x04\x04\0\
    \x02\0\x12\x03d\x02<\x1a\xdd\x02\x20Immutable.\x20The\x20resource\x20nam\
    e\x20of\x20the\x20constraint.\x20Must\x20be\x20in\x20one\x20of\n\x20the\
    \x20following\x20forms:\n\n\x20*\x20`projects/{project_number}/constrain\
    ts/{constraint_name}`\n\x20*\x20`folders/{folder_id}/constraints/{constr\
    aint_name}`\n\x20*\x20`organizations/{organization_id}/constraints/{cons\
    traint_name}`\n\n\x20For\x20example,\x20\"/projects/123/constraints/comp\
    ute.disableSerialPortAccess\".\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03d\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03d\t\r\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03d\x10\x11\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03d\x12;\n\x0f\
    \n\x08\x04\0\x02\0\x08\x9c\x08\0\x12\x03d\x13:\n2\n\x04\x04\0\x02\x01\
    \x12\x03i\x02\x1a\x1a%\x20The\x20human\x20readable\x20name.\n\n\x20Mutab\
    le.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03i\t\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03i\x18\
    \x19\ny\n\x04\x04\0\x02\x02\x12\x03o\x02\x19\x1al\x20Detailed\x20descrip\
    tion\x20of\x20what\x20this\x20constraint\x20controls\x20as\x20well\x20as\
    \x20how\x20and\n\x20where\x20it\x20is\x20enforced.\n\n\x20Mutable.\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03o\x02\x08\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03o\t\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03o\x17\x18\nU\n\
    \x04\x04\0\x02\x03\x12\x03r\x02+\x1aH\x20The\x20evaluation\x20behavior\
    \x20of\x20this\x20constraint\x20in\x20the\x20absence\x20of\x20a\x20polic\
    y.\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03r\x02\x13\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03r\x14&\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03r)*\n[\n\
    \x04\x04\0\x08\0\x12\x04w\x02}\x03\x1aM\x20The\x20type\x20of\x20restrict\
    ions\x20for\x20this\x20`Constraint`.\n\n\x20Immutable\x20after\x20creati\
    on.\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03w\x08\x17\nA\n\x04\x04\0\x02\
    \x04\x12\x03y\x04'\x1a4\x20Defines\x20this\x20constraint\x20as\x20being\
    \x20a\x20ListConstraint.\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03y\x04\
    \x12\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03y\x13\"\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03y%&\nD\n\x04\x04\0\x02\x05\x12\x03|\x04-\x1a7\x20Defines\
    \x20this\x20constraint\x20as\x20being\x20a\x20BooleanConstraint.\n\n\x0c\
    \n\x05\x04\0\x02\x05\x06\x12\x03|\x04\x15\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03|\x16(\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03|+,\nI\n\x04\x04\0\
    \x02\x06\x12\x04\x80\x01\x02\x1c\x1a;\x20Shows\x20if\x20dry\x20run\x20is\
    \x20supported\x20for\x20this\x20constraint\x20or\x20not.\n\n\r\n\x05\x04\
    \0\x02\x06\x05\x12\x04\x80\x01\x02\x06\n\r\n\x05\x04\0\x02\x06\x01\x12\
    \x04\x80\x01\x07\x17\n\r\n\x05\x04\0\x02\x06\x03\x12\x04\x80\x01\x1a\x1b\
    \n\xae\x02\n\x02\x04\x01\x12\x06\x89\x01\0\xdc\x01\x01\x1a\x9f\x02\x20A\
    \x20custom\x20constraint\x20defined\x20by\x20customers\x20which\x20can\
    \x20*only*\x20be\x20applied\x20to\x20the\n\x20given\x20resource\x20types\
    \x20and\x20organization.\n\n\x20By\x20creating\x20a\x20custom\x20constra\
    int,\x20customers\x20can\x20apply\x20policies\x20of\x20this\n\x20custom\
    \x20constraint.\x20*Creating\x20a\x20custom\x20constraint\x20itself\x20d\
    oes\x20NOT\x20apply\x20any\n\x20policy\x20enforcement*.\n\n\x0b\n\x03\
    \x04\x01\x01\x12\x04\x89\x01\x08\x18\n\r\n\x03\x04\x01\x07\x12\x06\x8a\
    \x01\x02\x8d\x01\x04\n\x0f\n\x05\x04\x01\x07\x9d\x08\x12\x06\x8a\x01\x02\
    \x8d\x01\x04\n\xf4\x02\n\x04\x04\x01\x04\0\x12\x06\x96\x01\x02\xa3\x01\
    \x03\x1a\xe3\x02\x20The\x20operation\x20for\x20which\x20this\x20constrai\
    nt\x20will\x20be\x20applied.\x20To\x20apply\x20this\n\x20constraint\x20o\
    nly\x20when\x20creating\x20new\x20VMs,\x20the\x20`method_types`\x20shoul\
    d\x20be\n\x20`CREATE`\x20only.\x20To\x20apply\x20this\x20constraint\x20w\
    hen\x20creating\x20or\x20deleting\n\x20VMs,\x20the\x20`method_types`\x20\
    should\x20be\x20`CREATE`\x20and\x20`DELETE`.\n\n\x20`UPDATE`\x20only\x20\
    custom\x20constraints\x20are\x20not\x20supported.\x20Use\x20`CREATE`\x20\
    or\n\x20`CREATE,\x20UPDATE`.\n\n\r\n\x05\x04\x01\x04\0\x01\x12\x04\x96\
    \x01\x07\x11\n3\n\x06\x04\x01\x04\0\x02\0\x12\x04\x98\x01\x04\x20\x1a#\
    \x20Unspecified.\x20Results\x20in\x20an\x20error.\n\n\x0f\n\x07\x04\x01\
    \x04\0\x02\0\x01\x12\x04\x98\x01\x04\x1b\n\x0f\n\x07\x04\x01\x04\0\x02\0\
    \x02\x12\x04\x98\x01\x1e\x1f\n@\n\x06\x04\x01\x04\0\x02\x01\x12\x04\x9b\
    \x01\x04\x0f\x1a0\x20Constraint\x20applied\x20when\x20creating\x20the\
    \x20resource.\n\n\x0f\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x04\x9b\x01\
    \x04\n\n\x0f\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x04\x9b\x01\r\x0e\n@\n\
    \x06\x04\x01\x04\0\x02\x02\x12\x04\x9e\x01\x04\x0f\x1a0\x20Constraint\
    \x20applied\x20when\x20updating\x20the\x20resource.\n\n\x0f\n\x07\x04\
    \x01\x04\0\x02\x02\x01\x12\x04\x9e\x01\x04\n\n\x0f\n\x07\x04\x01\x04\0\
    \x02\x02\x02\x12\x04\x9e\x01\r\x0e\nT\n\x06\x04\x01\x04\0\x02\x03\x12\
    \x04\xa2\x01\x04\x0f\x1aD\x20Constraint\x20applied\x20when\x20deleting\
    \x20the\x20resource.\n\x20Not\x20supported\x20yet.\n\n\x0f\n\x07\x04\x01\
    \x04\0\x02\x03\x01\x12\x04\xa2\x01\x04\n\n\x0f\n\x07\x04\x01\x04\0\x02\
    \x03\x02\x12\x04\xa2\x01\r\x0e\n%\n\x04\x04\x01\x04\x01\x12\x06\xa6\x01\
    \x02\xaf\x01\x03\x1a\x15\x20Allow\x20or\x20deny\x20type.\n\n\r\n\x05\x04\
    \x01\x04\x01\x01\x12\x04\xa6\x01\x07\x11\n3\n\x06\x04\x01\x04\x01\x02\0\
    \x12\x04\xa8\x01\x04\x20\x1a#\x20Unspecified.\x20Results\x20in\x20an\x20\
    error.\n\n\x0f\n\x07\x04\x01\x04\x01\x02\0\x01\x12\x04\xa8\x01\x04\x1b\n\
    \x0f\n\x07\x04\x01\x04\x01\x02\0\x02\x12\x04\xa8\x01\x1e\x1f\n&\n\x06\
    \x04\x01\x04\x01\x02\x01\x12\x04\xab\x01\x04\x0e\x1a\x16\x20Allowed\x20a\
    ction\x20type.\n\n\x0f\n\x07\x04\x01\x04\x01\x02\x01\x01\x12\x04\xab\x01\
    \x04\t\n\x0f\n\x07\x04\x01\x04\x01\x02\x01\x02\x12\x04\xab\x01\x0c\r\n#\
    \n\x06\x04\x01\x04\x01\x02\x02\x12\x04\xae\x01\x04\r\x1a\x13\x20Deny\x20\
    action\x20type.\n\n\x0f\n\x07\x04\x01\x04\x01\x02\x02\x01\x12\x04\xae\
    \x01\x04\x08\n\x0f\n\x07\x04\x01\x04\x01\x02\x02\x02\x12\x04\xae\x01\x0b\
    \x0c\n\xae\x03\n\x04\x04\x01\x02\0\x12\x04\xba\x01\x02<\x1a\x9f\x03\x20I\
    mmutable.\x20Name\x20of\x20the\x20constraint.\x20This\x20is\x20unique\
    \x20within\x20the\x20organization.\n\x20Format\x20of\x20the\x20name\x20s\
    hould\x20be\n\n\x20*\x20`organizations/{organization_id}/customConstrain\
    ts/{custom_constraint_id}`\n\n\x20Example:\x20`organizations/123/customC\
    onstraints/custom.createOnlyE2TypeVms`\n\n\x20The\x20max\x20length\x20is\
    \x2070\x20characters\x20and\x20the\x20minimum\x20length\x20is\x201.\x20N\
    ote\x20that\x20the\n\x20prefix\x20`organizations/{organization_id}/custo\
    mConstraints/`\x20is\x20not\x20counted.\n\n\r\n\x05\x04\x01\x02\0\x05\
    \x12\x04\xba\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xba\x01\t\r\
    \n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xba\x01\x10\x11\n\r\n\x05\x04\x01\
    \x02\0\x08\x12\x04\xba\x01\x12;\n\x10\n\x08\x04\x01\x02\0\x08\x9c\x08\0\
    \x12\x04\xba\x01\x13:\n\xc5\x01\n\x04\x04\x01\x02\x01\x12\x04\xc0\x01\
    \x02O\x1a\xb6\x01\x20Immutable.\x20The\x20resource\x20instance\x20type\
    \x20on\x20which\x20this\x20policy\x20applies.\x20Format\n\x20will\x20be\
    \x20of\x20the\x20form\x20:\x20`<canonical\x20service\x20name>/<type>`\
    \x20Example:\n\n\x20\x20*\x20`compute.googleapis.com/Instance`.\n\n\r\n\
    \x05\x04\x01\x02\x01\x04\x12\x04\xc0\x01\x02\n\n\r\n\x05\x04\x01\x02\x01\
    \x05\x12\x04\xc0\x01\x0b\x11\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xc0\
    \x01\x12\x20\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xc0\x01#$\n\r\n\x05\
    \x04\x01\x02\x01\x08\x12\x04\xc0\x01%N\n\x10\n\x08\x04\x01\x02\x01\x08\
    \x9c\x08\0\x12\x04\xc0\x01&M\nE\n\x04\x04\x01\x02\x02\x12\x04\xc3\x01\
    \x02'\x1a7\x20All\x20the\x20operations\x20being\x20applied\x20for\x20thi\
    s\x20constraint.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\xc3\x01\x02\n\n\
    \r\n\x05\x04\x01\x02\x02\x06\x12\x04\xc3\x01\x0b\x15\n\r\n\x05\x04\x01\
    \x02\x02\x01\x12\x04\xc3\x01\x16\"\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\
    \xc3\x01%&\n\xe3\x01\n\x04\x04\x01\x02\x03\x12\x04\xca\x01\x02\x17\x1a\
    \xd4\x01\x20Org\x20policy\x20condition/expression.\x20For\x20example:\n\
    \x20`resource.instanceName.matches(\"[production|test]_.*_(\\d)+\")`\x20\
    or,\n\x20`resource.management.auto_upgrade\x20==\x20true`\n\n\x20The\x20\
    max\x20length\x20of\x20the\x20condition\x20is\x201000\x20characters.\n\n\
    \r\n\x05\x04\x01\x02\x03\x05\x12\x04\xca\x01\x02\x08\n\r\n\x05\x04\x01\
    \x02\x03\x01\x12\x04\xca\x01\t\x12\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\
    \xca\x01\x15\x16\n#\n\x04\x04\x01\x02\x04\x12\x04\xcd\x01\x02\x1d\x1a\
    \x15\x20Allow\x20or\x20deny\x20type.\n\n\r\n\x05\x04\x01\x02\x04\x06\x12\
    \x04\xcd\x01\x02\x0c\n\r\n\x05\x04\x01\x02\x04\x01\x12\x04\xcd\x01\r\x18\
    \n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\xcd\x01\x1b\x1c\nh\n\x04\x04\x01\
    \x02\x05\x12\x04\xd1\x01\x02\x1a\x1aZ\x20One\x20line\x20display\x20name\
    \x20for\x20the\x20UI.\n\x20The\x20max\x20length\x20of\x20the\x20display_\
    name\x20is\x20200\x20characters.\n\n\r\n\x05\x04\x01\x02\x05\x05\x12\x04\
    \xd1\x01\x02\x08\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\xd1\x01\t\x15\n\r\
    \n\x05\x04\x01\x02\x05\x03\x12\x04\xd1\x01\x18\x19\n\x80\x01\n\x04\x04\
    \x01\x02\x06\x12\x04\xd5\x01\x02\x19\x1ar\x20Detailed\x20information\x20\
    about\x20this\x20custom\x20policy\x20constraint.\n\x20The\x20max\x20leng\
    th\x20of\x20the\x20description\x20is\x202000\x20characters.\n\n\r\n\x05\
    \x04\x01\x02\x06\x05\x12\x04\xd5\x01\x02\x08\n\r\n\x05\x04\x01\x02\x06\
    \x01\x12\x04\xd5\x01\t\x14\n\r\n\x05\x04\x01\x02\x06\x03\x12\x04\xd5\x01\
    \x17\x18\n\xbe\x01\n\x04\x04\x01\x02\x07\x12\x06\xda\x01\x02\xdb\x012\
    \x1a\xad\x01\x20Output\x20only.\x20The\x20last\x20time\x20this\x20custom\
    \x20constraint\x20was\x20updated.\x20This\n\x20represents\x20the\x20last\
    \x20time\x20that\x20the\x20`CreateCustomConstraint`\x20or\n\x20`UpdateCu\
    stomConstraint`\x20RPC\x20was\x20called\n\n\r\n\x05\x04\x01\x02\x07\x06\
    \x12\x04\xda\x01\x02\x1b\n\r\n\x05\x04\x01\x02\x07\x01\x12\x04\xda\x01\
    \x1c'\n\r\n\x05\x04\x01\x02\x07\x03\x12\x04\xda\x01*+\n\r\n\x05\x04\x01\
    \x02\x07\x08\x12\x04\xdb\x01\x061\n\x10\n\x08\x04\x01\x02\x07\x08\x9c\
    \x08\0\x12\x04\xdb\x01\x070b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
