// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/cloud/orgpolicy/v2/orgpolicy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Policy {
    // message fields
    pub name: ::std::string::String,
    pub spec: ::protobuf::SingularPtrField<PolicySpec>,
    pub alternate: ::protobuf::SingularPtrField<AlternatePolicySpec>,
    pub dry_run_spec: ::protobuf::SingularPtrField<PolicySpec>,
    pub etag: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Policy {
    fn default() -> &'a Policy {
        <Policy as ::protobuf::Message>::default_instance()
    }
}

impl Policy {
    pub fn new() -> Policy {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.cloud.orgpolicy.v2.PolicySpec spec = 2;


    pub fn get_spec(&self) -> &PolicySpec {
        self.spec.as_ref().unwrap_or_else(|| <PolicySpec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: PolicySpec) {
        self.spec = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut PolicySpec {
        if self.spec.is_none() {
            self.spec.set_default();
        }
        self.spec.as_mut().unwrap()
    }

    // Take field
    pub fn take_spec(&mut self) -> PolicySpec {
        self.spec.take().unwrap_or_else(|| PolicySpec::new())
    }

    // .google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;


    pub fn get_alternate(&self) -> &AlternatePolicySpec {
        self.alternate.as_ref().unwrap_or_else(|| <AlternatePolicySpec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_alternate(&mut self) {
        self.alternate.clear();
    }

    pub fn has_alternate(&self) -> bool {
        self.alternate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alternate(&mut self, v: AlternatePolicySpec) {
        self.alternate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alternate(&mut self) -> &mut AlternatePolicySpec {
        if self.alternate.is_none() {
            self.alternate.set_default();
        }
        self.alternate.as_mut().unwrap()
    }

    // Take field
    pub fn take_alternate(&mut self) -> AlternatePolicySpec {
        self.alternate.take().unwrap_or_else(|| AlternatePolicySpec::new())
    }

    // .google.cloud.orgpolicy.v2.PolicySpec dry_run_spec = 4;


    pub fn get_dry_run_spec(&self) -> &PolicySpec {
        self.dry_run_spec.as_ref().unwrap_or_else(|| <PolicySpec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dry_run_spec(&mut self) {
        self.dry_run_spec.clear();
    }

    pub fn has_dry_run_spec(&self) -> bool {
        self.dry_run_spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dry_run_spec(&mut self, v: PolicySpec) {
        self.dry_run_spec = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dry_run_spec(&mut self) -> &mut PolicySpec {
        if self.dry_run_spec.is_none() {
            self.dry_run_spec.set_default();
        }
        self.dry_run_spec.as_mut().unwrap()
    }

    // Take field
    pub fn take_dry_run_spec(&mut self) -> PolicySpec {
        self.dry_run_spec.take().unwrap_or_else(|| PolicySpec::new())
    }

    // string etag = 5;


    pub fn get_etag(&self) -> &str {
        &self.etag
    }
    pub fn clear_etag(&mut self) {
        self.etag.clear();
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::string::String) {
        self.etag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::string::String {
        &mut self.etag
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.etag, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Policy {
    fn is_initialized(&self) -> bool {
        for v in &self.spec {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.alternate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dry_run_spec {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.spec)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alternate)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dry_run_spec)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.etag)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.alternate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dry_run_spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.etag);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.spec.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.alternate.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dry_run_spec.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.etag.is_empty() {
            os.write_string(5, &self.etag)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Policy {
        Policy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Policy| { &m.name },
                |m: &mut Policy| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PolicySpec>>(
                "spec",
                |m: &Policy| { &m.spec },
                |m: &mut Policy| { &mut m.spec },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AlternatePolicySpec>>(
                "alternate",
                |m: &Policy| { &m.alternate },
                |m: &mut Policy| { &mut m.alternate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PolicySpec>>(
                "dry_run_spec",
                |m: &Policy| { &m.dry_run_spec },
                |m: &mut Policy| { &mut m.dry_run_spec },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "etag",
                |m: &Policy| { &m.etag },
                |m: &mut Policy| { &mut m.etag },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Policy>(
                "Policy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Policy {
        static instance: ::protobuf::rt::LazyV2<Policy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Policy::new)
    }
}

impl ::protobuf::Clear for Policy {
    fn clear(&mut self) {
        self.name.clear();
        self.spec.clear();
        self.alternate.clear();
        self.dry_run_spec.clear();
        self.etag.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Policy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Policy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AlternatePolicySpec {
    // message fields
    pub launch: ::std::string::String,
    pub spec: ::protobuf::SingularPtrField<PolicySpec>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AlternatePolicySpec {
    fn default() -> &'a AlternatePolicySpec {
        <AlternatePolicySpec as ::protobuf::Message>::default_instance()
    }
}

impl AlternatePolicySpec {
    pub fn new() -> AlternatePolicySpec {
        ::std::default::Default::default()
    }

    // string launch = 1;


    pub fn get_launch(&self) -> &str {
        &self.launch
    }
    pub fn clear_launch(&mut self) {
        self.launch.clear();
    }

    // Param is passed by value, moved
    pub fn set_launch(&mut self, v: ::std::string::String) {
        self.launch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_launch(&mut self) -> &mut ::std::string::String {
        &mut self.launch
    }

    // Take field
    pub fn take_launch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.launch, ::std::string::String::new())
    }

    // .google.cloud.orgpolicy.v2.PolicySpec spec = 2;


    pub fn get_spec(&self) -> &PolicySpec {
        self.spec.as_ref().unwrap_or_else(|| <PolicySpec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_spec(&mut self) {
        self.spec.clear();
    }

    pub fn has_spec(&self) -> bool {
        self.spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spec(&mut self, v: PolicySpec) {
        self.spec = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec(&mut self) -> &mut PolicySpec {
        if self.spec.is_none() {
            self.spec.set_default();
        }
        self.spec.as_mut().unwrap()
    }

    // Take field
    pub fn take_spec(&mut self) -> PolicySpec {
        self.spec.take().unwrap_or_else(|| PolicySpec::new())
    }
}

impl ::protobuf::Message for AlternatePolicySpec {
    fn is_initialized(&self) -> bool {
        for v in &self.spec {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.launch)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.spec)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.launch.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.launch);
        }
        if let Some(ref v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.launch.is_empty() {
            os.write_string(1, &self.launch)?;
        }
        if let Some(ref v) = self.spec.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AlternatePolicySpec {
        AlternatePolicySpec::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "launch",
                |m: &AlternatePolicySpec| { &m.launch },
                |m: &mut AlternatePolicySpec| { &mut m.launch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PolicySpec>>(
                "spec",
                |m: &AlternatePolicySpec| { &m.spec },
                |m: &mut AlternatePolicySpec| { &mut m.spec },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AlternatePolicySpec>(
                "AlternatePolicySpec",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AlternatePolicySpec {
        static instance: ::protobuf::rt::LazyV2<AlternatePolicySpec> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AlternatePolicySpec::new)
    }
}

impl ::protobuf::Clear for AlternatePolicySpec {
    fn clear(&mut self) {
        self.launch.clear();
        self.spec.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AlternatePolicySpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlternatePolicySpec {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PolicySpec {
    // message fields
    pub etag: ::std::string::String,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub rules: ::protobuf::RepeatedField<PolicySpec_PolicyRule>,
    pub inherit_from_parent: bool,
    pub reset: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PolicySpec {
    fn default() -> &'a PolicySpec {
        <PolicySpec as ::protobuf::Message>::default_instance()
    }
}

impl PolicySpec {
    pub fn new() -> PolicySpec {
        ::std::default::Default::default()
    }

    // string etag = 1;


    pub fn get_etag(&self) -> &str {
        &self.etag
    }
    pub fn clear_etag(&mut self) {
        self.etag.clear();
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::string::String) {
        self.etag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::string::String {
        &mut self.etag
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.etag, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp update_time = 2;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // repeated .google.cloud.orgpolicy.v2.PolicySpec.PolicyRule rules = 3;


    pub fn get_rules(&self) -> &[PolicySpec_PolicyRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<PolicySpec_PolicyRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<PolicySpec_PolicyRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<PolicySpec_PolicyRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    // bool inherit_from_parent = 4;


    pub fn get_inherit_from_parent(&self) -> bool {
        self.inherit_from_parent
    }
    pub fn clear_inherit_from_parent(&mut self) {
        self.inherit_from_parent = false;
    }

    // Param is passed by value, moved
    pub fn set_inherit_from_parent(&mut self, v: bool) {
        self.inherit_from_parent = v;
    }

    // bool reset = 5;


    pub fn get_reset(&self) -> bool {
        self.reset
    }
    pub fn clear_reset(&mut self) {
        self.reset = false;
    }

    // Param is passed by value, moved
    pub fn set_reset(&mut self, v: bool) {
        self.reset = v;
    }
}

impl ::protobuf::Message for PolicySpec {
    fn is_initialized(&self) -> bool {
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.etag)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.inherit_from_parent = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.reset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.etag);
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.inherit_from_parent != false {
            my_size += 2;
        }
        if self.reset != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.etag.is_empty() {
            os.write_string(1, &self.etag)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rules {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.inherit_from_parent != false {
            os.write_bool(4, self.inherit_from_parent)?;
        }
        if self.reset != false {
            os.write_bool(5, self.reset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PolicySpec {
        PolicySpec::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "etag",
                |m: &PolicySpec| { &m.etag },
                |m: &mut PolicySpec| { &mut m.etag },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "update_time",
                |m: &PolicySpec| { &m.update_time },
                |m: &mut PolicySpec| { &mut m.update_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PolicySpec_PolicyRule>>(
                "rules",
                |m: &PolicySpec| { &m.rules },
                |m: &mut PolicySpec| { &mut m.rules },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "inherit_from_parent",
                |m: &PolicySpec| { &m.inherit_from_parent },
                |m: &mut PolicySpec| { &mut m.inherit_from_parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "reset",
                |m: &PolicySpec| { &m.reset },
                |m: &mut PolicySpec| { &mut m.reset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PolicySpec>(
                "PolicySpec",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PolicySpec {
        static instance: ::protobuf::rt::LazyV2<PolicySpec> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PolicySpec::new)
    }
}

impl ::protobuf::Clear for PolicySpec {
    fn clear(&mut self) {
        self.etag.clear();
        self.update_time.clear();
        self.rules.clear();
        self.inherit_from_parent = false;
        self.reset = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PolicySpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PolicySpec {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PolicySpec_PolicyRule {
    // message fields
    pub condition: ::protobuf::SingularPtrField<super::expr::Expr>,
    // message oneof groups
    pub kind: ::std::option::Option<PolicySpec_PolicyRule_oneof_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PolicySpec_PolicyRule {
    fn default() -> &'a PolicySpec_PolicyRule {
        <PolicySpec_PolicyRule as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PolicySpec_PolicyRule_oneof_kind {
    values(PolicySpec_PolicyRule_StringValues),
    allow_all(bool),
    deny_all(bool),
    enforce(bool),
}

impl PolicySpec_PolicyRule {
    pub fn new() -> PolicySpec_PolicyRule {
        ::std::default::Default::default()
    }

    // .google.cloud.orgpolicy.v2.PolicySpec.PolicyRule.StringValues values = 1;


    pub fn get_values(&self) -> &PolicySpec_PolicyRule_StringValues {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(ref v)) => v,
            _ => <PolicySpec_PolicyRule_StringValues as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_values(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_values(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: PolicySpec_PolicyRule_StringValues) {
        self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(v))
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut PolicySpec_PolicyRule_StringValues {
        if let ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(PolicySpec_PolicyRule_StringValues::new()));
        }
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_values(&mut self) -> PolicySpec_PolicyRule_StringValues {
        if self.has_values() {
            match self.kind.take() {
                ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(v)) => v,
                _ => panic!(),
            }
        } else {
            PolicySpec_PolicyRule_StringValues::new()
        }
    }

    // bool allow_all = 2;


    pub fn get_allow_all(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::allow_all(v)) => v,
            _ => false,
        }
    }
    pub fn clear_allow_all(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_allow_all(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::allow_all(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_allow_all(&mut self, v: bool) {
        self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::allow_all(v))
    }

    // bool deny_all = 3;


    pub fn get_deny_all(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::deny_all(v)) => v,
            _ => false,
        }
    }
    pub fn clear_deny_all(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_deny_all(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::deny_all(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deny_all(&mut self, v: bool) {
        self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::deny_all(v))
    }

    // bool enforce = 4;


    pub fn get_enforce(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::enforce(v)) => v,
            _ => false,
        }
    }
    pub fn clear_enforce(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_enforce(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::enforce(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enforce(&mut self, v: bool) {
        self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::enforce(v))
    }

    // .google.type.Expr condition = 5;


    pub fn get_condition(&self) -> &super::expr::Expr {
        self.condition.as_ref().unwrap_or_else(|| <super::expr::Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_condition(&mut self) {
        self.condition.clear();
    }

    pub fn has_condition(&self) -> bool {
        self.condition.is_some()
    }

    // Param is passed by value, moved
    pub fn set_condition(&mut self, v: super::expr::Expr) {
        self.condition = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_condition(&mut self) -> &mut super::expr::Expr {
        if self.condition.is_none() {
            self.condition.set_default();
        }
        self.condition.as_mut().unwrap()
    }

    // Take field
    pub fn take_condition(&mut self) -> super::expr::Expr {
        self.condition.take().unwrap_or_else(|| super::expr::Expr::new())
    }
}

impl ::protobuf::Message for PolicySpec_PolicyRule {
    fn is_initialized(&self) -> bool {
        if let Some(PolicySpec_PolicyRule_oneof_kind::values(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.condition {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::values(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::allow_all(is.read_bool()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::deny_all(is.read_bool()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(PolicySpec_PolicyRule_oneof_kind::enforce(is.read_bool()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.condition)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.condition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &PolicySpec_PolicyRule_oneof_kind::values(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PolicySpec_PolicyRule_oneof_kind::allow_all(v) => {
                    my_size += 2;
                },
                &PolicySpec_PolicyRule_oneof_kind::deny_all(v) => {
                    my_size += 2;
                },
                &PolicySpec_PolicyRule_oneof_kind::enforce(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.condition.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &PolicySpec_PolicyRule_oneof_kind::values(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PolicySpec_PolicyRule_oneof_kind::allow_all(v) => {
                    os.write_bool(2, v)?;
                },
                &PolicySpec_PolicyRule_oneof_kind::deny_all(v) => {
                    os.write_bool(3, v)?;
                },
                &PolicySpec_PolicyRule_oneof_kind::enforce(v) => {
                    os.write_bool(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PolicySpec_PolicyRule {
        PolicySpec_PolicyRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PolicySpec_PolicyRule_StringValues>(
                "values",
                PolicySpec_PolicyRule::has_values,
                PolicySpec_PolicyRule::get_values,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "allow_all",
                PolicySpec_PolicyRule::has_allow_all,
                PolicySpec_PolicyRule::get_allow_all,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "deny_all",
                PolicySpec_PolicyRule::has_deny_all,
                PolicySpec_PolicyRule::get_deny_all,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "enforce",
                PolicySpec_PolicyRule::has_enforce,
                PolicySpec_PolicyRule::get_enforce,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::expr::Expr>>(
                "condition",
                |m: &PolicySpec_PolicyRule| { &m.condition },
                |m: &mut PolicySpec_PolicyRule| { &mut m.condition },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PolicySpec_PolicyRule>(
                "PolicySpec.PolicyRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PolicySpec_PolicyRule {
        static instance: ::protobuf::rt::LazyV2<PolicySpec_PolicyRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PolicySpec_PolicyRule::new)
    }
}

impl ::protobuf::Clear for PolicySpec_PolicyRule {
    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.condition.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PolicySpec_PolicyRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PolicySpec_PolicyRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PolicySpec_PolicyRule_StringValues {
    // message fields
    pub allowed_values: ::protobuf::RepeatedField<::std::string::String>,
    pub denied_values: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PolicySpec_PolicyRule_StringValues {
    fn default() -> &'a PolicySpec_PolicyRule_StringValues {
        <PolicySpec_PolicyRule_StringValues as ::protobuf::Message>::default_instance()
    }
}

impl PolicySpec_PolicyRule_StringValues {
    pub fn new() -> PolicySpec_PolicyRule_StringValues {
        ::std::default::Default::default()
    }

    // repeated string allowed_values = 1;


    pub fn get_allowed_values(&self) -> &[::std::string::String] {
        &self.allowed_values
    }
    pub fn clear_allowed_values(&mut self) {
        self.allowed_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_values(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.allowed_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.allowed_values
    }

    // Take field
    pub fn take_allowed_values(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.allowed_values, ::protobuf::RepeatedField::new())
    }

    // repeated string denied_values = 2;


    pub fn get_denied_values(&self) -> &[::std::string::String] {
        &self.denied_values
    }
    pub fn clear_denied_values(&mut self) {
        self.denied_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_denied_values(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.denied_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_denied_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.denied_values
    }

    // Take field
    pub fn take_denied_values(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.denied_values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PolicySpec_PolicyRule_StringValues {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.allowed_values)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.denied_values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.allowed_values {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.denied_values {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.allowed_values {
            os.write_string(1, &v)?;
        };
        for v in &self.denied_values {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PolicySpec_PolicyRule_StringValues {
        PolicySpec_PolicyRule_StringValues::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "allowed_values",
                |m: &PolicySpec_PolicyRule_StringValues| { &m.allowed_values },
                |m: &mut PolicySpec_PolicyRule_StringValues| { &mut m.allowed_values },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denied_values",
                |m: &PolicySpec_PolicyRule_StringValues| { &m.denied_values },
                |m: &mut PolicySpec_PolicyRule_StringValues| { &mut m.denied_values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PolicySpec_PolicyRule_StringValues>(
                "PolicySpec.PolicyRule.StringValues",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PolicySpec_PolicyRule_StringValues {
        static instance: ::protobuf::rt::LazyV2<PolicySpec_PolicyRule_StringValues> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PolicySpec_PolicyRule_StringValues::new)
    }
}

impl ::protobuf::Clear for PolicySpec_PolicyRule_StringValues {
    fn clear(&mut self) {
        self.allowed_values.clear();
        self.denied_values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PolicySpec_PolicyRule_StringValues {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PolicySpec_PolicyRule_StringValues {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListConstraintsRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListConstraintsRequest {
    fn default() -> &'a ListConstraintsRequest {
        <ListConstraintsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListConstraintsRequest {
    pub fn new() -> ListConstraintsRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListConstraintsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListConstraintsRequest {
        ListConstraintsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListConstraintsRequest| { &m.parent },
                |m: &mut ListConstraintsRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListConstraintsRequest| { &m.page_size },
                |m: &mut ListConstraintsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListConstraintsRequest| { &m.page_token },
                |m: &mut ListConstraintsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListConstraintsRequest>(
                "ListConstraintsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListConstraintsRequest {
        static instance: ::protobuf::rt::LazyV2<ListConstraintsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListConstraintsRequest::new)
    }
}

impl ::protobuf::Clear for ListConstraintsRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListConstraintsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListConstraintsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListConstraintsResponse {
    // message fields
    pub constraints: ::protobuf::RepeatedField<super::constraint::Constraint>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListConstraintsResponse {
    fn default() -> &'a ListConstraintsResponse {
        <ListConstraintsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListConstraintsResponse {
    pub fn new() -> ListConstraintsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.orgpolicy.v2.Constraint constraints = 1;


    pub fn get_constraints(&self) -> &[super::constraint::Constraint] {
        &self.constraints
    }
    pub fn clear_constraints(&mut self) {
        self.constraints.clear();
    }

    // Param is passed by value, moved
    pub fn set_constraints(&mut self, v: ::protobuf::RepeatedField<super::constraint::Constraint>) {
        self.constraints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_constraints(&mut self) -> &mut ::protobuf::RepeatedField<super::constraint::Constraint> {
        &mut self.constraints
    }

    // Take field
    pub fn take_constraints(&mut self) -> ::protobuf::RepeatedField<super::constraint::Constraint> {
        ::std::mem::replace(&mut self.constraints, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListConstraintsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.constraints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.constraints)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.constraints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.constraints {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListConstraintsResponse {
        ListConstraintsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::constraint::Constraint>>(
                "constraints",
                |m: &ListConstraintsResponse| { &m.constraints },
                |m: &mut ListConstraintsResponse| { &mut m.constraints },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListConstraintsResponse| { &m.next_page_token },
                |m: &mut ListConstraintsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListConstraintsResponse>(
                "ListConstraintsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListConstraintsResponse {
        static instance: ::protobuf::rt::LazyV2<ListConstraintsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListConstraintsResponse::new)
    }
}

impl ::protobuf::Clear for ListConstraintsResponse {
    fn clear(&mut self) {
        self.constraints.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListConstraintsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListConstraintsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListPoliciesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListPoliciesRequest {
    fn default() -> &'a ListPoliciesRequest {
        <ListPoliciesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListPoliciesRequest {
    pub fn new() -> ListPoliciesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListPoliciesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListPoliciesRequest {
        ListPoliciesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListPoliciesRequest| { &m.parent },
                |m: &mut ListPoliciesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListPoliciesRequest| { &m.page_size },
                |m: &mut ListPoliciesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListPoliciesRequest| { &m.page_token },
                |m: &mut ListPoliciesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListPoliciesRequest>(
                "ListPoliciesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListPoliciesRequest {
        static instance: ::protobuf::rt::LazyV2<ListPoliciesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListPoliciesRequest::new)
    }
}

impl ::protobuf::Clear for ListPoliciesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListPoliciesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListPoliciesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListPoliciesResponse {
    // message fields
    pub policies: ::protobuf::RepeatedField<Policy>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListPoliciesResponse {
    fn default() -> &'a ListPoliciesResponse {
        <ListPoliciesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListPoliciesResponse {
    pub fn new() -> ListPoliciesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.orgpolicy.v2.Policy policies = 1;


    pub fn get_policies(&self) -> &[Policy] {
        &self.policies
    }
    pub fn clear_policies(&mut self) {
        self.policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_policies(&mut self, v: ::protobuf::RepeatedField<Policy>) {
        self.policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_policies(&mut self) -> &mut ::protobuf::RepeatedField<Policy> {
        &mut self.policies
    }

    // Take field
    pub fn take_policies(&mut self) -> ::protobuf::RepeatedField<Policy> {
        ::std::mem::replace(&mut self.policies, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListPoliciesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.policies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.policies)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.policies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.policies {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListPoliciesResponse {
        ListPoliciesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Policy>>(
                "policies",
                |m: &ListPoliciesResponse| { &m.policies },
                |m: &mut ListPoliciesResponse| { &mut m.policies },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListPoliciesResponse| { &m.next_page_token },
                |m: &mut ListPoliciesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListPoliciesResponse>(
                "ListPoliciesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListPoliciesResponse {
        static instance: ::protobuf::rt::LazyV2<ListPoliciesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListPoliciesResponse::new)
    }
}

impl ::protobuf::Clear for ListPoliciesResponse {
    fn clear(&mut self) {
        self.policies.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListPoliciesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListPoliciesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPolicyRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPolicyRequest {
    fn default() -> &'a GetPolicyRequest {
        <GetPolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPolicyRequest {
    pub fn new() -> GetPolicyRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetPolicyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPolicyRequest {
        GetPolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetPolicyRequest| { &m.name },
                |m: &mut GetPolicyRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPolicyRequest>(
                "GetPolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPolicyRequest {
        static instance: ::protobuf::rt::LazyV2<GetPolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPolicyRequest::new)
    }
}

impl ::protobuf::Clear for GetPolicyRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetEffectivePolicyRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetEffectivePolicyRequest {
    fn default() -> &'a GetEffectivePolicyRequest {
        <GetEffectivePolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetEffectivePolicyRequest {
    pub fn new() -> GetEffectivePolicyRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetEffectivePolicyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetEffectivePolicyRequest {
        GetEffectivePolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetEffectivePolicyRequest| { &m.name },
                |m: &mut GetEffectivePolicyRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetEffectivePolicyRequest>(
                "GetEffectivePolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetEffectivePolicyRequest {
        static instance: ::protobuf::rt::LazyV2<GetEffectivePolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetEffectivePolicyRequest::new)
    }
}

impl ::protobuf::Clear for GetEffectivePolicyRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetEffectivePolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEffectivePolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreatePolicyRequest {
    // message fields
    pub parent: ::std::string::String,
    pub policy: ::protobuf::SingularPtrField<Policy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreatePolicyRequest {
    fn default() -> &'a CreatePolicyRequest {
        <CreatePolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreatePolicyRequest {
    pub fn new() -> CreatePolicyRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // .google.cloud.orgpolicy.v2.Policy policy = 3;


    pub fn get_policy(&self) -> &Policy {
        self.policy.as_ref().unwrap_or_else(|| <Policy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_policy(&mut self) {
        self.policy.clear();
    }

    pub fn has_policy(&self) -> bool {
        self.policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: Policy) {
        self.policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy(&mut self) -> &mut Policy {
        if self.policy.is_none() {
            self.policy.set_default();
        }
        self.policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy(&mut self) -> Policy {
        self.policy.take().unwrap_or_else(|| Policy::new())
    }
}

impl ::protobuf::Message for CreatePolicyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if let Some(ref v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if let Some(ref v) = self.policy.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreatePolicyRequest {
        CreatePolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreatePolicyRequest| { &m.parent },
                |m: &mut CreatePolicyRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Policy>>(
                "policy",
                |m: &CreatePolicyRequest| { &m.policy },
                |m: &mut CreatePolicyRequest| { &mut m.policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreatePolicyRequest>(
                "CreatePolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreatePolicyRequest {
        static instance: ::protobuf::rt::LazyV2<CreatePolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreatePolicyRequest::new)
    }
}

impl ::protobuf::Clear for CreatePolicyRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreatePolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreatePolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdatePolicyRequest {
    // message fields
    pub policy: ::protobuf::SingularPtrField<Policy>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdatePolicyRequest {
    fn default() -> &'a UpdatePolicyRequest {
        <UpdatePolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdatePolicyRequest {
    pub fn new() -> UpdatePolicyRequest {
        ::std::default::Default::default()
    }

    // .google.cloud.orgpolicy.v2.Policy policy = 1;


    pub fn get_policy(&self) -> &Policy {
        self.policy.as_ref().unwrap_or_else(|| <Policy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_policy(&mut self) {
        self.policy.clear();
    }

    pub fn has_policy(&self) -> bool {
        self.policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: Policy) {
        self.policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy(&mut self) -> &mut Policy {
        if self.policy.is_none() {
            self.policy.set_default();
        }
        self.policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy(&mut self) -> Policy {
        self.policy.take().unwrap_or_else(|| Policy::new())
    }

    // .google.protobuf.FieldMask update_mask = 3;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for UpdatePolicyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.policy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.policy)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.policy.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdatePolicyRequest {
        UpdatePolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Policy>>(
                "policy",
                |m: &UpdatePolicyRequest| { &m.policy },
                |m: &mut UpdatePolicyRequest| { &mut m.policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdatePolicyRequest| { &m.update_mask },
                |m: &mut UpdatePolicyRequest| { &mut m.update_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdatePolicyRequest>(
                "UpdatePolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdatePolicyRequest {
        static instance: ::protobuf::rt::LazyV2<UpdatePolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdatePolicyRequest::new)
    }
}

impl ::protobuf::Clear for UpdatePolicyRequest {
    fn clear(&mut self) {
        self.policy.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdatePolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdatePolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeletePolicyRequest {
    // message fields
    pub name: ::std::string::String,
    pub etag: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeletePolicyRequest {
    fn default() -> &'a DeletePolicyRequest {
        <DeletePolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeletePolicyRequest {
    pub fn new() -> DeletePolicyRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string etag = 2;


    pub fn get_etag(&self) -> &str {
        &self.etag
    }
    pub fn clear_etag(&mut self) {
        self.etag.clear();
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::string::String) {
        self.etag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::string::String {
        &mut self.etag
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.etag, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeletePolicyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.etag)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.etag);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.etag.is_empty() {
            os.write_string(2, &self.etag)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeletePolicyRequest {
        DeletePolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeletePolicyRequest| { &m.name },
                |m: &mut DeletePolicyRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "etag",
                |m: &DeletePolicyRequest| { &m.etag },
                |m: &mut DeletePolicyRequest| { &mut m.etag },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeletePolicyRequest>(
                "DeletePolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeletePolicyRequest {
        static instance: ::protobuf::rt::LazyV2<DeletePolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeletePolicyRequest::new)
    }
}

impl ::protobuf::Clear for DeletePolicyRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.etag.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeletePolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeletePolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateCustomConstraintRequest {
    // message fields
    pub parent: ::std::string::String,
    pub custom_constraint: ::protobuf::SingularPtrField<super::constraint::CustomConstraint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateCustomConstraintRequest {
    fn default() -> &'a CreateCustomConstraintRequest {
        <CreateCustomConstraintRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateCustomConstraintRequest {
    pub fn new() -> CreateCustomConstraintRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // .google.cloud.orgpolicy.v2.CustomConstraint custom_constraint = 2;


    pub fn get_custom_constraint(&self) -> &super::constraint::CustomConstraint {
        self.custom_constraint.as_ref().unwrap_or_else(|| <super::constraint::CustomConstraint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_custom_constraint(&mut self) {
        self.custom_constraint.clear();
    }

    pub fn has_custom_constraint(&self) -> bool {
        self.custom_constraint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_constraint(&mut self, v: super::constraint::CustomConstraint) {
        self.custom_constraint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom_constraint(&mut self) -> &mut super::constraint::CustomConstraint {
        if self.custom_constraint.is_none() {
            self.custom_constraint.set_default();
        }
        self.custom_constraint.as_mut().unwrap()
    }

    // Take field
    pub fn take_custom_constraint(&mut self) -> super::constraint::CustomConstraint {
        self.custom_constraint.take().unwrap_or_else(|| super::constraint::CustomConstraint::new())
    }
}

impl ::protobuf::Message for CreateCustomConstraintRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.custom_constraint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.custom_constraint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if let Some(ref v) = self.custom_constraint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if let Some(ref v) = self.custom_constraint.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateCustomConstraintRequest {
        CreateCustomConstraintRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateCustomConstraintRequest| { &m.parent },
                |m: &mut CreateCustomConstraintRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::constraint::CustomConstraint>>(
                "custom_constraint",
                |m: &CreateCustomConstraintRequest| { &m.custom_constraint },
                |m: &mut CreateCustomConstraintRequest| { &mut m.custom_constraint },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateCustomConstraintRequest>(
                "CreateCustomConstraintRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateCustomConstraintRequest {
        static instance: ::protobuf::rt::LazyV2<CreateCustomConstraintRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateCustomConstraintRequest::new)
    }
}

impl ::protobuf::Clear for CreateCustomConstraintRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.custom_constraint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateCustomConstraintRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateCustomConstraintRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetCustomConstraintRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetCustomConstraintRequest {
    fn default() -> &'a GetCustomConstraintRequest {
        <GetCustomConstraintRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCustomConstraintRequest {
    pub fn new() -> GetCustomConstraintRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetCustomConstraintRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetCustomConstraintRequest {
        GetCustomConstraintRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetCustomConstraintRequest| { &m.name },
                |m: &mut GetCustomConstraintRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetCustomConstraintRequest>(
                "GetCustomConstraintRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetCustomConstraintRequest {
        static instance: ::protobuf::rt::LazyV2<GetCustomConstraintRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetCustomConstraintRequest::new)
    }
}

impl ::protobuf::Clear for GetCustomConstraintRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetCustomConstraintRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCustomConstraintRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListCustomConstraintsRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListCustomConstraintsRequest {
    fn default() -> &'a ListCustomConstraintsRequest {
        <ListCustomConstraintsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListCustomConstraintsRequest {
    pub fn new() -> ListCustomConstraintsRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListCustomConstraintsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListCustomConstraintsRequest {
        ListCustomConstraintsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListCustomConstraintsRequest| { &m.parent },
                |m: &mut ListCustomConstraintsRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListCustomConstraintsRequest| { &m.page_size },
                |m: &mut ListCustomConstraintsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListCustomConstraintsRequest| { &m.page_token },
                |m: &mut ListCustomConstraintsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListCustomConstraintsRequest>(
                "ListCustomConstraintsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListCustomConstraintsRequest {
        static instance: ::protobuf::rt::LazyV2<ListCustomConstraintsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListCustomConstraintsRequest::new)
    }
}

impl ::protobuf::Clear for ListCustomConstraintsRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListCustomConstraintsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListCustomConstraintsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListCustomConstraintsResponse {
    // message fields
    pub custom_constraints: ::protobuf::RepeatedField<super::constraint::CustomConstraint>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListCustomConstraintsResponse {
    fn default() -> &'a ListCustomConstraintsResponse {
        <ListCustomConstraintsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListCustomConstraintsResponse {
    pub fn new() -> ListCustomConstraintsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.cloud.orgpolicy.v2.CustomConstraint custom_constraints = 1;


    pub fn get_custom_constraints(&self) -> &[super::constraint::CustomConstraint] {
        &self.custom_constraints
    }
    pub fn clear_custom_constraints(&mut self) {
        self.custom_constraints.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_constraints(&mut self, v: ::protobuf::RepeatedField<super::constraint::CustomConstraint>) {
        self.custom_constraints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_constraints(&mut self) -> &mut ::protobuf::RepeatedField<super::constraint::CustomConstraint> {
        &mut self.custom_constraints
    }

    // Take field
    pub fn take_custom_constraints(&mut self) -> ::protobuf::RepeatedField<super::constraint::CustomConstraint> {
        ::std::mem::replace(&mut self.custom_constraints, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListCustomConstraintsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.custom_constraints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_constraints)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.custom_constraints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.custom_constraints {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListCustomConstraintsResponse {
        ListCustomConstraintsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::constraint::CustomConstraint>>(
                "custom_constraints",
                |m: &ListCustomConstraintsResponse| { &m.custom_constraints },
                |m: &mut ListCustomConstraintsResponse| { &mut m.custom_constraints },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListCustomConstraintsResponse| { &m.next_page_token },
                |m: &mut ListCustomConstraintsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListCustomConstraintsResponse>(
                "ListCustomConstraintsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListCustomConstraintsResponse {
        static instance: ::protobuf::rt::LazyV2<ListCustomConstraintsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListCustomConstraintsResponse::new)
    }
}

impl ::protobuf::Clear for ListCustomConstraintsResponse {
    fn clear(&mut self) {
        self.custom_constraints.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListCustomConstraintsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListCustomConstraintsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateCustomConstraintRequest {
    // message fields
    pub custom_constraint: ::protobuf::SingularPtrField<super::constraint::CustomConstraint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateCustomConstraintRequest {
    fn default() -> &'a UpdateCustomConstraintRequest {
        <UpdateCustomConstraintRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateCustomConstraintRequest {
    pub fn new() -> UpdateCustomConstraintRequest {
        ::std::default::Default::default()
    }

    // .google.cloud.orgpolicy.v2.CustomConstraint custom_constraint = 1;


    pub fn get_custom_constraint(&self) -> &super::constraint::CustomConstraint {
        self.custom_constraint.as_ref().unwrap_or_else(|| <super::constraint::CustomConstraint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_custom_constraint(&mut self) {
        self.custom_constraint.clear();
    }

    pub fn has_custom_constraint(&self) -> bool {
        self.custom_constraint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_constraint(&mut self, v: super::constraint::CustomConstraint) {
        self.custom_constraint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_custom_constraint(&mut self) -> &mut super::constraint::CustomConstraint {
        if self.custom_constraint.is_none() {
            self.custom_constraint.set_default();
        }
        self.custom_constraint.as_mut().unwrap()
    }

    // Take field
    pub fn take_custom_constraint(&mut self) -> super::constraint::CustomConstraint {
        self.custom_constraint.take().unwrap_or_else(|| super::constraint::CustomConstraint::new())
    }
}

impl ::protobuf::Message for UpdateCustomConstraintRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.custom_constraint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.custom_constraint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.custom_constraint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.custom_constraint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateCustomConstraintRequest {
        UpdateCustomConstraintRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::constraint::CustomConstraint>>(
                "custom_constraint",
                |m: &UpdateCustomConstraintRequest| { &m.custom_constraint },
                |m: &mut UpdateCustomConstraintRequest| { &mut m.custom_constraint },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateCustomConstraintRequest>(
                "UpdateCustomConstraintRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateCustomConstraintRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateCustomConstraintRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateCustomConstraintRequest::new)
    }
}

impl ::protobuf::Clear for UpdateCustomConstraintRequest {
    fn clear(&mut self) {
        self.custom_constraint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateCustomConstraintRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateCustomConstraintRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCustomConstraintRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCustomConstraintRequest {
    fn default() -> &'a DeleteCustomConstraintRequest {
        <DeleteCustomConstraintRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCustomConstraintRequest {
    pub fn new() -> DeleteCustomConstraintRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteCustomConstraintRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCustomConstraintRequest {
        DeleteCustomConstraintRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteCustomConstraintRequest| { &m.name },
                |m: &mut DeleteCustomConstraintRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCustomConstraintRequest>(
                "DeleteCustomConstraintRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCustomConstraintRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteCustomConstraintRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCustomConstraintRequest::new)
    }
}

impl ::protobuf::Clear for DeleteCustomConstraintRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCustomConstraintRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCustomConstraintRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)google/cloud/orgpolicy/v2/orgpolicy.proto\x12\x19google.cloud.orgpoli\
    cy.v2\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\
    \x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\
    \x1a*google/cloud/orgpolicy/v2/constraint.proto\x1a\x1bgoogle/protobuf/e\
    mpty.proto\x1a\x20google/protobuf/field_mask.proto\x1a\x1fgoogle/protobu\
    f/timestamp.proto\x1a\x16google/type/expr.proto\"\xb2\x03\n\x06Policy\
    \x12\x17\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x03\xe0A\x05\x129\n\x04s\
    pec\x18\x02\x20\x01(\x0b2%.google.cloud.orgpolicy.v2.PolicySpecR\x04spec\
    \x12P\n\talternate\x18\x03\x20\x01(\x0b2..google.cloud.orgpolicy.v2.Alte\
    rnatePolicySpecR\talternateB\x02\x18\x01\x12G\n\x0cdry_run_spec\x18\x04\
    \x20\x01(\x0b2%.google.cloud.orgpolicy.v2.PolicySpecR\ndryRunSpec\x12\
    \x17\n\x04etag\x18\x05\x20\x01(\tR\x04etagB\x03\xe0A\x01:\x9f\x01\xeaA\
    \x9b\x01\n\x1forgpolicy.googleapis.com/Policy\x12$projects/{project}/pol\
    icies/{policy}\x12\"folders/{folder}/policies/{policy}\x12.organizations\
    /{organization}/policies/{policy}\"h\n\x13AlternatePolicySpec\x12\x16\n\
    \x06launch\x18\x01\x20\x01(\tR\x06launch\x129\n\x04spec\x18\x02\x20\x01(\
    \x0b2%.google.cloud.orgpolicy.v2.PolicySpecR\x04spec\"\xc5\x04\n\nPolicy\
    Spec\x12\x12\n\x04etag\x18\x01\x20\x01(\tR\x04etag\x12@\n\x0bupdate_time\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nupdateTimeB\x03\
    \xe0A\x03\x12F\n\x05rules\x18\x03\x20\x03(\x0b20.google.cloud.orgpolicy.\
    v2.PolicySpec.PolicyRuleR\x05rules\x12.\n\x13inherit_from_parent\x18\x04\
    \x20\x01(\x08R\x11inheritFromParent\x12\x14\n\x05reset\x18\x05\x20\x01(\
    \x08R\x05reset\x1a\xd2\x02\n\nPolicyRule\x12W\n\x06values\x18\x01\x20\
    \x01(\x0b2=.google.cloud.orgpolicy.v2.PolicySpec.PolicyRule.StringValues\
    H\0R\x06values\x12\x1d\n\tallow_all\x18\x02\x20\x01(\x08H\0R\x08allowAll\
    \x12\x1b\n\x08deny_all\x18\x03\x20\x01(\x08H\0R\x07denyAll\x12\x1a\n\x07\
    enforce\x18\x04\x20\x01(\x08H\0R\x07enforce\x12/\n\tcondition\x18\x05\
    \x20\x01(\x0b2\x11.google.type.ExprR\tcondition\x1aZ\n\x0cStringValues\
    \x12%\n\x0eallowed_values\x18\x01\x20\x03(\tR\rallowedValues\x12#\n\rden\
    ied_values\x18\x02\x20\x03(\tR\x0cdeniedValuesB\x06\n\x04kind\"\x99\x01\
    \n\x16ListConstraintsRequest\x12C\n\x06parent\x18\x01\x20\x01(\tR\x06par\
    entB+\xfaA%\x12#orgpolicy.googleapis.com/Constraint\xe0A\x02\x12\x1b\n\t\
    page_size\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\
    \x03\x20\x01(\tR\tpageToken\"\x8a\x01\n\x17ListConstraintsResponse\x12G\
    \n\x0bconstraints\x18\x01\x20\x03(\x0b2%.google.cloud.orgpolicy.v2.Const\
    raintR\x0bconstraints\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnex\
    tPageToken\"\x92\x01\n\x13ListPoliciesRequest\x12?\n\x06parent\x18\x01\
    \x20\x01(\tR\x06parentB'\xfaA!\x12\x1forgpolicy.googleapis.com/Policy\
    \xe0A\x02\x12\x1b\n\tpage_size\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\
    \n\npage_token\x18\x03\x20\x01(\tR\tpageToken\"}\n\x14ListPoliciesRespon\
    se\x12=\n\x08policies\x18\x01\x20\x03(\x0b2!.google.cloud.orgpolicy.v2.P\
    olicyR\x08policies\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPa\
    geToken\"O\n\x10GetPolicyRequest\x12;\n\x04name\x18\x01\x20\x01(\tR\x04n\
    ameB'\xfaA!\n\x1forgpolicy.googleapis.com/Policy\xe0A\x02\"X\n\x19GetEff\
    ectivePolicyRequest\x12;\n\x04name\x18\x01\x20\x01(\tR\x04nameB'\xfaA!\n\
    \x1forgpolicy.googleapis.com/Policy\xe0A\x02\"\x96\x01\n\x13CreatePolicy\
    Request\x12?\n\x06parent\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\x12\x1for\
    gpolicy.googleapis.com/Policy\xe0A\x02\x12>\n\x06policy\x18\x03\x20\x01(\
    \x0b2!.google.cloud.orgpolicy.v2.PolicyR\x06policyB\x03\xe0A\x02\"\x92\
    \x01\n\x13UpdatePolicyRequest\x12>\n\x06policy\x18\x01\x20\x01(\x0b2!.go\
    ogle.cloud.orgpolicy.v2.PolicyR\x06policyB\x03\xe0A\x02\x12;\n\x0bupdate\
    _mask\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMask\"\
    k\n\x13DeletePolicyRequest\x12;\n\x04name\x18\x01\x20\x01(\tR\x04nameB'\
    \xfaA!\n\x1forgpolicy.googleapis.com/Policy\xe0A\x02\x12\x17\n\x04etag\
    \x18\x02\x20\x01(\tR\x04etagB\x03\xe0A\x01\"\xc9\x01\n\x1dCreateCustomCo\
    nstraintRequest\x12I\n\x06parent\x18\x01\x20\x01(\tR\x06parentB1\xfaA+\
    \x12)orgpolicy.googleapis.com/CustomConstraint\xe0A\x02\x12]\n\x11custom\
    _constraint\x18\x02\x20\x01(\x0b2+.google.cloud.orgpolicy.v2.CustomConst\
    raintR\x10customConstraintB\x03\xe0A\x02\"c\n\x1aGetCustomConstraintRequ\
    est\x12E\n\x04name\x18\x01\x20\x01(\tR\x04nameB1\xfaA+\n)orgpolicy.googl\
    eapis.com/CustomConstraint\xe0A\x02\"\xa5\x01\n\x1cListCustomConstraints\
    Request\x12I\n\x06parent\x18\x01\x20\x01(\tR\x06parentB1\xfaA+\x12)orgpo\
    licy.googleapis.com/CustomConstraint\xe0A\x02\x12\x1b\n\tpage_size\x18\
    \x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\x03\x20\x01(\tR\
    \tpageToken\"\xa3\x01\n\x1dListCustomConstraintsResponse\x12Z\n\x12custo\
    m_constraints\x18\x01\x20\x03(\x0b2+.google.cloud.orgpolicy.v2.CustomCon\
    straintR\x11customConstraints\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\
    \tR\rnextPageToken\"~\n\x1dUpdateCustomConstraintRequest\x12]\n\x11custo\
    m_constraint\x18\x01\x20\x01(\x0b2+.google.cloud.orgpolicy.v2.CustomCons\
    traintR\x10customConstraintB\x03\xe0A\x02\"f\n\x1dDeleteCustomConstraint\
    Request\x12E\n\x04name\x18\x01\x20\x01(\tR\x04nameB1\xfaA+\n)orgpolicy.g\
    oogleapis.com/CustomConstraint\xe0A\x022\xcd\x16\n\tOrgPolicy\x12\x81\
    \x02\n\x0fListConstraints\x121.google.cloud.orgpolicy.v2.ListConstraints\
    Request\x1a2.google.cloud.orgpolicy.v2.ListConstraintsResponse\"\x86\x01\
    \x82\xd3\xe4\x93\x02w\x12#/v2/{parent=projects/*}/constraintsZ$\x12\"/v2\
    /{parent=folders/*}/constraintsZ*\x12(/v2/{parent=organizations/*}/const\
    raints\xdaA\x06parent\x12\xee\x01\n\x0cListPolicies\x12..google.cloud.or\
    gpolicy.v2.ListPoliciesRequest\x1a/.google.cloud.orgpolicy.v2.ListPolici\
    esResponse\"}\x82\xd3\xe4\x93\x02n\x12\x20/v2/{parent=projects/*}/polici\
    esZ!\x12\x1f/v2/{parent=folders/*}/policiesZ'\x12%/v2/{parent=organizati\
    ons/*}/policies\xdaA\x06parent\x12\xd8\x01\n\tGetPolicy\x12+.google.clou\
    d.orgpolicy.v2.GetPolicyRequest\x1a!.google.cloud.orgpolicy.v2.Policy\"{\
    \x82\xd3\xe4\x93\x02n\x12\x20/v2/{name=projects/*/policies/*}Z!\x12\x1f/\
    v2/{name=folders/*/policies/*}Z'\x12%/v2/{name=organizations/*/policies/\
    *}\xdaA\x04name\x12\xa5\x02\n\x12GetEffectivePolicy\x124.google.cloud.or\
    gpolicy.v2.GetEffectivePolicyRequest\x1a!.google.cloud.orgpolicy.v2.Poli\
    cy\"\xb5\x01\x82\xd3\xe4\x93\x02\xa7\x01\x123/v2/{name=projects/*/polici\
    es/*}:getEffectivePolicyZ4\x122/v2/{name=folders/*/policies/*}:getEffect\
    ivePolicyZ:\x128/v2/{name=organizations/*/policies/*}:getEffectivePolicy\
    \xdaA\x04name\x12\x81\x02\n\x0cCreatePolicy\x12..google.cloud.orgpolicy.\
    v2.CreatePolicyRequest\x1a!.google.cloud.orgpolicy.v2.Policy\"\x9d\x01\
    \x82\xd3\xe4\x93\x02\x86\x01\"\x20/v2/{parent=projects/*}/policies:\x06p\
    olicyZ)\"\x1f/v2/{parent=folders/*}/policies:\x06policyZ/\"%/v2/{parent=\
    organizations/*}/policies:\x06policy\xdaA\rparent,policy\x12\x8f\x02\n\
    \x0cUpdatePolicy\x12..google.cloud.orgpolicy.v2.UpdatePolicyRequest\x1a!\
    .google.cloud.orgpolicy.v2.Policy\"\xab\x01\x82\xd3\xe4\x93\x02\x9b\x012\
    '/v2/{policy.name=projects/*/policies/*}:\x06policyZ02&/v2/{policy.name=\
    folders/*/policies/*}:\x06policyZ62,/v2/{policy.name=organizations/*/pol\
    icies/*}:\x06policy\xdaA\x06policy\x12\xd3\x01\n\x0cDeletePolicy\x12..go\
    ogle.cloud.orgpolicy.v2.DeletePolicyRequest\x1a\x16.google.protobuf.Empt\
    y\"{\x82\xd3\xe4\x93\x02n*\x20/v2/{name=projects/*/policies/*}Z!*\x1f/v2\
    /{name=folders/*/policies/*}Z'*%/v2/{name=organizations/*/policies/*}\
    \xdaA\x04name\x12\xe5\x01\n\x16CreateCustomConstraint\x128.google.cloud.\
    orgpolicy.v2.CreateCustomConstraintRequest\x1a+.google.cloud.orgpolicy.v\
    2.CustomConstraint\"d\x82\xd3\xe4\x93\x02C\"./v2/{parent=organizations/*\
    }/customConstraints:\x11custom_constraint\xdaA\x18parent,custom_constrai\
    nt\x12\xf0\x01\n\x16UpdateCustomConstraint\x128.google.cloud.orgpolicy.v\
    2.UpdateCustomConstraintRequest\x1a+.google.cloud.orgpolicy.v2.CustomCon\
    straint\"o\x82\xd3\xe4\x93\x02U2@/v2/{custom_constraint.name=organizatio\
    ns/*/customConstraints/*}:\x11custom_constraint\xdaA\x11custom_constrain\
    t\x12\xb8\x01\n\x13GetCustomConstraint\x125.google.cloud.orgpolicy.v2.Ge\
    tCustomConstraintRequest\x1a+.google.cloud.orgpolicy.v2.CustomConstraint\
    \"=\x82\xd3\xe4\x93\x020\x12./v2/{name=organizations/*/customConstraints\
    /*}\xdaA\x04name\x12\xcb\x01\n\x15ListCustomConstraints\x127.google.clou\
    d.orgpolicy.v2.ListCustomConstraintsRequest\x1a8.google.cloud.orgpolicy.\
    v2.ListCustomConstraintsResponse\"?\x82\xd3\xe4\x93\x020\x12./v2/{parent\
    =organizations/*}/customConstraints\xdaA\x06parent\x12\xa9\x01\n\x16Dele\
    teCustomConstraint\x128.google.cloud.orgpolicy.v2.DeleteCustomConstraint\
    Request\x1a\x16.google.protobuf.Empty\"=\x82\xd3\xe4\x93\x020*./v2/{name\
    =organizations/*/customConstraints/*}\xdaA\x04name\x1aL\xd2A.https://www\
    .googleapis.com/auth/cloud-platform\xcaA\x18orgpolicy.googleapis.comB\
    \xc5\x01\n\x1dcom.google.cloud.orgpolicy.v2B\x0eOrgPolicyProtoP\x01Z;clo\
    ud.google.com/go/orgpolicy/apiv2/orgpolicypb;orgpolicypb\xaa\x02\x19Goog\
    le.Cloud.OrgPolicy.V2\xca\x02\x19Google\\Cloud\\OrgPolicy\\V2\xea\x02\
    \x1cGoogle::Cloud::OrgPolicy::V2J\xc0\xa6\x01\n\x07\x12\x05\x0e\0\x89\
    \x05\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x20\
    2023\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20Licen\
    se,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\
    \x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20\
    License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\
    \x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\
    \n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\"\n\
    \t\n\x02\x03\0\x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\x03\x13\0!\n\t\n\x02\
    \x03\x02\x12\x03\x14\0)\n\t\n\x02\x03\x03\x12\x03\x15\0#\n\t\n\x02\x03\
    \x04\x12\x03\x16\04\n\t\n\x02\x03\x05\x12\x03\x17\0%\n\t\n\x02\x03\x06\
    \x12\x03\x18\0*\n\t\n\x02\x03\x07\x12\x03\x19\0)\n\t\n\x02\x03\x08\x12\
    \x03\x1a\0\x20\n\x08\n\x01\x08\x12\x03\x1c\06\n\t\n\x02\x08%\x12\x03\x1c\
    \06\n\x08\n\x01\x08\x12\x03\x1d\0R\n\t\n\x02\x08\x0b\x12\x03\x1d\0R\n\
    \x08\n\x01\x08\x12\x03\x1e\0\"\n\t\n\x02\x08\n\x12\x03\x1e\0\"\n\x08\n\
    \x01\x08\x12\x03\x1f\0/\n\t\n\x02\x08\x08\x12\x03\x1f\0/\n\x08\n\x01\x08\
    \x12\x03\x20\06\n\t\n\x02\x08\x01\x12\x03\x20\06\n\x08\n\x01\x08\x12\x03\
    !\06\n\t\n\x02\x08)\x12\x03!\06\n\x08\n\x01\x08\x12\x03\"\05\n\t\n\x02\
    \x08-\x12\x03\"\05\n\xd0\x07\n\x02\x06\0\x12\x058\0\xef\x01\x01\x1a\xc2\
    \x07\x20An\x20interface\x20for\x20managing\x20organization\x20policies.\
    \n\n\x20The\x20Organization\x20Policy\x20Service\x20provides\x20a\x20sim\
    ple\x20mechanism\x20for\n\x20organizations\x20to\x20restrict\x20the\x20a\
    llowed\x20configurations\x20across\x20their\x20entire\n\x20resource\x20h\
    ierarchy.\n\n\x20You\x20can\x20use\x20a\x20policy\x20to\x20configure\x20\
    restrictions\x20on\x20resources.\x20For\n\x20example,\x20you\x20can\x20e\
    nforce\x20a\x20policy\x20that\x20restricts\x20which\x20Google\n\x20Cloud\
    \x20APIs\x20can\x20be\x20activated\x20in\x20a\x20certain\x20part\x20of\
    \x20your\x20resource\n\x20hierarchy,\x20or\x20prevents\x20serial\x20port\
    \x20access\x20to\x20VM\x20instances\x20in\x20a\n\x20particular\x20folder\
    .\n\n\x20Policies\x20are\x20inherited\x20down\x20through\x20the\x20resou\
    rce\x20hierarchy.\x20A\x20policy\n\x20applied\x20to\x20a\x20parent\x20re\
    source\x20automatically\x20applies\x20to\x20all\x20its\x20child\x20resou\
    rces\n\x20unless\x20overridden\x20with\x20a\x20policy\x20lower\x20in\x20\
    the\x20hierarchy.\n\n\x20A\x20constraint\x20defines\x20an\x20aspect\x20o\
    f\x20a\x20resource's\x20configuration\x20that\x20can\x20be\n\x20controll\
    ed\x20by\x20an\x20organization's\x20policy\x20administrator.\x20Policies\
    \x20are\x20a\n\x20collection\x20of\x20constraints\x20that\x20defines\x20\
    their\x20allowable\x20configuration\x20on\x20a\n\x20particular\x20resour\
    ce\x20and\x20its\x20child\x20resources.\n\n\n\n\x03\x06\0\x01\x12\x038\
    \x08\x11\n\n\n\x03\x06\0\x03\x12\x039\x02@\n\x0c\n\x05\x06\0\x03\x99\x08\
    \x12\x039\x02@\n\x0b\n\x03\x06\0\x03\x12\x04:\x02;7\n\r\n\x05\x06\0\x03\
    \x9a\x08\x12\x04:\x02;7\nR\n\x04\x06\0\x02\0\x12\x04>\x02F\x03\x1aD\x20L\
    ists\x20constraints\x20that\x20could\x20be\x20applied\x20on\x20the\x20sp\
    ecified\x20resource.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03>\x06\x15\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03>\x16,\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03?\x0f&\n\r\n\x05\x06\0\x02\0\x04\x12\x04@\x04D\x06\n\x11\n\t\x06\0\
    \x02\0\x04\xb0\xca\xbc\"\x12\x04@\x04D\x06\n\x0c\n\x05\x06\0\x02\0\x04\
    \x12\x03E\x044\n\x0f\n\x08\x06\0\x02\0\x04\x9b\x08\0\x12\x03E\x044\nR\n\
    \x04\x06\0\x02\x01\x12\x04I\x02P\x03\x1aD\x20Retrieves\x20all\x20of\x20t\
    he\x20policies\x20that\x20exist\x20on\x20a\x20particular\x20resource.\n\
    \n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03I\x06\x12\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x03I\x13&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03I1E\n\r\n\
    \x05\x06\0\x02\x01\x04\x12\x04J\x04N\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\
    \xca\xbc\"\x12\x04J\x04N\x06\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03O\x044\
    \n\x0f\n\x08\x06\0\x02\x01\x04\x9b\x08\0\x12\x03O\x044\n\xcf\x01\n\x04\
    \x06\0\x02\x02\x12\x04W\x02^\x03\x1a\xc0\x01\x20Gets\x20a\x20policy\x20o\
    n\x20a\x20resource.\n\n\x20If\x20no\x20policy\x20is\x20set\x20on\x20the\
    \x20resource,\x20`NOT_FOUND`\x20is\x20returned.\x20The\n\x20`etag`\x20va\
    lue\x20can\x20be\x20used\x20with\x20`UpdatePolicy()`\x20to\x20update\x20\
    a\n\x20policy\x20during\x20read-modify-write.\n\n\x0c\n\x05\x06\0\x02\
    \x02\x01\x12\x03W\x06\x0f\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03W\x10\x20\
    \n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03W+1\n\r\n\x05\x06\0\x02\x02\x04\
    \x12\x04X\x04\\\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04X\
    \x04\\\x06\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03]\x042\n\x0f\n\x08\x06\0\
    \x02\x02\x04\x9b\x08\0\x12\x03]\x042\n\xf1\x02\n\x04\x06\0\x02\x03\x12\
    \x04f\x02q\x03\x1a\xe2\x02\x20Gets\x20the\x20effective\x20policy\x20on\
    \x20a\x20resource.\x20This\x20is\x20the\x20result\x20of\x20merging\n\x20\
    policies\x20in\x20the\x20resource\x20hierarchy\x20and\x20evaluating\x20c\
    onditions.\x20The\n\x20returned\x20policy\x20will\x20not\x20have\x20an\
    \x20`etag`\x20or\x20`condition`\x20set\x20because\x20it\x20is\n\x20an\
    \x20evaluated\x20policy\x20across\x20multiple\x20resources.\n\x20Subtree\
    s\x20of\x20Resource\x20Manager\x20resource\x20hierarchy\x20with\x20'unde\
    r:'\x20prefix\x20will\n\x20not\x20be\x20expanded.\n\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03f\x06\x18\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03f\x19\
    2\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03f=C\n\r\n\x05\x06\0\x02\x03\x04\
    \x12\x04g\x04o\x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04g\
    \x04o\x06\n\x0c\n\x05\x06\0\x02\x03\x04\x12\x03p\x042\n\x0f\n\x08\x06\0\
    \x02\x03\x04\x9b\x08\0\x12\x03p\x042\n\x8e\x02\n\x04\x06\0\x02\x04\x12\
    \x05y\x02\x87\x01\x03\x1a\xfe\x01\x20Creates\x20a\x20policy.\n\n\x20Retu\
    rns\x20a\x20`google.rpc.Status`\x20with\x20`google.rpc.Code.NOT_FOUND`\
    \x20if\x20the\n\x20constraint\x20does\x20not\x20exist.\n\x20Returns\x20a\
    \x20`google.rpc.Status`\x20with\x20`google.rpc.Code.ALREADY_EXISTS`\x20i\
    f\x20the\n\x20policy\x20already\x20exists\x20on\x20the\x20given\x20Googl\
    e\x20Cloud\x20resource.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03y\x06\x12\
    \n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03y\x13&\n\x0c\n\x05\x06\0\x02\x04\
    \x03\x12\x03y17\n\x0e\n\x05\x06\0\x02\x04\x04\x12\x05z\x04\x85\x01\x06\n\
    \x12\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x05z\x04\x85\x01\x06\n\r\n\
    \x05\x06\0\x02\x04\x04\x12\x04\x86\x01\x04;\n\x10\n\x08\x06\0\x02\x04\
    \x04\x9b\x08\0\x12\x04\x86\x01\x04;\n\xf1\x02\n\x04\x06\0\x02\x05\x12\
    \x06\x92\x01\x02\xa0\x01\x03\x1a\xe0\x02\x20Updates\x20a\x20policy.\n\n\
    \x20Returns\x20a\x20`google.rpc.Status`\x20with\x20`google.rpc.Code.NOT_\
    FOUND`\x20if\x20the\n\x20constraint\x20or\x20the\x20policy\x20do\x20not\
    \x20exist.\n\x20Returns\x20a\x20`google.rpc.Status`\x20with\x20`google.r\
    pc.Code.ABORTED`\x20if\x20the\x20etag\n\x20supplied\x20in\x20the\x20requ\
    est\x20does\x20not\x20match\x20the\x20persisted\x20etag\x20of\x20the\x20\
    policy\n\n\x20Note:\x20the\x20supplied\x20policy\x20will\x20perform\x20a\
    \x20full\x20overwrite\x20of\x20all\n\x20fields.\n\n\r\n\x05\x06\0\x02\
    \x05\x01\x12\x04\x92\x01\x06\x12\n\r\n\x05\x06\0\x02\x05\x02\x12\x04\x92\
    \x01\x13&\n\r\n\x05\x06\0\x02\x05\x03\x12\x04\x92\x0117\n\x0f\n\x05\x06\
    \0\x02\x05\x04\x12\x06\x93\x01\x04\x9e\x01\x06\n\x13\n\t\x06\0\x02\x05\
    \x04\xb0\xca\xbc\"\x12\x06\x93\x01\x04\x9e\x01\x06\n\r\n\x05\x06\0\x02\
    \x05\x04\x12\x04\x9f\x01\x044\n\x10\n\x08\x06\0\x02\x05\x04\x9b\x08\0\
    \x12\x04\x9f\x01\x044\n\x9f\x01\n\x04\x06\0\x02\x06\x12\x06\xa6\x01\x02\
    \xad\x01\x03\x1a\x8e\x01\x20Deletes\x20a\x20policy.\n\n\x20Returns\x20a\
    \x20`google.rpc.Status`\x20with\x20`google.rpc.Code.NOT_FOUND`\x20if\x20\
    the\n\x20constraint\x20or\x20organization\x20policy\x20does\x20not\x20ex\
    ist.\n\n\r\n\x05\x06\0\x02\x06\x01\x12\x04\xa6\x01\x06\x12\n\r\n\x05\x06\
    \0\x02\x06\x02\x12\x04\xa6\x01\x13&\n\r\n\x05\x06\0\x02\x06\x03\x12\x04\
    \xa6\x011F\n\x0f\n\x05\x06\0\x02\x06\x04\x12\x06\xa7\x01\x04\xab\x01\x06\
    \n\x13\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x06\xa7\x01\x04\xab\x01\
    \x06\n\r\n\x05\x06\0\x02\x06\x04\x12\x04\xac\x01\x042\n\x10\n\x08\x06\0\
    \x02\x06\x04\x9b\x08\0\x12\x04\xac\x01\x042\n\x97\x02\n\x04\x06\0\x02\
    \x07\x12\x06\xb5\x01\x02\xbc\x01\x03\x1a\x86\x02\x20Creates\x20a\x20cust\
    om\x20constraint.\n\n\x20Returns\x20a\x20`google.rpc.Status`\x20with\x20\
    `google.rpc.Code.NOT_FOUND`\x20if\x20the\n\x20organization\x20does\x20no\
    t\x20exist.\n\x20Returns\x20a\x20`google.rpc.Status`\x20with\x20`google.\
    rpc.Code.ALREADY_EXISTS`\x20if\x20the\n\x20constraint\x20already\x20exis\
    ts\x20on\x20the\x20given\x20organization.\n\n\r\n\x05\x06\0\x02\x07\x01\
    \x12\x04\xb5\x01\x06\x1c\n\r\n\x05\x06\0\x02\x07\x02\x12\x04\xb5\x01\x1d\
    :\n\r\n\x05\x06\0\x02\x07\x03\x12\x04\xb6\x01\x0f\x1f\n\x0f\n\x05\x06\0\
    \x02\x07\x04\x12\x06\xb7\x01\x04\xba\x01\x06\n\x13\n\t\x06\0\x02\x07\x04\
    \xb0\xca\xbc\"\x12\x06\xb7\x01\x04\xba\x01\x06\n\r\n\x05\x06\0\x02\x07\
    \x04\x12\x04\xbb\x01\x04F\n\x10\n\x08\x06\0\x02\x07\x04\x9b\x08\0\x12\
    \x04\xbb\x01\x04F\n\xdd\x01\n\x04\x06\0\x02\x08\x12\x06\xc5\x01\x02\xcc\
    \x01\x03\x1a\xcc\x01\x20Updates\x20a\x20custom\x20constraint.\n\n\x20Ret\
    urns\x20a\x20`google.rpc.Status`\x20with\x20`google.rpc.Code.NOT_FOUND`\
    \x20if\x20the\n\x20constraint\x20does\x20not\x20exist.\n\n\x20Note:\x20t\
    he\x20supplied\x20policy\x20will\x20perform\x20a\x20full\x20overwrite\
    \x20of\x20all\n\x20fields.\n\n\r\n\x05\x06\0\x02\x08\x01\x12\x04\xc5\x01\
    \x06\x1c\n\r\n\x05\x06\0\x02\x08\x02\x12\x04\xc5\x01\x1d:\n\r\n\x05\x06\
    \0\x02\x08\x03\x12\x04\xc6\x01\x0f\x1f\n\x0f\n\x05\x06\0\x02\x08\x04\x12\
    \x06\xc7\x01\x04\xca\x01\x06\n\x13\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\
    \x12\x06\xc7\x01\x04\xca\x01\x06\n\r\n\x05\x06\0\x02\x08\x04\x12\x04\xcb\
    \x01\x04?\n\x10\n\x08\x06\0\x02\x08\x04\x9b\x08\0\x12\x04\xcb\x01\x04?\n\
    \x97\x01\n\x04\x06\0\x02\t\x12\x06\xd2\x01\x02\xd8\x01\x03\x1a\x86\x01\
    \x20Gets\x20a\x20custom\x20constraint.\n\n\x20Returns\x20a\x20`google.rp\
    c.Status`\x20with\x20`google.rpc.Code.NOT_FOUND`\x20if\x20the\n\x20custo\
    m\x20constraint\x20does\x20not\x20exist.\n\n\r\n\x05\x06\0\x02\t\x01\x12\
    \x04\xd2\x01\x06\x19\n\r\n\x05\x06\0\x02\t\x02\x12\x04\xd2\x01\x1a4\n\r\
    \n\x05\x06\0\x02\t\x03\x12\x04\xd3\x01\x0f\x1f\n\x0f\n\x05\x06\0\x02\t\
    \x04\x12\x06\xd4\x01\x04\xd6\x01\x06\n\x13\n\t\x06\0\x02\t\x04\xb0\xca\
    \xbc\"\x12\x06\xd4\x01\x04\xd6\x01\x06\n\r\n\x05\x06\0\x02\t\x04\x12\x04\
    \xd7\x01\x042\n\x10\n\x08\x06\0\x02\t\x04\x9b\x08\0\x12\x04\xd7\x01\x042\
    \nl\n\x04\x06\0\x02\n\x12\x06\xdc\x01\x02\xe2\x01\x03\x1a\\\x20Retrieves\
    \x20all\x20of\x20the\x20custom\x20constraints\x20that\x20exist\x20on\x20\
    a\x20particular\n\x20organization\x20resource.\n\n\r\n\x05\x06\0\x02\n\
    \x01\x12\x04\xdc\x01\x06\x1b\n\r\n\x05\x06\0\x02\n\x02\x12\x04\xdc\x01\
    \x1c8\n\r\n\x05\x06\0\x02\n\x03\x12\x04\xdd\x01\x0f,\n\x0f\n\x05\x06\0\
    \x02\n\x04\x12\x06\xde\x01\x04\xe0\x01\x06\n\x13\n\t\x06\0\x02\n\x04\xb0\
    \xca\xbc\"\x12\x06\xde\x01\x04\xe0\x01\x06\n\r\n\x05\x06\0\x02\n\x04\x12\
    \x04\xe1\x01\x044\n\x10\n\x08\x06\0\x02\n\x04\x9b\x08\0\x12\x04\xe1\x01\
    \x044\n\x93\x01\n\x04\x06\0\x02\x0b\x12\x06\xe8\x01\x02\xee\x01\x03\x1a\
    \x82\x01\x20Deletes\x20a\x20custom\x20constraint.\n\n\x20Returns\x20a\
    \x20`google.rpc.Status`\x20with\x20`google.rpc.Code.NOT_FOUND`\x20if\x20\
    the\n\x20constraint\x20does\x20not\x20exist.\n\n\r\n\x05\x06\0\x02\x0b\
    \x01\x12\x04\xe8\x01\x06\x1c\n\r\n\x05\x06\0\x02\x0b\x02\x12\x04\xe8\x01\
    \x1d:\n\r\n\x05\x06\0\x02\x0b\x03\x12\x04\xe9\x01\x0f$\n\x0f\n\x05\x06\0\
    \x02\x0b\x04\x12\x06\xea\x01\x04\xec\x01\x06\n\x13\n\t\x06\0\x02\x0b\x04\
    \xb0\xca\xbc\"\x12\x06\xea\x01\x04\xec\x01\x06\n\r\n\x05\x06\0\x02\x0b\
    \x04\x12\x04\xed\x01\x042\n\x10\n\x08\x06\0\x02\x0b\x04\x9b\x08\0\x12\
    \x04\xed\x01\x042\n\x82\x01\n\x02\x04\0\x12\x06\xf3\x01\0\x9a\x02\x01\
    \x1at\x20Defines\x20an\x20organization\x20policy\x20which\x20is\x20used\
    \x20to\x20specify\x20constraints\n\x20for\x20configurations\x20of\x20Goo\
    gle\x20Cloud\x20resources.\n\n\x0b\n\x03\x04\0\x01\x12\x04\xf3\x01\x08\
    \x0e\n\r\n\x03\x04\0\x07\x12\x06\xf4\x01\x02\xf9\x01\x04\n\x0f\n\x05\x04\
    \0\x07\x9d\x08\x12\x06\xf4\x01\x02\xf9\x01\x04\n\xdf\x04\n\x04\x04\0\x02\
    \0\x12\x04\x88\x02\x02<\x1a\xd0\x04\x20Immutable.\x20The\x20resource\x20\
    name\x20of\x20the\x20policy.\x20Must\x20be\x20one\x20of\x20the\x20follow\
    ing\n\x20forms,\x20where\x20`constraint_name`\x20is\x20the\x20name\x20of\
    \x20the\x20constraint\x20which\x20this\n\x20policy\x20configures:\n\n\
    \x20*\x20`projects/{project_number}/policies/{constraint_name}`\n\x20*\
    \x20`folders/{folder_id}/policies/{constraint_name}`\n\x20*\x20`organiza\
    tions/{organization_id}/policies/{constraint_name}`\n\n\x20For\x20exampl\
    e,\x20`projects/123/policies/compute.disableSerialPortAccess`.\n\n\x20No\
    te:\x20`projects/{project_id}/policies/{constraint_name}`\x20is\x20also\
    \x20an\n\x20acceptable\x20name\x20for\x20API\x20requests,\x20but\x20resp\
    onses\x20will\x20return\x20the\x20name\x20using\n\x20the\x20equivalent\
    \x20project\x20number.\n\n\r\n\x05\x04\0\x02\0\x05\x12\x04\x88\x02\x02\
    \x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\x88\x02\t\r\n\r\n\x05\x04\0\x02\0\
    \x03\x12\x04\x88\x02\x10\x11\n\r\n\x05\x04\0\x02\0\x08\x12\x04\x88\x02\
    \x12;\n\x10\n\x08\x04\0\x02\0\x08\x9c\x08\0\x12\x04\x88\x02\x13:\n@\n\
    \x04\x04\0\x02\x01\x12\x04\x8b\x02\x02\x16\x1a2\x20Basic\x20information\
    \x20about\x20the\x20Organization\x20Policy.\n\n\r\n\x05\x04\0\x02\x01\
    \x06\x12\x04\x8b\x02\x02\x0c\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\x8b\x02\
    \r\x11\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\x8b\x02\x14\x15\n\x1b\n\x04\
    \x04\0\x02\x02\x12\x04\x8e\x02\x028\x1a\r\x20Deprecated.\n\n\r\n\x05\x04\
    \0\x02\x02\x06\x12\x04\x8e\x02\x02\x15\n\r\n\x05\x04\0\x02\x02\x01\x12\
    \x04\x8e\x02\x16\x1f\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\x8e\x02\"#\n\r\
    \n\x05\x04\0\x02\x02\x08\x12\x04\x8e\x02$7\n\x0e\n\x06\x04\0\x02\x02\x08\
    \x03\x12\x04\x8e\x02%6\n\xa3\x01\n\x04\x04\0\x02\x03\x12\x04\x93\x02\x02\
    \x1e\x1a\x94\x01\x20Dry-run\x20policy.\n\x20Audit-only\x20policy,\x20can\
    \x20be\x20used\x20to\x20monitor\x20how\x20the\x20policy\x20would\x20have\
    \n\x20impacted\x20the\x20existing\x20and\x20future\x20resources\x20if\
    \x20it's\x20enforced.\n\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\x93\x02\x02\
    \x0c\n\r\n\x05\x04\0\x02\x03\x01\x12\x04\x93\x02\r\x19\n\r\n\x05\x04\0\
    \x02\x03\x03\x12\x04\x93\x02\x1c\x1d\n\xad\x02\n\x04\x04\0\x02\x04\x12\
    \x04\x99\x02\x02;\x1a\x9e\x02\x20Optional.\x20An\x20opaque\x20tag\x20ind\
    icating\x20the\x20current\x20state\x20of\x20the\x20policy,\x20used\n\x20\
    for\x20concurrency\x20control.\x20This\x20'etag'\x20is\x20computed\x20by\
    \x20the\x20server\x20based\x20on\x20the\n\x20value\x20of\x20other\x20fie\
    lds,\x20and\x20may\x20be\x20sent\x20on\x20update\x20and\x20delete\x20req\
    uests\x20to\n\x20ensure\x20the\x20client\x20has\x20an\x20up-to-date\x20v\
    alue\x20before\x20proceeding.\n\n\r\n\x05\x04\0\x02\x04\x05\x12\x04\x99\
    \x02\x02\x08\n\r\n\x05\x04\0\x02\x04\x01\x12\x04\x99\x02\t\r\n\r\n\x05\
    \x04\0\x02\x04\x03\x12\x04\x99\x02\x10\x11\n\r\n\x05\x04\0\x02\x04\x08\
    \x12\x04\x99\x02\x12:\n\x10\n\x08\x04\0\x02\x04\x08\x9c\x08\0\x12\x04\
    \x99\x02\x139\n\x96\x01\n\x02\x04\x01\x12\x06\x9e\x02\0\xa6\x02\x01\x1a\
    \x87\x01\x20Similar\x20to\x20PolicySpec\x20but\x20with\x20an\x20extra\
    \x20'launch'\x20field\x20for\x20launch\x20reference.\n\x20The\x20PolicyS\
    pec\x20here\x20is\x20specific\x20for\x20dry-run/darklaunch.\n\n\x0b\n\
    \x03\x04\x01\x01\x12\x04\x9e\x02\x08\x1b\n\x97\x01\n\x04\x04\x01\x02\0\
    \x12\x04\xa2\x02\x02\x14\x1a\x88\x01\x20Reference\x20to\x20the\x20launch\
    \x20that\x20will\x20be\x20used\x20while\x20audit\x20logging\x20and\x20to\
    \n\x20control\x20the\x20launch.\n\x20Should\x20be\x20set\x20only\x20in\
    \x20the\x20alternate\x20policy.\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\
    \xa2\x02\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xa2\x02\t\x0f\n\r\n\
    \x05\x04\x01\x02\0\x03\x12\x04\xa2\x02\x12\x13\nP\n\x04\x04\x01\x02\x01\
    \x12\x04\xa5\x02\x02\x16\x1aB\x20Specify\x20constraint\x20for\x20configu\
    rations\x20of\x20Google\x20Cloud\x20resources.\n\n\r\n\x05\x04\x01\x02\
    \x01\x06\x12\x04\xa5\x02\x02\x0c\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\
    \xa5\x02\r\x11\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xa5\x02\x14\x15\n\
    \x90\x01\n\x02\x04\x02\x12\x06\xaa\x02\0\x94\x03\x01\x1a\x81\x01\x20Defi\
    nes\x20a\x20Google\x20Cloud\x20policy\x20specification\x20which\x20is\
    \x20used\x20to\x20specify\n\x20constraints\x20for\x20configurations\x20o\
    f\x20Google\x20Cloud\x20resources.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xaa\
    \x02\x08\x12\n5\n\x04\x04\x02\x03\0\x12\x06\xac\x02\x02\xe6\x02\x03\x1a%\
    \x20A\x20rule\x20used\x20to\x20express\x20this\x20policy.\n\n\r\n\x05\
    \x04\x02\x03\0\x01\x12\x04\xac\x02\n\x14\n\x9b\x07\n\x06\x04\x02\x03\0\
    \x03\0\x12\x06\xbe\x02\x04\xc4\x02\x05\x1a\x88\x07\x20A\x20message\x20th\
    at\x20holds\x20specific\x20allowed\x20and\x20denied\x20values.\n\x20This\
    \x20message\x20can\x20define\x20specific\x20values\x20and\x20subtrees\
    \x20of\x20the\x20Resource\n\x20Manager\x20resource\x20hierarchy\x20(`Org\
    anizations`,\x20`Folders`,\x20`Projects`)\x20that\n\x20are\x20allowed\
    \x20or\x20denied.\x20This\x20is\x20achieved\x20by\x20using\x20the\x20`un\
    der:`\x20and\n\x20optional\x20`is:`\x20prefixes.\n\x20The\x20`under:`\
    \x20prefix\x20is\x20used\x20to\x20denote\x20resource\x20subtree\x20value\
    s.\n\x20The\x20`is:`\x20prefix\x20is\x20used\x20to\x20denote\x20specific\
    \x20values,\x20and\x20is\x20required\x20only\n\x20if\x20the\x20value\x20\
    contains\x20a\x20\":\".\x20Values\x20prefixed\x20with\x20\"is:\"\x20are\
    \x20treated\x20the\n\x20same\x20as\x20values\x20with\x20no\x20prefix.\n\
    \x20Ancestry\x20subtrees\x20must\x20be\x20in\x20one\x20of\x20the\x20foll\
    owing\x20formats:\n\n\x20-\x20`projects/<project-id>`\x20(for\x20example\
    ,\x20`projects/tokyo-rain-123`)\n\x20-\x20`folders/<folder-id>`\x20(for\
    \x20example,\x20`folders/1234`)\n\x20-\x20`organizations/<organization-i\
    d>`\x20(for\x20example,\x20`organizations/1234`)\n\n\x20The\x20`supports\
    _under`\x20field\x20of\x20the\x20associated\x20`Constraint`\x20\x20defin\
    es\n\x20whether\x20ancestry\x20prefixes\x20can\x20be\x20used.\n\n\x0f\n\
    \x07\x04\x02\x03\0\x03\0\x01\x12\x04\xbe\x02\x0c\x18\n<\n\x08\x04\x02\
    \x03\0\x03\0\x02\0\x12\x04\xc0\x02\x06)\x1a*\x20List\x20of\x20values\x20\
    allowed\x20at\x20this\x20resource.\n\n\x11\n\t\x04\x02\x03\0\x03\0\x02\0\
    \x04\x12\x04\xc0\x02\x06\x0e\n\x11\n\t\x04\x02\x03\0\x03\0\x02\0\x05\x12\
    \x04\xc0\x02\x0f\x15\n\x11\n\t\x04\x02\x03\0\x03\0\x02\0\x01\x12\x04\xc0\
    \x02\x16$\n\x11\n\t\x04\x02\x03\0\x03\0\x02\0\x03\x12\x04\xc0\x02'(\n;\n\
    \x08\x04\x02\x03\0\x03\0\x02\x01\x12\x04\xc3\x02\x06(\x1a)\x20List\x20of\
    \x20values\x20denied\x20at\x20this\x20resource.\n\n\x11\n\t\x04\x02\x03\
    \0\x03\0\x02\x01\x04\x12\x04\xc3\x02\x06\x0e\n\x11\n\t\x04\x02\x03\0\x03\
    \0\x02\x01\x05\x12\x04\xc3\x02\x0f\x15\n\x11\n\t\x04\x02\x03\0\x03\0\x02\
    \x01\x01\x12\x04\xc3\x02\x16#\n\x11\n\t\x04\x02\x03\0\x03\0\x02\x01\x03\
    \x12\x04\xc3\x02&'\n\x10\n\x06\x04\x02\x03\0\x08\0\x12\x06\xc6\x02\x04\
    \xd7\x02\x05\n\x0f\n\x07\x04\x02\x03\0\x08\0\x01\x12\x04\xc6\x02\n\x0e\n\
    \x7f\n\x06\x04\x02\x03\0\x02\0\x12\x04\xc9\x02\x06\x1e\x1ao\x20List\x20o\
    f\x20values\x20to\x20be\x20used\x20for\x20this\x20policy\x20rule.\x20Thi\
    s\x20field\x20can\x20be\x20set\n\x20only\x20in\x20policies\x20for\x20lis\
    t\x20constraints.\n\n\x0f\n\x07\x04\x02\x03\0\x02\0\x06\x12\x04\xc9\x02\
    \x06\x12\n\x0f\n\x07\x04\x02\x03\0\x02\0\x01\x12\x04\xc9\x02\x13\x19\n\
    \x0f\n\x07\x04\x02\x03\0\x02\0\x03\x12\x04\xc9\x02\x1c\x1d\n\x87\x01\n\
    \x06\x04\x02\x03\0\x02\x01\x12\x04\xcd\x02\x06\x19\x1aw\x20Setting\x20th\
    is\x20to\x20true\x20means\x20that\x20all\x20values\x20are\x20allowed.\
    \x20This\x20field\x20can\n\x20be\x20set\x20only\x20in\x20policies\x20for\
    \x20list\x20constraints.\n\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x05\x12\x04\
    \xcd\x02\x06\n\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x01\x12\x04\xcd\x02\x0b\
    \x14\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x04\xcd\x02\x17\x18\n\x86\
    \x01\n\x06\x04\x02\x03\0\x02\x02\x12\x04\xd1\x02\x06\x18\x1av\x20Setting\
    \x20this\x20to\x20true\x20means\x20that\x20all\x20values\x20are\x20denie\
    d.\x20This\x20field\x20can\n\x20be\x20set\x20only\x20in\x20policies\x20f\
    or\x20list\x20constraints.\n\n\x0f\n\x07\x04\x02\x03\0\x02\x02\x05\x12\
    \x04\xd1\x02\x06\n\n\x0f\n\x07\x04\x02\x03\0\x02\x02\x01\x12\x04\xd1\x02\
    \x0b\x13\n\x0f\n\x07\x04\x02\x03\0\x02\x02\x03\x12\x04\xd1\x02\x16\x17\n\
    \xae\x01\n\x06\x04\x02\x03\0\x02\x03\x12\x04\xd6\x02\x06\x17\x1a\x9d\x01\
    \x20If\x20`true`,\x20then\x20the\x20policy\x20is\x20enforced.\x20If\x20`\
    false`,\x20then\x20any\n\x20configuration\x20is\x20acceptable.\n\x20This\
    \x20field\x20can\x20be\x20set\x20only\x20in\x20policies\x20for\x20boolea\
    n\x20constraints.\n\n\x0f\n\x07\x04\x02\x03\0\x02\x03\x05\x12\x04\xd6\
    \x02\x06\n\n\x0f\n\x07\x04\x02\x03\0\x02\x03\x01\x12\x04\xd6\x02\x0b\x12\
    \n\x0f\n\x07\x04\x02\x03\0\x02\x03\x03\x12\x04\xd6\x02\x15\x16\n\xb9\x05\
    \n\x06\x04\x02\x03\0\x02\x04\x12\x04\xe5\x02\x04#\x1a\xa8\x05\x20A\x20co\
    ndition\x20which\x20determines\x20whether\x20this\x20rule\x20is\x20used\
    \n\x20in\x20the\x20evaluation\x20of\x20the\x20policy.\x20When\x20set,\
    \x20the\x20`expression`\x20field\x20in\n\x20the\x20`Expr'\x20must\x20inc\
    lude\x20from\x201\x20to\x2010\x20subexpressions,\x20joined\x20by\x20the\
    \x20\"||\"\n\x20or\x20\"&&\"\x20operators.\x20Each\x20subexpression\x20m\
    ust\x20be\x20of\x20the\x20form\n\x20\"resource.matchTag('<ORG_ID>/tag_ke\
    y_short_name,\n\x20'tag_value_short_name')\".\x20or\x20\"resource.matchT\
    agId('tagKeys/key_id',\n\x20'tagValues/value_id')\".\x20where\x20key_nam\
    e\x20and\x20value_name\x20are\x20the\x20resource\n\x20names\x20for\x20La\
    bel\x20Keys\x20and\x20Values.\x20These\x20names\x20are\x20available\x20f\
    rom\x20the\x20Tag\n\x20Manager\x20Service.\x20An\x20example\x20expressio\
    n\x20is:\n\x20\"resource.matchTag('123456789/environment,\n\x20'prod')\"\
    .\x20or\x20\"resource.matchTagId('tagKeys/123',\n\x20'tagValues/456')\".\
    \n\n\x0f\n\x07\x04\x02\x03\0\x02\x04\x06\x12\x04\xe5\x02\x04\x14\n\x0f\n\
    \x07\x04\x02\x03\0\x02\x04\x01\x12\x04\xe5\x02\x15\x1e\n\x0f\n\x07\x04\
    \x02\x03\0\x02\x04\x03\x12\x04\xe5\x02!\"\n\xcd\x03\n\x04\x04\x02\x02\0\
    \x12\x04\xf3\x02\x02\x12\x1a\xbe\x03\x20An\x20opaque\x20tag\x20indicatin\
    g\x20the\x20current\x20version\x20of\x20the\x20policySpec,\x20used\x20fo\
    r\n\x20concurrency\x20control.\n\n\x20This\x20field\x20is\x20ignored\x20\
    if\x20used\x20in\x20a\x20`CreatePolicy`\x20request.\n\n\x20When\x20the\
    \x20policy\x20is\x20returned\x20from\x20either\x20a\x20`GetPolicy`\x20or\
    \x20a\n\x20`ListPolicies`\x20request,\x20this\x20`etag`\x20indicates\x20\
    the\x20version\x20of\x20the\n\x20current\x20policySpec\x20to\x20use\x20w\
    hen\x20executing\x20a\x20read-modify-write\x20loop.\n\n\x20When\x20the\
    \x20policy\x20is\x20returned\x20from\x20a\x20`GetEffectivePolicy`\x20req\
    uest,\x20the\n\x20`etag`\x20will\x20be\x20unset.\n\n\r\n\x05\x04\x02\x02\
    \0\x05\x12\x04\xf3\x02\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xf3\
    \x02\t\r\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xf3\x02\x10\x11\n\xb0\x01\n\
    \x04\x04\x02\x02\x01\x12\x06\xf8\x02\x02\xf9\x022\x1a\x9f\x01\x20Output\
    \x20only.\x20The\x20time\x20stamp\x20this\x20was\x20previously\x20update\
    d.\x20This\n\x20represents\x20the\x20last\x20time\x20a\x20call\x20to\x20\
    `CreatePolicy`\x20or\x20`UpdatePolicy`\x20was\n\x20made\x20for\x20that\
    \x20policy.\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\xf8\x02\x02\x1b\n\r\
    \n\x05\x04\x02\x02\x01\x01\x12\x04\xf8\x02\x1c'\n\r\n\x05\x04\x02\x02\
    \x01\x03\x12\x04\xf8\x02*+\n\r\n\x05\x04\x02\x02\x01\x08\x12\x04\xf9\x02\
    \x061\n\x10\n\x08\x04\x02\x02\x01\x08\x9c\x08\0\x12\x04\xf9\x02\x070\n\
    \x93\x03\n\x04\x04\x02\x02\x02\x12\x04\x82\x03\x02\x20\x1a\x84\x03\x20In\
    \x20policies\x20for\x20boolean\x20constraints,\x20the\x20following\x20re\
    quirements\x20apply:\n\n\x20\x20\x20-\x20There\x20must\x20be\x20one\x20a\
    nd\x20only\x20one\x20policy\x20rule\x20where\x20condition\x20is\x20unset\
    .\n\x20\x20\x20-\x20Boolean\x20policy\x20rules\x20with\x20conditions\x20\
    must\x20set\x20`enforced`\x20to\x20the\n\x20\x20\x20\x20\x20opposite\x20\
    of\x20the\x20policy\x20rule\x20without\x20a\x20condition.\n\x20\x20\x20-\
    \x20During\x20policy\x20evaluation,\x20policy\x20rules\x20with\x20condit\
    ions\x20that\x20are\n\x20\x20\x20\x20\x20true\x20for\x20a\x20target\x20r\
    esource\x20take\x20precedence.\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\
    \x82\x03\x02\n\n\r\n\x05\x04\x02\x02\x02\x06\x12\x04\x82\x03\x0b\x15\n\r\
    \n\x05\x04\x02\x02\x02\x01\x12\x04\x82\x03\x16\x1b\n\r\n\x05\x04\x02\x02\
    \x02\x03\x12\x04\x82\x03\x1e\x1f\n\x91\x03\n\x04\x04\x02\x02\x03\x12\x04\
    \x8b\x03\x02\x1f\x1a\x82\x03\x20Determines\x20the\x20inheritance\x20beha\
    vior\x20for\x20this\x20policy.\n\n\x20If\x20`inherit_from_parent`\x20is\
    \x20true,\x20policy\x20rules\x20set\x20higher\x20up\x20in\x20the\n\x20hi\
    erarchy\x20(up\x20to\x20the\x20closest\x20root)\x20are\x20inherited\x20a\
    nd\x20present\x20in\x20the\n\x20effective\x20policy.\x20If\x20it\x20is\
    \x20false,\x20then\x20no\x20rules\x20are\x20inherited,\x20and\x20this\n\
    \x20policy\x20becomes\x20the\x20new\x20root\x20for\x20evaluation.\n\x20T\
    his\x20field\x20can\x20be\x20set\x20only\x20for\x20policies\x20which\x20\
    configure\x20list\x20constraints.\n\n\r\n\x05\x04\x02\x02\x03\x05\x12\
    \x04\x8b\x03\x02\x06\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\x8b\x03\x07\
    \x1a\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x8b\x03\x1d\x1e\n\xbe\x02\n\
    \x04\x04\x02\x02\x04\x12\x04\x93\x03\x02\x11\x1a\xaf\x02\x20Ignores\x20p\
    olicies\x20set\x20above\x20this\x20resource\x20and\x20restores\x20the\n\
    \x20`constraint_default`\x20enforcement\x20behavior\x20of\x20the\x20spec\
    ific\x20constraint\x20at\n\x20this\x20resource.\n\x20This\x20field\x20ca\
    n\x20be\x20set\x20in\x20policies\x20for\x20either\x20list\x20or\x20boole\
    an\n\x20constraints.\x20If\x20set,\x20`rules`\x20must\x20be\x20empty\x20\
    and\x20`inherit_from_parent`\n\x20must\x20be\x20set\x20to\x20false.\n\n\
    \r\n\x05\x04\x02\x02\x04\x05\x12\x04\x93\x03\x02\x06\n\r\n\x05\x04\x02\
    \x02\x04\x01\x12\x04\x93\x03\x07\x0c\n\r\n\x05\x04\x02\x02\x04\x03\x12\
    \x04\x93\x03\x0f\x10\nx\n\x02\x04\x03\x12\x06\x98\x03\0\xaf\x03\x01\x1aj\
    \x20The\x20request\x20sent\x20to\x20the\x20[ListConstraints]\n\x20[googl\
    e.cloud.orgpolicy.v2.OrgPolicy.ListConstraints]\x20method.\n\n\x0b\n\x03\
    \x04\x03\x01\x12\x04\x98\x03\x08\x1e\n\xf4\x01\n\x04\x04\x03\x02\0\x12\
    \x06\xa0\x03\x02\xa5\x03\x04\x1a\xe3\x01\x20Required.\x20The\x20Google\
    \x20Cloud\x20resource\x20that\x20parents\x20the\x20constraint.\x20Must\
    \x20be\x20in\n\x20one\x20of\x20the\x20following\x20forms:\n\n\x20*\x20`p\
    rojects/{project_number}`\n\x20*\x20`projects/{project_id}`\n\x20*\x20`f\
    olders/{folder_id}`\n\x20*\x20`organizations/{organization_id}`\n\n\r\n\
    \x05\x04\x03\x02\0\x05\x12\x04\xa0\x03\x02\x08\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\xa0\x03\t\x0f\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xa0\x03\
    \x12\x13\n\x0f\n\x05\x04\x03\x02\0\x08\x12\x06\xa0\x03\x14\xa5\x03\x03\n\
    \x10\n\x08\x04\x03\x02\0\x08\x9c\x08\0\x12\x04\xa1\x03\x04*\n\x11\n\x07\
    \x04\x03\x02\0\x08\x9f\x08\x12\x06\xa2\x03\x04\xa4\x03\x05\n\xae\x01\n\
    \x04\x04\x03\x02\x01\x12\x04\xaa\x03\x02\x16\x1a\x9f\x01\x20Size\x20of\
    \x20the\x20pages\x20to\x20be\x20returned.\x20This\x20is\x20currently\x20\
    unsupported\x20and\x20will\n\x20be\x20ignored.\x20The\x20server\x20may\
    \x20at\x20any\x20point\x20start\x20using\x20this\x20field\x20to\x20limit\
    \n\x20page\x20size.\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xaa\x03\x02\
    \x07\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xaa\x03\x08\x11\n\r\n\x05\x04\
    \x03\x02\x01\x03\x12\x04\xaa\x03\x14\x15\n\xa3\x01\n\x04\x04\x03\x02\x02\
    \x12\x04\xae\x03\x02\x18\x1a\x94\x01\x20Page\x20token\x20used\x20to\x20r\
    etrieve\x20the\x20next\x20page.\x20This\x20is\x20currently\x20unsupporte\
    d\n\x20and\x20will\x20be\x20ignored.\x20The\x20server\x20may\x20at\x20an\
    y\x20point\x20start\x20using\x20this\x20field.\n\n\r\n\x05\x04\x03\x02\
    \x02\x05\x12\x04\xae\x03\x02\x08\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\
    \xae\x03\t\x13\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xae\x03\x16\x17\n\
    \x7f\n\x02\x04\x04\x12\x06\xb3\x03\0\xb9\x03\x01\x1aq\x20The\x20response\
    \x20returned\x20from\x20the\x20[ListConstraints]\n\x20[google.cloud.orgp\
    olicy.v2.OrgPolicy.ListConstraints]\x20method.\n\n\x0b\n\x03\x04\x04\x01\
    \x12\x04\xb3\x03\x08\x1f\nZ\n\x04\x04\x04\x02\0\x12\x04\xb5\x03\x02&\x1a\
    L\x20The\x20collection\x20of\x20constraints\x20that\x20are\x20available\
    \x20on\x20the\x20targeted\x20resource.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\
    \x04\xb5\x03\x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xb5\x03\x0b\x15\n\
    \r\n\x05\x04\x04\x02\0\x01\x12\x04\xb5\x03\x16!\n\r\n\x05\x04\x04\x02\0\
    \x03\x12\x04\xb5\x03$%\nV\n\x04\x04\x04\x02\x01\x12\x04\xb8\x03\x02\x1d\
    \x1aH\x20Page\x20token\x20used\x20to\x20retrieve\x20the\x20next\x20page.\
    \x20This\x20is\x20currently\x20not\x20used.\n\n\r\n\x05\x04\x04\x02\x01\
    \x05\x12\x04\xb8\x03\x02\x08\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xb8\
    \x03\t\x18\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xb8\x03\x1b\x1c\nr\n\
    \x02\x04\x05\x12\x06\xbd\x03\0\xd5\x03\x01\x1ad\x20The\x20request\x20sen\
    t\x20to\x20the\x20[ListPolicies]\n\x20[google.cloud.orgpolicy.v2.OrgPoli\
    cy.ListPolicies]\x20method.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xbd\x03\
    \x08\x1b\n\xb6\x02\n\x04\x04\x05\x02\0\x12\x06\xc6\x03\x02\xcb\x03\x04\
    \x1a\xa5\x02\x20Required.\x20The\x20target\x20Google\x20Cloud\x20resourc\
    e\x20that\x20parents\x20the\x20set\x20of\n\x20constraints\x20and\x20poli\
    cies\x20that\x20will\x20be\x20returned\x20from\x20this\x20call.\x20Must\
    \x20be\x20in\n\x20one\x20of\x20the\x20following\x20forms:\n\n\x20*\x20`p\
    rojects/{project_number}`\n\x20*\x20`projects/{project_id}`\n\x20*\x20`f\
    olders/{folder_id}`\n\x20*\x20`organizations/{organization_id}`\n\n\r\n\
    \x05\x04\x05\x02\0\x05\x12\x04\xc6\x03\x02\x08\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\xc6\x03\t\x0f\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xc6\x03\
    \x12\x13\n\x0f\n\x05\x04\x05\x02\0\x08\x12\x06\xc6\x03\x14\xcb\x03\x03\n\
    \x10\n\x08\x04\x05\x02\0\x08\x9c\x08\0\x12\x04\xc7\x03\x04*\n\x11\n\x07\
    \x04\x05\x02\0\x08\x9f\x08\x12\x06\xc8\x03\x04\xca\x03\x05\n\xae\x01\n\
    \x04\x04\x05\x02\x01\x12\x04\xd0\x03\x02\x16\x1a\x9f\x01\x20Size\x20of\
    \x20the\x20pages\x20to\x20be\x20returned.\x20This\x20is\x20currently\x20\
    unsupported\x20and\x20will\n\x20be\x20ignored.\x20The\x20server\x20may\
    \x20at\x20any\x20point\x20start\x20using\x20this\x20field\x20to\x20limit\
    \n\x20page\x20size.\n\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xd0\x03\x02\
    \x07\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xd0\x03\x08\x11\n\r\n\x05\x04\
    \x05\x02\x01\x03\x12\x04\xd0\x03\x14\x15\n\xa3\x01\n\x04\x04\x05\x02\x02\
    \x12\x04\xd4\x03\x02\x18\x1a\x94\x01\x20Page\x20token\x20used\x20to\x20r\
    etrieve\x20the\x20next\x20page.\x20This\x20is\x20currently\x20unsupporte\
    d\n\x20and\x20will\x20be\x20ignored.\x20The\x20server\x20may\x20at\x20an\
    y\x20point\x20start\x20using\x20this\x20field.\n\n\r\n\x05\x04\x05\x02\
    \x02\x05\x12\x04\xd4\x03\x02\x08\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\
    \xd4\x03\t\x13\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xd4\x03\x16\x17\n\
    \xb4\x01\n\x02\x04\x06\x12\x06\xda\x03\0\xe2\x03\x01\x1a\xa5\x01\x20The\
    \x20response\x20returned\x20from\x20the\x20[ListPolicies]\n\x20[google.c\
    loud.orgpolicy.v2.OrgPolicy.ListPolicies]\x20method.\x20It\x20will\x20be\
    \x20empty\n\x20if\x20no\x20policies\x20are\x20set\x20on\x20the\x20resour\
    ce.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xda\x03\x08\x1c\nb\n\x04\x04\x06\
    \x02\0\x12\x04\xdd\x03\x02\x1f\x1aT\x20All\x20policies\x20that\x20exist\
    \x20on\x20the\x20resource.\x20It\x20will\x20be\x20empty\x20if\x20no\n\
    \x20policies\x20are\x20set.\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04\xdd\
    \x03\x02\n\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\xdd\x03\x0b\x11\n\r\n\x05\
    \x04\x06\x02\0\x01\x12\x04\xdd\x03\x12\x1a\n\r\n\x05\x04\x06\x02\0\x03\
    \x12\x04\xdd\x03\x1d\x1e\n\x97\x01\n\x04\x04\x06\x02\x01\x12\x04\xe1\x03\
    \x02\x1d\x1a\x88\x01\x20Page\x20token\x20used\x20to\x20retrieve\x20the\
    \x20next\x20page.\x20This\x20is\x20currently\x20not\x20used,\x20but\n\
    \x20the\x20server\x20may\x20at\x20any\x20point\x20start\x20supplying\x20\
    a\x20valid\x20token.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xe1\x03\x02\
    \x08\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xe1\x03\t\x18\n\r\n\x05\x04\
    \x06\x02\x01\x03\x12\x04\xe1\x03\x1b\x1c\nl\n\x02\x04\x07\x12\x06\xe6\
    \x03\0\xef\x03\x01\x1a^\x20The\x20request\x20sent\x20to\x20the\x20[GetPo\
    licy]\n\x20[google.cloud.orgpolicy.v2.OrgPolicy.GetPolicy]\x20method.\n\
    \n\x0b\n\x03\x04\x07\x01\x12\x04\xe6\x03\x08\x18\n\x81\x01\n\x04\x04\x07\
    \x02\0\x12\x06\xe9\x03\x02\xee\x03\x04\x1aq\x20Required.\x20Resource\x20\
    name\x20of\x20the\x20policy.\x20See\n\x20[Policy][google.cloud.orgpolicy\
    .v2.Policy]\x20for\x20naming\x20requirements.\n\n\r\n\x05\x04\x07\x02\0\
    \x05\x12\x04\xe9\x03\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xe9\x03\
    \t\r\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xe9\x03\x10\x11\n\x0f\n\x05\x04\
    \x07\x02\0\x08\x12\x06\xe9\x03\x12\xee\x03\x03\n\x10\n\x08\x04\x07\x02\0\
    \x08\x9c\x08\0\x12\x04\xea\x03\x04*\n\x11\n\x07\x04\x07\x02\0\x08\x9f\
    \x08\x12\x06\xeb\x03\x04\xed\x03\x05\n~\n\x02\x04\x08\x12\x06\xf3\x03\0\
    \xfc\x03\x01\x1ap\x20The\x20request\x20sent\x20to\x20the\x20[GetEffectiv\
    ePolicy]\n\x20[google.cloud.orgpolicy.v2.OrgPolicy.GetEffectivePolicy]\
    \x20method.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xf3\x03\x08!\n\x85\x01\n\
    \x04\x04\x08\x02\0\x12\x06\xf6\x03\x02\xfb\x03\x04\x1au\x20Required.\x20\
    The\x20effective\x20policy\x20to\x20compute.\x20See\n\x20[Policy][google\
    .cloud.orgpolicy.v2.Policy]\x20for\x20naming\x20requirements.\n\n\r\n\
    \x05\x04\x08\x02\0\x05\x12\x04\xf6\x03\x02\x08\n\r\n\x05\x04\x08\x02\0\
    \x01\x12\x04\xf6\x03\t\r\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xf6\x03\x10\
    \x11\n\x0f\n\x05\x04\x08\x02\0\x08\x12\x06\xf6\x03\x12\xfb\x03\x03\n\x10\
    \n\x08\x04\x08\x02\0\x08\x9c\x08\0\x12\x04\xf7\x03\x04*\n\x11\n\x07\x04\
    \x08\x02\0\x08\x9f\x08\x12\x06\xf8\x03\x04\xfa\x03\x05\ny\n\x02\x04\t\
    \x12\x06\x80\x04\0\x91\x04\x01\x1ak\x20The\x20request\x20sent\x20to\x20t\
    he\x20[CreatePolicyRequest]\n\x20[google.cloud.orgpolicy.v2.OrgPolicy.Cr\
    eatePolicy]\x20method.\n\n\x0b\n\x03\x04\t\x01\x12\x04\x80\x04\x08\x1b\n\
    \xf8\x01\n\x04\x04\t\x02\0\x12\x06\x88\x04\x02\x8d\x04\x04\x1a\xe7\x01\
    \x20Required.\x20The\x20Google\x20Cloud\x20resource\x20that\x20will\x20p\
    arent\x20the\x20new\x20policy.\x20Must\n\x20be\x20in\x20one\x20of\x20the\
    \x20following\x20forms:\n\n\x20*\x20`projects/{project_number}`\n\x20*\
    \x20`projects/{project_id}`\n\x20*\x20`folders/{folder_id}`\n\x20*\x20`o\
    rganizations/{organization_id}`\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\x88\
    \x04\x02\x08\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x88\x04\t\x0f\n\r\n\x05\
    \x04\t\x02\0\x03\x12\x04\x88\x04\x12\x13\n\x0f\n\x05\x04\t\x02\0\x08\x12\
    \x06\x88\x04\x14\x8d\x04\x03\n\x10\n\x08\x04\t\x02\0\x08\x9c\x08\0\x12\
    \x04\x89\x04\x04*\n\x11\n\x07\x04\t\x02\0\x08\x9f\x08\x12\x06\x8a\x04\
    \x04\x8c\x04\x05\n+\n\x04\x04\t\x02\x01\x12\x04\x90\x04\x02=\x1a\x1d\x20\
    Required.\x20Policy\x20to\x20create.\n\n\r\n\x05\x04\t\x02\x01\x06\x12\
    \x04\x90\x04\x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x90\x04\t\x0f\n\
    \r\n\x05\x04\t\x02\x01\x03\x12\x04\x90\x04\x12\x13\n\r\n\x05\x04\t\x02\
    \x01\x08\x12\x04\x90\x04\x14<\n\x10\n\x08\x04\t\x02\x01\x08\x9c\x08\0\
    \x12\x04\x90\x04\x15;\ny\n\x02\x04\n\x12\x06\x95\x04\0\x9d\x04\x01\x1ak\
    \x20The\x20request\x20sent\x20to\x20the\x20[UpdatePolicyRequest]\n\x20[g\
    oogle.cloud.orgpolicy.v2.OrgPolicy.UpdatePolicy]\x20method.\n\n\x0b\n\
    \x03\x04\n\x01\x12\x04\x95\x04\x08\x1b\n+\n\x04\x04\n\x02\0\x12\x04\x97\
    \x04\x02=\x1a\x1d\x20Required.\x20Policy\x20to\x20update.\n\n\r\n\x05\
    \x04\n\x02\0\x06\x12\x04\x97\x04\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\
    \x04\x97\x04\t\x0f\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x97\x04\x12\x13\n\r\
    \n\x05\x04\n\x02\0\x08\x12\x04\x97\x04\x14<\n\x10\n\x08\x04\n\x02\0\x08\
    \x9c\x08\0\x12\x04\x97\x04\x15;\n\xbe\x01\n\x04\x04\n\x02\x01\x12\x04\
    \x9c\x04\x02,\x1a\xaf\x01\x20Field\x20mask\x20used\x20to\x20specify\x20t\
    he\x20fields\x20to\x20be\x20overwritten\x20in\x20the\x20policy\n\x20by\
    \x20the\x20set.\x20The\x20fields\x20specified\x20in\x20the\x20update_mas\
    k\x20are\x20relative\x20to\x20the\n\x20policy,\x20not\x20the\x20full\x20\
    request.\n\n\r\n\x05\x04\n\x02\x01\x06\x12\x04\x9c\x04\x02\x1b\n\r\n\x05\
    \x04\n\x02\x01\x01\x12\x04\x9c\x04\x1c'\n\r\n\x05\x04\n\x02\x01\x03\x12\
    \x04\x9c\x04*+\nr\n\x02\x04\x0b\x12\x06\xa1\x04\0\xaf\x04\x01\x1ad\x20Th\
    e\x20request\x20sent\x20to\x20the\x20[DeletePolicy]\n\x20[google.cloud.o\
    rgpolicy.v2.OrgPolicy.DeletePolicy]\x20method.\n\n\x0b\n\x03\x04\x0b\x01\
    \x12\x04\xa1\x04\x08\x1b\na\n\x04\x04\x0b\x02\0\x12\x06\xa4\x04\x02\xa9\
    \x04\x04\x1aQ\x20Required.\x20Name\x20of\x20the\x20policy\x20to\x20delet\
    e.\n\x20See\x20the\x20policy\x20entry\x20for\x20naming\x20rules.\n\n\r\n\
    \x05\x04\x0b\x02\0\x05\x12\x04\xa4\x04\x02\x08\n\r\n\x05\x04\x0b\x02\0\
    \x01\x12\x04\xa4\x04\t\r\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xa4\x04\x10\
    \x11\n\x0f\n\x05\x04\x0b\x02\0\x08\x12\x06\xa4\x04\x12\xa9\x04\x03\n\x10\
    \n\x08\x04\x0b\x02\0\x08\x9c\x08\0\x12\x04\xa5\x04\x04*\n\x11\n\x07\x04\
    \x0b\x02\0\x08\x9f\x08\x12\x06\xa6\x04\x04\xa8\x04\x05\n\xc2\x01\n\x04\
    \x04\x0b\x02\x01\x12\x04\xae\x04\x02;\x1a\xb3\x01\x20Optional.\x20The\
    \x20current\x20etag\x20of\x20policy.\x20If\x20an\x20etag\x20is\x20provid\
    ed\x20and\x20does\x20not\n\x20match\x20the\x20current\x20etag\x20of\x20t\
    he\x20policy,\x20deletion\x20will\x20be\x20blocked\x20and\x20an\n\x20ABO\
    RTED\x20error\x20will\x20be\x20returned.\n\n\r\n\x05\x04\x0b\x02\x01\x05\
    \x12\x04\xae\x04\x02\x08\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xae\x04\t\
    \r\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xae\x04\x10\x11\n\r\n\x05\x04\
    \x0b\x02\x01\x08\x12\x04\xae\x04\x12:\n\x10\n\x08\x04\x0b\x02\x01\x08\
    \x9c\x08\0\x12\x04\xae\x04\x139\n\x8d\x01\n\x02\x04\x0c\x12\x06\xb3\x04\
    \0\xc1\x04\x01\x1a\x7f\x20The\x20request\x20sent\x20to\x20the\x20[Create\
    CustomConstraintRequest]\n\x20[google.cloud.orgpolicy.v2.OrgPolicy.Creat\
    eCustomConstraint]\x20method.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xb3\x04\
    \x08%\n`\n\x04\x04\x0c\x02\0\x12\x06\xb7\x04\x02\xbc\x04\x04\x1aP\x20Req\
    uired.\x20Must\x20be\x20in\x20the\x20following\x20form:\n\n\x20*\x20`org\
    anizations/{organization_id}`\n\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xb7\
    \x04\x02\x08\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xb7\x04\t\x0f\n\r\n\x05\
    \x04\x0c\x02\0\x03\x12\x04\xb7\x04\x12\x13\n\x0f\n\x05\x04\x0c\x02\0\x08\
    \x12\x06\xb7\x04\x14\xbc\x04\x03\n\x10\n\x08\x04\x0c\x02\0\x08\x9c\x08\0\
    \x12\x04\xb8\x04\x04*\n\x11\n\x07\x04\x0c\x02\0\x08\x9f\x08\x12\x06\xb9\
    \x04\x04\xbb\x04\x05\n8\n\x04\x04\x0c\x02\x01\x12\x06\xbf\x04\x02\xc0\
    \x04/\x1a(\x20Required.\x20Custom\x20constraint\x20to\x20create.\n\n\r\n\
    \x05\x04\x0c\x02\x01\x06\x12\x04\xbf\x04\x02\x12\n\r\n\x05\x04\x0c\x02\
    \x01\x01\x12\x04\xbf\x04\x13$\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\xbf\
    \x04'(\n\r\n\x05\x04\x0c\x02\x01\x08\x12\x04\xc0\x04\x06.\n\x10\n\x08\
    \x04\x0c\x02\x01\x08\x9c\x08\0\x12\x04\xc0\x04\x07-\n\x80\x01\n\x02\x04\
    \r\x12\x06\xc5\x04\0\xce\x04\x01\x1ar\x20The\x20request\x20sent\x20to\
    \x20the\x20[GetCustomConstraint]\n\x20[google.cloud.orgpolicy.v2.OrgPoli\
    cy.GetCustomConstraint]\x20method.\n\n\x0b\n\x03\x04\r\x01\x12\x04\xc5\
    \x04\x08\"\n}\n\x04\x04\r\x02\0\x12\x06\xc8\x04\x02\xcd\x04\x04\x1am\x20\
    Required.\x20Resource\x20name\x20of\x20the\x20custom\x20constraint.\x20S\
    ee\x20the\x20custom\x20constraint\n\x20entry\x20for\x20naming\x20require\
    ments.\n\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xc8\x04\x02\x08\n\r\n\x05\x04\
    \r\x02\0\x01\x12\x04\xc8\x04\t\r\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xc8\
    \x04\x10\x11\n\x0f\n\x05\x04\r\x02\0\x08\x12\x06\xc8\x04\x12\xcd\x04\x03\
    \n\x10\n\x08\x04\r\x02\0\x08\x9c\x08\0\x12\x04\xc9\x04\x04*\n\x11\n\x07\
    \x04\r\x02\0\x08\x9f\x08\x12\x06\xca\x04\x04\xcc\x04\x05\n\x84\x01\n\x02\
    \x04\x0e\x12\x06\xd2\x04\0\xe7\x04\x01\x1av\x20The\x20request\x20sent\
    \x20to\x20the\x20[ListCustomConstraints]\n\x20[google.cloud.orgpolicy.v2\
    .OrgPolicy.ListCustomConstraints]\x20method.\n\n\x0b\n\x03\x04\x0e\x01\
    \x12\x04\xd2\x04\x08$\n\xdd\x01\n\x04\x04\x0e\x02\0\x12\x06\xd8\x04\x02\
    \xdd\x04\x04\x1a\xcc\x01\x20Required.\x20The\x20target\x20Google\x20Clou\
    d\x20resource\x20that\x20parents\x20the\x20set\x20of\x20custom\n\x20cons\
    traints\x20that\x20will\x20be\x20returned\x20from\x20this\x20call.\x20Mu\
    st\x20be\x20in\x20one\x20of\x20the\n\x20following\x20forms:\n\n\x20*\x20\
    `organizations/{organization_id}`\n\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\
    \xd8\x04\x02\x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xd8\x04\t\x0f\n\r\n\
    \x05\x04\x0e\x02\0\x03\x12\x04\xd8\x04\x12\x13\n\x0f\n\x05\x04\x0e\x02\0\
    \x08\x12\x06\xd8\x04\x14\xdd\x04\x03\n\x10\n\x08\x04\x0e\x02\0\x08\x9c\
    \x08\0\x12\x04\xd9\x04\x04*\n\x11\n\x07\x04\x0e\x02\0\x08\x9f\x08\x12\
    \x06\xda\x04\x04\xdc\x04\x05\n\xae\x01\n\x04\x04\x0e\x02\x01\x12\x04\xe2\
    \x04\x02\x16\x1a\x9f\x01\x20Size\x20of\x20the\x20pages\x20to\x20be\x20re\
    turned.\x20This\x20is\x20currently\x20unsupported\x20and\x20will\n\x20be\
    \x20ignored.\x20The\x20server\x20may\x20at\x20any\x20point\x20start\x20u\
    sing\x20this\x20field\x20to\x20limit\n\x20page\x20size.\n\n\r\n\x05\x04\
    \x0e\x02\x01\x05\x12\x04\xe2\x04\x02\x07\n\r\n\x05\x04\x0e\x02\x01\x01\
    \x12\x04\xe2\x04\x08\x11\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xe2\x04\
    \x14\x15\n\xa3\x01\n\x04\x04\x0e\x02\x02\x12\x04\xe6\x04\x02\x18\x1a\x94\
    \x01\x20Page\x20token\x20used\x20to\x20retrieve\x20the\x20next\x20page.\
    \x20This\x20is\x20currently\x20unsupported\n\x20and\x20will\x20be\x20ign\
    ored.\x20The\x20server\x20may\x20at\x20any\x20point\x20start\x20using\
    \x20this\x20field.\n\n\r\n\x05\x04\x0e\x02\x02\x05\x12\x04\xe6\x04\x02\
    \x08\n\r\n\x05\x04\x0e\x02\x02\x01\x12\x04\xe6\x04\t\x13\n\r\n\x05\x04\
    \x0e\x02\x02\x03\x12\x04\xe6\x04\x16\x17\n\xdd\x01\n\x02\x04\x0f\x12\x06\
    \xec\x04\0\xf4\x04\x01\x1a\xce\x01\x20The\x20response\x20returned\x20fro\
    m\x20the\x20[ListCustomConstraints]\n\x20[google.cloud.orgpolicy.v2.OrgP\
    olicy.ListCustomConstraints]\x20method.\x20It\x20will\n\x20be\x20empty\
    \x20if\x20no\x20custom\x20constraints\x20are\x20set\x20on\x20the\x20orga\
    nization\x20resource.\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\xec\x04\x08%\n\
    \x83\x01\n\x04\x04\x0f\x02\0\x12\x04\xef\x04\x023\x1au\x20All\x20custom\
    \x20constraints\x20that\x20exist\x20on\x20the\x20organization\x20resourc\
    e.\x20It\x20will\x20be\n\x20empty\x20if\x20no\x20custom\x20constraints\
    \x20are\x20set.\n\n\r\n\x05\x04\x0f\x02\0\x04\x12\x04\xef\x04\x02\n\n\r\
    \n\x05\x04\x0f\x02\0\x06\x12\x04\xef\x04\x0b\x1b\n\r\n\x05\x04\x0f\x02\0\
    \x01\x12\x04\xef\x04\x1c.\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xef\x0412\
    \n\x97\x01\n\x04\x04\x0f\x02\x01\x12\x04\xf3\x04\x02\x1d\x1a\x88\x01\x20\
    Page\x20token\x20used\x20to\x20retrieve\x20the\x20next\x20page.\x20This\
    \x20is\x20currently\x20not\x20used,\x20but\n\x20the\x20server\x20may\x20\
    at\x20any\x20point\x20start\x20supplying\x20a\x20valid\x20token.\n\n\r\n\
    \x05\x04\x0f\x02\x01\x05\x12\x04\xf3\x04\x02\x08\n\r\n\x05\x04\x0f\x02\
    \x01\x01\x12\x04\xf3\x04\t\x18\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\xf3\
    \x04\x1b\x1c\n\x8d\x01\n\x02\x04\x10\x12\x06\xf8\x04\0\xfc\x04\x01\x1a\
    \x7f\x20The\x20request\x20sent\x20to\x20the\x20[UpdateCustomConstraintRe\
    quest]\n\x20[google.cloud.orgpolicy.v2.OrgPolicy.UpdateCustomConstraint]\
    \x20method.\n\n\x0b\n\x03\x04\x10\x01\x12\x04\xf8\x04\x08%\n9\n\x04\x04\
    \x10\x02\0\x12\x06\xfa\x04\x02\xfb\x04/\x1a)\x20Required.\x20`CustomCons\
    traint`\x20to\x20update.\n\n\r\n\x05\x04\x10\x02\0\x06\x12\x04\xfa\x04\
    \x02\x12\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xfa\x04\x13$\n\r\n\x05\x04\
    \x10\x02\0\x03\x12\x04\xfa\x04'(\n\r\n\x05\x04\x10\x02\0\x08\x12\x04\xfb\
    \x04\x06.\n\x10\n\x08\x04\x10\x02\0\x08\x9c\x08\0\x12\x04\xfb\x04\x07-\n\
    \x86\x01\n\x02\x04\x11\x12\x06\x80\x05\0\x89\x05\x01\x1ax\x20The\x20requ\
    est\x20sent\x20to\x20the\x20[DeleteCustomConstraint]\n\x20[google.cloud.\
    orgpolicy.v2.OrgPolicy.DeleteCustomConstraint]\x20method.\n\n\x0b\n\x03\
    \x04\x11\x01\x12\x04\x80\x05\x08%\nw\n\x04\x04\x11\x02\0\x12\x06\x83\x05\
    \x02\x88\x05\x04\x1ag\x20Required.\x20Name\x20of\x20the\x20custom\x20con\
    straint\x20to\x20delete.\n\x20See\x20the\x20custom\x20constraint\x20entr\
    y\x20for\x20naming\x20rules.\n\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\x83\
    \x05\x02\x08\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\x83\x05\t\r\n\r\n\x05\
    \x04\x11\x02\0\x03\x12\x04\x83\x05\x10\x11\n\x0f\n\x05\x04\x11\x02\0\x08\
    \x12\x06\x83\x05\x12\x88\x05\x03\n\x10\n\x08\x04\x11\x02\0\x08\x9c\x08\0\
    \x12\x04\x84\x05\x04*\n\x11\n\x07\x04\x11\x02\0\x08\x9f\x08\x12\x06\x85\
    \x05\x04\x87\x05\x05b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
