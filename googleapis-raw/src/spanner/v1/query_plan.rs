// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/spanner/v1/query_plan.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Node information for nodes appearing in a [QueryPlan.plan_nodes][google.spanner.v1.QueryPlan.plan_nodes].
// @@protoc_insertion_point(message:google.spanner.v1.PlanNode)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlanNode {
    // message fields
    ///  The `PlanNode`'s index in [node list][google.spanner.v1.QueryPlan.plan_nodes].
    // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.index)
    pub index: i32,
    ///  Used to determine the type of node. May be needed for visualizing
    ///  different kinds of nodes differently. For example, If the node is a
    ///  [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] node, it will have a condensed representation
    ///  which can be used to directly embed a description of the node in its
    ///  parent.
    // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.kind)
    pub kind: ::protobuf::EnumOrUnknown<plan_node::Kind>,
    ///  The display name for the node.
    // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.display_name)
    pub display_name: ::std::string::String,
    ///  List of child node `index`es and their relationship to this parent.
    // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.child_links)
    pub child_links: ::std::vec::Vec<plan_node::ChildLink>,
    ///  Condensed representation for [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] nodes.
    // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.short_representation)
    pub short_representation: ::protobuf::MessageField<plan_node::ShortRepresentation>,
    // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.metadata)
    pub metadata: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    ///  The execution statistics associated with the node, contained in a group of
    ///  key-value pairs. Only present if the plan was returned as a result of a
    ///  profile query. For example, number of executions, number of rows/time per
    ///  execution etc.
    // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.execution_stats)
    pub execution_stats: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.v1.PlanNode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlanNode {
    fn default() -> &'a PlanNode {
        <PlanNode as ::protobuf::Message>::default_instance()
    }
}

impl PlanNode {
    pub fn new() -> PlanNode {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &PlanNode| { &m.index },
            |m: &mut PlanNode| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kind",
            |m: &PlanNode| { &m.kind },
            |m: &mut PlanNode| { &mut m.kind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &PlanNode| { &m.display_name },
            |m: &mut PlanNode| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "child_links",
            |m: &PlanNode| { &m.child_links },
            |m: &mut PlanNode| { &mut m.child_links },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, plan_node::ShortRepresentation>(
            "short_representation",
            |m: &PlanNode| { &m.short_representation },
            |m: &mut PlanNode| { &mut m.short_representation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "metadata",
            |m: &PlanNode| { &m.metadata },
            |m: &mut PlanNode| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "execution_stats",
            |m: &PlanNode| { &m.execution_stats },
            |m: &mut PlanNode| { &mut m.execution_stats },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlanNode>(
            "PlanNode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlanNode {
    const NAME: &'static str = "PlanNode";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_int32()?;
                },
                16 => {
                    self.kind = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.display_name = is.read_string()?;
                },
                34 => {
                    self.child_links.push(is.read_message()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.short_representation)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.execution_stats)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.index);
        }
        if self.kind != ::protobuf::EnumOrUnknown::new(plan_node::Kind::KIND_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.kind.value());
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        for value in &self.child_links {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.short_representation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.execution_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_int32(1, self.index)?;
        }
        if self.kind != ::protobuf::EnumOrUnknown::new(plan_node::Kind::KIND_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.kind))?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        for v in &self.child_links {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.short_representation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.execution_stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlanNode {
        PlanNode::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.kind = ::protobuf::EnumOrUnknown::new(plan_node::Kind::KIND_UNSPECIFIED);
        self.display_name.clear();
        self.child_links.clear();
        self.short_representation.clear();
        self.metadata.clear();
        self.execution_stats.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlanNode {
        static instance: PlanNode = PlanNode {
            index: 0,
            kind: ::protobuf::EnumOrUnknown::from_i32(0),
            display_name: ::std::string::String::new(),
            child_links: ::std::vec::Vec::new(),
            short_representation: ::protobuf::MessageField::none(),
            metadata: ::protobuf::MessageField::none(),
            execution_stats: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlanNode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlanNode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlanNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlanNode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PlanNode`
pub mod plan_node {
    ///  Metadata associated with a parent-child relationship appearing in a
    ///  [PlanNode][google.spanner.v1.PlanNode].
    // @@protoc_insertion_point(message:google.spanner.v1.PlanNode.ChildLink)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChildLink {
        // message fields
        ///  The node to which the link points.
        // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.ChildLink.child_index)
        pub child_index: i32,
        ///  The type of the link. For example, in Hash Joins this could be used to
        ///  distinguish between the build child and the probe child, or in the case
        ///  of the child being an output variable, to represent the tag associated
        ///  with the output variable.
        // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.ChildLink.type)
        pub type_: ::std::string::String,
        ///  Only present if the child node is [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] and corresponds
        ///  to an output variable of the parent node. The field carries the name of
        ///  the output variable.
        ///  For example, a `TableScan` operator that reads rows from a table will
        ///  have child links to the `SCALAR` nodes representing the output variables
        ///  created for each column that is read by the operator. The corresponding
        ///  `variable` fields will be set to the variable names assigned to the
        ///  columns.
        // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.ChildLink.variable)
        pub variable: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:google.spanner.v1.PlanNode.ChildLink.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChildLink {
        fn default() -> &'a ChildLink {
            <ChildLink as ::protobuf::Message>::default_instance()
        }
    }

    impl ChildLink {
        pub fn new() -> ChildLink {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "child_index",
                |m: &ChildLink| { &m.child_index },
                |m: &mut ChildLink| { &mut m.child_index },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &ChildLink| { &m.type_ },
                |m: &mut ChildLink| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "variable",
                |m: &ChildLink| { &m.variable },
                |m: &mut ChildLink| { &mut m.variable },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChildLink>(
                "PlanNode.ChildLink",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ChildLink {
        const NAME: &'static str = "ChildLink";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.child_index = is.read_int32()?;
                    },
                    18 => {
                        self.type_ = is.read_string()?;
                    },
                    26 => {
                        self.variable = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.child_index != 0 {
                my_size += ::protobuf::rt::int32_size(1, self.child_index);
            }
            if !self.type_.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.type_);
            }
            if !self.variable.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.variable);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.child_index != 0 {
                os.write_int32(1, self.child_index)?;
            }
            if !self.type_.is_empty() {
                os.write_string(2, &self.type_)?;
            }
            if !self.variable.is_empty() {
                os.write_string(3, &self.variable)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChildLink {
            ChildLink::new()
        }

        fn clear(&mut self) {
            self.child_index = 0;
            self.type_.clear();
            self.variable.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChildLink {
            static instance: ChildLink = ChildLink {
                child_index: 0,
                type_: ::std::string::String::new(),
                variable: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ChildLink {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PlanNode.ChildLink").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ChildLink {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ChildLink {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  Condensed representation of a node and its subtree. Only present for
    ///  `SCALAR` [PlanNode(s)][google.spanner.v1.PlanNode].
    // @@protoc_insertion_point(message:google.spanner.v1.PlanNode.ShortRepresentation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ShortRepresentation {
        // message fields
        ///  A string representation of the expression subtree rooted at this node.
        // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.ShortRepresentation.description)
        pub description: ::std::string::String,
        ///  A mapping of (subquery variable name) -> (subquery node id) for cases
        ///  where the `description` string of this node references a `SCALAR`
        ///  subquery contained in the expression subtree rooted at this node. The
        ///  referenced `SCALAR` subquery may not necessarily be a direct child of
        ///  this node.
        // @@protoc_insertion_point(field:google.spanner.v1.PlanNode.ShortRepresentation.subqueries)
        pub subqueries: ::std::collections::HashMap<::std::string::String, i32>,
        // special fields
        // @@protoc_insertion_point(special_field:google.spanner.v1.PlanNode.ShortRepresentation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ShortRepresentation {
        fn default() -> &'a ShortRepresentation {
            <ShortRepresentation as ::protobuf::Message>::default_instance()
        }
    }

    impl ShortRepresentation {
        pub fn new() -> ShortRepresentation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "description",
                |m: &ShortRepresentation| { &m.description },
                |m: &mut ShortRepresentation| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "subqueries",
                |m: &ShortRepresentation| { &m.subqueries },
                |m: &mut ShortRepresentation| { &mut m.subqueries },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShortRepresentation>(
                "PlanNode.ShortRepresentation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ShortRepresentation {
        const NAME: &'static str = "ShortRepresentation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.description = is.read_string()?;
                    },
                    18 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                16 => value = is.read_int32()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.subqueries.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.description.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.description);
            }
            for (k, v) in &self.subqueries {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::int32_size(2, *v);
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.description.is_empty() {
                os.write_string(1, &self.description)?;
            }
            for (k, v) in &self.subqueries {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                entry_size += ::protobuf::rt::int32_size(2, *v);
                os.write_raw_varint32(18)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                os.write_int32(2, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ShortRepresentation {
            ShortRepresentation::new()
        }

        fn clear(&mut self) {
            self.description.clear();
            self.subqueries.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ShortRepresentation {
            static instance: ::protobuf::rt::Lazy<ShortRepresentation> = ::protobuf::rt::Lazy::new();
            instance.get(ShortRepresentation::new)
        }
    }

    impl ::protobuf::MessageFull for ShortRepresentation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PlanNode.ShortRepresentation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ShortRepresentation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ShortRepresentation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  The kind of [PlanNode][google.spanner.v1.PlanNode]. Distinguishes between the two different kinds of
    ///  nodes that can appear in a query plan.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.spanner.v1.PlanNode.Kind)
    pub enum Kind {
        // @@protoc_insertion_point(enum_value:google.spanner.v1.PlanNode.Kind.KIND_UNSPECIFIED)
        KIND_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.spanner.v1.PlanNode.Kind.RELATIONAL)
        RELATIONAL = 1,
        // @@protoc_insertion_point(enum_value:google.spanner.v1.PlanNode.Kind.SCALAR)
        SCALAR = 2,
    }

    impl ::protobuf::Enum for Kind {
        const NAME: &'static str = "Kind";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Kind> {
            match value {
                0 => ::std::option::Option::Some(Kind::KIND_UNSPECIFIED),
                1 => ::std::option::Option::Some(Kind::RELATIONAL),
                2 => ::std::option::Option::Some(Kind::SCALAR),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Kind> {
            match str {
                "KIND_UNSPECIFIED" => ::std::option::Option::Some(Kind::KIND_UNSPECIFIED),
                "RELATIONAL" => ::std::option::Option::Some(Kind::RELATIONAL),
                "SCALAR" => ::std::option::Option::Some(Kind::SCALAR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Kind] = &[
            Kind::KIND_UNSPECIFIED,
            Kind::RELATIONAL,
            Kind::SCALAR,
        ];
    }

    impl ::protobuf::EnumFull for Kind {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("PlanNode.Kind").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Kind {
        fn default() -> Self {
            Kind::KIND_UNSPECIFIED
        }
    }

    impl Kind {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Kind>("PlanNode.Kind")
        }
    }
}

///  Contains an ordered list of nodes appearing in the query plan.
// @@protoc_insertion_point(message:google.spanner.v1.QueryPlan)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryPlan {
    // message fields
    ///  The nodes in the query plan. Plan nodes are returned in pre-order starting
    ///  with the plan root. Each [PlanNode][google.spanner.v1.PlanNode]'s `id` corresponds to its index in
    ///  `plan_nodes`.
    // @@protoc_insertion_point(field:google.spanner.v1.QueryPlan.plan_nodes)
    pub plan_nodes: ::std::vec::Vec<PlanNode>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.v1.QueryPlan.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryPlan {
    fn default() -> &'a QueryPlan {
        <QueryPlan as ::protobuf::Message>::default_instance()
    }
}

impl QueryPlan {
    pub fn new() -> QueryPlan {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "plan_nodes",
            |m: &QueryPlan| { &m.plan_nodes },
            |m: &mut QueryPlan| { &mut m.plan_nodes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryPlan>(
            "QueryPlan",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryPlan {
    const NAME: &'static str = "QueryPlan";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plan_nodes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.plan_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.plan_nodes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryPlan {
        QueryPlan::new()
    }

    fn clear(&mut self) {
        self.plan_nodes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryPlan {
        static instance: QueryPlan = QueryPlan {
            plan_nodes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryPlan {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryPlan").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryPlan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryPlan {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"google/spanner/v1/query_plan.proto\x12\x11google.spanner.v1\x1a\x1cg\
    oogle/protobuf/struct.proto\x1a\x1cgoogle/api/annotations.proto\"\x8e\
    \x06\n\x08PlanNode\x12\x14\n\x05index\x18\x01\x20\x01(\x05R\x05index\x12\
    4\n\x04kind\x18\x02\x20\x01(\x0e2\x20.google.spanner.v1.PlanNode.KindR\
    \x04kind\x12!\n\x0cdisplay_name\x18\x03\x20\x01(\tR\x0bdisplayName\x12F\
    \n\x0bchild_links\x18\x04\x20\x03(\x0b2%.google.spanner.v1.PlanNode.Chil\
    dLinkR\nchildLinks\x12b\n\x14short_representation\x18\x05\x20\x01(\x0b2/\
    .google.spanner.v1.PlanNode.ShortRepresentationR\x13shortRepresentation\
    \x123\n\x08metadata\x18\x06\x20\x01(\x0b2\x17.google.protobuf.StructR\
    \x08metadata\x12@\n\x0fexecution_stats\x18\x07\x20\x01(\x0b2\x17.google.\
    protobuf.StructR\x0eexecutionStats\x1a\\\n\tChildLink\x12\x1f\n\x0bchild\
    _index\x18\x01\x20\x01(\x05R\nchildIndex\x12\x12\n\x04type\x18\x02\x20\
    \x01(\tR\x04type\x12\x1a\n\x08variable\x18\x03\x20\x01(\tR\x08variable\
    \x1a\xd7\x01\n\x13ShortRepresentation\x12\x20\n\x0bdescription\x18\x01\
    \x20\x01(\tR\x0bdescription\x12_\n\nsubqueries\x18\x02\x20\x03(\x0b2?.go\
    ogle.spanner.v1.PlanNode.ShortRepresentation.SubqueriesEntryR\nsubquerie\
    s\x1a=\n\x0fSubqueriesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\x01\"8\n\x04Kin\
    d\x12\x14\n\x10KIND_UNSPECIFIED\x10\0\x12\x0e\n\nRELATIONAL\x10\x01\x12\
    \n\n\x06SCALAR\x10\x02\"G\n\tQueryPlan\x12:\n\nplan_nodes\x18\x01\x20\
    \x03(\x0b2\x1b.google.spanner.v1.PlanNodeR\tplanNodesB\x97\x01\n\x15com.\
    google.spanner.v1B\x0eQueryPlanProtoP\x01Z8google.golang.org/genproto/go\
    ogleapis/spanner/v1;spanner\xaa\x02\x17Google.Cloud.Spanner.V1\xca\x02\
    \x17Google\\Cloud\\Spanner\\V1J\x99)\n\x07\x12\x05\x0f\0\x80\x01\x01\n\
    \xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Go\
    ogle\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ve\
    rsion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20t\
    his\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1a\n\t\n\x02\x03\
    \0\x12\x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\0&\n\x08\n\x01\x08\x12\
    \x03\x16\04\n\t\n\x02\x08%\x12\x03\x16\04\n\x08\n\x01\x08\x12\x03\x17\0O\
    \n\t\n\x02\x08\x0b\x12\x03\x17\0O\n\x08\n\x01\x08\x12\x03\x18\0\"\n\t\n\
    \x02\x08\n\x12\x03\x18\0\"\n\x08\n\x01\x08\x12\x03\x19\0/\n\t\n\x02\x08\
    \x08\x12\x03\x19\0/\n\x08\n\x01\x08\x12\x03\x1a\0.\n\t\n\x02\x08\x01\x12\
    \x03\x1a\0.\n\x08\n\x01\x08\x12\x03\x1b\04\n\t\n\x02\x08)\x12\x03\x1b\04\
    \nw\n\x02\x04\0\x12\x04\x1e\0x\x01\x1ak\x20Node\x20information\x20for\
    \x20nodes\x20appearing\x20in\x20a\x20[QueryPlan.plan_nodes][google.spann\
    er.v1.QueryPlan.plan_nodes].\n\n\n\n\x03\x04\0\x01\x12\x03\x1e\x08\x10\n\
    |\n\x04\x04\0\x03\0\x12\x04!\x024\x03\x1an\x20Metadata\x20associated\x20\
    with\x20a\x20parent-child\x20relationship\x20appearing\x20in\x20a\n\x20[\
    PlanNode][google.spanner.v1.PlanNode].\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\
    \x03!\n\x13\n3\n\x06\x04\0\x03\0\x02\0\x12\x03#\x04\x1a\x1a$\x20The\x20n\
    ode\x20to\x20which\x20the\x20link\x20points.\n\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x05\x12\x03#\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03#\n\
    \x15\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03#\x18\x19\n\x84\x02\n\x06\
    \x04\0\x03\0\x02\x01\x12\x03)\x04\x14\x1a\xf4\x01\x20The\x20type\x20of\
    \x20the\x20link.\x20For\x20example,\x20in\x20Hash\x20Joins\x20this\x20co\
    uld\x20be\x20used\x20to\n\x20distinguish\x20between\x20the\x20build\x20c\
    hild\x20and\x20the\x20probe\x20child,\x20or\x20in\x20the\x20case\n\x20of\
    \x20the\x20child\x20being\x20an\x20output\x20variable,\x20to\x20represen\
    t\x20the\x20tag\x20associated\n\x20with\x20the\x20output\x20variable.\n\
    \n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03)\x04\n\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x01\x12\x03)\x0b\x0f\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\
    \x12\x03)\x12\x13\n\xfc\x03\n\x06\x04\0\x03\0\x02\x02\x12\x033\x04\x18\
    \x1a\xec\x03\x20Only\x20present\x20if\x20the\x20child\x20node\x20is\x20[\
    SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR]\x20and\x20corresponds\n\
    \x20to\x20an\x20output\x20variable\x20of\x20the\x20parent\x20node.\x20Th\
    e\x20field\x20carries\x20the\x20name\x20of\n\x20the\x20output\x20variabl\
    e.\n\x20For\x20example,\x20a\x20`TableScan`\x20operator\x20that\x20reads\
    \x20rows\x20from\x20a\x20table\x20will\n\x20have\x20child\x20links\x20to\
    \x20the\x20`SCALAR`\x20nodes\x20representing\x20the\x20output\x20variabl\
    es\n\x20created\x20for\x20each\x20column\x20that\x20is\x20read\x20by\x20\
    the\x20operator.\x20The\x20corresponding\n\x20`variable`\x20fields\x20wi\
    ll\x20be\x20set\x20to\x20the\x20variable\x20names\x20assigned\x20to\x20t\
    he\n\x20columns.\n\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x033\x04\n\n\
    \x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\x033\x0b\x13\n\x0e\n\x07\x04\0\
    \x03\0\x02\x02\x03\x12\x033\x16\x17\n\x89\x01\n\x04\x04\0\x03\x01\x12\
    \x048\x02B\x03\x1a{\x20Condensed\x20representation\x20of\x20a\x20node\
    \x20and\x20its\x20subtree.\x20Only\x20present\x20for\n\x20`SCALAR`\x20[P\
    lanNode(s)][google.spanner.v1.PlanNode].\n\n\x0c\n\x05\x04\0\x03\x01\x01\
    \x12\x038\n\x1d\nW\n\x06\x04\0\x03\x01\x02\0\x12\x03:\x04\x1b\x1aH\x20A\
    \x20string\x20representation\x20of\x20the\x20expression\x20subtree\x20ro\
    oted\x20at\x20this\x20node.\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\
    \x03:\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\x03:\x0b\x16\n\x0e\n\
    \x07\x04\0\x03\x01\x02\0\x03\x12\x03:\x19\x1a\n\xb4\x02\n\x06\x04\0\x03\
    \x01\x02\x01\x12\x03A\x04&\x1a\xa4\x02\x20A\x20mapping\x20of\x20(subquer\
    y\x20variable\x20name)\x20->\x20(subquery\x20node\x20id)\x20for\x20cases\
    \n\x20where\x20the\x20`description`\x20string\x20of\x20this\x20node\x20r\
    eferences\x20a\x20`SCALAR`\n\x20subquery\x20contained\x20in\x20the\x20ex\
    pression\x20subtree\x20rooted\x20at\x20this\x20node.\x20The\n\x20referen\
    ced\x20`SCALAR`\x20subquery\x20may\x20not\x20necessarily\x20be\x20a\x20d\
    irect\x20child\x20of\n\x20this\x20node.\n\n\x0e\n\x07\x04\0\x03\x01\x02\
    \x01\x06\x12\x03A\x04\x16\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03A\
    \x17!\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03A$%\n\x9d\x01\n\x04\
    \x04\0\x04\0\x12\x04F\x02T\x03\x1a\x8e\x01\x20The\x20kind\x20of\x20[Plan\
    Node][google.spanner.v1.PlanNode].\x20Distinguishes\x20between\x20the\
    \x20two\x20different\x20kinds\x20of\n\x20nodes\x20that\x20can\x20appear\
    \x20in\x20a\x20query\x20plan.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03F\x07\
    \x0b\n\x1f\n\x06\x04\0\x04\0\x02\0\x12\x03H\x04\x19\x1a\x10\x20Not\x20sp\
    ecified.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03H\x04\x14\n\x0e\n\
    \x07\x04\0\x04\0\x02\0\x02\x12\x03H\x17\x18\n\xe5\x01\n\x06\x04\0\x04\0\
    \x02\x01\x12\x03M\x04\x13\x1a\xd5\x01\x20Denotes\x20a\x20Relational\x20o\
    perator\x20node\x20in\x20the\x20expression\x20tree.\x20Relational\n\x20o\
    perators\x20represent\x20iterative\x20processing\x20of\x20rows\x20during\
    \x20query\x20execution.\n\x20For\x20example,\x20a\x20`TableScan`\x20oper\
    ation\x20that\x20reads\x20rows\x20from\x20a\x20table.\n\n\x0e\n\x07\x04\
    \0\x04\0\x02\x01\x01\x12\x03M\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x02\x12\x03M\x11\x12\n\xf7\x01\n\x06\x04\0\x04\0\x02\x02\x12\x03S\x04\
    \x0f\x1a\xe7\x01\x20Denotes\x20a\x20Scalar\x20node\x20in\x20the\x20expre\
    ssion\x20tree.\x20Scalar\x20nodes\x20represent\n\x20non-iterable\x20enti\
    ties\x20in\x20the\x20query\x20plan.\x20For\x20example,\x20constants\x20o\
    r\n\x20arithmetic\x20operators\x20appearing\x20inside\x20predicate\x20ex\
    pressions\x20or\x20references\n\x20to\x20column\x20names.\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x02\x01\x12\x03S\x04\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\
    \x02\x12\x03S\r\x0e\n]\n\x04\x04\0\x02\0\x12\x03W\x02\x12\x1aP\x20The\
    \x20`PlanNode`'s\x20index\x20in\x20[node\x20list][google.spanner.v1.Quer\
    yPlan.plan_nodes].\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03W\x02\x07\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03W\x08\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03W\x10\x11\n\xc5\x02\n\x04\x04\0\x02\x01\x12\x03^\x02\x10\x1a\xb7\x02\
    \x20Used\x20to\x20determine\x20the\x20type\x20of\x20node.\x20May\x20be\
    \x20needed\x20for\x20visualizing\n\x20different\x20kinds\x20of\x20nodes\
    \x20differently.\x20For\x20example,\x20If\x20the\x20node\x20is\x20a\n\
    \x20[SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR]\x20node,\x20it\x20w\
    ill\x20have\x20a\x20condensed\x20representation\n\x20which\x20can\x20be\
    \x20used\x20to\x20directly\x20embed\x20a\x20description\x20of\x20the\x20\
    node\x20in\x20its\n\x20parent.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03^\
    \x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03^\x07\x0b\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03^\x0e\x0f\n-\n\x04\x04\0\x02\x02\x12\x03a\x02\x1a\
    \x1a\x20\x20The\x20display\x20name\x20for\x20the\x20node.\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03a\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03a\t\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03a\x18\x19\nR\n\x04\x04\
    \0\x02\x03\x12\x03d\x02%\x1aE\x20List\x20of\x20child\x20node\x20`index`e\
    s\x20and\x20their\x20relationship\x20to\x20this\x20parent.\n\n\x0c\n\x05\
    \x04\0\x02\x03\x04\x12\x03d\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03d\
    \x0b\x14\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03d\x15\x20\n\x0c\n\x05\x04\
    \0\x02\x03\x03\x12\x03d#$\nc\n\x04\x04\0\x02\x04\x12\x03g\x02/\x1aV\x20C\
    ondensed\x20representation\x20for\x20[SCALAR][google.spanner.v1.PlanNode\
    .Kind.SCALAR]\x20nodes.\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03g\x02\x15\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03g\x16*\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03g-.\n\x90\x02\n\x04\x04\0\x02\x05\x12\x03q\x02&\x1a\x82\x02\
    \x20Attributes\x20relevant\x20to\x20the\x20node\x20contained\x20in\x20a\
    \x20group\x20of\x20key-value\x20pairs.\n\x20For\x20example,\x20a\x20Para\
    meter\x20Reference\x20node\x20could\x20have\x20the\x20following\n\x20inf\
    ormation\x20in\x20its\x20metadata:\n\n\x20\x20\x20\x20\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20\"parameter_reference\":\x20\"param1\",\n\x20\x20\
    \x20\x20\x20\x20\x20\"parameter_type\":\x20\"array\"\n\x20\x20\x20\x20\
    \x20}\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03q\x02\x18\n\x0c\n\x05\x04\0\
    \x02\x05\x01\x12\x03q\x19!\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03q$%\n\
    \xfe\x01\n\x04\x04\0\x02\x06\x12\x03w\x02-\x1a\xf0\x01\x20The\x20executi\
    on\x20statistics\x20associated\x20with\x20the\x20node,\x20contained\x20i\
    n\x20a\x20group\x20of\n\x20key-value\x20pairs.\x20Only\x20present\x20if\
    \x20the\x20plan\x20was\x20returned\x20as\x20a\x20result\x20of\x20a\n\x20\
    profile\x20query.\x20For\x20example,\x20number\x20of\x20executions,\x20n\
    umber\x20of\x20rows/time\x20per\n\x20execution\x20etc.\n\n\x0c\n\x05\x04\
    \0\x02\x06\x06\x12\x03w\x02\x18\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03w\
    \x19(\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03w+,\nM\n\x02\x04\x01\x12\x05{\
    \0\x80\x01\x01\x1a@\x20Contains\x20an\x20ordered\x20list\x20of\x20nodes\
    \x20appearing\x20in\x20the\x20query\x20plan.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03{\x08\x11\n\xcd\x01\n\x04\x04\x01\x02\0\x12\x03\x7f\x02#\x1a\xbf\x01\
    \x20The\x20nodes\x20in\x20the\x20query\x20plan.\x20Plan\x20nodes\x20are\
    \x20returned\x20in\x20pre-order\x20starting\n\x20with\x20the\x20plan\x20\
    root.\x20Each\x20[PlanNode][google.spanner.v1.PlanNode]'s\x20`id`\x20cor\
    responds\x20to\x20its\x20index\x20in\n\x20`plan_nodes`.\n\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x03\x7f\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\x7f\x0b\x13\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x7f\x14\x1e\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x7f!\"b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(PlanNode::generated_message_descriptor_data());
            messages.push(QueryPlan::generated_message_descriptor_data());
            messages.push(plan_node::ChildLink::generated_message_descriptor_data());
            messages.push(plan_node::ShortRepresentation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(plan_node::Kind::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
