// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/spanner/v1/type.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  `Type` indicates the type of a Cloud Spanner value, as might be stored in a
///  table cell or returned from an SQL query.
// @@protoc_insertion_point(message:google.spanner.v1.Type)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Type {
    // message fields
    ///  Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
    // @@protoc_insertion_point(field:google.spanner.v1.Type.code)
    pub code: ::protobuf::EnumOrUnknown<TypeCode>,
    ///  If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
    ///  is the type of the array elements.
    // @@protoc_insertion_point(field:google.spanner.v1.Type.array_element_type)
    pub array_element_type: ::protobuf::MessageField<Type>,
    ///  If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
    ///  provides type information for the struct's fields.
    // @@protoc_insertion_point(field:google.spanner.v1.Type.struct_type)
    pub struct_type: ::protobuf::MessageField<StructType>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.v1.Type.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Type {
    fn default() -> &'a Type {
        <Type as ::protobuf::Message>::default_instance()
    }
}

impl Type {
    pub fn new() -> Type {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &Type| { &m.code },
            |m: &mut Type| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Type>(
            "array_element_type",
            |m: &Type| { &m.array_element_type },
            |m: &mut Type| { &mut m.array_element_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StructType>(
            "struct_type",
            |m: &Type| { &m.struct_type },
            |m: &mut Type| { &mut m.struct_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Type>(
            "Type",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Type {
    const NAME: &'static str = "Type";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.array_element_type)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.struct_type)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != ::protobuf::EnumOrUnknown::new(TypeCode::TYPE_CODE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.code.value());
        }
        if let Some(v) = self.array_element_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.struct_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != ::protobuf::EnumOrUnknown::new(TypeCode::TYPE_CODE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.code))?;
        }
        if let Some(v) = self.array_element_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.struct_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Type {
        Type::new()
    }

    fn clear(&mut self) {
        self.code = ::protobuf::EnumOrUnknown::new(TypeCode::TYPE_CODE_UNSPECIFIED);
        self.array_element_type.clear();
        self.struct_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Type {
        static instance: Type = Type {
            code: ::protobuf::EnumOrUnknown::from_i32(0),
            array_element_type: ::protobuf::MessageField::none(),
            struct_type: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Type {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Type").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Type {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Type {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  `StructType` defines the fields of a [STRUCT][google.spanner.v1.TypeCode.STRUCT] type.
// @@protoc_insertion_point(message:google.spanner.v1.StructType)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StructType {
    // message fields
    ///  The list of fields that make up this struct. Order is
    ///  significant, because values of this struct type are represented as
    ///  lists, where the order of field values matches the order of
    ///  fields in the [StructType][google.spanner.v1.StructType]. In turn, the order of fields
    ///  matches the order of columns in a read request, or the order of
    ///  fields in the `SELECT` clause of a query.
    // @@protoc_insertion_point(field:google.spanner.v1.StructType.fields)
    pub fields: ::std::vec::Vec<struct_type::Field>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.v1.StructType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StructType {
    fn default() -> &'a StructType {
        <StructType as ::protobuf::Message>::default_instance()
    }
}

impl StructType {
    pub fn new() -> StructType {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fields",
            |m: &StructType| { &m.fields },
            |m: &mut StructType| { &mut m.fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StructType>(
            "StructType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StructType {
    const NAME: &'static str = "StructType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.fields.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.fields {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StructType {
        StructType::new()
    }

    fn clear(&mut self) {
        self.fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StructType {
        static instance: StructType = StructType {
            fields: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StructType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StructType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StructType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StructType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StructType`
pub mod struct_type {
    ///  Message representing a single field of a struct.
    // @@protoc_insertion_point(message:google.spanner.v1.StructType.Field)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Field {
        // message fields
        ///  The name of the field. For reads, this is the column name. For
        ///  SQL queries, it is the column alias (e.g., `"Word"` in the
        ///  query `"SELECT 'hello' AS Word"`), or the column name (e.g.,
        ///  `"ColName"` in the query `"SELECT ColName FROM Table"`). Some
        ///  columns might have an empty name (e.g., !"SELECT
        ///  UPPER(ColName)"`). Note that a query result can contain
        ///  multiple fields with the same name.
        // @@protoc_insertion_point(field:google.spanner.v1.StructType.Field.name)
        pub name: ::std::string::String,
        ///  The type of the field.
        // @@protoc_insertion_point(field:google.spanner.v1.StructType.Field.type)
        pub type_: ::protobuf::MessageField<super::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:google.spanner.v1.StructType.Field.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Field {
        fn default() -> &'a Field {
            <Field as ::protobuf::Message>::default_instance()
        }
    }

    impl Field {
        pub fn new() -> Field {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Field| { &m.name },
                |m: &mut Field| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Type>(
                "type",
                |m: &Field| { &m.type_ },
                |m: &mut Field| { &mut m.type_ },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
                "StructType.Field",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Field {
        const NAME: &'static str = "Field";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.type_)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if let Some(v) = self.type_.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if let Some(v) = self.type_.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Field {
            Field::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.type_.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Field {
            static instance: Field = Field {
                name: ::std::string::String::new(),
                type_: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Field {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StructType.Field").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Field {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Field {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  `TypeCode` is used as part of [Type][google.spanner.v1.Type] to
///  indicate the type of a Cloud Spanner value.
///
///  Each legal value of a type can be encoded to or decoded from a JSON
///  value, using the encodings described below. All Cloud Spanner values can
///  be `null`, regardless of type; `null`s are always encoded as a JSON
///  `null`.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.spanner.v1.TypeCode)
pub enum TypeCode {
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.TYPE_CODE_UNSPECIFIED)
    TYPE_CODE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.BOOL)
    BOOL = 1,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.INT64)
    INT64 = 2,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.FLOAT64)
    FLOAT64 = 3,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.TIMESTAMP)
    TIMESTAMP = 4,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.DATE)
    DATE = 5,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.STRING)
    STRING = 6,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.BYTES)
    BYTES = 7,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.ARRAY)
    ARRAY = 8,
    // @@protoc_insertion_point(enum_value:google.spanner.v1.TypeCode.STRUCT)
    STRUCT = 9,
}

impl ::protobuf::Enum for TypeCode {
    const NAME: &'static str = "TypeCode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TypeCode> {
        match value {
            0 => ::std::option::Option::Some(TypeCode::TYPE_CODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(TypeCode::BOOL),
            2 => ::std::option::Option::Some(TypeCode::INT64),
            3 => ::std::option::Option::Some(TypeCode::FLOAT64),
            4 => ::std::option::Option::Some(TypeCode::TIMESTAMP),
            5 => ::std::option::Option::Some(TypeCode::DATE),
            6 => ::std::option::Option::Some(TypeCode::STRING),
            7 => ::std::option::Option::Some(TypeCode::BYTES),
            8 => ::std::option::Option::Some(TypeCode::ARRAY),
            9 => ::std::option::Option::Some(TypeCode::STRUCT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<TypeCode> {
        match str {
            "TYPE_CODE_UNSPECIFIED" => ::std::option::Option::Some(TypeCode::TYPE_CODE_UNSPECIFIED),
            "BOOL" => ::std::option::Option::Some(TypeCode::BOOL),
            "INT64" => ::std::option::Option::Some(TypeCode::INT64),
            "FLOAT64" => ::std::option::Option::Some(TypeCode::FLOAT64),
            "TIMESTAMP" => ::std::option::Option::Some(TypeCode::TIMESTAMP),
            "DATE" => ::std::option::Option::Some(TypeCode::DATE),
            "STRING" => ::std::option::Option::Some(TypeCode::STRING),
            "BYTES" => ::std::option::Option::Some(TypeCode::BYTES),
            "ARRAY" => ::std::option::Option::Some(TypeCode::ARRAY),
            "STRUCT" => ::std::option::Option::Some(TypeCode::STRUCT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TypeCode] = &[
        TypeCode::TYPE_CODE_UNSPECIFIED,
        TypeCode::BOOL,
        TypeCode::INT64,
        TypeCode::FLOAT64,
        TypeCode::TIMESTAMP,
        TypeCode::DATE,
        TypeCode::STRING,
        TypeCode::BYTES,
        TypeCode::ARRAY,
        TypeCode::STRUCT,
    ];
}

impl ::protobuf::EnumFull for TypeCode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TypeCode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TypeCode {
    fn default() -> Self {
        TypeCode::TYPE_CODE_UNSPECIFIED
    }
}

impl TypeCode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TypeCode>("TypeCode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cgoogle/spanner/v1/type.proto\x12\x11google.spanner.v1\x1a\x1cgoogl\
    e/api/annotations.proto\"\xbe\x01\n\x04Type\x12/\n\x04code\x18\x01\x20\
    \x01(\x0e2\x1b.google.spanner.v1.TypeCodeR\x04code\x12E\n\x12array_eleme\
    nt_type\x18\x02\x20\x01(\x0b2\x17.google.spanner.v1.TypeR\x10arrayElemen\
    tType\x12>\n\x0bstruct_type\x18\x03\x20\x01(\x0b2\x1d.google.spanner.v1.\
    StructTypeR\nstructType\"\x93\x01\n\nStructType\x12;\n\x06fields\x18\x01\
    \x20\x03(\x0b2#.google.spanner.v1.StructType.FieldR\x06fields\x1aH\n\x05\
    Field\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12+\n\x04type\x18\
    \x02\x20\x01(\x0b2\x17.google.spanner.v1.TypeR\x04type*\x8e\x01\n\x08Typ\
    eCode\x12\x19\n\x15TYPE_CODE_UNSPECIFIED\x10\0\x12\x08\n\x04BOOL\x10\x01\
    \x12\t\n\x05INT64\x10\x02\x12\x0b\n\x07FLOAT64\x10\x03\x12\r\n\tTIMESTAM\
    P\x10\x04\x12\x08\n\x04DATE\x10\x05\x12\n\n\x06STRING\x10\x06\x12\t\n\
    \x05BYTES\x10\x07\x12\t\n\x05ARRAY\x10\x08\x12\n\n\x06STRUCT\x10\tB\x92\
    \x01\n\x15com.google.spanner.v1B\tTypeProtoP\x01Z8google.golang.org/genp\
    roto/googleapis/spanner/v1;spanner\xaa\x02\x17Google.Cloud.Spanner.V1\
    \xca\x02\x17Google\\Cloud\\Spanner\\V1J\xfc!\n\x06\x12\x04\x0f\0v\x01\n\
    \xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Go\
    ogle\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ve\
    rsion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20t\
    his\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1a\n\t\n\x02\x03\
    \0\x12\x03\x13\0&\n\x08\n\x01\x08\x12\x03\x15\04\n\t\n\x02\x08%\x12\x03\
    \x15\04\n\x08\n\x01\x08\x12\x03\x16\0O\n\t\n\x02\x08\x0b\x12\x03\x16\0O\
    \n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\
    \x01\x08\x12\x03\x18\0*\n\t\n\x02\x08\x08\x12\x03\x18\0*\n\x08\n\x01\x08\
    \x12\x03\x19\0.\n\t\n\x02\x08\x01\x12\x03\x19\0.\n\x08\n\x01\x08\x12\x03\
    \x1a\04\n\t\n\x02\x08)\x12\x03\x1a\04\n\xd9\x02\n\x02\x05\0\x12\x04#\0M\
    \x01\x1a\xcc\x02\x20`TypeCode`\x20is\x20used\x20as\x20part\x20of\x20[Typ\
    e][google.spanner.v1.Type]\x20to\n\x20indicate\x20the\x20type\x20of\x20a\
    \x20Cloud\x20Spanner\x20value.\n\n\x20Each\x20legal\x20value\x20of\x20a\
    \x20type\x20can\x20be\x20encoded\x20to\x20or\x20decoded\x20from\x20a\x20\
    JSON\n\x20value,\x20using\x20the\x20encodings\x20described\x20below.\x20\
    All\x20Cloud\x20Spanner\x20values\x20can\n\x20be\x20`null`,\x20regardles\
    s\x20of\x20type;\x20`null`s\x20are\x20always\x20encoded\x20as\x20a\x20JS\
    ON\n\x20`null`.\n\n\n\n\x03\x05\0\x01\x12\x03#\x05\r\n\x1d\n\x04\x05\0\
    \x02\0\x12\x03%\x02\x1c\x1a\x10\x20Not\x20specified.\n\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03%\x02\x17\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03%\x1a\x1b\
    \n1\n\x04\x05\0\x02\x01\x12\x03(\x02\x0b\x1a$\x20Encoded\x20as\x20JSON\
    \x20`true`\x20or\x20`false`.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03(\
    \x02\x06\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03(\t\n\n6\n\x04\x05\0\x02\
    \x02\x12\x03+\x02\x0c\x1a)\x20Encoded\x20as\x20`string`,\x20in\x20decima\
    l\x20format.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03+\x02\x07\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x03+\n\x0b\n\\\n\x04\x05\0\x02\x03\x12\x03/\
    \x02\x0e\x1aO\x20Encoded\x20as\x20`number`,\x20or\x20the\x20strings\x20`\
    \"NaN\"`,\x20`\"Infinity\"`,\x20or\n\x20`\"-Infinity\"`.\n\n\x0c\n\x05\
    \x05\0\x02\x03\x01\x12\x03/\x02\t\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03/\
    \x0c\r\n\xdd\x02\n\x04\x05\0\x02\x04\x12\x039\x02\x10\x1a\xcf\x02\x20Enc\
    oded\x20as\x20`string`\x20in\x20RFC\x203339\x20timestamp\x20format.\x20T\
    he\x20time\x20zone\n\x20must\x20be\x20present,\x20and\x20must\x20be\x20`\
    \"Z\"`.\n\n\x20If\x20the\x20schema\x20has\x20the\x20column\x20option\n\
    \x20`allow_commit_timestamp=true`,\x20the\x20placeholder\x20string\n\x20\
    `\"spanner.commit_timestamp()\"`\x20can\x20be\x20used\x20to\x20instruct\
    \x20the\x20system\n\x20to\x20insert\x20the\x20commit\x20timestamp\x20ass\
    ociated\x20with\x20the\x20transaction\n\x20commit.\n\n\x0c\n\x05\x05\0\
    \x02\x04\x01\x12\x039\x02\x0b\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x039\x0e\
    \x0f\n;\n\x04\x05\0\x02\x05\x12\x03<\x02\x0b\x1a.\x20Encoded\x20as\x20`s\
    tring`\x20in\x20RFC\x203339\x20date\x20format.\n\n\x0c\n\x05\x05\0\x02\
    \x05\x01\x12\x03<\x02\x06\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03<\t\n\n#\
    \n\x04\x05\0\x02\x06\x12\x03?\x02\r\x1a\x16\x20Encoded\x20as\x20`string`\
    .\n\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03?\x02\x08\n\x0c\n\x05\x05\0\x02\
    \x06\x02\x12\x03?\x0b\x0c\nZ\n\x04\x05\0\x02\x07\x12\x03C\x02\x0c\x1aM\
    \x20Encoded\x20as\x20a\x20base64-encoded\x20`string`,\x20as\x20described\
    \x20in\x20RFC\x204648,\n\x20section\x204.\n\n\x0c\n\x05\x05\0\x02\x07\
    \x01\x12\x03C\x02\x07\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03C\n\x0b\n\x9a\
    \x01\n\x04\x05\0\x02\x08\x12\x03H\x02\x0c\x1a\x8c\x01\x20Encoded\x20as\
    \x20`list`,\x20where\x20the\x20list\x20elements\x20are\x20represented\n\
    \x20according\x20to\n\x20[array_element_type][google.spanner.v1.Type.arr\
    ay_element_type].\n\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03H\x02\x07\n\x0c\
    \n\x05\x05\0\x02\x08\x02\x12\x03H\n\x0b\n\x94\x01\n\x04\x05\0\x02\t\x12\
    \x03L\x02\r\x1a\x86\x01\x20Encoded\x20as\x20`list`,\x20where\x20list\x20\
    element\x20`i`\x20is\x20represented\x20according\n\x20to\x20[struct_type\
    .fields[i]][google.spanner.v1.StructType.fields].\n\n\x0c\n\x05\x05\0\
    \x02\t\x01\x12\x03L\x02\x08\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03L\x0b\x0c\
    \n\x84\x01\n\x02\x04\0\x12\x04Q\0\\\x01\x1ax\x20`Type`\x20indicates\x20t\
    he\x20type\x20of\x20a\x20Cloud\x20Spanner\x20value,\x20as\x20might\x20be\
    \x20stored\x20in\x20a\n\x20table\x20cell\x20or\x20returned\x20from\x20an\
    \x20SQL\x20query.\n\n\n\n\x03\x04\0\x01\x12\x03Q\x08\x0c\nR\n\x04\x04\0\
    \x02\0\x12\x03S\x02\x14\x1aE\x20Required.\x20The\x20[TypeCode][google.sp\
    anner.v1.TypeCode]\x20for\x20this\x20type.\n\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03S\x02\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03S\x0b\x0f\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03S\x12\x13\n\xa2\x01\n\x04\x04\0\x02\x01\x12\x03W\
    \x02\x1e\x1a\x94\x01\x20If\x20[code][google.spanner.v1.Type.code]\x20==\
    \x20[ARRAY][google.spanner.v1.TypeCode.ARRAY],\x20then\x20`array_element\
    _type`\n\x20is\x20the\x20type\x20of\x20the\x20array\x20elements.\n\n\x0c\
    \n\x05\x04\0\x02\x01\x06\x12\x03W\x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03W\x07\x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03W\x1c\x1d\n\xad\
    \x01\n\x04\x04\0\x02\x02\x12\x03[\x02\x1d\x1a\x9f\x01\x20If\x20[code][go\
    ogle.spanner.v1.Type.code]\x20==\x20[STRUCT][google.spanner.v1.TypeCode.\
    STRUCT],\x20then\x20`struct_type`\n\x20provides\x20type\x20information\
    \x20for\x20the\x20struct's\x20fields.\n\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03[\x02\x0c\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03[\r\x18\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03[\x1b\x1c\nd\n\x02\x04\x01\x12\x04_\0v\x01\
    \x1aX\x20`StructType`\x20defines\x20the\x20fields\x20of\x20a\x20[STRUCT]\
    [google.spanner.v1.TypeCode.STRUCT]\x20type.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03_\x08\x12\n@\n\x04\x04\x01\x03\0\x12\x04a\x02m\x03\x1a2\x20Message\
    \x20representing\x20a\x20single\x20field\x20of\x20a\x20struct.\n\n\x0c\n\
    \x05\x04\x01\x03\0\x01\x12\x03a\n\x0f\n\x99\x03\n\x06\x04\x01\x03\0\x02\
    \0\x12\x03i\x04\x14\x1a\x89\x03\x20The\x20name\x20of\x20the\x20field.\
    \x20For\x20reads,\x20this\x20is\x20the\x20column\x20name.\x20For\n\x20SQ\
    L\x20queries,\x20it\x20is\x20the\x20column\x20alias\x20(e.g.,\x20`\"Word\
    \"`\x20in\x20the\n\x20query\x20`\"SELECT\x20'hello'\x20AS\x20Word\"`),\
    \x20or\x20the\x20column\x20name\x20(e.g.,\n\x20`\"ColName\"`\x20in\x20th\
    e\x20query\x20`\"SELECT\x20ColName\x20FROM\x20Table\"`).\x20Some\n\x20co\
    lumns\x20might\x20have\x20an\x20empty\x20name\x20(e.g.,\x20!\"SELECT\n\
    \x20UPPER(ColName)\"`).\x20Note\x20that\x20a\x20query\x20result\x20can\
    \x20contain\n\x20multiple\x20fields\x20with\x20the\x20same\x20name.\n\n\
    \x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03i\x04\n\n\x0e\n\x07\x04\x01\
    \x03\0\x02\0\x01\x12\x03i\x0b\x0f\n\x0e\n\x07\x04\x01\x03\0\x02\0\x03\
    \x12\x03i\x12\x13\n'\n\x06\x04\x01\x03\0\x02\x01\x12\x03l\x04\x12\x1a\
    \x18\x20The\x20type\x20of\x20the\x20field.\n\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x01\x06\x12\x03l\x04\x08\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\
    \x03l\t\r\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x03\x12\x03l\x10\x11\n\x8a\
    \x03\n\x04\x04\x01\x02\0\x12\x03u\x02\x1c\x1a\xfc\x02\x20The\x20list\x20\
    of\x20fields\x20that\x20make\x20up\x20this\x20struct.\x20Order\x20is\n\
    \x20significant,\x20because\x20values\x20of\x20this\x20struct\x20type\
    \x20are\x20represented\x20as\n\x20lists,\x20where\x20the\x20order\x20of\
    \x20field\x20values\x20matches\x20the\x20order\x20of\n\x20fields\x20in\
    \x20the\x20[StructType][google.spanner.v1.StructType].\x20In\x20turn,\
    \x20the\x20order\x20of\x20fields\n\x20matches\x20the\x20order\x20of\x20c\
    olumns\x20in\x20a\x20read\x20request,\x20or\x20the\x20order\x20of\n\x20f\
    ields\x20in\x20the\x20`SELECT`\x20clause\x20of\x20a\x20query.\n\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03u\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03u\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03u\x11\x17\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03u\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Type::generated_message_descriptor_data());
            messages.push(StructType::generated_message_descriptor_data());
            messages.push(struct_type::Field::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(TypeCode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
