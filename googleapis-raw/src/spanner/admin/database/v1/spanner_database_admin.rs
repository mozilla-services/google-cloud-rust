// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/spanner/admin/database/v1/spanner_database_admin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  A Cloud Spanner database.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.Database)
pub struct Database {
    // message fields
    ///  Required. The name of the database. Values are of the form
    ///  `projects/<project>/instances/<instance>/databases/<database>`,
    ///  where `<database>` is as specified in the `CREATE DATABASE`
    ///  statement. This name can be passed to other API methods to
    ///  identify the database.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.Database.name)
    pub name: ::std::string::String,
    ///  Output only. The current database state.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.Database.state)
    pub state: ::protobuf::EnumOrUnknown<database::State>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.Database.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Database {
    fn default() -> &'a Database {
        <Database as ::protobuf::Message>::default_instance()
    }
}

impl Database {
    pub fn new() -> Database {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Database| { &m.name },
            |m: &mut Database| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Database| { &m.state },
            |m: &mut Database| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Database>(
            "Database",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Database {
    const NAME: &'static str = "Database";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(database::State::STATE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(database::State::STATE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Database {
        Database::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.state = ::protobuf::EnumOrUnknown::new(database::State::STATE_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Database {
        static instance: Database = Database {
            name: ::std::string::String::new(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Database {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Database").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Database {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Database {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Database`
pub mod database {
    ///  Indicates the current state of the database.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.spanner.admin.database.v1.Database.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:google.spanner.admin.database.v1.Database.State.STATE_UNSPECIFIED)
        STATE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.spanner.admin.database.v1.Database.State.CREATING)
        CREATING = 1,
        // @@protoc_insertion_point(enum_value:google.spanner.admin.database.v1.Database.State.READY)
        READY = 2,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::STATE_UNSPECIFIED),
                1 => ::std::option::Option::Some(State::CREATING),
                2 => ::std::option::Option::Some(State::READY),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::STATE_UNSPECIFIED,
            State::CREATING,
            State::READY,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Database.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::STATE_UNSPECIFIED
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("Database.State")
        }
    }
}

///  The request for
///  [ListDatabases][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.ListDatabasesRequest)
pub struct ListDatabasesRequest {
    // message fields
    ///  Required. The instance whose databases should be listed.
    ///  Values are of the form `projects/<project>/instances/<instance>`.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
    pub parent: ::std::string::String,
    ///  Number of databases to be returned in the response. If 0 or less,
    ///  defaults to the server's maximum allowed page size.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
    pub page_size: i32,
    ///  If non-empty, `page_token` should contain a
    ///  [next_page_token][google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token]
    ///  from a previous
    ///  [ListDatabasesResponse][google.spanner.admin.database.v1.ListDatabasesResponse].
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
    pub page_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.ListDatabasesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListDatabasesRequest {
    fn default() -> &'a ListDatabasesRequest {
        <ListDatabasesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListDatabasesRequest {
    pub fn new() -> ListDatabasesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &ListDatabasesRequest| { &m.parent },
            |m: &mut ListDatabasesRequest| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_size",
            |m: &ListDatabasesRequest| { &m.page_size },
            |m: &mut ListDatabasesRequest| { &mut m.page_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_token",
            |m: &ListDatabasesRequest| { &m.page_token },
            |m: &mut ListDatabasesRequest| { &mut m.page_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListDatabasesRequest>(
            "ListDatabasesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListDatabasesRequest {
    const NAME: &'static str = "ListDatabasesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent = is.read_string()?;
                },
                24 => {
                    self.page_size = is.read_int32()?;
                },
                34 => {
                    self.page_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.page_size);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListDatabasesRequest {
        ListDatabasesRequest::new()
    }

    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListDatabasesRequest {
        static instance: ListDatabasesRequest = ListDatabasesRequest {
            parent: ::std::string::String::new(),
            page_size: 0,
            page_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListDatabasesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListDatabasesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListDatabasesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDatabasesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The response for
///  [ListDatabases][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.ListDatabasesResponse)
pub struct ListDatabasesResponse {
    // message fields
    ///  Databases that matched the request.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
    pub databases: ::std::vec::Vec<Database>,
    ///  `next_page_token` can be sent in a subsequent
    ///  [ListDatabases][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases]
    ///  call to fetch more of the matching databases.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
    pub next_page_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.ListDatabasesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListDatabasesResponse {
    fn default() -> &'a ListDatabasesResponse {
        <ListDatabasesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListDatabasesResponse {
    pub fn new() -> ListDatabasesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "databases",
            |m: &ListDatabasesResponse| { &m.databases },
            |m: &mut ListDatabasesResponse| { &mut m.databases },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_page_token",
            |m: &ListDatabasesResponse| { &m.next_page_token },
            |m: &mut ListDatabasesResponse| { &mut m.next_page_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListDatabasesResponse>(
            "ListDatabasesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListDatabasesResponse {
    const NAME: &'static str = "ListDatabasesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.databases.push(is.read_message()?);
                },
                18 => {
                    self.next_page_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.databases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.databases {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListDatabasesResponse {
        ListDatabasesResponse::new()
    }

    fn clear(&mut self) {
        self.databases.clear();
        self.next_page_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListDatabasesResponse {
        static instance: ListDatabasesResponse = ListDatabasesResponse {
            databases: ::std::vec::Vec::new(),
            next_page_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListDatabasesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListDatabasesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListDatabasesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDatabasesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for
///  [CreateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.CreateDatabase].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.CreateDatabaseRequest)
pub struct CreateDatabaseRequest {
    // message fields
    ///  Required. The name of the instance that will serve the new database.
    ///  Values are of the form `projects/<project>/instances/<instance>`.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
    pub parent: ::std::string::String,
    ///  Required. A `CREATE DATABASE` statement, which specifies the ID of the
    ///  new database.  The database ID must conform to the regular expression
    ///  `[a-z][a-z0-9_\-]*[a-z0-9]` and be between 2 and 30 characters in length.
    ///  If the database ID is a reserved word or if it contains a hyphen, the
    ///  database ID must be enclosed in backticks (`` ` ``).
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
    pub create_statement: ::std::string::String,
    ///  An optional list of DDL statements to run inside the newly created
    ///  database. Statements can create tables, indexes, etc. These
    ///  statements execute atomically with the creation of the database:
    ///  if there is an error in any statement, the database is not created.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
    pub extra_statements: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.CreateDatabaseRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateDatabaseRequest {
    fn default() -> &'a CreateDatabaseRequest {
        <CreateDatabaseRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDatabaseRequest {
    pub fn new() -> CreateDatabaseRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &CreateDatabaseRequest| { &m.parent },
            |m: &mut CreateDatabaseRequest| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "create_statement",
            |m: &CreateDatabaseRequest| { &m.create_statement },
            |m: &mut CreateDatabaseRequest| { &mut m.create_statement },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extra_statements",
            |m: &CreateDatabaseRequest| { &m.extra_statements },
            |m: &mut CreateDatabaseRequest| { &mut m.extra_statements },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateDatabaseRequest>(
            "CreateDatabaseRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateDatabaseRequest {
    const NAME: &'static str = "CreateDatabaseRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent = is.read_string()?;
                },
                18 => {
                    self.create_statement = is.read_string()?;
                },
                26 => {
                    self.extra_statements.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.create_statement.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.create_statement);
        }
        for value in &self.extra_statements {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.create_statement.is_empty() {
            os.write_string(2, &self.create_statement)?;
        }
        for v in &self.extra_statements {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateDatabaseRequest {
        CreateDatabaseRequest::new()
    }

    fn clear(&mut self) {
        self.parent.clear();
        self.create_statement.clear();
        self.extra_statements.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateDatabaseRequest {
        static instance: CreateDatabaseRequest = CreateDatabaseRequest {
            parent: ::std::string::String::new(),
            create_statement: ::std::string::String::new(),
            extra_statements: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateDatabaseRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateDatabaseRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateDatabaseRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDatabaseRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Metadata type for the operation returned by
///  [CreateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.CreateDatabase].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.CreateDatabaseMetadata)
pub struct CreateDatabaseMetadata {
    // message fields
    ///  The database being created.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
    pub database: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.CreateDatabaseMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateDatabaseMetadata {
    fn default() -> &'a CreateDatabaseMetadata {
        <CreateDatabaseMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateDatabaseMetadata {
    pub fn new() -> CreateDatabaseMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "database",
            |m: &CreateDatabaseMetadata| { &m.database },
            |m: &mut CreateDatabaseMetadata| { &mut m.database },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateDatabaseMetadata>(
            "CreateDatabaseMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateDatabaseMetadata {
    const NAME: &'static str = "CreateDatabaseMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateDatabaseMetadata {
        CreateDatabaseMetadata::new()
    }

    fn clear(&mut self) {
        self.database.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateDatabaseMetadata {
        static instance: CreateDatabaseMetadata = CreateDatabaseMetadata {
            database: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateDatabaseMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateDatabaseMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateDatabaseMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDatabaseMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for
///  [GetDatabase][google.spanner.admin.database.v1.DatabaseAdmin.GetDatabase].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.GetDatabaseRequest)
pub struct GetDatabaseRequest {
    // message fields
    ///  Required. The name of the requested database. Values are of the form
    ///  `projects/<project>/instances/<instance>/databases/<database>`.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.GetDatabaseRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.GetDatabaseRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDatabaseRequest {
    fn default() -> &'a GetDatabaseRequest {
        <GetDatabaseRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDatabaseRequest {
    pub fn new() -> GetDatabaseRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &GetDatabaseRequest| { &m.name },
            |m: &mut GetDatabaseRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDatabaseRequest>(
            "GetDatabaseRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDatabaseRequest {
    const NAME: &'static str = "GetDatabaseRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDatabaseRequest {
        GetDatabaseRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDatabaseRequest {
        static instance: GetDatabaseRequest = GetDatabaseRequest {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDatabaseRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDatabaseRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDatabaseRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDatabaseRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Enqueues the given DDL statements to be applied, in order but not
///  necessarily all at once, to the database schema at some point (or
///  points) in the future. The server checks that the statements
///  are executable (syntactically valid, name tables that exist, etc.)
///  before enqueueing them, but they may still fail upon
///  later execution (e.g., if a statement from another batch of
///  statements is applied first and it conflicts in some way, or if
///  there is some data-related problem like a `NULL` value in a column to
///  which `NOT NULL` would be added). If a statement fails, all
///  subsequent statements in the batch are automatically cancelled.
///
///  Each batch of statements is assigned a name which can be used with
///  the [Operations][google.longrunning.Operations] API to monitor
///  progress. See the
///  [operation_id][google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id]
///  field for more details.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
pub struct UpdateDatabaseDdlRequest {
    // message fields
    ///  Required. The database to update.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
    pub database: ::std::string::String,
    ///  Required. DDL statements to be applied to the database.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
    pub statements: ::std::vec::Vec<::std::string::String>,
    ///  If empty, the new update request is assigned an
    ///  automatically-generated operation ID. Otherwise, `operation_id`
    ///  is used to construct the name of the resulting
    ///  [Operation][google.longrunning.Operation].
    ///
    ///  Specifying an explicit operation ID simplifies determining
    ///  whether the statements were executed in the event that the
    ///  [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]
    ///  call is replayed, or the return value is otherwise lost: the
    ///  [database][google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database]
    ///  and `operation_id` fields can be combined to form the
    ///  [name][google.longrunning.Operation.name] of the resulting
    ///  [longrunning.Operation][google.longrunning.Operation]:
    ///  `<database>/operations/<operation_id>`.
    ///
    ///  `operation_id` should be unique within the database, and must be
    ///  a valid identifier: `[a-z][a-z0-9_]*`. Note that
    ///  automatically-generated operation IDs always begin with an
    ///  underscore. If the named operation already exists,
    ///  [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]
    ///  returns `ALREADY_EXISTS`.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
    pub operation_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateDatabaseDdlRequest {
    fn default() -> &'a UpdateDatabaseDdlRequest {
        <UpdateDatabaseDdlRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateDatabaseDdlRequest {
    pub fn new() -> UpdateDatabaseDdlRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "database",
            |m: &UpdateDatabaseDdlRequest| { &m.database },
            |m: &mut UpdateDatabaseDdlRequest| { &mut m.database },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "statements",
            |m: &UpdateDatabaseDdlRequest| { &m.statements },
            |m: &mut UpdateDatabaseDdlRequest| { &mut m.statements },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_id",
            |m: &UpdateDatabaseDdlRequest| { &m.operation_id },
            |m: &mut UpdateDatabaseDdlRequest| { &mut m.operation_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateDatabaseDdlRequest>(
            "UpdateDatabaseDdlRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateDatabaseDdlRequest {
    const NAME: &'static str = "UpdateDatabaseDdlRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database = is.read_string()?;
                },
                18 => {
                    self.statements.push(is.read_string()?);
                },
                26 => {
                    self.operation_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        for value in &self.statements {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.operation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.operation_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        for v in &self.statements {
            os.write_string(2, &v)?;
        };
        if !self.operation_id.is_empty() {
            os.write_string(3, &self.operation_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateDatabaseDdlRequest {
        UpdateDatabaseDdlRequest::new()
    }

    fn clear(&mut self) {
        self.database.clear();
        self.statements.clear();
        self.operation_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateDatabaseDdlRequest {
        static instance: UpdateDatabaseDdlRequest = UpdateDatabaseDdlRequest {
            database: ::std::string::String::new(),
            statements: ::std::vec::Vec::new(),
            operation_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateDatabaseDdlRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateDatabaseDdlRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateDatabaseDdlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateDatabaseDdlRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Metadata type for the operation returned by
///  [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
pub struct UpdateDatabaseDdlMetadata {
    // message fields
    ///  The database being modified.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
    pub database: ::std::string::String,
    ///  For an update this list contains all the statements. For an
    ///  individual statement, this list contains only that statement.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
    pub statements: ::std::vec::Vec<::std::string::String>,
    ///  Reports the commit timestamps of all statements that have
    ///  succeeded so far, where `commit_timestamps[i]` is the commit
    ///  timestamp for the statement `statements[i]`.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
    pub commit_timestamps: ::std::vec::Vec<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateDatabaseDdlMetadata {
    fn default() -> &'a UpdateDatabaseDdlMetadata {
        <UpdateDatabaseDdlMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateDatabaseDdlMetadata {
    pub fn new() -> UpdateDatabaseDdlMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "database",
            |m: &UpdateDatabaseDdlMetadata| { &m.database },
            |m: &mut UpdateDatabaseDdlMetadata| { &mut m.database },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "statements",
            |m: &UpdateDatabaseDdlMetadata| { &m.statements },
            |m: &mut UpdateDatabaseDdlMetadata| { &mut m.statements },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "commit_timestamps",
            |m: &UpdateDatabaseDdlMetadata| { &m.commit_timestamps },
            |m: &mut UpdateDatabaseDdlMetadata| { &mut m.commit_timestamps },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateDatabaseDdlMetadata>(
            "UpdateDatabaseDdlMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateDatabaseDdlMetadata {
    const NAME: &'static str = "UpdateDatabaseDdlMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database = is.read_string()?;
                },
                18 => {
                    self.statements.push(is.read_string()?);
                },
                26 => {
                    self.commit_timestamps.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        for value in &self.statements {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.commit_timestamps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        for v in &self.statements {
            os.write_string(2, &v)?;
        };
        for v in &self.commit_timestamps {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateDatabaseDdlMetadata {
        UpdateDatabaseDdlMetadata::new()
    }

    fn clear(&mut self) {
        self.database.clear();
        self.statements.clear();
        self.commit_timestamps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateDatabaseDdlMetadata {
        static instance: UpdateDatabaseDdlMetadata = UpdateDatabaseDdlMetadata {
            database: ::std::string::String::new(),
            statements: ::std::vec::Vec::new(),
            commit_timestamps: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateDatabaseDdlMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateDatabaseDdlMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateDatabaseDdlMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateDatabaseDdlMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for
///  [DropDatabase][google.spanner.admin.database.v1.DatabaseAdmin.DropDatabase].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.DropDatabaseRequest)
pub struct DropDatabaseRequest {
    // message fields
    ///  Required. The database to be dropped.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.DropDatabaseRequest.database)
    pub database: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.DropDatabaseRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropDatabaseRequest {
    fn default() -> &'a DropDatabaseRequest {
        <DropDatabaseRequest as ::protobuf::Message>::default_instance()
    }
}

impl DropDatabaseRequest {
    pub fn new() -> DropDatabaseRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "database",
            |m: &DropDatabaseRequest| { &m.database },
            |m: &mut DropDatabaseRequest| { &mut m.database },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropDatabaseRequest>(
            "DropDatabaseRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropDatabaseRequest {
    const NAME: &'static str = "DropDatabaseRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropDatabaseRequest {
        DropDatabaseRequest::new()
    }

    fn clear(&mut self) {
        self.database.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropDatabaseRequest {
        static instance: DropDatabaseRequest = DropDatabaseRequest {
            database: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropDatabaseRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropDatabaseRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropDatabaseRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropDatabaseRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for
///  [GetDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseDdl].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
pub struct GetDatabaseDdlRequest {
    // message fields
    ///  Required. The database whose schema we wish to get.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
    pub database: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.GetDatabaseDdlRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDatabaseDdlRequest {
    fn default() -> &'a GetDatabaseDdlRequest {
        <GetDatabaseDdlRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDatabaseDdlRequest {
    pub fn new() -> GetDatabaseDdlRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "database",
            |m: &GetDatabaseDdlRequest| { &m.database },
            |m: &mut GetDatabaseDdlRequest| { &mut m.database },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDatabaseDdlRequest>(
            "GetDatabaseDdlRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDatabaseDdlRequest {
    const NAME: &'static str = "GetDatabaseDdlRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDatabaseDdlRequest {
        GetDatabaseDdlRequest::new()
    }

    fn clear(&mut self) {
        self.database.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDatabaseDdlRequest {
        static instance: GetDatabaseDdlRequest = GetDatabaseDdlRequest {
            database: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDatabaseDdlRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDatabaseDdlRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDatabaseDdlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDatabaseDdlRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The response for
///  [GetDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseDdl].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
pub struct GetDatabaseDdlResponse {
    // message fields
    ///  A list of formatted DDL statements defining the schema of the database
    ///  specified in the request.
    // @@protoc_insertion_point(field:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
    pub statements: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.database.v1.GetDatabaseDdlResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDatabaseDdlResponse {
    fn default() -> &'a GetDatabaseDdlResponse {
        <GetDatabaseDdlResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDatabaseDdlResponse {
    pub fn new() -> GetDatabaseDdlResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "statements",
            |m: &GetDatabaseDdlResponse| { &m.statements },
            |m: &mut GetDatabaseDdlResponse| { &mut m.statements },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDatabaseDdlResponse>(
            "GetDatabaseDdlResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDatabaseDdlResponse {
    const NAME: &'static str = "GetDatabaseDdlResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.statements.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.statements {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.statements {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDatabaseDdlResponse {
        GetDatabaseDdlResponse::new()
    }

    fn clear(&mut self) {
        self.statements.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDatabaseDdlResponse {
        static instance: GetDatabaseDdlResponse = GetDatabaseDdlResponse {
            statements: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDatabaseDdlResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDatabaseDdlResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDatabaseDdlResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDatabaseDdlResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=google/spanner/admin/database/v1/spanner_database_admin.proto\x12\x20\
    google.spanner.admin.database.v1\x1a\x1cgoogle/api/annotations.proto\x1a\
    \x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\
    \x19google/api/resource.proto\x1a\x1egoogle/iam/v1/iam_policy.proto\x1a\
    \x1agoogle/iam/v1/policy.proto\x1a#google/longrunning/operations.proto\
    \x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.pro\
    to\"\x83\x02\n\x08Database\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12F\n\x05state\x18\x02\x20\x01(\x0e20.google.spanner.admin.database.v1\
    .Database.StateR\x05state\"7\n\x05State\x12\x15\n\x11STATE_UNSPECIFIED\
    \x10\0\x12\x0c\n\x08CREATING\x10\x01\x12\t\n\x05READY\x10\x02:b\xeaA_\n\
    \x1fspanner.googleapis.com/Database\x12<projects/{project}/instances/{in\
    stance}/databases/{database}\"\x93\x01\n\x14ListDatabasesRequest\x12?\n\
    \x06parent\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\n\x1fspanner.googleapis\
    .com/Instance\xe0A\x02\x12\x1b\n\tpage_size\x18\x03\x20\x01(\x05R\x08pag\
    eSize\x12\x1d\n\npage_token\x18\x04\x20\x01(\tR\tpageToken\"\x89\x01\n\
    \x15ListDatabasesResponse\x12H\n\tdatabases\x18\x01\x20\x03(\x0b2*.googl\
    e.spanner.admin.database.v1.DatabaseR\tdatabases\x12&\n\x0fnext_page_tok\
    en\x18\x02\x20\x01(\tR\rnextPageToken\"\xb3\x01\n\x15CreateDatabaseReque\
    st\x12?\n\x06parent\x18\x01\x20\x01(\tR\x06parentB'\xfaA!\n\x1fspanner.g\
    oogleapis.com/Instance\xe0A\x02\x12.\n\x10create_statement\x18\x02\x20\
    \x01(\tR\x0fcreateStatementB\x03\xe0A\x02\x12)\n\x10extra_statements\x18\
    \x03\x20\x03(\tR\x0fextraStatements\"Z\n\x16CreateDatabaseMetadata\x12@\
    \n\x08database\x18\x01\x20\x01(\tR\x08databaseB$\xfaA!\n\x1fspanner.goog\
    leapis.com/Database\"Q\n\x12GetDatabaseRequest\x12;\n\x04name\x18\x01\
    \x20\x01(\tR\x04nameB'\xfaA!\n\x1fspanner.googleapis.com/Database\xe0A\
    \x02\"\xa7\x01\n\x18UpdateDatabaseDdlRequest\x12C\n\x08database\x18\x01\
    \x20\x01(\tR\x08databaseB'\xfaA!\n\x1fspanner.googleapis.com/Database\
    \xe0A\x02\x12#\n\nstatements\x18\x02\x20\x03(\tR\nstatementsB\x03\xe0A\
    \x02\x12!\n\x0coperation_id\x18\x03\x20\x01(\tR\x0boperationId\"\xc6\x01\
    \n\x19UpdateDatabaseDdlMetadata\x12@\n\x08database\x18\x01\x20\x01(\tR\
    \x08databaseB$\xfaA!\n\x1fspanner.googleapis.com/Database\x12\x1e\n\nsta\
    tements\x18\x02\x20\x03(\tR\nstatements\x12G\n\x11commit_timestamps\x18\
    \x03\x20\x03(\x0b2\x1a.google.protobuf.TimestampR\x10commitTimestamps\"Z\
    \n\x13DropDatabaseRequest\x12C\n\x08database\x18\x01\x20\x01(\tR\x08data\
    baseB'\xfaA!\n\x1fspanner.googleapis.com/Database\xe0A\x02\"\\\n\x15GetD\
    atabaseDdlRequest\x12C\n\x08database\x18\x01\x20\x01(\tR\x08databaseB'\
    \xfaA!\n\x1fspanner.googleapis.com/Database\xe0A\x02\"8\n\x16GetDatabase\
    DdlResponse\x12\x1e\n\nstatements\x18\x01\x20\x03(\tR\nstatements2\xad\
    \x11\n\rDatabaseAdmin\x12\xc0\x01\n\rListDatabases\x126.google.spanner.a\
    dmin.database.v1.ListDatabasesRequest\x1a7.google.spanner.admin.database\
    .v1.ListDatabasesResponse\">\x82\xd3\xe4\x93\x02/\x12-/v1/{parent=projec\
    ts/*/instances/*}/databases\xdaA\x06parent\x12\xa4\x02\n\x0eCreateDataba\
    se\x127.google.spanner.admin.database.v1.CreateDatabaseRequest\x1a\x1d.g\
    oogle.longrunning.Operation\"\xb9\x01\xcaAd\n)google.spanner.admin.datab\
    ase.v1.Database\x127google.spanner.admin.database.v1.CreateDatabaseMetad\
    ata\x82\xd3\xe4\x93\x022\"-/v1/{parent=projects/*/instances/*}/databases\
    :\x01*\xdaA\x17parent,create_statement\x12\xad\x01\n\x0bGetDatabase\x124\
    .google.spanner.admin.database.v1.GetDatabaseRequest\x1a*.google.spanner\
    .admin.database.v1.Database\"<\x82\xd3\xe4\x93\x02/\x12-/v1/{name=projec\
    ts/*/instances/*/databases/*}\xdaA\x04name\x12\x9d\x02\n\x11UpdateDataba\
    seDdl\x12:.google.spanner.admin.database.v1.UpdateDatabaseDdlRequest\x1a\
    \x1d.google.longrunning.Operation\"\xac\x01\xcaAS\n\x15google.protobuf.E\
    mpty\x12:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata\x82\
    \xd3\xe4\x93\x02:25/v1/{database=projects/*/instances/*/databases/*}/ddl\
    :\x01*\xdaA\x13database,statements\x12\xa3\x01\n\x0cDropDatabase\x125.go\
    ogle.spanner.admin.database.v1.DropDatabaseRequest\x1a\x16.google.protob\
    uf.Empty\"D\x82\xd3\xe4\x93\x023*1/v1/{database=projects/*/instances/*/d\
    atabases/*}\xdaA\x08database\x12\xcd\x01\n\x0eGetDatabaseDdl\x127.google\
    .spanner.admin.database.v1.GetDatabaseDdlRequest\x1a8.google.spanner.adm\
    in.database.v1.GetDatabaseDdlResponse\"H\x82\xd3\xe4\x93\x027\x125/v1/{d\
    atabase=projects/*/instances/*/databases/*}/ddl\xdaA\x08database\x12\xeb\
    \x01\n\x0cSetIamPolicy\x12\".google.iam.v1.SetIamPolicyRequest\x1a\x15.g\
    oogle.iam.v1.Policy\"\x9f\x01\x82\xd3\xe4\x93\x02\x86\x01\">/v1/{resourc\
    e=projects/*/instances/*/databases/*}:setIamPolicy:\x01*ZA\"</v1/{resour\
    ce=projects/*/instances/*/backups/*}:setIamPolicy:\x01*\xdaA\x0fresource\
    ,policy\x12\xe4\x01\n\x0cGetIamPolicy\x12\".google.iam.v1.GetIamPolicyRe\
    quest\x1a\x15.google.iam.v1.Policy\"\x98\x01\x82\xd3\xe4\x93\x02\x86\x01\
    \">/v1/{resource=projects/*/instances/*/databases/*}:getIamPolicy:\x01*Z\
    A\"</v1/{resource=projects/*/instances/*/backups/*}:getIamPolicy:\x01*\
    \xdaA\x08resource\x12\x9c\x02\n\x12TestIamPermissions\x12(.google.iam.v1\
    .TestIamPermissionsRequest\x1a).google.iam.v1.TestIamPermissionsResponse\
    \"\xb0\x01\x82\xd3\xe4\x93\x02\x92\x01\"D/v1/{resource=projects/*/instan\
    ces/*/databases/*}:testIamPermissions:\x01*ZG\"B/v1/{resource=projects/*\
    /instances/*/backups/*}:testIamPermissions:\x01*\xdaA\x14resource,permis\
    sions\x1ax\xd2A\\https://www.googleapis.com/auth/cloud-platform,https://\
    www.googleapis.com/auth/spanner.admin\xcaA\x16spanner.googleapis.comB\
    \xac\x02\n$com.google.spanner.admin.database.v1B\x19SpannerDatabaseAdmin\
    ProtoP\x01ZHgoogle.golang.org/genproto/googleapis/spanner/admin/database\
    /v1;database\xaa\x02&Google.Cloud.Spanner.Admin.Database.V1\xca\x02&Goog\
    le\\Cloud\\Spanner\\Admin\\Database\\V1\xeaAJ\n\x1fspanner.googleapis.co\
    m/Instance\x12'projects/{project}/instances/{instance}J\xced\n\x07\x12\
    \x05\x0f\0\x92\x03\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\
    \x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\
    \x12\x03\x11\0)\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\
    \x14\0!\n\t\n\x02\x03\x02\x12\x03\x15\0)\n\t\n\x02\x03\x03\x12\x03\x16\0\
    #\n\t\n\x02\x03\x04\x12\x03\x17\0(\n\t\n\x02\x03\x05\x12\x03\x18\0$\n\t\
    \n\x02\x03\x06\x12\x03\x19\0-\n\t\n\x02\x03\x07\x12\x03\x1a\0%\n\t\n\x02\
    \x03\x08\x12\x03\x1b\0)\n\x08\n\x01\x08\x12\x03\x1d\0C\n\t\n\x02\x08%\
    \x12\x03\x1d\0C\n\x08\n\x01\x08\x12\x03\x1e\0_\n\t\n\x02\x08\x0b\x12\x03\
    \x1e\0_\n\x08\n\x01\x08\x12\x03\x1f\0\"\n\t\n\x02\x08\n\x12\x03\x1f\0\"\
    \n\x08\n\x01\x08\x12\x03\x20\0:\n\t\n\x02\x08\x08\x12\x03\x20\0:\n\x08\n\
    \x01\x08\x12\x03!\0=\n\t\n\x02\x08\x01\x12\x03!\0=\n\x08\n\x01\x08\x12\
    \x03\"\0E\n\t\n\x02\x08)\x12\x03\"\0E\n\t\n\x01\x08\x12\x04'\0*\x02\n\
    \xc1\x01\n\x04\x08\x9d\x08\0\x12\x04'\0*\x02\x1a\xb2\x01\x20The\x20Insta\
    nce\x20resource\x20is\x20defined\x20in\x20`google.spanner.admin.instance\
    .v1`.\n\x20Because\x20this\x20is\x20a\x20separate,\x20independent\x20API\
    \x20(technically),\x20we\x20redefine\n\x20the\x20resource\x20name\x20pat\
    tern\x20here.\n\n\xc9\x01\n\x02\x06\0\x12\x051\0\xba\x01\x01\x1a\xbb\x01\
    \x20Cloud\x20Spanner\x20Database\x20Admin\x20API\n\n\x20The\x20Cloud\x20\
    Spanner\x20Database\x20Admin\x20API\x20can\x20be\x20used\x20to\x20create\
    ,\x20drop,\x20and\n\x20list\x20databases.\x20It\x20also\x20enables\x20up\
    dating\x20the\x20schema\x20of\x20pre-existing\n\x20databases.\n\n\n\n\
    \x03\x06\0\x01\x12\x031\x08\x15\n\n\n\x03\x06\0\x03\x12\x032\x02>\n\x0c\
    \n\x05\x06\0\x03\x99\x08\x12\x032\x02>\n\x0b\n\x03\x06\0\x03\x12\x043\
    \x0256\n\r\n\x05\x06\0\x03\x9a\x08\x12\x043\x0256\n.\n\x04\x06\0\x02\0\
    \x12\x048\x02=\x03\x1a\x20\x20Lists\x20Cloud\x20Spanner\x20databases.\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x038\x06\x13\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x038\x14(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x0383H\n\r\n\x05\x06\
    \0\x02\0\x04\x12\x049\x04;\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\
    \x12\x049\x04;\x06\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03<\x044\n\x0f\n\x08\
    \x06\0\x02\0\x04\x9b\x08\0\x12\x03<\x044\n\xc8\x04\n\x04\x06\0\x02\x01\
    \x12\x04G\x02R\x03\x1a\xb9\x04\x20Creates\x20a\x20new\x20Cloud\x20Spanne\
    r\x20database\x20and\x20starts\x20to\x20prepare\x20it\x20for\x20serving.\
    \n\x20The\x20returned\x20[long-running\x20operation][google.longrunning.\
    Operation]\x20will\n\x20have\x20a\x20name\x20of\x20the\x20format\x20`<da\
    tabase_name>/operations/<operation_id>`\x20and\n\x20can\x20be\x20used\
    \x20to\x20track\x20preparation\x20of\x20the\x20database.\x20The\n\x20[me\
    tadata][google.longrunning.Operation.metadata]\x20field\x20type\x20is\n\
    \x20[CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateData\
    baseMetadata].\n\x20The\x20[response][google.longrunning.Operation.respo\
    nse]\x20field\x20type\x20is\n\x20[Database][google.spanner.admin.databas\
    e.v1.Database],\x20if\x20successful.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03G\x06\x14\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03G\x15*\n\x0c\n\x05\
    \x06\0\x02\x01\x03\x12\x03H\x0f+\n\r\n\x05\x06\0\x02\x01\x04\x12\x04I\
    \x04L\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04I\x04L\x06\n\
    \x0c\n\x05\x06\0\x02\x01\x04\x12\x03M\x04E\n\x0f\n\x08\x06\0\x02\x01\x04\
    \x9b\x08\0\x12\x03M\x04E\n\r\n\x05\x06\0\x02\x01\x04\x12\x04N\x04Q\x06\n\
    \x0f\n\x07\x06\0\x02\x01\x04\x99\x08\x12\x04N\x04Q\x06\n;\n\x04\x06\0\
    \x02\x02\x12\x04U\x02Z\x03\x1a-\x20Gets\x20the\x20state\x20of\x20a\x20Cl\
    oud\x20Spanner\x20database.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03U\x06\
    \x11\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03U\x12$\n\x0c\n\x05\x06\0\x02\
    \x02\x03\x12\x03U/7\n\r\n\x05\x06\0\x02\x02\x04\x12\x04V\x04X\x06\n\x11\
    \n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04V\x04X\x06\n\x0c\n\x05\x06\0\
    \x02\x02\x04\x12\x03Y\x042\n\x0f\n\x08\x06\0\x02\x02\x04\x9b\x08\0\x12\
    \x03Y\x042\n\x8a\x04\n\x04\x06\0\x02\x03\x12\x04d\x02o\x03\x1a\xfb\x03\
    \x20Updates\x20the\x20schema\x20of\x20a\x20Cloud\x20Spanner\x20database\
    \x20by\n\x20creating/altering/dropping\x20tables,\x20columns,\x20indexes\
    ,\x20etc.\x20The\x20returned\n\x20[long-running\x20operation][google.lon\
    grunning.Operation]\x20will\x20have\x20a\x20name\x20of\n\x20the\x20forma\
    t\x20`<database_name>/operations/<operation_id>`\x20and\x20can\x20be\x20\
    used\x20to\n\x20track\x20execution\x20of\x20the\x20schema\x20change(s).\
    \x20The\n\x20[metadata][google.longrunning.Operation.metadata]\x20field\
    \x20type\x20is\n\x20[UpdateDatabaseDdlMetadata][google.spanner.admin.dat\
    abase.v1.UpdateDatabaseDdlMetadata].\n\x20The\x20operation\x20has\x20no\
    \x20response.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03d\x06\x17\n\x0c\n\
    \x05\x06\0\x02\x03\x02\x12\x03d\x180\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03e\x0f+\n\r\n\x05\x06\0\x02\x03\x04\x12\x04f\x04i\x06\n\x11\n\t\x06\0\
    \x02\x03\x04\xb0\xca\xbc\"\x12\x04f\x04i\x06\n\x0c\n\x05\x06\0\x02\x03\
    \x04\x12\x03j\x04A\n\x0f\n\x08\x06\0\x02\x03\x04\x9b\x08\0\x12\x03j\x04A\
    \n\r\n\x05\x06\0\x02\x03\x04\x12\x04k\x04n\x06\n\x0f\n\x07\x06\0\x02\x03\
    \x04\x99\x08\x12\x04k\x04n\x06\n=\n\x04\x06\0\x02\x04\x12\x04r\x02w\x03\
    \x1a/\x20Drops\x20(aka\x20deletes)\x20a\x20Cloud\x20Spanner\x20database.\
    \n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03r\x06\x12\n\x0c\n\x05\x06\0\x02\
    \x04\x02\x12\x03r\x13&\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03r1F\n\r\n\
    \x05\x06\0\x02\x04\x04\x12\x04s\x04u\x06\n\x11\n\t\x06\0\x02\x04\x04\xb0\
    \xca\xbc\"\x12\x04s\x04u\x06\n\x0c\n\x05\x06\0\x02\x04\x04\x12\x03v\x046\
    \n\x0f\n\x08\x06\0\x02\x04\x04\x9b\x08\0\x12\x03v\x046\n\xeb\x01\n\x04\
    \x06\0\x02\x05\x12\x05|\x02\x81\x01\x03\x1a\xdb\x01\x20Returns\x20the\
    \x20schema\x20of\x20a\x20Cloud\x20Spanner\x20database\x20as\x20a\x20list\
    \x20of\x20formatted\n\x20DDL\x20statements.\x20This\x20method\x20does\
    \x20not\x20show\x20pending\x20schema\x20updates,\x20those\x20may\n\x20be\
    \x20queried\x20using\x20the\x20[Operations][google.longrunning.Operation\
    s]\x20API.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03|\x06\x14\n\x0c\n\x05\
    \x06\0\x02\x05\x02\x12\x03|\x15*\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03|5\
    K\n\r\n\x05\x06\0\x02\x05\x04\x12\x04}\x04\x7f\x06\n\x11\n\t\x06\0\x02\
    \x05\x04\xb0\xca\xbc\"\x12\x04}\x04\x7f\x06\n\r\n\x05\x06\0\x02\x05\x04\
    \x12\x04\x80\x01\x046\n\x10\n\x08\x06\0\x02\x05\x04\x9b\x08\0\x12\x04\
    \x80\x01\x046\n\xe9\x01\n\x04\x06\0\x02\x06\x12\x06\x88\x01\x02\x93\x01\
    \x03\x1a\xd8\x01\x20Sets\x20the\x20access\x20control\x20policy\x20on\x20\
    a\x20database\x20resource.\n\x20Replaces\x20any\x20existing\x20policy.\n\
    \n\x20Authorization\x20requires\x20`spanner.databases.setIamPolicy`\n\
    \x20permission\x20on\x20[resource][google.iam.v1.SetIamPolicyRequest.res\
    ource].\n\n\r\n\x05\x06\0\x02\x06\x01\x12\x04\x88\x01\x06\x12\n\r\n\x05\
    \x06\0\x02\x06\x02\x12\x04\x88\x01\x134\n\r\n\x05\x06\0\x02\x06\x03\x12\
    \x04\x89\x01\x0f#\n\x0f\n\x05\x06\0\x02\x06\x04\x12\x06\x8a\x01\x04\x91\
    \x01\x06\n\x13\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x06\x8a\x01\x04\
    \x91\x01\x06\n\r\n\x05\x06\0\x02\x06\x04\x12\x04\x92\x01\x04=\n\x10\n\
    \x08\x06\0\x02\x06\x04\x9b\x08\0\x12\x04\x92\x01\x04=\n\x9a\x02\n\x04\
    \x06\0\x02\x07\x12\x06\x9b\x01\x02\xa6\x01\x03\x1a\x89\x02\x20Gets\x20th\
    e\x20access\x20control\x20policy\x20for\x20a\x20database\x20resource.\n\
    \x20Returns\x20an\x20empty\x20policy\x20if\x20a\x20database\x20exists\
    \x20but\x20does\n\x20not\x20have\x20a\x20policy\x20set.\n\n\x20Authoriza\
    tion\x20requires\x20`spanner.databases.getIamPolicy`\x20permission\x20on\
    \n\x20[resource][google.iam.v1.GetIamPolicyRequest.resource].\n\n\r\n\
    \x05\x06\0\x02\x07\x01\x12\x04\x9b\x01\x06\x12\n\r\n\x05\x06\0\x02\x07\
    \x02\x12\x04\x9b\x01\x134\n\r\n\x05\x06\0\x02\x07\x03\x12\x04\x9c\x01\
    \x0f#\n\x0f\n\x05\x06\0\x02\x07\x04\x12\x06\x9d\x01\x04\xa4\x01\x06\n\
    \x13\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\x06\x9d\x01\x04\xa4\x01\x06\
    \n\r\n\x05\x06\0\x02\x07\x04\x12\x04\xa5\x01\x046\n\x10\n\x08\x06\0\x02\
    \x07\x04\x9b\x08\0\x12\x04\xa5\x01\x046\n\xce\x02\n\x04\x06\0\x02\x08\
    \x12\x06\xae\x01\x02\xb9\x01\x03\x1a\xbd\x02\x20Returns\x20permissions\
    \x20that\x20the\x20caller\x20has\x20on\x20the\x20specified\x20database\
    \x20resource.\n\n\x20Attempting\x20this\x20RPC\x20on\x20a\x20non-existen\
    t\x20Cloud\x20Spanner\x20database\x20will\n\x20result\x20in\x20a\x20NOT_\
    FOUND\x20error\x20if\x20the\x20user\x20has\n\x20`spanner.databases.list`\
    \x20permission\x20on\x20the\x20containing\x20Cloud\n\x20Spanner\x20insta\
    nce.\x20Otherwise\x20returns\x20an\x20empty\x20set\x20of\x20permissions.\
    \n\n\r\n\x05\x06\0\x02\x08\x01\x12\x04\xae\x01\x06\x18\n\r\n\x05\x06\0\
    \x02\x08\x02\x12\x04\xae\x01\x19@\n\r\n\x05\x06\0\x02\x08\x03\x12\x04\
    \xaf\x01\x0f7\n\x0f\n\x05\x06\0\x02\x08\x04\x12\x06\xb0\x01\x04\xb7\x01\
    \x06\n\x13\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\x06\xb0\x01\x04\xb7\
    \x01\x06\n\r\n\x05\x06\0\x02\x08\x04\x12\x04\xb8\x01\x04B\n\x10\n\x08\
    \x06\0\x02\x08\x04\x9b\x08\0\x12\x04\xb8\x01\x04B\n)\n\x02\x04\0\x12\x06\
    \xbd\x01\0\xd9\x01\x01\x1a\x1b\x20A\x20Cloud\x20Spanner\x20database.\n\n\
    \x0b\n\x03\x04\0\x01\x12\x04\xbd\x01\x08\x10\n\r\n\x03\x04\0\x07\x12\x06\
    \xbe\x01\x02\xc1\x01\x04\n\x0f\n\x05\x04\0\x07\x9d\x08\x12\x06\xbe\x01\
    \x02\xc1\x01\x04\n>\n\x04\x04\0\x04\0\x12\x06\xc4\x01\x02\xce\x01\x03\
    \x1a.\x20Indicates\x20the\x20current\x20state\x20of\x20the\x20database.\
    \n\n\r\n\x05\x04\0\x04\0\x01\x12\x04\xc4\x01\x07\x0c\n\x20\n\x06\x04\0\
    \x04\0\x02\0\x12\x04\xc6\x01\x04\x1a\x1a\x10\x20Not\x20specified.\n\n\
    \x0f\n\x07\x04\0\x04\0\x02\0\x01\x12\x04\xc6\x01\x04\x15\n\x0f\n\x07\x04\
    \0\x04\0\x02\0\x02\x12\x04\xc6\x01\x18\x19\n\x85\x01\n\x06\x04\0\x04\0\
    \x02\x01\x12\x04\xca\x01\x04\x11\x1au\x20The\x20database\x20is\x20still\
    \x20being\x20created.\x20Operations\x20on\x20the\x20database\x20may\x20f\
    ail\n\x20with\x20`FAILED_PRECONDITION`\x20in\x20this\x20state.\n\n\x0f\n\
    \x07\x04\0\x04\0\x02\x01\x01\x12\x04\xca\x01\x04\x0c\n\x0f\n\x07\x04\0\
    \x04\0\x02\x01\x02\x12\x04\xca\x01\x0f\x10\nB\n\x06\x04\0\x04\0\x02\x02\
    \x12\x04\xcd\x01\x04\x0e\x1a2\x20The\x20database\x20is\x20fully\x20creat\
    ed\x20and\x20ready\x20for\x20use.\n\n\x0f\n\x07\x04\0\x04\0\x02\x02\x01\
    \x12\x04\xcd\x01\x04\t\n\x0f\n\x07\x04\0\x04\0\x02\x02\x02\x12\x04\xcd\
    \x01\x0c\r\n\x9d\x02\n\x04\x04\0\x02\0\x12\x04\xd5\x01\x02\x12\x1a\x8e\
    \x02\x20Required.\x20The\x20name\x20of\x20the\x20database.\x20Values\x20\
    are\x20of\x20the\x20form\n\x20`projects/<project>/instances/<instance>/d\
    atabases/<database>`,\n\x20where\x20`<database>`\x20is\x20as\x20specifie\
    d\x20in\x20the\x20`CREATE\x20DATABASE`\n\x20statement.\x20This\x20name\
    \x20can\x20be\x20passed\x20to\x20other\x20API\x20methods\x20to\n\x20iden\
    tify\x20the\x20database.\n\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xd5\x01\x02\
    \x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\xd5\x01\t\r\n\r\n\x05\x04\0\x02\0\
    \x03\x12\x04\xd5\x01\x10\x11\n8\n\x04\x04\0\x02\x01\x12\x04\xd8\x01\x02\
    \x12\x1a*\x20Output\x20only.\x20The\x20current\x20database\x20state.\n\n\
    \r\n\x05\x04\0\x02\x01\x06\x12\x04\xd8\x01\x02\x07\n\r\n\x05\x04\0\x02\
    \x01\x01\x12\x04\xd8\x01\x08\r\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\xd8\
    \x01\x10\x11\no\n\x02\x04\x01\x12\x06\xdd\x01\0\xf0\x01\x01\x1aa\x20The\
    \x20request\x20for\n\x20[ListDatabases][google.spanner.admin.database.v1\
    .DatabaseAdmin.ListDatabases].\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xdd\x01\
    \x08\x1c\n\x8d\x01\n\x04\x04\x01\x02\0\x12\x06\xe0\x01\x02\xe5\x01\x04\
    \x1a}\x20Required.\x20The\x20instance\x20whose\x20databases\x20should\
    \x20be\x20listed.\n\x20Values\x20are\x20of\x20the\x20form\x20`projects/<\
    project>/instances/<instance>`.\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\
    \xe0\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xe0\x01\t\x0f\n\r\n\
    \x05\x04\x01\x02\0\x03\x12\x04\xe0\x01\x12\x13\n\x0f\n\x05\x04\x01\x02\0\
    \x08\x12\x06\xe0\x01\x14\xe5\x01\x03\n\x10\n\x08\x04\x01\x02\0\x08\x9c\
    \x08\0\x12\x04\xe1\x01\x04*\n\x11\n\x07\x04\x01\x02\0\x08\x9f\x08\x12\
    \x06\xe2\x01\x04\xe4\x01\x05\n\x86\x01\n\x04\x04\x01\x02\x01\x12\x04\xe9\
    \x01\x02\x16\x1ax\x20Number\x20of\x20databases\x20to\x20be\x20returned\
    \x20in\x20the\x20response.\x20If\x200\x20or\x20less,\n\x20defaults\x20to\
    \x20the\x20server's\x20maximum\x20allowed\x20page\x20size.\n\n\r\n\x05\
    \x04\x01\x02\x01\x05\x12\x04\xe9\x01\x02\x07\n\r\n\x05\x04\x01\x02\x01\
    \x01\x12\x04\xe9\x01\x08\x11\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xe9\
    \x01\x14\x15\n\xfa\x01\n\x04\x04\x01\x02\x02\x12\x04\xef\x01\x02\x18\x1a\
    \xeb\x01\x20If\x20non-empty,\x20`page_token`\x20should\x20contain\x20a\n\
    \x20[next_page_token][google.spanner.admin.database.v1.ListDatabasesResp\
    onse.next_page_token]\n\x20from\x20a\x20previous\n\x20[ListDatabasesResp\
    onse][google.spanner.admin.database.v1.ListDatabasesResponse].\n\n\r\n\
    \x05\x04\x01\x02\x02\x05\x12\x04\xef\x01\x02\x08\n\r\n\x05\x04\x01\x02\
    \x02\x01\x12\x04\xef\x01\t\x13\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\xef\
    \x01\x16\x17\np\n\x02\x04\x02\x12\x06\xf4\x01\0\xfc\x01\x01\x1ab\x20The\
    \x20response\x20for\n\x20[ListDatabases][google.spanner.admin.database.v\
    1.DatabaseAdmin.ListDatabases].\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xf4\
    \x01\x08\x1d\n3\n\x04\x04\x02\x02\0\x12\x04\xf6\x01\x02\"\x1a%\x20Databa\
    ses\x20that\x20matched\x20the\x20request.\n\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04\xf6\x01\x02\n\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\xf6\x01\x0b\
    \x13\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xf6\x01\x14\x1d\n\r\n\x05\x04\
    \x02\x02\0\x03\x12\x04\xf6\x01\x20!\n\xbc\x01\n\x04\x04\x02\x02\x01\x12\
    \x04\xfb\x01\x02\x1d\x1a\xad\x01\x20`next_page_token`\x20can\x20be\x20se\
    nt\x20in\x20a\x20subsequent\n\x20[ListDatabases][google.spanner.admin.da\
    tabase.v1.DatabaseAdmin.ListDatabases]\n\x20call\x20to\x20fetch\x20more\
    \x20of\x20the\x20matching\x20databases.\n\n\r\n\x05\x04\x02\x02\x01\x05\
    \x12\x04\xfb\x01\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xfb\x01\t\
    \x18\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xfb\x01\x1b\x1c\nq\n\x02\x04\
    \x03\x12\x06\x80\x02\0\x96\x02\x01\x1ac\x20The\x20request\x20for\n\x20[C\
    reateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.CreateData\
    base].\n\n\x0b\n\x03\x04\x03\x01\x12\x04\x80\x02\x08\x1d\n\x9a\x01\n\x04\
    \x04\x03\x02\0\x12\x06\x83\x02\x02\x88\x02\x04\x1a\x89\x01\x20Required.\
    \x20The\x20name\x20of\x20the\x20instance\x20that\x20will\x20serve\x20the\
    \x20new\x20database.\n\x20Values\x20are\x20of\x20the\x20form\x20`project\
    s/<project>/instances/<instance>`.\n\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\
    \x83\x02\x02\x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x83\x02\t\x0f\n\r\n\
    \x05\x04\x03\x02\0\x03\x12\x04\x83\x02\x12\x13\n\x0f\n\x05\x04\x03\x02\0\
    \x08\x12\x06\x83\x02\x14\x88\x02\x03\n\x10\n\x08\x04\x03\x02\0\x08\x9c\
    \x08\0\x12\x04\x84\x02\x04*\n\x11\n\x07\x04\x03\x02\0\x08\x9f\x08\x12\
    \x06\x85\x02\x04\x87\x02\x05\n\xe6\x02\n\x04\x04\x03\x02\x01\x12\x04\x8f\
    \x02\x02G\x1a\xd7\x02\x20Required.\x20A\x20`CREATE\x20DATABASE`\x20state\
    ment,\x20which\x20specifies\x20the\x20ID\x20of\x20the\n\x20new\x20databa\
    se.\x20\x20The\x20database\x20ID\x20must\x20conform\x20to\x20the\x20regu\
    lar\x20expression\n\x20`[a-z][a-z0-9_\\-]*[a-z0-9]`\x20and\x20be\x20betw\
    een\x202\x20and\x2030\x20characters\x20in\x20length.\n\x20If\x20the\x20d\
    atabase\x20ID\x20is\x20a\x20reserved\x20word\x20or\x20if\x20it\x20contai\
    ns\x20a\x20hyphen,\x20the\n\x20database\x20ID\x20must\x20be\x20enclosed\
    \x20in\x20backticks\x20(``\x20`\x20``).\n\n\r\n\x05\x04\x03\x02\x01\x05\
    \x12\x04\x8f\x02\x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x8f\x02\t\
    \x19\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\x8f\x02\x1c\x1d\n\r\n\x05\x04\
    \x03\x02\x01\x08\x12\x04\x8f\x02\x1eF\n\x10\n\x08\x04\x03\x02\x01\x08\
    \x9c\x08\0\x12\x04\x8f\x02\x1fE\n\x97\x02\n\x04\x04\x03\x02\x02\x12\x04\
    \x95\x02\x02'\x1a\x88\x02\x20An\x20optional\x20list\x20of\x20DDL\x20stat\
    ements\x20to\x20run\x20inside\x20the\x20newly\x20created\n\x20database.\
    \x20Statements\x20can\x20create\x20tables,\x20indexes,\x20etc.\x20These\
    \n\x20statements\x20execute\x20atomically\x20with\x20the\x20creation\x20\
    of\x20the\x20database:\n\x20if\x20there\x20is\x20an\x20error\x20in\x20an\
    y\x20statement,\x20the\x20database\x20is\x20not\x20created.\n\n\r\n\x05\
    \x04\x03\x02\x02\x04\x12\x04\x95\x02\x02\n\n\r\n\x05\x04\x03\x02\x02\x05\
    \x12\x04\x95\x02\x0b\x11\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\x95\x02\
    \x12\"\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\x95\x02%&\n\x8d\x01\n\x02\
    \x04\x04\x12\x06\x9a\x02\0\x9f\x02\x01\x1a\x7f\x20Metadata\x20type\x20fo\
    r\x20the\x20operation\x20returned\x20by\n\x20[CreateDatabase][google.spa\
    nner.admin.database.v1.DatabaseAdmin.CreateDatabase].\n\n\x0b\n\x03\x04\
    \x04\x01\x12\x04\x9a\x02\x08\x1e\n-\n\x04\x04\x04\x02\0\x12\x06\x9c\x02\
    \x02\x9e\x02\x05\x1a\x1d\x20The\x20database\x20being\x20created.\n\n\r\n\
    \x05\x04\x04\x02\0\x05\x12\x04\x9c\x02\x02\x08\n\r\n\x05\x04\x04\x02\0\
    \x01\x12\x04\x9c\x02\t\x11\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x9c\x02\
    \x14\x15\n\x0f\n\x05\x04\x04\x02\0\x08\x12\x06\x9c\x02\x16\x9e\x02\x04\n\
    \x11\n\x07\x04\x04\x02\0\x08\x9f\x08\x12\x06\x9c\x02\x17\x9e\x02\x03\nk\
    \n\x02\x04\x05\x12\x06\xa3\x02\0\xac\x02\x01\x1a]\x20The\x20request\x20f\
    or\n\x20[GetDatabase][google.spanner.admin.database.v1.DatabaseAdmin.Get\
    Database].\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xa3\x02\x08\x1a\n\x98\x01\n\
    \x04\x04\x05\x02\0\x12\x06\xa6\x02\x02\xab\x02\x04\x1a\x87\x01\x20Requir\
    ed.\x20The\x20name\x20of\x20the\x20requested\x20database.\x20Values\x20a\
    re\x20of\x20the\x20form\n\x20`projects/<project>/instances/<instance>/da\
    tabases/<database>`.\n\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xa6\x02\x02\
    \x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xa6\x02\t\r\n\r\n\x05\x04\x05\
    \x02\0\x03\x12\x04\xa6\x02\x10\x11\n\x0f\n\x05\x04\x05\x02\0\x08\x12\x06\
    \xa6\x02\x12\xab\x02\x03\n\x10\n\x08\x04\x05\x02\0\x08\x9c\x08\0\x12\x04\
    \xa7\x02\x04*\n\x11\n\x07\x04\x05\x02\0\x08\x9f\x08\x12\x06\xa8\x02\x04\
    \xaa\x02\x05\n\x99\x07\n\x02\x04\x06\x12\x06\xbe\x02\0\xe0\x02\x01\x1a\
    \x8a\x07\x20Enqueues\x20the\x20given\x20DDL\x20statements\x20to\x20be\
    \x20applied,\x20in\x20order\x20but\x20not\n\x20necessarily\x20all\x20at\
    \x20once,\x20to\x20the\x20database\x20schema\x20at\x20some\x20point\x20(\
    or\n\x20points)\x20in\x20the\x20future.\x20The\x20server\x20checks\x20th\
    at\x20the\x20statements\n\x20are\x20executable\x20(syntactically\x20vali\
    d,\x20name\x20tables\x20that\x20exist,\x20etc.)\n\x20before\x20enqueuein\
    g\x20them,\x20but\x20they\x20may\x20still\x20fail\x20upon\n\x20later\x20\
    execution\x20(e.g.,\x20if\x20a\x20statement\x20from\x20another\x20batch\
    \x20of\n\x20statements\x20is\x20applied\x20first\x20and\x20it\x20conflic\
    ts\x20in\x20some\x20way,\x20or\x20if\n\x20there\x20is\x20some\x20data-re\
    lated\x20problem\x20like\x20a\x20`NULL`\x20value\x20in\x20a\x20column\
    \x20to\n\x20which\x20`NOT\x20NULL`\x20would\x20be\x20added).\x20If\x20a\
    \x20statement\x20fails,\x20all\n\x20subsequent\x20statements\x20in\x20th\
    e\x20batch\x20are\x20automatically\x20cancelled.\n\n\x20Each\x20batch\
    \x20of\x20statements\x20is\x20assigned\x20a\x20name\x20which\x20can\x20b\
    e\x20used\x20with\n\x20the\x20[Operations][google.longrunning.Operations\
    ]\x20API\x20to\x20monitor\n\x20progress.\x20See\x20the\n\x20[operation_i\
    d][google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_i\
    d]\n\x20field\x20for\x20more\x20details.\n\n\x0b\n\x03\x04\x06\x01\x12\
    \x04\xbe\x02\x08\x20\n3\n\x04\x04\x06\x02\0\x12\x06\xc0\x02\x02\xc5\x02\
    \x04\x1a#\x20Required.\x20The\x20database\x20to\x20update.\n\n\r\n\x05\
    \x04\x06\x02\0\x05\x12\x04\xc0\x02\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\
    \x12\x04\xc0\x02\t\x11\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xc0\x02\x14\
    \x15\n\x0f\n\x05\x04\x06\x02\0\x08\x12\x06\xc0\x02\x16\xc5\x02\x03\n\x10\
    \n\x08\x04\x06\x02\0\x08\x9c\x08\0\x12\x04\xc1\x02\x04*\n\x11\n\x07\x04\
    \x06\x02\0\x08\x9f\x08\x12\x06\xc2\x02\x04\xc4\x02\x05\nG\n\x04\x04\x06\
    \x02\x01\x12\x04\xc8\x02\x02J\x1a9\x20Required.\x20DDL\x20statements\x20\
    to\x20be\x20applied\x20to\x20the\x20database.\n\n\r\n\x05\x04\x06\x02\
    \x01\x04\x12\x04\xc8\x02\x02\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xc8\
    \x02\x0b\x11\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xc8\x02\x12\x1c\n\r\n\
    \x05\x04\x06\x02\x01\x03\x12\x04\xc8\x02\x1f\x20\n\r\n\x05\x04\x06\x02\
    \x01\x08\x12\x04\xc8\x02!I\n\x10\n\x08\x04\x06\x02\x01\x08\x9c\x08\0\x12\
    \x04\xc8\x02\"H\n\xe6\x08\n\x04\x04\x06\x02\x02\x12\x04\xdf\x02\x02\x1a\
    \x1a\xd7\x08\x20If\x20empty,\x20the\x20new\x20update\x20request\x20is\
    \x20assigned\x20an\n\x20automatically-generated\x20operation\x20ID.\x20O\
    therwise,\x20`operation_id`\n\x20is\x20used\x20to\x20construct\x20the\
    \x20name\x20of\x20the\x20resulting\n\x20[Operation][google.longrunning.O\
    peration].\n\n\x20Specifying\x20an\x20explicit\x20operation\x20ID\x20sim\
    plifies\x20determining\n\x20whether\x20the\x20statements\x20were\x20exec\
    uted\x20in\x20the\x20event\x20that\x20the\n\x20[UpdateDatabaseDdl][googl\
    e.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]\n\x20call\
    \x20is\x20replayed,\x20or\x20the\x20return\x20value\x20is\x20otherwise\
    \x20lost:\x20the\n\x20[database][google.spanner.admin.database.v1.Update\
    DatabaseDdlRequest.database]\n\x20and\x20`operation_id`\x20fields\x20can\
    \x20be\x20combined\x20to\x20form\x20the\n\x20[name][google.longrunning.O\
    peration.name]\x20of\x20the\x20resulting\n\x20[longrunning.Operation][go\
    ogle.longrunning.Operation]:\n\x20`<database>/operations/<operation_id>`\
    .\n\n\x20`operation_id`\x20should\x20be\x20unique\x20within\x20the\x20da\
    tabase,\x20and\x20must\x20be\n\x20a\x20valid\x20identifier:\x20`[a-z][a-\
    z0-9_]*`.\x20Note\x20that\n\x20automatically-generated\x20operation\x20I\
    Ds\x20always\x20begin\x20with\x20an\n\x20underscore.\x20If\x20the\x20nam\
    ed\x20operation\x20already\x20exists,\n\x20[UpdateDatabaseDdl][google.sp\
    anner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]\n\x20returns\
    \x20`ALREADY_EXISTS`.\n\n\r\n\x05\x04\x06\x02\x02\x05\x12\x04\xdf\x02\
    \x02\x08\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xdf\x02\t\x15\n\r\n\x05\
    \x04\x06\x02\x02\x03\x12\x04\xdf\x02\x18\x19\n\x94\x01\n\x02\x04\x07\x12\
    \x06\xe4\x02\0\xf2\x02\x01\x1a\x85\x01\x20Metadata\x20type\x20for\x20the\
    \x20operation\x20returned\x20by\n\x20[UpdateDatabaseDdl][google.spanner.\
    admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl].\n\n\x0b\n\x03\x04\
    \x07\x01\x12\x04\xe4\x02\x08!\n.\n\x04\x04\x07\x02\0\x12\x06\xe6\x02\x02\
    \xe8\x02\x05\x1a\x1e\x20The\x20database\x20being\x20modified.\n\n\r\n\
    \x05\x04\x07\x02\0\x05\x12\x04\xe6\x02\x02\x08\n\r\n\x05\x04\x07\x02\0\
    \x01\x12\x04\xe6\x02\t\x11\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xe6\x02\
    \x14\x15\n\x0f\n\x05\x04\x07\x02\0\x08\x12\x06\xe6\x02\x16\xe8\x02\x04\n\
    \x11\n\x07\x04\x07\x02\0\x08\x9f\x08\x12\x06\xe6\x02\x17\xe8\x02\x03\n\
    \x8a\x01\n\x04\x04\x07\x02\x01\x12\x04\xec\x02\x02!\x1a|\x20For\x20an\
    \x20update\x20this\x20list\x20contains\x20all\x20the\x20statements.\x20F\
    or\x20an\n\x20individual\x20statement,\x20this\x20list\x20contains\x20on\
    ly\x20that\x20statement.\n\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04\xec\x02\
    \x02\n\n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\xec\x02\x0b\x11\n\r\n\x05\
    \x04\x07\x02\x01\x01\x12\x04\xec\x02\x12\x1c\n\r\n\x05\x04\x07\x02\x01\
    \x03\x12\x04\xec\x02\x1f\x20\n\xb6\x01\n\x04\x04\x07\x02\x02\x12\x04\xf1\
    \x02\x02;\x1a\xa7\x01\x20Reports\x20the\x20commit\x20timestamps\x20of\
    \x20all\x20statements\x20that\x20have\n\x20succeeded\x20so\x20far,\x20wh\
    ere\x20`commit_timestamps[i]`\x20is\x20the\x20commit\n\x20timestamp\x20f\
    or\x20the\x20statement\x20`statements[i]`.\n\n\r\n\x05\x04\x07\x02\x02\
    \x04\x12\x04\xf1\x02\x02\n\n\r\n\x05\x04\x07\x02\x02\x06\x12\x04\xf1\x02\
    \x0b$\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xf1\x02%6\n\r\n\x05\x04\x07\
    \x02\x02\x03\x12\x04\xf1\x029:\nm\n\x02\x04\x08\x12\x06\xf6\x02\0\xfe\
    \x02\x01\x1a_\x20The\x20request\x20for\n\x20[DropDatabase][google.spanne\
    r.admin.database.v1.DatabaseAdmin.DropDatabase].\n\n\x0b\n\x03\x04\x08\
    \x01\x12\x04\xf6\x02\x08\x1b\n7\n\x04\x04\x08\x02\0\x12\x06\xf8\x02\x02\
    \xfd\x02\x04\x1a'\x20Required.\x20The\x20database\x20to\x20be\x20dropped\
    .\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xf8\x02\x02\x08\n\r\n\x05\x04\
    \x08\x02\0\x01\x12\x04\xf8\x02\t\x11\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\
    \xf8\x02\x14\x15\n\x0f\n\x05\x04\x08\x02\0\x08\x12\x06\xf8\x02\x16\xfd\
    \x02\x03\n\x10\n\x08\x04\x08\x02\0\x08\x9c\x08\0\x12\x04\xf9\x02\x04*\n\
    \x11\n\x07\x04\x08\x02\0\x08\x9f\x08\x12\x06\xfa\x02\x04\xfc\x02\x05\nq\
    \n\x02\x04\t\x12\x06\x82\x03\0\x8a\x03\x01\x1ac\x20The\x20request\x20for\
    \n\x20[GetDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.Ge\
    tDatabaseDdl].\n\n\x0b\n\x03\x04\t\x01\x12\x04\x82\x03\x08\x1d\nE\n\x04\
    \x04\t\x02\0\x12\x06\x84\x03\x02\x89\x03\x04\x1a5\x20Required.\x20The\
    \x20database\x20whose\x20schema\x20we\x20wish\x20to\x20get.\n\n\r\n\x05\
    \x04\t\x02\0\x05\x12\x04\x84\x03\x02\x08\n\r\n\x05\x04\t\x02\0\x01\x12\
    \x04\x84\x03\t\x11\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x84\x03\x14\x15\n\
    \x0f\n\x05\x04\t\x02\0\x08\x12\x06\x84\x03\x16\x89\x03\x03\n\x10\n\x08\
    \x04\t\x02\0\x08\x9c\x08\0\x12\x04\x85\x03\x04*\n\x11\n\x07\x04\t\x02\0\
    \x08\x9f\x08\x12\x06\x86\x03\x04\x88\x03\x05\nr\n\x02\x04\n\x12\x06\x8e\
    \x03\0\x92\x03\x01\x1ad\x20The\x20response\x20for\n\x20[GetDatabaseDdl][\
    google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseDdl].\n\n\x0b\
    \n\x03\x04\n\x01\x12\x04\x8e\x03\x08\x1e\nq\n\x04\x04\n\x02\0\x12\x04\
    \x91\x03\x02!\x1ac\x20A\x20list\x20of\x20formatted\x20DDL\x20statements\
    \x20defining\x20the\x20schema\x20of\x20the\x20database\n\x20specified\
    \x20in\x20the\x20request.\n\n\r\n\x05\x04\n\x02\0\x04\x12\x04\x91\x03\
    \x02\n\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x91\x03\x0b\x11\n\r\n\x05\x04\n\
    \x02\0\x01\x12\x04\x91\x03\x12\x1c\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x91\
    \x03\x1f\x20b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(9);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            deps.push(super::field_behavior::file_descriptor().clone());
            deps.push(super::resource::file_descriptor().clone());
            deps.push(super::iam_policy::file_descriptor().clone());
            deps.push(super::policy::file_descriptor().clone());
            deps.push(super::operations::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(Database::generated_message_descriptor_data());
            messages.push(ListDatabasesRequest::generated_message_descriptor_data());
            messages.push(ListDatabasesResponse::generated_message_descriptor_data());
            messages.push(CreateDatabaseRequest::generated_message_descriptor_data());
            messages.push(CreateDatabaseMetadata::generated_message_descriptor_data());
            messages.push(GetDatabaseRequest::generated_message_descriptor_data());
            messages.push(UpdateDatabaseDdlRequest::generated_message_descriptor_data());
            messages.push(UpdateDatabaseDdlMetadata::generated_message_descriptor_data());
            messages.push(DropDatabaseRequest::generated_message_descriptor_data());
            messages.push(GetDatabaseDdlRequest::generated_message_descriptor_data());
            messages.push(GetDatabaseDdlResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(database::State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
