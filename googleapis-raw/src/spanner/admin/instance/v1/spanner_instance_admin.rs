// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/spanner/admin/instance/v1/spanner_instance_admin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.ReplicaInfo)
pub struct ReplicaInfo {
    // message fields
    ///  The location of the serving resources, e.g. "us-central1".
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ReplicaInfo.location)
    pub location: ::std::string::String,
    ///  The type of replica.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ReplicaInfo.type)
    pub type_: ::protobuf::EnumOrUnknown<replica_info::ReplicaType>,
    ///  If true, this location is designated as the default leader location where
    ///  leader replicas are placed. See the [region types
    ///  documentation](https://cloud.google.com/spanner/docs/instances#region_types)
    ///  for more details.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ReplicaInfo.default_leader_location)
    pub default_leader_location: bool,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.ReplicaInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReplicaInfo {
    fn default() -> &'a ReplicaInfo {
        <ReplicaInfo as ::protobuf::Message>::default_instance()
    }
}

impl ReplicaInfo {
    pub fn new() -> ReplicaInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "location",
            |m: &ReplicaInfo| { &m.location },
            |m: &mut ReplicaInfo| { &mut m.location },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ReplicaInfo| { &m.type_ },
            |m: &mut ReplicaInfo| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_leader_location",
            |m: &ReplicaInfo| { &m.default_leader_location },
            |m: &mut ReplicaInfo| { &mut m.default_leader_location },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReplicaInfo>(
            "ReplicaInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReplicaInfo {
    const NAME: &'static str = "ReplicaInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.location = is.read_string()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.default_leader_location = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.location);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(replica_info::ReplicaType::TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if self.default_leader_location != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.location.is_empty() {
            os.write_string(1, &self.location)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(replica_info::ReplicaType::TYPE_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.default_leader_location != false {
            os.write_bool(3, self.default_leader_location)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReplicaInfo {
        ReplicaInfo::new()
    }

    fn clear(&mut self) {
        self.location.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(replica_info::ReplicaType::TYPE_UNSPECIFIED);
        self.default_leader_location = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReplicaInfo {
        static instance: ReplicaInfo = ReplicaInfo {
            location: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            default_leader_location: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReplicaInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReplicaInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReplicaInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplicaInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ReplicaInfo`
pub mod replica_info {
    ///  Indicates the type of replica.  See the [replica types
    ///  documentation](https://cloud.google.com/spanner/docs/replication#replica_types)
    ///  for more details.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType)
    pub enum ReplicaType {
        // @@protoc_insertion_point(enum_value:google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType.TYPE_UNSPECIFIED)
        TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType.READ_WRITE)
        READ_WRITE = 1,
        // @@protoc_insertion_point(enum_value:google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType.READ_ONLY)
        READ_ONLY = 2,
        // @@protoc_insertion_point(enum_value:google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType.WITNESS)
        WITNESS = 3,
    }

    impl ::protobuf::Enum for ReplicaType {
        const NAME: &'static str = "ReplicaType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ReplicaType> {
            match value {
                0 => ::std::option::Option::Some(ReplicaType::TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(ReplicaType::READ_WRITE),
                2 => ::std::option::Option::Some(ReplicaType::READ_ONLY),
                3 => ::std::option::Option::Some(ReplicaType::WITNESS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ReplicaType] = &[
            ReplicaType::TYPE_UNSPECIFIED,
            ReplicaType::READ_WRITE,
            ReplicaType::READ_ONLY,
            ReplicaType::WITNESS,
        ];
    }

    impl ::protobuf::EnumFull for ReplicaType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ReplicaInfo.ReplicaType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ReplicaType {
        fn default() -> Self {
            ReplicaType::TYPE_UNSPECIFIED
        }
    }

    impl ReplicaType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ReplicaType>("ReplicaInfo.ReplicaType")
        }
    }
}

///  A possible configuration for a Cloud Spanner instance. Configurations
///  define the geographic placement of nodes and their replication.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.InstanceConfig)
pub struct InstanceConfig {
    // message fields
    ///  A unique identifier for the instance configuration.  Values
    ///  are of the form
    ///  `projects/<project>/instanceConfigs/[a-z][-a-z0-9]*`
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.InstanceConfig.name)
    pub name: ::std::string::String,
    ///  The name of this instance configuration as it appears in UIs.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.InstanceConfig.display_name)
    pub display_name: ::std::string::String,
    ///  The geographic placement of nodes in this instance configuration and their
    ///  replication properties.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.InstanceConfig.replicas)
    pub replicas: ::std::vec::Vec<ReplicaInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.InstanceConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InstanceConfig {
    fn default() -> &'a InstanceConfig {
        <InstanceConfig as ::protobuf::Message>::default_instance()
    }
}

impl InstanceConfig {
    pub fn new() -> InstanceConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &InstanceConfig| { &m.name },
            |m: &mut InstanceConfig| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &InstanceConfig| { &m.display_name },
            |m: &mut InstanceConfig| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "replicas",
            |m: &InstanceConfig| { &m.replicas },
            |m: &mut InstanceConfig| { &mut m.replicas },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InstanceConfig>(
            "InstanceConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InstanceConfig {
    const NAME: &'static str = "InstanceConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.display_name = is.read_string()?;
                },
                26 => {
                    self.replicas.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        for value in &self.replicas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        for v in &self.replicas {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InstanceConfig {
        InstanceConfig::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.replicas.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InstanceConfig {
        static instance: InstanceConfig = InstanceConfig {
            name: ::std::string::String::new(),
            display_name: ::std::string::String::new(),
            replicas: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InstanceConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InstanceConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InstanceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  An isolated set of Cloud Spanner resources on which databases can be hosted.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.Instance)
pub struct Instance {
    // message fields
    ///  Required. A unique identifier for the instance, which cannot be changed
    ///  after the instance is created. Values are of the form
    ///  `projects/<project>/instances/[a-z][-a-z0-9]*[a-z0-9]`. The final
    ///  segment of the name must be between 2 and 64 characters in length.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.Instance.name)
    pub name: ::std::string::String,
    ///  Required. The name of the instance's configuration. Values are of the form
    ///  `projects/<project>/instanceConfigs/<configuration>`. See
    ///  also [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig] and
    ///  [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.Instance.config)
    pub config: ::std::string::String,
    ///  Required. The descriptive name for this instance as it appears in UIs.
    ///  Must be unique per project and between 4 and 30 characters in length.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.Instance.display_name)
    pub display_name: ::std::string::String,
    ///  Required. The number of nodes allocated to this instance. This may be zero
    ///  in API responses for instances that are not yet in state `READY`.
    ///
    ///  See [the
    ///  documentation](https://cloud.google.com/spanner/docs/instances#node_count)
    ///  for more information about nodes.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.Instance.node_count)
    pub node_count: i32,
    ///  Output only. The current instance state. For
    ///  [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance], the state must be
    ///  either omitted or set to `CREATING`. For
    ///  [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance], the state must be
    ///  either omitted or set to `READY`.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.Instance.state)
    pub state: ::protobuf::EnumOrUnknown<instance::State>,
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.Instance.labels)
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  Output only. The endpoint URIs based on the instance config.
    ///  For example, instances located in a specific cloud region (or multi region)
    ///  such as nam3, would have a nam3 specific endpoint URI.
    ///  This URI is to be used implictly by SDK clients, with fallback to default
    ///  URI. These endpoints are intended to optimize the network routing between
    ///  the client and the instance's serving resources.
    ///  If multiple endpoints are present, client may establish connections using
    ///  any of the given URIs.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.Instance.endpoint_uris)
    pub endpoint_uris: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.Instance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Instance {
    fn default() -> &'a Instance {
        <Instance as ::protobuf::Message>::default_instance()
    }
}

impl Instance {
    pub fn new() -> Instance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Instance| { &m.name },
            |m: &mut Instance| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "config",
            |m: &Instance| { &m.config },
            |m: &mut Instance| { &mut m.config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &Instance| { &m.display_name },
            |m: &mut Instance| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_count",
            |m: &Instance| { &m.node_count },
            |m: &mut Instance| { &mut m.node_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Instance| { &m.state },
            |m: &mut Instance| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "labels",
            |m: &Instance| { &m.labels },
            |m: &mut Instance| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "endpoint_uris",
            |m: &Instance| { &m.endpoint_uris },
            |m: &mut Instance| { &mut m.endpoint_uris },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Instance>(
            "Instance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Instance {
    const NAME: &'static str = "Instance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.config = is.read_string()?;
                },
                26 => {
                    self.display_name = is.read_string()?;
                },
                40 => {
                    self.node_count = is.read_int32()?;
                },
                48 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                58 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.labels.insert(key, value);
                },
                66 => {
                    self.endpoint_uris.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.config.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.config);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        if self.node_count != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.node_count);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(instance::State::STATE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(6, self.state.value());
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.endpoint_uris {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.config.is_empty() {
            os.write_string(2, &self.config)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        if self.node_count != 0 {
            os.write_int32(5, self.node_count)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(instance::State::STATE_UNSPECIFIED) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(58)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.endpoint_uris {
            os.write_string(8, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Instance {
        Instance::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.config.clear();
        self.display_name.clear();
        self.node_count = 0;
        self.state = ::protobuf::EnumOrUnknown::new(instance::State::STATE_UNSPECIFIED);
        self.labels.clear();
        self.endpoint_uris.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Instance {
        static instance: ::protobuf::rt::Lazy<Instance> = ::protobuf::rt::Lazy::new();
        instance.get(Instance::new)
    }
}

impl ::protobuf::MessageFull for Instance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Instance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Instance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Instance`
pub mod instance {
    ///  Indicates the current state of the instance.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.spanner.admin.instance.v1.Instance.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:google.spanner.admin.instance.v1.Instance.State.STATE_UNSPECIFIED)
        STATE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.spanner.admin.instance.v1.Instance.State.CREATING)
        CREATING = 1,
        // @@protoc_insertion_point(enum_value:google.spanner.admin.instance.v1.Instance.State.READY)
        READY = 2,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::STATE_UNSPECIFIED),
                1 => ::std::option::Option::Some(State::CREATING),
                2 => ::std::option::Option::Some(State::READY),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::STATE_UNSPECIFIED,
            State::CREATING,
            State::READY,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Instance.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::STATE_UNSPECIFIED
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("Instance.State")
        }
    }
}

///  The request for [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.ListInstanceConfigsRequest)
pub struct ListInstanceConfigsRequest {
    // message fields
    ///  Required. The name of the project for which a list of supported instance
    ///  configurations is requested. Values are of the form
    ///  `projects/<project>`.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstanceConfigsRequest.parent)
    pub parent: ::std::string::String,
    ///  Number of instance configurations to be returned in the response. If 0 or
    ///  less, defaults to the server's maximum allowed page size.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstanceConfigsRequest.page_size)
    pub page_size: i32,
    ///  If non-empty, `page_token` should contain a
    ///  [next_page_token][google.spanner.admin.instance.v1.ListInstanceConfigsResponse.next_page_token]
    ///  from a previous [ListInstanceConfigsResponse][google.spanner.admin.instance.v1.ListInstanceConfigsResponse].
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstanceConfigsRequest.page_token)
    pub page_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.ListInstanceConfigsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigsRequest {
    fn default() -> &'a ListInstanceConfigsRequest {
        <ListInstanceConfigsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigsRequest {
    pub fn new() -> ListInstanceConfigsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &ListInstanceConfigsRequest| { &m.parent },
            |m: &mut ListInstanceConfigsRequest| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_size",
            |m: &ListInstanceConfigsRequest| { &m.page_size },
            |m: &mut ListInstanceConfigsRequest| { &mut m.page_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_token",
            |m: &ListInstanceConfigsRequest| { &m.page_token },
            |m: &mut ListInstanceConfigsRequest| { &mut m.page_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListInstanceConfigsRequest>(
            "ListInstanceConfigsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListInstanceConfigsRequest {
    const NAME: &'static str = "ListInstanceConfigsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent = is.read_string()?;
                },
                16 => {
                    self.page_size = is.read_int32()?;
                },
                26 => {
                    self.page_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.page_size);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListInstanceConfigsRequest {
        ListInstanceConfigsRequest::new()
    }

    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListInstanceConfigsRequest {
        static instance: ListInstanceConfigsRequest = ListInstanceConfigsRequest {
            parent: ::std::string::String::new(),
            page_size: 0,
            page_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListInstanceConfigsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListInstanceConfigsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListInstanceConfigsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The response for [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.ListInstanceConfigsResponse)
pub struct ListInstanceConfigsResponse {
    // message fields
    ///  The list of requested instance configurations.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstanceConfigsResponse.instance_configs)
    pub instance_configs: ::std::vec::Vec<InstanceConfig>,
    ///  `next_page_token` can be sent in a subsequent
    ///  [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs] call to
    ///  fetch more of the matching instance configurations.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstanceConfigsResponse.next_page_token)
    pub next_page_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.ListInstanceConfigsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigsResponse {
    fn default() -> &'a ListInstanceConfigsResponse {
        <ListInstanceConfigsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigsResponse {
    pub fn new() -> ListInstanceConfigsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "instance_configs",
            |m: &ListInstanceConfigsResponse| { &m.instance_configs },
            |m: &mut ListInstanceConfigsResponse| { &mut m.instance_configs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_page_token",
            |m: &ListInstanceConfigsResponse| { &m.next_page_token },
            |m: &mut ListInstanceConfigsResponse| { &mut m.next_page_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListInstanceConfigsResponse>(
            "ListInstanceConfigsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListInstanceConfigsResponse {
    const NAME: &'static str = "ListInstanceConfigsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.instance_configs.push(is.read_message()?);
                },
                18 => {
                    self.next_page_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.instance_configs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.instance_configs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListInstanceConfigsResponse {
        ListInstanceConfigsResponse::new()
    }

    fn clear(&mut self) {
        self.instance_configs.clear();
        self.next_page_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListInstanceConfigsResponse {
        static instance: ListInstanceConfigsResponse = ListInstanceConfigsResponse {
            instance_configs: ::std::vec::Vec::new(),
            next_page_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListInstanceConfigsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListInstanceConfigsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListInstanceConfigsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for
///  [GetInstanceConfigRequest][google.spanner.admin.instance.v1.InstanceAdmin.GetInstanceConfig].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.GetInstanceConfigRequest)
pub struct GetInstanceConfigRequest {
    // message fields
    ///  Required. The name of the requested instance configuration. Values are of
    ///  the form `projects/<project>/instanceConfigs/<config>`.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.GetInstanceConfigRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.GetInstanceConfigRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetInstanceConfigRequest {
    fn default() -> &'a GetInstanceConfigRequest {
        <GetInstanceConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceConfigRequest {
    pub fn new() -> GetInstanceConfigRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &GetInstanceConfigRequest| { &m.name },
            |m: &mut GetInstanceConfigRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetInstanceConfigRequest>(
            "GetInstanceConfigRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetInstanceConfigRequest {
    const NAME: &'static str = "GetInstanceConfigRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetInstanceConfigRequest {
        GetInstanceConfigRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetInstanceConfigRequest {
        static instance: GetInstanceConfigRequest = GetInstanceConfigRequest {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetInstanceConfigRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetInstanceConfigRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetInstanceConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceConfigRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for [GetInstance][google.spanner.admin.instance.v1.InstanceAdmin.GetInstance].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.GetInstanceRequest)
pub struct GetInstanceRequest {
    // message fields
    ///  Required. The name of the requested instance. Values are of the form
    ///  `projects/<project>/instances/<instance>`.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.GetInstanceRequest.name)
    pub name: ::std::string::String,
    ///  If field_mask is present, specifies the subset of [][Instance] fields that
    ///  should be returned.
    ///  If absent, all [][Instance] fields are returned.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.GetInstanceRequest.field_mask)
    pub field_mask: ::protobuf::MessageField<::protobuf::well_known_types::field_mask::FieldMask>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.GetInstanceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetInstanceRequest {
    fn default() -> &'a GetInstanceRequest {
        <GetInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceRequest {
    pub fn new() -> GetInstanceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &GetInstanceRequest| { &m.name },
            |m: &mut GetInstanceRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::field_mask::FieldMask>(
            "field_mask",
            |m: &GetInstanceRequest| { &m.field_mask },
            |m: &mut GetInstanceRequest| { &mut m.field_mask },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetInstanceRequest>(
            "GetInstanceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetInstanceRequest {
    const NAME: &'static str = "GetInstanceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.field_mask)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(v) = self.field_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(v) = self.field_mask.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetInstanceRequest {
        GetInstanceRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.field_mask.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetInstanceRequest {
        static instance: GetInstanceRequest = GetInstanceRequest {
            name: ::std::string::String::new(),
            field_mask: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetInstanceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetInstanceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.CreateInstanceRequest)
pub struct CreateInstanceRequest {
    // message fields
    ///  Required. The name of the project in which to create the instance. Values
    ///  are of the form `projects/<project>`.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.CreateInstanceRequest.parent)
    pub parent: ::std::string::String,
    ///  Required. The ID of the instance to create.  Valid identifiers are of the
    ///  form `[a-z][-a-z0-9]*[a-z0-9]` and must be between 2 and 64 characters in
    ///  length.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.CreateInstanceRequest.instance_id)
    pub instance_id: ::std::string::String,
    ///  Required. The instance to create.  The name may be omitted, but if
    ///  specified must be `<parent>/instances/<instance_id>`.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.CreateInstanceRequest.instance)
    pub instance: ::protobuf::MessageField<Instance>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.CreateInstanceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateInstanceRequest {
    fn default() -> &'a CreateInstanceRequest {
        <CreateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceRequest {
    pub fn new() -> CreateInstanceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &CreateInstanceRequest| { &m.parent },
            |m: &mut CreateInstanceRequest| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "instance_id",
            |m: &CreateInstanceRequest| { &m.instance_id },
            |m: &mut CreateInstanceRequest| { &mut m.instance_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Instance>(
            "instance",
            |m: &CreateInstanceRequest| { &m.instance },
            |m: &mut CreateInstanceRequest| { &mut m.instance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateInstanceRequest>(
            "CreateInstanceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateInstanceRequest {
    const NAME: &'static str = "CreateInstanceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent = is.read_string()?;
                },
                18 => {
                    self.instance_id = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.instance)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.instance_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.instance_id);
        }
        if let Some(v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.instance_id.is_empty() {
            os.write_string(2, &self.instance_id)?;
        }
        if let Some(v) = self.instance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateInstanceRequest {
        CreateInstanceRequest::new()
    }

    fn clear(&mut self) {
        self.parent.clear();
        self.instance_id.clear();
        self.instance.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateInstanceRequest {
        static instance: CreateInstanceRequest = CreateInstanceRequest {
            parent: ::std::string::String::new(),
            instance_id: ::std::string::String::new(),
            instance: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateInstanceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateInstanceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for [ListInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstances].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.ListInstancesRequest)
pub struct ListInstancesRequest {
    // message fields
    ///  Required. The name of the project for which a list of instances is
    ///  requested. Values are of the form `projects/<project>`.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstancesRequest.parent)
    pub parent: ::std::string::String,
    ///  Number of instances to be returned in the response. If 0 or less, defaults
    ///  to the server's maximum allowed page size.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstancesRequest.page_size)
    pub page_size: i32,
    ///  If non-empty, `page_token` should contain a
    ///  [next_page_token][google.spanner.admin.instance.v1.ListInstancesResponse.next_page_token] from a
    ///  previous [ListInstancesResponse][google.spanner.admin.instance.v1.ListInstancesResponse].
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstancesRequest.page_token)
    pub page_token: ::std::string::String,
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstancesRequest.filter)
    pub filter: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.ListInstancesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListInstancesRequest {
    fn default() -> &'a ListInstancesRequest {
        <ListInstancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesRequest {
    pub fn new() -> ListInstancesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent",
            |m: &ListInstancesRequest| { &m.parent },
            |m: &mut ListInstancesRequest| { &mut m.parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_size",
            |m: &ListInstancesRequest| { &m.page_size },
            |m: &mut ListInstancesRequest| { &mut m.page_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page_token",
            |m: &ListInstancesRequest| { &m.page_token },
            |m: &mut ListInstancesRequest| { &mut m.page_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "filter",
            |m: &ListInstancesRequest| { &m.filter },
            |m: &mut ListInstancesRequest| { &mut m.filter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListInstancesRequest>(
            "ListInstancesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListInstancesRequest {
    const NAME: &'static str = "ListInstancesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parent = is.read_string()?;
                },
                16 => {
                    self.page_size = is.read_int32()?;
                },
                26 => {
                    self.page_token = is.read_string()?;
                },
                34 => {
                    self.filter = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.page_size);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        if !self.filter.is_empty() {
            os.write_string(4, &self.filter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListInstancesRequest {
        ListInstancesRequest::new()
    }

    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.filter.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListInstancesRequest {
        static instance: ListInstancesRequest = ListInstancesRequest {
            parent: ::std::string::String::new(),
            page_size: 0,
            page_token: ::std::string::String::new(),
            filter: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListInstancesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListInstancesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListInstancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The response for [ListInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstances].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.ListInstancesResponse)
pub struct ListInstancesResponse {
    // message fields
    ///  The list of requested instances.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstancesResponse.instances)
    pub instances: ::std::vec::Vec<Instance>,
    ///  `next_page_token` can be sent in a subsequent
    ///  [ListInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstances] call to fetch more
    ///  of the matching instances.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.ListInstancesResponse.next_page_token)
    pub next_page_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.ListInstancesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListInstancesResponse {
    fn default() -> &'a ListInstancesResponse {
        <ListInstancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesResponse {
    pub fn new() -> ListInstancesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "instances",
            |m: &ListInstancesResponse| { &m.instances },
            |m: &mut ListInstancesResponse| { &mut m.instances },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "next_page_token",
            |m: &ListInstancesResponse| { &m.next_page_token },
            |m: &mut ListInstancesResponse| { &mut m.next_page_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListInstancesResponse>(
            "ListInstancesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListInstancesResponse {
    const NAME: &'static str = "ListInstancesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.instances.push(is.read_message()?);
                },
                18 => {
                    self.next_page_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.instances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.instances {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListInstancesResponse {
        ListInstancesResponse::new()
    }

    fn clear(&mut self) {
        self.instances.clear();
        self.next_page_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListInstancesResponse {
        static instance: ListInstancesResponse = ListInstancesResponse {
            instances: ::std::vec::Vec::new(),
            next_page_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListInstancesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListInstancesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListInstancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.UpdateInstanceRequest)
pub struct UpdateInstanceRequest {
    // message fields
    ///  Required. The instance to update, which must always include the instance
    ///  name.  Otherwise, only fields mentioned in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask] need be included.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.UpdateInstanceRequest.instance)
    pub instance: ::protobuf::MessageField<Instance>,
    ///  Required. A mask specifying which fields in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.instance] should be updated.
    ///  The field mask must always be specified; this prevents any future fields in
    ///  [][google.spanner.admin.instance.v1.Instance] from being erased accidentally by clients that do not know
    ///  about them.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask)
    pub field_mask: ::protobuf::MessageField<::protobuf::well_known_types::field_mask::FieldMask>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.UpdateInstanceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceRequest {
    fn default() -> &'a UpdateInstanceRequest {
        <UpdateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceRequest {
    pub fn new() -> UpdateInstanceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Instance>(
            "instance",
            |m: &UpdateInstanceRequest| { &m.instance },
            |m: &mut UpdateInstanceRequest| { &mut m.instance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::field_mask::FieldMask>(
            "field_mask",
            |m: &UpdateInstanceRequest| { &m.field_mask },
            |m: &mut UpdateInstanceRequest| { &mut m.field_mask },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateInstanceRequest>(
            "UpdateInstanceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateInstanceRequest {
    const NAME: &'static str = "UpdateInstanceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.instance)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.field_mask)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.field_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.instance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.field_mask.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateInstanceRequest {
        UpdateInstanceRequest::new()
    }

    fn clear(&mut self) {
        self.instance.clear();
        self.field_mask.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateInstanceRequest {
        static instance: UpdateInstanceRequest = UpdateInstanceRequest {
            instance: ::protobuf::MessageField::none(),
            field_mask: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateInstanceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateInstanceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The request for [DeleteInstance][google.spanner.admin.instance.v1.InstanceAdmin.DeleteInstance].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.DeleteInstanceRequest)
pub struct DeleteInstanceRequest {
    // message fields
    ///  Required. The name of the instance to be deleted. Values are of the form
    ///  `projects/<project>/instances/<instance>`
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.DeleteInstanceRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.DeleteInstanceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteInstanceRequest {
    fn default() -> &'a DeleteInstanceRequest {
        <DeleteInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteInstanceRequest {
    pub fn new() -> DeleteInstanceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &DeleteInstanceRequest| { &m.name },
            |m: &mut DeleteInstanceRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteInstanceRequest>(
            "DeleteInstanceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteInstanceRequest {
    const NAME: &'static str = "DeleteInstanceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteInstanceRequest {
        DeleteInstanceRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteInstanceRequest {
        static instance: DeleteInstanceRequest = DeleteInstanceRequest {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteInstanceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteInstanceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteInstanceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Metadata type for the operation returned by
///  [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.CreateInstanceMetadata)
pub struct CreateInstanceMetadata {
    // message fields
    ///  The instance being created.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.CreateInstanceMetadata.instance)
    pub instance: ::protobuf::MessageField<Instance>,
    ///  The time at which the
    ///  [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance] request was
    ///  received.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.CreateInstanceMetadata.start_time)
    pub start_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  The time at which this operation was cancelled. If set, this operation is
    ///  in the process of undoing itself (which is guaranteed to succeed) and
    ///  cannot be cancelled again.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.CreateInstanceMetadata.cancel_time)
    pub cancel_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  The time at which this operation failed or was completed successfully.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.CreateInstanceMetadata.end_time)
    pub end_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.CreateInstanceMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateInstanceMetadata {
    fn default() -> &'a CreateInstanceMetadata {
        <CreateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceMetadata {
    pub fn new() -> CreateInstanceMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Instance>(
            "instance",
            |m: &CreateInstanceMetadata| { &m.instance },
            |m: &mut CreateInstanceMetadata| { &mut m.instance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "start_time",
            |m: &CreateInstanceMetadata| { &m.start_time },
            |m: &mut CreateInstanceMetadata| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "cancel_time",
            |m: &CreateInstanceMetadata| { &m.cancel_time },
            |m: &mut CreateInstanceMetadata| { &mut m.cancel_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "end_time",
            |m: &CreateInstanceMetadata| { &m.end_time },
            |m: &mut CreateInstanceMetadata| { &mut m.end_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateInstanceMetadata>(
            "CreateInstanceMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateInstanceMetadata {
    const NAME: &'static str = "CreateInstanceMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.instance)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start_time)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cancel_time)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.end_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.instance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.start_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.cancel_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.end_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateInstanceMetadata {
        CreateInstanceMetadata::new()
    }

    fn clear(&mut self) {
        self.instance.clear();
        self.start_time.clear();
        self.cancel_time.clear();
        self.end_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateInstanceMetadata {
        static instance: CreateInstanceMetadata = CreateInstanceMetadata {
            instance: ::protobuf::MessageField::none(),
            start_time: ::protobuf::MessageField::none(),
            cancel_time: ::protobuf::MessageField::none(),
            end_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateInstanceMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateInstanceMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Metadata type for the operation returned by
///  [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.spanner.admin.instance.v1.UpdateInstanceMetadata)
pub struct UpdateInstanceMetadata {
    // message fields
    ///  The desired end state of the update.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.UpdateInstanceMetadata.instance)
    pub instance: ::protobuf::MessageField<Instance>,
    ///  The time at which [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance]
    ///  request was received.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.UpdateInstanceMetadata.start_time)
    pub start_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  The time at which this operation was cancelled. If set, this operation is
    ///  in the process of undoing itself (which is guaranteed to succeed) and
    ///  cannot be cancelled again.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time)
    pub cancel_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  The time at which this operation failed or was completed successfully.
    // @@protoc_insertion_point(field:google.spanner.admin.instance.v1.UpdateInstanceMetadata.end_time)
    pub end_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:google.spanner.admin.instance.v1.UpdateInstanceMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceMetadata {
    fn default() -> &'a UpdateInstanceMetadata {
        <UpdateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceMetadata {
    pub fn new() -> UpdateInstanceMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Instance>(
            "instance",
            |m: &UpdateInstanceMetadata| { &m.instance },
            |m: &mut UpdateInstanceMetadata| { &mut m.instance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "start_time",
            |m: &UpdateInstanceMetadata| { &m.start_time },
            |m: &mut UpdateInstanceMetadata| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "cancel_time",
            |m: &UpdateInstanceMetadata| { &m.cancel_time },
            |m: &mut UpdateInstanceMetadata| { &mut m.cancel_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "end_time",
            |m: &UpdateInstanceMetadata| { &m.end_time },
            |m: &mut UpdateInstanceMetadata| { &mut m.end_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateInstanceMetadata>(
            "UpdateInstanceMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateInstanceMetadata {
    const NAME: &'static str = "UpdateInstanceMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.instance)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start_time)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cancel_time)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.end_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.instance.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.start_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.cancel_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.end_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateInstanceMetadata {
        UpdateInstanceMetadata::new()
    }

    fn clear(&mut self) {
        self.instance.clear();
        self.start_time.clear();
        self.cancel_time.clear();
        self.end_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateInstanceMetadata {
        static instance: UpdateInstanceMetadata = UpdateInstanceMetadata {
            instance: ::protobuf::MessageField::none(),
            start_time: ::protobuf::MessageField::none(),
            cancel_time: ::protobuf::MessageField::none(),
            end_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateInstanceMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateInstanceMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=google/spanner/admin/instance/v1/spanner_instance_admin.proto\x12\x20\
    google.spanner.admin.instance.v1\x1a\x1cgoogle/api/annotations.proto\x1a\
    \x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\
    \x19google/api/resource.proto\x1a\x1egoogle/iam/v1/iam_policy.proto\x1a\
    \x1agoogle/iam/v1/policy.proto\x1a#google/longrunning/operations.proto\
    \x1a\x1bgoogle/protobuf/empty.proto\x1a\x20google/protobuf/field_mask.pr\
    oto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x81\x02\n\x0bReplicaInfo\
    \x12\x1a\n\x08location\x18\x01\x20\x01(\tR\x08location\x12M\n\x04type\
    \x18\x02\x20\x01(\x0e29.google.spanner.admin.instance.v1.ReplicaInfo.Rep\
    licaTypeR\x04type\x126\n\x17default_leader_location\x18\x03\x20\x01(\x08\
    R\x15defaultLeaderLocation\"O\n\x0bReplicaType\x12\x14\n\x10TYPE_UNSPECI\
    FIED\x10\0\x12\x0e\n\nREAD_WRITE\x10\x01\x12\r\n\tREAD_ONLY\x10\x02\x12\
    \x0b\n\x07WITNESS\x10\x03\"\xf4\x01\n\x0eInstanceConfig\x12\x12\n\x04nam\
    e\x18\x01\x20\x01(\tR\x04name\x12!\n\x0cdisplay_name\x18\x02\x20\x01(\tR\
    \x0bdisplayName\x12I\n\x08replicas\x18\x03\x20\x03(\x0b2-.google.spanner\
    .admin.instance.v1.ReplicaInfoR\x08replicas:`\xeaA]\n%spanner.googleapis\
    .com/InstanceConfig\x124projects/{project}/instanceConfigs/{instance_con\
    fig}\"\xa4\x04\n\x08Instance\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04na\
    me\x12B\n\x06config\x18\x02\x20\x01(\tR\x06configB*\xfaA'\n%spanner.goog\
    leapis.com/InstanceConfig\x12!\n\x0cdisplay_name\x18\x03\x20\x01(\tR\x0b\
    displayName\x12\x1d\n\nnode_count\x18\x05\x20\x01(\x05R\tnodeCount\x12F\
    \n\x05state\x18\x06\x20\x01(\x0e20.google.spanner.admin.instance.v1.Inst\
    ance.StateR\x05state\x12N\n\x06labels\x18\x07\x20\x03(\x0b26.google.span\
    ner.admin.instance.v1.Instance.LabelsEntryR\x06labels\x12#\n\rendpoint_u\
    ris\x18\x08\x20\x03(\tR\x0cendpointUris\x1a9\n\x0bLabelsEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"7\n\x05State\x12\x15\n\x11STATE_UNSPECIFIED\x10\0\
    \x12\x0c\n\x08CREATING\x10\x01\x12\t\n\x05READY\x10\x02:M\xeaAJ\n\x1fspa\
    nner.googleapis.com/Instance\x12'projects/{project}/instances/{instance}\
    \"\xa5\x01\n\x1aListInstanceConfigsRequest\x12K\n\x06parent\x18\x01\x20\
    \x01(\tR\x06parentB3\xfaA-\n+cloudresourcemanager.googleapis.com/Project\
    \xe0A\x02\x12\x1b\n\tpage_size\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\
    \n\npage_token\x18\x03\x20\x01(\tR\tpageToken\"\xa2\x01\n\x1bListInstanc\
    eConfigsResponse\x12[\n\x10instance_configs\x18\x01\x20\x03(\x0b20.googl\
    e.spanner.admin.instance.v1.InstanceConfigR\x0finstanceConfigs\x12&\n\
    \x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\"]\n\x18GetInstan\
    ceConfigRequest\x12A\n\x04name\x18\x01\x20\x01(\tR\x04nameB-\xfaA'\n%spa\
    nner.googleapis.com/InstanceConfig\xe0A\x02\"\x8c\x01\n\x12GetInstanceRe\
    quest\x12;\n\x04name\x18\x01\x20\x01(\tR\x04nameB'\xfaA!\n\x1fspanner.go\
    ogleapis.com/Instance\xe0A\x02\x129\n\nfield_mask\x18\x02\x20\x01(\x0b2\
    \x1a.google.protobuf.FieldMaskR\tfieldMask\"\xd7\x01\n\x15CreateInstance\
    Request\x12K\n\x06parent\x18\x01\x20\x01(\tR\x06parentB3\xfaA-\n+cloudre\
    sourcemanager.googleapis.com/Project\xe0A\x02\x12$\n\x0binstance_id\x18\
    \x02\x20\x01(\tR\ninstanceIdB\x03\xe0A\x02\x12K\n\x08instance\x18\x03\
    \x20\x01(\x0b2*.google.spanner.admin.instance.v1.InstanceR\x08instanceB\
    \x03\xe0A\x02\"\xb7\x01\n\x14ListInstancesRequest\x12K\n\x06parent\x18\
    \x01\x20\x01(\tR\x06parentB3\xfaA-\n+cloudresourcemanager.googleapis.com\
    /Project\xe0A\x02\x12\x1b\n\tpage_size\x18\x02\x20\x01(\x05R\x08pageSize\
    \x12\x1d\n\npage_token\x18\x03\x20\x01(\tR\tpageToken\x12\x16\n\x06filte\
    r\x18\x04\x20\x01(\tR\x06filter\"\x89\x01\n\x15ListInstancesResponse\x12\
    H\n\tinstances\x18\x01\x20\x03(\x0b2*.google.spanner.admin.instance.v1.I\
    nstanceR\tinstances\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextP\
    ageToken\"\xa4\x01\n\x15UpdateInstanceRequest\x12K\n\x08instance\x18\x01\
    \x20\x01(\x0b2*.google.spanner.admin.instance.v1.InstanceR\x08instanceB\
    \x03\xe0A\x02\x12>\n\nfield_mask\x18\x02\x20\x01(\x0b2\x1a.google.protob\
    uf.FieldMaskR\tfieldMaskB\x03\xe0A\x02\"T\n\x15DeleteInstanceRequest\x12\
    ;\n\x04name\x18\x01\x20\x01(\tR\x04nameB'\xfaA!\n\x1fspanner.googleapis.\
    com/Instance\xe0A\x02\"\x8f\x02\n\x16CreateInstanceMetadata\x12F\n\x08in\
    stance\x18\x01\x20\x01(\x0b2*.google.spanner.admin.instance.v1.InstanceR\
    \x08instance\x129\n\nstart_time\x18\x02\x20\x01(\x0b2\x1a.google.protobu\
    f.TimestampR\tstartTime\x12;\n\x0bcancel_time\x18\x03\x20\x01(\x0b2\x1a.\
    google.protobuf.TimestampR\ncancelTime\x125\n\x08end_time\x18\x04\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x07endTime\"\x8f\x02\n\x16Upda\
    teInstanceMetadata\x12F\n\x08instance\x18\x01\x20\x01(\x0b2*.google.span\
    ner.admin.instance.v1.InstanceR\x08instance\x129\n\nstart_time\x18\x02\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tstartTime\x12;\n\x0bcance\
    l_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ncancelTime\
    \x125\n\x08end_time\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x07endTime2\xbf\x10\n\rInstanceAdmin\x12\xcc\x01\n\x13ListInstanceConfi\
    gs\x12<.google.spanner.admin.instance.v1.ListInstanceConfigsRequest\x1a=\
    .google.spanner.admin.instance.v1.ListInstanceConfigsResponse\"8\x82\xd3\
    \xe4\x93\x02)\x12'/v1/{parent=projects/*}/instanceConfigs\xdaA\x06parent\
    \x12\xb9\x01\n\x11GetInstanceConfig\x12:.google.spanner.admin.instance.v\
    1.GetInstanceConfigRequest\x1a0.google.spanner.admin.instance.v1.Instanc\
    eConfig\"6\x82\xd3\xe4\x93\x02)\x12'/v1/{name=projects/*/instanceConfigs\
    /*}\xdaA\x04name\x12\xb4\x01\n\rListInstances\x126.google.spanner.admin.\
    instance.v1.ListInstancesRequest\x1a7.google.spanner.admin.instance.v1.L\
    istInstancesResponse\"2\x82\xd3\xe4\x93\x02#\x12!/v1/{parent=projects/*}\
    /instances\xdaA\x06parent\x12\xa1\x01\n\x0bGetInstance\x124.google.spann\
    er.admin.instance.v1.GetInstanceRequest\x1a*.google.spanner.admin.instan\
    ce.v1.Instance\"0\x82\xd3\xe4\x93\x02#\x12!/v1/{name=projects/*/instance\
    s/*}\xdaA\x04name\x12\x9c\x02\n\x0eCreateInstance\x127.google.spanner.ad\
    min.instance.v1.CreateInstanceRequest\x1a\x1d.google.longrunning.Operati\
    on\"\xb1\x01\xcaAd\n)google.spanner.admin.instance.v1.Instance\x127googl\
    e.spanner.admin.instance.v1.CreateInstanceMetadata\x82\xd3\xe4\x93\x02&\
    \"!/v1/{parent=projects/*}/instances:\x01*\xdaA\x1bparent,instance_id,in\
    stance\x12\x9d\x02\n\x0eUpdateInstance\x127.google.spanner.admin.instanc\
    e.v1.UpdateInstanceRequest\x1a\x1d.google.longrunning.Operation\"\xb2\
    \x01\xcaAd\n)google.spanner.admin.instance.v1.Instance\x127google.spanne\
    r.admin.instance.v1.UpdateInstanceMetadata\x82\xd3\xe4\x93\x02/2*/v1/{in\
    stance.name=projects/*/instances/*}:\x01*\xdaA\x13instance,field_mask\
    \x12\x93\x01\n\x0eDeleteInstance\x127.google.spanner.admin.instance.v1.D\
    eleteInstanceRequest\x1a\x16.google.protobuf.Empty\"0\x82\xd3\xe4\x93\
    \x02#*!/v1/{name=projects/*/instances/*}\xdaA\x04name\x12\x9a\x01\n\x0cS\
    etIamPolicy\x12\".google.iam.v1.SetIamPolicyRequest\x1a\x15.google.iam.v\
    1.Policy\"O\x82\xd3\xe4\x93\x027\"2/v1/{resource=projects/*/instances/*}\
    :setIamPolicy:\x01*\xdaA\x0fresource,policy\x12\x93\x01\n\x0cGetIamPolic\
    y\x12\".google.iam.v1.GetIamPolicyRequest\x1a\x15.google.iam.v1.Policy\"\
    H\x82\xd3\xe4\x93\x027\"2/v1/{resource=projects/*/instances/*}:getIamPol\
    icy:\x01*\xdaA\x08resource\x12\xc5\x01\n\x12TestIamPermissions\x12(.goog\
    le.iam.v1.TestIamPermissionsRequest\x1a).google.iam.v1.TestIamPermission\
    sResponse\"Z\x82\xd3\xe4\x93\x02=\"8/v1/{resource=projects/*/instances/*\
    }:testIamPermissions:\x01*\xdaA\x14resource,permissions\x1ax\xd2A\\https\
    ://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/aut\
    h/spanner.admin\xcaA\x16spanner.googleapis.comB\xdf\x01\n$com.google.spa\
    nner.admin.instance.v1B\x19SpannerInstanceAdminProtoP\x01ZHgoogle.golang\
    .org/genproto/googleapis/spanner/admin/instance/v1;instance\xaa\x02&Goog\
    le.Cloud.Spanner.Admin.Instance.V1\xca\x02&Google\\Cloud\\Spanner\\Admin\
    \\Instance\\V1J\xdf\xb3\x01\n\x07\x12\x05\x0f\0\xe2\x04\x01\n\xbe\x04\n\
    \x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LL\
    C.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0)\n\t\n\x02\x03\0\x12\x03\
    \x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\0!\n\t\n\x02\x03\x02\x12\x03\x15\0\
    )\n\t\n\x02\x03\x03\x12\x03\x16\0#\n\t\n\x02\x03\x04\x12\x03\x17\0(\n\t\
    \n\x02\x03\x05\x12\x03\x18\0$\n\t\n\x02\x03\x06\x12\x03\x19\0-\n\t\n\x02\
    \x03\x07\x12\x03\x1a\0%\n\t\n\x02\x03\x08\x12\x03\x1b\0*\n\t\n\x02\x03\t\
    \x12\x03\x1c\0)\n\x08\n\x01\x08\x12\x03\x1e\0C\n\t\n\x02\x08%\x12\x03\
    \x1e\0C\n\x08\n\x01\x08\x12\x03\x1f\0_\n\t\n\x02\x08\x0b\x12\x03\x1f\0_\
    \n\x08\n\x01\x08\x12\x03\x20\0\"\n\t\n\x02\x08\n\x12\x03\x20\0\"\n\x08\n\
    \x01\x08\x12\x03!\0:\n\t\n\x02\x08\x08\x12\x03!\0:\n\x08\n\x01\x08\x12\
    \x03\"\0=\n\t\n\x02\x08\x01\x12\x03\"\0=\n\x08\n\x01\x08\x12\x03#\0E\n\t\
    \n\x02\x08)\x12\x03#\0E\n\xdd\x08\n\x02\x06\0\x12\x05:\0\xfb\x01\x01\x1a\
    \xcf\x08\x20Cloud\x20Spanner\x20Instance\x20Admin\x20API\n\n\x20The\x20C\
    loud\x20Spanner\x20Instance\x20Admin\x20API\x20can\x20be\x20used\x20to\
    \x20create,\x20delete,\n\x20modify\x20and\x20list\x20instances.\x20Insta\
    nces\x20are\x20dedicated\x20Cloud\x20Spanner\x20serving\n\x20and\x20stor\
    age\x20resources\x20to\x20be\x20used\x20by\x20Cloud\x20Spanner\x20databa\
    ses.\n\n\x20Each\x20instance\x20has\x20a\x20\"configuration\",\x20which\
    \x20dictates\x20where\x20the\n\x20serving\x20resources\x20for\x20the\x20\
    Cloud\x20Spanner\x20instance\x20are\x20located\x20(e.g.,\n\x20US-central\
    ,\x20Europe).\x20Configurations\x20are\x20created\x20by\x20Google\x20bas\
    ed\x20on\n\x20resource\x20availability.\n\n\x20Cloud\x20Spanner\x20billi\
    ng\x20is\x20based\x20on\x20the\x20instances\x20that\x20exist\x20and\x20t\
    heir\n\x20sizes.\x20After\x20an\x20instance\x20exists,\x20there\x20are\
    \x20no\x20additional\n\x20per-database\x20or\x20per-operation\x20charges\
    \x20for\x20use\x20of\x20the\x20instance\n\x20(though\x20there\x20may\x20\
    be\x20additional\x20network\x20bandwidth\x20charges).\n\x20Instances\x20\
    offer\x20isolation:\x20problems\x20with\x20databases\x20in\x20one\x20ins\
    tance\n\x20will\x20not\x20affect\x20other\x20instances.\x20However,\x20w\
    ithin\x20an\x20instance\n\x20databases\x20can\x20affect\x20each\x20other\
    .\x20For\x20example,\x20if\x20one\x20database\x20in\x20an\n\x20instance\
    \x20receives\x20a\x20lot\x20of\x20requests\x20and\x20consumes\x20most\
    \x20of\x20the\n\x20instance\x20resources,\x20fewer\x20resources\x20are\
    \x20available\x20for\x20other\n\x20databases\x20in\x20that\x20instance,\
    \x20and\x20their\x20performance\x20may\x20suffer.\n\n\n\n\x03\x06\0\x01\
    \x12\x03:\x08\x15\n\n\n\x03\x06\0\x03\x12\x03;\x02>\n\x0c\n\x05\x06\0\
    \x03\x99\x08\x12\x03;\x02>\n\x0b\n\x03\x06\0\x03\x12\x04<\x02>6\n\r\n\
    \x05\x06\0\x03\x9a\x08\x12\x04<\x02>6\nP\n\x04\x06\0\x02\0\x12\x04A\x02F\
    \x03\x1aB\x20Lists\x20the\x20supported\x20instance\x20configurations\x20\
    for\x20a\x20given\x20project.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03A\x06\
    \x19\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03A\x1a4\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x03A?Z\n\r\n\x05\x06\0\x02\0\x04\x12\x04B\x04D\x06\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04B\x04D\x06\n\x0c\n\x05\x06\0\x02\0\
    \x04\x12\x03E\x044\n\x0f\n\x08\x06\0\x02\0\x04\x9b\x08\0\x12\x03E\x044\n\
    K\n\x04\x06\0\x02\x01\x12\x04I\x02N\x03\x1a=\x20Gets\x20information\x20a\
    bout\x20a\x20particular\x20instance\x20configuration.\n\n\x0c\n\x05\x06\
    \0\x02\x01\x01\x12\x03I\x06\x17\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03I\
    \x180\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03I;I\n\r\n\x05\x06\0\x02\x01\
    \x04\x12\x04J\x04L\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04\
    J\x04L\x06\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03M\x042\n\x0f\n\x08\x06\0\
    \x02\x01\x04\x9b\x08\0\x12\x03M\x042\n9\n\x04\x06\0\x02\x02\x12\x04Q\x02\
    V\x03\x1a+\x20Lists\x20all\x20instances\x20in\x20the\x20given\x20project\
    .\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03Q\x06\x13\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03Q\x14(\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03Q3H\n\r\n\
    \x05\x06\0\x02\x02\x04\x12\x04R\x04T\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\
    \xca\xbc\"\x12\x04R\x04T\x06\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03U\x044\
    \n\x0f\n\x08\x06\0\x02\x02\x04\x9b\x08\0\x12\x03U\x044\n=\n\x04\x06\0\
    \x02\x03\x12\x04Y\x02^\x03\x1a/\x20Gets\x20information\x20about\x20a\x20\
    particular\x20instance.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03Y\x06\x11\
    \n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03Y\x12$\n\x0c\n\x05\x06\0\x02\x03\
    \x03\x12\x03Y/7\n\r\n\x05\x06\0\x02\x03\x04\x12\x04Z\x04\\\x06\n\x11\n\t\
    \x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04Z\x04\\\x06\n\x0c\n\x05\x06\0\
    \x02\x03\x04\x12\x03]\x042\n\x0f\n\x08\x06\0\x02\x03\x04\x9b\x08\0\x12\
    \x03]\x042\n\xaa\x0c\n\x04\x06\0\x02\x04\x12\x06\x82\x01\x02\x8c\x01\x03\
    \x1a\x99\x0c\x20Creates\x20an\x20instance\x20and\x20begins\x20preparing\
    \x20it\x20to\x20begin\x20serving.\x20The\n\x20returned\x20[long-running\
    \x20operation][google.longrunning.Operation]\n\x20can\x20be\x20used\x20t\
    o\x20track\x20the\x20progress\x20of\x20preparing\x20the\x20new\n\x20inst\
    ance.\x20The\x20instance\x20name\x20is\x20assigned\x20by\x20the\x20calle\
    r.\x20If\x20the\n\x20named\x20instance\x20already\x20exists,\x20`CreateI\
    nstance`\x20returns\n\x20`ALREADY_EXISTS`.\n\n\x20Immediately\x20upon\
    \x20completion\x20of\x20this\x20request:\n\n\x20\x20\x20*\x20The\x20inst\
    ance\x20is\x20readable\x20via\x20the\x20API,\x20with\x20all\x20requested\
    \x20attributes\n\x20\x20\x20\x20\x20but\x20no\x20allocated\x20resources.\
    \x20Its\x20state\x20is\x20`CREATING`.\n\n\x20Until\x20completion\x20of\
    \x20the\x20returned\x20operation:\n\n\x20\x20\x20*\x20Cancelling\x20the\
    \x20operation\x20renders\x20the\x20instance\x20immediately\x20unreadable\
    \n\x20\x20\x20\x20\x20via\x20the\x20API.\n\x20\x20\x20*\x20The\x20instan\
    ce\x20can\x20be\x20deleted.\n\x20\x20\x20*\x20All\x20other\x20attempts\
    \x20to\x20modify\x20the\x20instance\x20are\x20rejected.\n\n\x20Upon\x20c\
    ompletion\x20of\x20the\x20returned\x20operation:\n\n\x20\x20\x20*\x20Bil\
    ling\x20for\x20all\x20successfully-allocated\x20resources\x20begins\x20(\
    some\x20types\n\x20\x20\x20\x20\x20may\x20have\x20lower\x20than\x20the\
    \x20requested\x20levels).\n\x20\x20\x20*\x20Databases\x20can\x20be\x20cr\
    eated\x20in\x20the\x20instance.\n\x20\x20\x20*\x20The\x20instance's\x20a\
    llocated\x20resource\x20levels\x20are\x20readable\x20via\x20the\x20API.\
    \n\x20\x20\x20*\x20The\x20instance's\x20state\x20becomes\x20`READY`.\n\n\
    \x20The\x20returned\x20[long-running\x20operation][google.longrunning.Op\
    eration]\x20will\n\x20have\x20a\x20name\x20of\x20the\x20format\x20`<inst\
    ance_name>/operations/<operation_id>`\x20and\n\x20can\x20be\x20used\x20t\
    o\x20track\x20creation\x20of\x20the\x20instance.\x20\x20The\n\x20[metada\
    ta][google.longrunning.Operation.metadata]\x20field\x20type\x20is\n\x20[\
    CreateInstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceM\
    etadata].\n\x20The\x20[response][google.longrunning.Operation.response]\
    \x20field\x20type\x20is\n\x20[Instance][google.spanner.admin.instance.v1\
    .Instance],\x20if\x20successful.\n\n\r\n\x05\x06\0\x02\x04\x01\x12\x04\
    \x82\x01\x06\x14\n\r\n\x05\x06\0\x02\x04\x02\x12\x04\x82\x01\x15*\n\r\n\
    \x05\x06\0\x02\x04\x03\x12\x04\x82\x015Q\n\x0f\n\x05\x06\0\x02\x04\x04\
    \x12\x06\x83\x01\x04\x86\x01\x06\n\x13\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\
    \"\x12\x06\x83\x01\x04\x86\x01\x06\n\r\n\x05\x06\0\x02\x04\x04\x12\x04\
    \x87\x01\x04I\n\x10\n\x08\x06\0\x02\x04\x04\x9b\x08\0\x12\x04\x87\x01\
    \x04I\n\x0f\n\x05\x06\0\x02\x04\x04\x12\x06\x88\x01\x04\x8b\x01\x06\n\
    \x11\n\x07\x06\0\x02\x04\x04\x99\x08\x12\x06\x88\x01\x04\x8b\x01\x06\n\
    \xb8\x0f\n\x04\x06\0\x02\x05\x12\x06\xb6\x01\x02\xc0\x01\x03\x1a\xa7\x0f\
    \x20Updates\x20an\x20instance,\x20and\x20begins\x20allocating\x20or\x20r\
    eleasing\x20resources\n\x20as\x20requested.\x20The\x20returned\x20[long-\
    running\n\x20operation][google.longrunning.Operation]\x20can\x20be\x20us\
    ed\x20to\x20track\x20the\n\x20progress\x20of\x20updating\x20the\x20insta\
    nce.\x20If\x20the\x20named\x20instance\x20does\x20not\n\x20exist,\x20ret\
    urns\x20`NOT_FOUND`.\n\n\x20Immediately\x20upon\x20completion\x20of\x20t\
    his\x20request:\n\n\x20\x20\x20*\x20For\x20resource\x20types\x20for\x20w\
    hich\x20a\x20decrease\x20in\x20the\x20instance's\x20allocation\n\x20\x20\
    \x20\x20\x20has\x20been\x20requested,\x20billing\x20is\x20based\x20on\
    \x20the\x20newly-requested\x20level.\n\n\x20Until\x20completion\x20of\
    \x20the\x20returned\x20operation:\n\n\x20\x20\x20*\x20Cancelling\x20the\
    \x20operation\x20sets\x20its\x20metadata's\n\x20\x20\x20\x20\x20[cancel_\
    time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_tim\
    e],\x20and\x20begins\n\x20\x20\x20\x20\x20restoring\x20resources\x20to\
    \x20their\x20pre-request\x20values.\x20The\x20operation\n\x20\x20\x20\
    \x20\x20is\x20guaranteed\x20to\x20succeed\x20at\x20undoing\x20all\x20res\
    ource\x20changes,\n\x20\x20\x20\x20\x20after\x20which\x20point\x20it\x20\
    terminates\x20with\x20a\x20`CANCELLED`\x20status.\n\x20\x20\x20*\x20All\
    \x20other\x20attempts\x20to\x20modify\x20the\x20instance\x20are\x20rejec\
    ted.\n\x20\x20\x20*\x20Reading\x20the\x20instance\x20via\x20the\x20API\
    \x20continues\x20to\x20give\x20the\x20pre-request\n\x20\x20\x20\x20\x20r\
    esource\x20levels.\n\n\x20Upon\x20completion\x20of\x20the\x20returned\
    \x20operation:\n\n\x20\x20\x20*\x20Billing\x20begins\x20for\x20all\x20su\
    ccessfully-allocated\x20resources\x20(some\x20types\n\x20\x20\x20\x20\
    \x20may\x20have\x20lower\x20than\x20the\x20requested\x20levels).\n\x20\
    \x20\x20*\x20All\x20newly-reserved\x20resources\x20are\x20available\x20f\
    or\x20serving\x20the\x20instance's\n\x20\x20\x20\x20\x20tables.\n\x20\
    \x20\x20*\x20The\x20instance's\x20new\x20resource\x20levels\x20are\x20re\
    adable\x20via\x20the\x20API.\n\n\x20The\x20returned\x20[long-running\x20\
    operation][google.longrunning.Operation]\x20will\n\x20have\x20a\x20name\
    \x20of\x20the\x20format\x20`<instance_name>/operations/<operation_id>`\
    \x20and\n\x20can\x20be\x20used\x20to\x20track\x20the\x20instance\x20modi\
    fication.\x20\x20The\n\x20[metadata][google.longrunning.Operation.metada\
    ta]\x20field\x20type\x20is\n\x20[UpdateInstanceMetadata][google.spanner.\
    admin.instance.v1.UpdateInstanceMetadata].\n\x20The\x20[response][google\
    .longrunning.Operation.response]\x20field\x20type\x20is\n\x20[Instance][\
    google.spanner.admin.instance.v1.Instance],\x20if\x20successful.\n\n\x20\
    Authorization\x20requires\x20`spanner.instances.update`\x20permission\
    \x20on\n\x20resource\x20[name][google.spanner.admin.instance.v1.Instance\
    .name].\n\n\r\n\x05\x06\0\x02\x05\x01\x12\x04\xb6\x01\x06\x14\n\r\n\x05\
    \x06\0\x02\x05\x02\x12\x04\xb6\x01\x15*\n\r\n\x05\x06\0\x02\x05\x03\x12\
    \x04\xb6\x015Q\n\x0f\n\x05\x06\0\x02\x05\x04\x12\x06\xb7\x01\x04\xba\x01\
    \x06\n\x13\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x06\xb7\x01\x04\xba\
    \x01\x06\n\r\n\x05\x06\0\x02\x05\x04\x12\x04\xbb\x01\x04A\n\x10\n\x08\
    \x06\0\x02\x05\x04\x9b\x08\0\x12\x04\xbb\x01\x04A\n\x0f\n\x05\x06\0\x02\
    \x05\x04\x12\x06\xbc\x01\x04\xbf\x01\x06\n\x11\n\x07\x06\0\x02\x05\x04\
    \x99\x08\x12\x06\xbc\x01\x04\xbf\x01\x06\n\xc8\x02\n\x04\x06\0\x02\x06\
    \x12\x06\xcd\x01\x02\xd2\x01\x03\x1a\xb7\x02\x20Deletes\x20an\x20instanc\
    e.\n\n\x20Immediately\x20upon\x20completion\x20of\x20the\x20request:\n\n\
    \x20\x20\x20*\x20Billing\x20ceases\x20for\x20all\x20of\x20the\x20instanc\
    e's\x20reserved\x20resources.\n\n\x20Soon\x20afterward:\n\n\x20\x20\x20*\
    \x20The\x20instance\x20and\x20*all\x20of\x20its\x20databases*\x20immedia\
    tely\x20and\n\x20\x20\x20\x20\x20irrevocably\x20disappear\x20from\x20the\
    \x20API.\x20All\x20data\x20in\x20the\x20databases\n\x20\x20\x20\x20\x20i\
    s\x20permanently\x20deleted.\n\n\r\n\x05\x06\0\x02\x06\x01\x12\x04\xcd\
    \x01\x06\x14\n\r\n\x05\x06\0\x02\x06\x02\x12\x04\xcd\x01\x15*\n\r\n\x05\
    \x06\0\x02\x06\x03\x12\x04\xcd\x015J\n\x0f\n\x05\x06\0\x02\x06\x04\x12\
    \x06\xce\x01\x04\xd0\x01\x06\n\x13\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\
    \x12\x06\xce\x01\x04\xd0\x01\x06\n\r\n\x05\x06\0\x02\x06\x04\x12\x04\xd1\
    \x01\x042\n\x10\n\x08\x06\0\x02\x06\x04\x9b\x08\0\x12\x04\xd1\x01\x042\n\
    \xdf\x01\n\x04\x06\0\x02\x07\x12\x06\xd9\x01\x02\xdf\x01\x03\x1a\xce\x01\
    \x20Sets\x20the\x20access\x20control\x20policy\x20on\x20an\x20instance\
    \x20resource.\x20Replaces\x20any\n\x20existing\x20policy.\n\n\x20Authori\
    zation\x20requires\x20`spanner.instances.setIamPolicy`\x20on\n\x20[resou\
    rce][google.iam.v1.SetIamPolicyRequest.resource].\n\n\r\n\x05\x06\0\x02\
    \x07\x01\x12\x04\xd9\x01\x06\x12\n\r\n\x05\x06\0\x02\x07\x02\x12\x04\xd9\
    \x01\x134\n\r\n\x05\x06\0\x02\x07\x03\x12\x04\xd9\x01?S\n\x0f\n\x05\x06\
    \0\x02\x07\x04\x12\x06\xda\x01\x04\xdd\x01\x06\n\x13\n\t\x06\0\x02\x07\
    \x04\xb0\xca\xbc\"\x12\x06\xda\x01\x04\xdd\x01\x06\n\r\n\x05\x06\0\x02\
    \x07\x04\x12\x04\xde\x01\x04=\n\x10\n\x08\x06\0\x02\x07\x04\x9b\x08\0\
    \x12\x04\xde\x01\x04=\n\x90\x02\n\x04\x06\0\x02\x08\x12\x06\xe6\x01\x02\
    \xec\x01\x03\x1a\xff\x01\x20Gets\x20the\x20access\x20control\x20policy\
    \x20for\x20an\x20instance\x20resource.\x20Returns\x20an\x20empty\n\x20po\
    licy\x20if\x20an\x20instance\x20exists\x20but\x20does\x20not\x20have\x20\
    a\x20policy\x20set.\n\n\x20Authorization\x20requires\x20`spanner.instanc\
    es.getIamPolicy`\x20on\n\x20[resource][google.iam.v1.GetIamPolicyRequest\
    .resource].\n\n\r\n\x05\x06\0\x02\x08\x01\x12\x04\xe6\x01\x06\x12\n\r\n\
    \x05\x06\0\x02\x08\x02\x12\x04\xe6\x01\x134\n\r\n\x05\x06\0\x02\x08\x03\
    \x12\x04\xe6\x01?S\n\x0f\n\x05\x06\0\x02\x08\x04\x12\x06\xe7\x01\x04\xea\
    \x01\x06\n\x13\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\x06\xe7\x01\x04\
    \xea\x01\x06\n\r\n\x05\x06\0\x02\x08\x04\x12\x04\xeb\x01\x046\n\x10\n\
    \x08\x06\0\x02\x08\x04\x9b\x08\0\x12\x04\xeb\x01\x046\n\xd5\x02\n\x04\
    \x06\0\x02\t\x12\x06\xf4\x01\x02\xfa\x01\x03\x1a\xc4\x02\x20Returns\x20p\
    ermissions\x20that\x20the\x20caller\x20has\x20on\x20the\x20specified\x20\
    instance\x20resource.\n\n\x20Attempting\x20this\x20RPC\x20on\x20a\x20non\
    -existent\x20Cloud\x20Spanner\x20instance\x20resource\x20will\n\x20resul\
    t\x20in\x20a\x20NOT_FOUND\x20error\x20if\x20the\x20user\x20has\x20`spann\
    er.instances.list`\n\x20permission\x20on\x20the\x20containing\x20Google\
    \x20Cloud\x20Project.\x20Otherwise\x20returns\x20an\n\x20empty\x20set\
    \x20of\x20permissions.\n\n\r\n\x05\x06\0\x02\t\x01\x12\x04\xf4\x01\x06\
    \x18\n\r\n\x05\x06\0\x02\t\x02\x12\x04\xf4\x01\x19@\n\r\n\x05\x06\0\x02\
    \t\x03\x12\x04\xf4\x01Ks\n\x0f\n\x05\x06\0\x02\t\x04\x12\x06\xf5\x01\x04\
    \xf8\x01\x06\n\x13\n\t\x06\0\x02\t\x04\xb0\xca\xbc\"\x12\x06\xf5\x01\x04\
    \xf8\x01\x06\n\r\n\x05\x06\0\x02\t\x04\x12\x04\xf9\x01\x04B\n\x10\n\x08\
    \x06\0\x02\t\x04\x9b\x08\0\x12\x04\xf9\x01\x04B\n\x0c\n\x02\x04\0\x12\
    \x06\xfd\x01\0\xab\x02\x01\n\x0b\n\x03\x04\0\x01\x12\x04\xfd\x01\x08\x13\
    \n\xad\x01\n\x04\x04\0\x04\0\x12\x06\x81\x02\x02\x9e\x02\x03\x1a\x9c\x01\
    \x20Indicates\x20the\x20type\x20of\x20replica.\x20\x20See\x20the\x20[rep\
    lica\x20types\n\x20documentation](https://cloud.google.com/spanner/docs/\
    replication#replica_types)\n\x20for\x20more\x20details.\n\n\r\n\x05\x04\
    \0\x04\0\x01\x12\x04\x81\x02\x07\x12\n\x20\n\x06\x04\0\x04\0\x02\0\x12\
    \x04\x83\x02\x04\x19\x1a\x10\x20Not\x20specified.\n\n\x0f\n\x07\x04\0\
    \x04\0\x02\0\x01\x12\x04\x83\x02\x04\x14\n\x0f\n\x07\x04\0\x04\0\x02\0\
    \x02\x12\x04\x83\x02\x17\x18\n\xfe\x01\n\x06\x04\0\x04\0\x02\x01\x12\x04\
    \x8c\x02\x04\x13\x1a\xed\x01\x20Read-write\x20replicas\x20support\x20bot\
    h\x20reads\x20and\x20writes.\x20These\x20replicas:\n\n\x20*\x20Maintain\
    \x20a\x20full\x20copy\x20of\x20your\x20data.\n\x20*\x20Serve\x20reads.\n\
    \x20*\x20Can\x20vote\x20whether\x20to\x20commit\x20a\x20write.\n\x20*\
    \x20Participate\x20in\x20leadership\x20election.\n\x20*\x20Are\x20eligib\
    le\x20to\x20become\x20a\x20leader.\n\n\x0f\n\x07\x04\0\x04\0\x02\x01\x01\
    \x12\x04\x8c\x02\x04\x0e\n\x0f\n\x07\x04\0\x04\0\x02\x01\x02\x12\x04\x8c\
    \x02\x11\x12\n\xeb\x01\n\x06\x04\0\x04\0\x02\x02\x12\x04\x94\x02\x04\x12\
    \x1a\xda\x01\x20Read-only\x20replicas\x20only\x20support\x20reads\x20(no\
    t\x20writes).\x20Read-only\x20replicas:\n\n\x20*\x20Maintain\x20a\x20ful\
    l\x20copy\x20of\x20your\x20data.\n\x20*\x20Serve\x20reads.\n\x20*\x20Do\
    \x20not\x20participate\x20in\x20voting\x20to\x20commit\x20writes.\n\x20*\
    \x20Are\x20not\x20eligible\x20to\x20become\x20a\x20leader.\n\n\x0f\n\x07\
    \x04\0\x04\0\x02\x02\x01\x12\x04\x94\x02\x04\r\n\x0f\n\x07\x04\0\x04\0\
    \x02\x02\x02\x12\x04\x94\x02\x10\x11\n\xa4\x02\n\x06\x04\0\x04\0\x02\x03\
    \x12\x04\x9d\x02\x04\x10\x1a\x93\x02\x20Witness\x20replicas\x20don't\x20\
    support\x20reads\x20but\x20do\x20participate\x20in\x20voting\x20to\n\x20\
    commit\x20writes.\x20Witness\x20replicas:\n\n\x20*\x20Do\x20not\x20maint\
    ain\x20a\x20full\x20copy\x20of\x20data.\n\x20*\x20Do\x20not\x20serve\x20\
    reads.\n\x20*\x20Vote\x20whether\x20to\x20commit\x20writes.\n\x20*\x20Pa\
    rticipate\x20in\x20leader\x20election\x20but\x20are\x20not\x20eligible\
    \x20to\x20become\x20leader.\n\n\x0f\n\x07\x04\0\x04\0\x02\x03\x01\x12\
    \x04\x9d\x02\x04\x0b\n\x0f\n\x07\x04\0\x04\0\x02\x03\x02\x12\x04\x9d\x02\
    \x0e\x0f\nJ\n\x04\x04\0\x02\0\x12\x04\xa1\x02\x02\x16\x1a<\x20The\x20loc\
    ation\x20of\x20the\x20serving\x20resources,\x20e.g.\x20\"us-central1\".\
    \n\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xa1\x02\x02\x08\n\r\n\x05\x04\0\x02\
    \0\x01\x12\x04\xa1\x02\t\x11\n\r\n\x05\x04\0\x02\0\x03\x12\x04\xa1\x02\
    \x14\x15\n$\n\x04\x04\0\x02\x01\x12\x04\xa4\x02\x02\x17\x1a\x16\x20The\
    \x20type\x20of\x20replica.\n\n\r\n\x05\x04\0\x02\x01\x06\x12\x04\xa4\x02\
    \x02\r\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\xa4\x02\x0e\x12\n\r\n\x05\x04\
    \0\x02\x01\x03\x12\x04\xa4\x02\x15\x16\n\xee\x01\n\x04\x04\0\x02\x02\x12\
    \x04\xaa\x02\x02#\x1a\xdf\x01\x20If\x20true,\x20this\x20location\x20is\
    \x20designated\x20as\x20the\x20default\x20leader\x20location\x20where\n\
    \x20leader\x20replicas\x20are\x20placed.\x20See\x20the\x20[region\x20typ\
    es\n\x20documentation](https://cloud.google.com/spanner/docs/instances#r\
    egion_types)\n\x20for\x20more\x20details.\n\n\r\n\x05\x04\0\x02\x02\x05\
    \x12\x04\xaa\x02\x02\x06\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\xaa\x02\x07\
    \x1e\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\xaa\x02!\"\n\x97\x01\n\x02\x04\
    \x01\x12\x06\xaf\x02\0\xc0\x02\x01\x1a\x88\x01\x20A\x20possible\x20confi\
    guration\x20for\x20a\x20Cloud\x20Spanner\x20instance.\x20Configurations\
    \n\x20define\x20the\x20geographic\x20placement\x20of\x20nodes\x20and\x20\
    their\x20replication.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xaf\x02\x08\x16\
    \n\r\n\x03\x04\x01\x07\x12\x06\xb0\x02\x02\xb3\x02\x04\n\x0f\n\x05\x04\
    \x01\x07\x9d\x08\x12\x06\xb0\x02\x02\xb3\x02\x04\n\x93\x01\n\x04\x04\x01\
    \x02\0\x12\x04\xb8\x02\x02\x12\x1a\x84\x01\x20A\x20unique\x20identifier\
    \x20for\x20the\x20instance\x20configuration.\x20\x20Values\n\x20are\x20o\
    f\x20the\x20form\n\x20`projects/<project>/instanceConfigs/[a-z][-a-z0-9]\
    *`\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xb8\x02\x02\x08\n\r\n\x05\x04\
    \x01\x02\0\x01\x12\x04\xb8\x02\t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\
    \xb8\x02\x10\x11\nM\n\x04\x04\x01\x02\x01\x12\x04\xbb\x02\x02\x1a\x1a?\
    \x20The\x20name\x20of\x20this\x20instance\x20configuration\x20as\x20it\
    \x20appears\x20in\x20UIs.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xbb\
    \x02\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xbb\x02\t\x15\n\r\n\
    \x05\x04\x01\x02\x01\x03\x12\x04\xbb\x02\x18\x19\ns\n\x04\x04\x01\x02\
    \x02\x12\x04\xbf\x02\x02$\x1ae\x20The\x20geographic\x20placement\x20of\
    \x20nodes\x20in\x20this\x20instance\x20configuration\x20and\x20their\n\
    \x20replication\x20properties.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\
    \xbf\x02\x02\n\n\r\n\x05\x04\x01\x02\x02\x06\x12\x04\xbf\x02\x0b\x16\n\r\
    \n\x05\x04\x01\x02\x02\x01\x12\x04\xbf\x02\x17\x1f\n\r\n\x05\x04\x01\x02\
    \x02\x03\x12\x04\xbf\x02\"#\n\\\n\x02\x04\x02\x12\x06\xc3\x02\0\x99\x03\
    \x01\x1aN\x20An\x20isolated\x20set\x20of\x20Cloud\x20Spanner\x20resource\
    s\x20on\x20which\x20databases\x20can\x20be\x20hosted.\n\n\x0b\n\x03\x04\
    \x02\x01\x12\x04\xc3\x02\x08\x10\n\r\n\x03\x04\x02\x07\x12\x06\xc4\x02\
    \x02\xc7\x02\x04\n\x0f\n\x05\x04\x02\x07\x9d\x08\x12\x06\xc4\x02\x02\xc7\
    \x02\x04\n>\n\x04\x04\x02\x04\0\x12\x06\xca\x02\x02\xd6\x02\x03\x1a.\x20\
    Indicates\x20the\x20current\x20state\x20of\x20the\x20instance.\n\n\r\n\
    \x05\x04\x02\x04\0\x01\x12\x04\xca\x02\x07\x0c\n\x20\n\x06\x04\x02\x04\0\
    \x02\0\x12\x04\xcc\x02\x04\x1a\x1a\x10\x20Not\x20specified.\n\n\x0f\n\
    \x07\x04\x02\x04\0\x02\0\x01\x12\x04\xcc\x02\x04\x15\n\x0f\n\x07\x04\x02\
    \x04\0\x02\0\x02\x12\x04\xcc\x02\x18\x19\n\x94\x01\n\x06\x04\x02\x04\0\
    \x02\x01\x12\x04\xd1\x02\x04\x11\x1a\x83\x01\x20The\x20instance\x20is\
    \x20still\x20being\x20created.\x20Resources\x20may\x20not\x20be\n\x20ava\
    ilable\x20yet,\x20and\x20operations\x20such\x20as\x20database\x20creatio\
    n\x20may\x20not\n\x20work.\n\n\x0f\n\x07\x04\x02\x04\0\x02\x01\x01\x12\
    \x04\xd1\x02\x04\x0c\n\x0f\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x04\xd1\
    \x02\x0f\x10\na\n\x06\x04\x02\x04\0\x02\x02\x12\x04\xd5\x02\x04\x0e\x1aQ\
    \x20The\x20instance\x20is\x20fully\x20created\x20and\x20ready\x20to\x20d\
    o\x20work\x20such\x20as\n\x20creating\x20databases.\n\n\x0f\n\x07\x04\
    \x02\x04\0\x02\x02\x01\x12\x04\xd5\x02\x04\t\n\x0f\n\x07\x04\x02\x04\0\
    \x02\x02\x02\x12\x04\xd5\x02\x0c\r\n\x96\x02\n\x04\x04\x02\x02\0\x12\x04\
    \xdc\x02\x02\x12\x1a\x87\x02\x20Required.\x20A\x20unique\x20identifier\
    \x20for\x20the\x20instance,\x20which\x20cannot\x20be\x20changed\n\x20aft\
    er\x20the\x20instance\x20is\x20created.\x20Values\x20are\x20of\x20the\
    \x20form\n\x20`projects/<project>/instances/[a-z][-a-z0-9]*[a-z0-9]`.\
    \x20The\x20final\n\x20segment\x20of\x20the\x20name\x20must\x20be\x20betw\
    een\x202\x20and\x2064\x20characters\x20in\x20length.\n\n\r\n\x05\x04\x02\
    \x02\0\x05\x12\x04\xdc\x02\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\
    \xdc\x02\t\r\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xdc\x02\x10\x11\n\xc0\
    \x02\n\x04\x04\x02\x02\x01\x12\x06\xe2\x02\x02\xe4\x02\x05\x1a\xaf\x02\
    \x20Required.\x20The\x20name\x20of\x20the\x20instance's\x20configuration\
    .\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/<project>/instanc\
    eConfigs/<configuration>`.\x20See\n\x20also\x20[InstanceConfig][google.s\
    panner.admin.instance.v1.InstanceConfig]\x20and\n\x20[ListInstanceConfig\
    s][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].\
    \n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xe2\x02\x02\x08\n\r\n\x05\x04\
    \x02\x02\x01\x01\x12\x04\xe2\x02\t\x0f\n\r\n\x05\x04\x02\x02\x01\x03\x12\
    \x04\xe2\x02\x12\x13\n\x0f\n\x05\x04\x02\x02\x01\x08\x12\x06\xe2\x02\x14\
    \xe4\x02\x04\n\x11\n\x07\x04\x02\x02\x01\x08\x9f\x08\x12\x06\xe2\x02\x15\
    \xe4\x02\x03\n\x9e\x01\n\x04\x04\x02\x02\x02\x12\x04\xe8\x02\x02\x1a\x1a\
    \x8f\x01\x20Required.\x20The\x20descriptive\x20name\x20for\x20this\x20in\
    stance\x20as\x20it\x20appears\x20in\x20UIs.\n\x20Must\x20be\x20unique\
    \x20per\x20project\x20and\x20between\x204\x20and\x2030\x20characters\x20\
    in\x20length.\n\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\xe8\x02\x02\x08\n\
    \r\n\x05\x04\x02\x02\x02\x01\x12\x04\xe8\x02\t\x15\n\r\n\x05\x04\x02\x02\
    \x02\x03\x12\x04\xe8\x02\x18\x19\n\x98\x02\n\x04\x04\x02\x02\x03\x12\x04\
    \xf0\x02\x02\x17\x1a\x89\x02\x20Required.\x20The\x20number\x20of\x20node\
    s\x20allocated\x20to\x20this\x20instance.\x20This\x20may\x20be\x20zero\n\
    \x20in\x20API\x20responses\x20for\x20instances\x20that\x20are\x20not\x20\
    yet\x20in\x20state\x20`READY`.\n\n\x20See\x20[the\n\x20documentation](ht\
    tps://cloud.google.com/spanner/docs/instances#node_count)\n\x20for\x20mo\
    re\x20information\x20about\x20nodes.\n\n\r\n\x05\x04\x02\x02\x03\x05\x12\
    \x04\xf0\x02\x02\x07\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\xf0\x02\x08\
    \x12\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\xf0\x02\x15\x16\n\xd2\x02\n\
    \x04\x04\x02\x02\x04\x12\x04\xf7\x02\x02\x12\x1a\xc3\x02\x20Output\x20on\
    ly.\x20The\x20current\x20instance\x20state.\x20For\n\x20[CreateInstance]\
    [google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance],\x20the\
    \x20state\x20must\x20be\n\x20either\x20omitted\x20or\x20set\x20to\x20`CR\
    EATING`.\x20For\n\x20[UpdateInstance][google.spanner.admin.instance.v1.I\
    nstanceAdmin.UpdateInstance],\x20the\x20state\x20must\x20be\n\x20either\
    \x20omitted\x20or\x20set\x20to\x20`READY`.\n\n\r\n\x05\x04\x02\x02\x04\
    \x06\x12\x04\xf7\x02\x02\x07\n\r\n\x05\x04\x02\x02\x04\x01\x12\x04\xf7\
    \x02\x08\r\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\xf7\x02\x10\x11\n\xe3\t\
    \n\x04\x04\x02\x02\x05\x12\x04\x8e\x03\x02!\x1a\xd4\t\x20Cloud\x20Labels\
    \x20are\x20a\x20flexible\x20and\x20lightweight\x20mechanism\x20for\x20or\
    ganizing\x20cloud\n\x20resources\x20into\x20groups\x20that\x20reflect\
    \x20a\x20customer's\x20organizational\x20needs\x20and\n\x20deployment\
    \x20strategies.\x20Cloud\x20Labels\x20can\x20be\x20used\x20to\x20filter\
    \x20collections\x20of\n\x20resources.\x20They\x20can\x20be\x20used\x20to\
    \x20control\x20how\x20resource\x20metrics\x20are\x20aggregated.\n\x20And\
    \x20they\x20can\x20be\x20used\x20as\x20arguments\x20to\x20policy\x20mana\
    gement\x20rules\x20(e.g.\x20route,\n\x20firewall,\x20load\x20balancing,\
    \x20etc.).\n\n\x20\x20*\x20Label\x20keys\x20must\x20be\x20between\x201\
    \x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\x20to\n\
    \x20\x20\x20\x20the\x20following\x20regular\x20expression:\x20`[a-z]([-a\
    -z0-9]*[a-z0-9])?`.\n\x20\x20*\x20Label\x20values\x20must\x20be\x20betwe\
    en\x200\x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\n\
    \x20\x20\x20\x20to\x20the\x20regular\x20expression\x20`([a-z]([-a-z0-9]*\
    [a-z0-9])?)?`.\n\x20\x20*\x20No\x20more\x20than\x2064\x20labels\x20can\
    \x20be\x20associated\x20with\x20a\x20given\x20resource.\n\n\x20See\x20ht\
    tps://goo.gl/xmQnxf\x20for\x20more\x20information\x20on\x20and\x20exampl\
    es\x20of\x20labels.\n\n\x20If\x20you\x20plan\x20to\x20use\x20labels\x20i\
    n\x20your\x20own\x20code,\x20please\x20note\x20that\x20additional\n\x20c\
    haracters\x20may\x20be\x20allowed\x20in\x20the\x20future.\x20And\x20so\
    \x20you\x20are\x20advised\x20to\x20use\x20an\n\x20internal\x20label\x20r\
    epresentation,\x20such\x20as\x20JSON,\x20which\x20doesn't\x20rely\x20upo\
    n\n\x20specific\x20characters\x20being\x20disallowed.\x20\x20For\x20exam\
    ple,\x20representing\x20labels\n\x20as\x20the\x20string:\x20\x20name\x20\
    +\x20\"_\"\x20+\x20value\x20\x20would\x20prove\x20problematic\x20if\x20w\
    e\x20were\x20to\n\x20allow\x20\"_\"\x20in\x20a\x20future\x20release.\n\n\
    \r\n\x05\x04\x02\x02\x05\x06\x12\x04\x8e\x03\x02\x15\n\r\n\x05\x04\x02\
    \x02\x05\x01\x12\x04\x8e\x03\x16\x1c\n\r\n\x05\x04\x02\x02\x05\x03\x12\
    \x04\x8e\x03\x1f\x20\n\xfd\x03\n\x04\x04\x02\x02\x06\x12\x04\x98\x03\x02\
    $\x1a\xee\x03\x20Output\x20only.\x20The\x20endpoint\x20URIs\x20based\x20\
    on\x20the\x20instance\x20config.\n\x20For\x20example,\x20instances\x20lo\
    cated\x20in\x20a\x20specific\x20cloud\x20region\x20(or\x20multi\x20regio\
    n)\n\x20such\x20as\x20nam3,\x20would\x20have\x20a\x20nam3\x20specific\
    \x20endpoint\x20URI.\n\x20This\x20URI\x20is\x20to\x20be\x20used\x20impli\
    ctly\x20by\x20SDK\x20clients,\x20with\x20fallback\x20to\x20default\n\x20\
    URI.\x20These\x20endpoints\x20are\x20intended\x20to\x20optimize\x20the\
    \x20network\x20routing\x20between\n\x20the\x20client\x20and\x20the\x20in\
    stance's\x20serving\x20resources.\n\x20If\x20multiple\x20endpoints\x20ar\
    e\x20present,\x20client\x20may\x20establish\x20connections\x20using\n\
    \x20any\x20of\x20the\x20given\x20URIs.\n\n\r\n\x05\x04\x02\x02\x06\x04\
    \x12\x04\x98\x03\x02\n\n\r\n\x05\x04\x02\x02\x06\x05\x12\x04\x98\x03\x0b\
    \x11\n\r\n\x05\x04\x02\x02\x06\x01\x12\x04\x98\x03\x12\x1f\n\r\n\x05\x04\
    \x02\x02\x06\x03\x12\x04\x98\x03\"#\nz\n\x02\x04\x03\x12\x06\x9c\x03\0\
    \xaf\x03\x01\x1al\x20The\x20request\x20for\x20[ListInstanceConfigs][goog\
    le.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].\n\n\x0b\
    \n\x03\x04\x03\x01\x12\x04\x9c\x03\x08\"\n\xa7\x01\n\x04\x04\x03\x02\0\
    \x12\x06\xa0\x03\x02\xa5\x03\x04\x1a\x96\x01\x20Required.\x20The\x20name\
    \x20of\x20the\x20project\x20for\x20which\x20a\x20list\x20of\x20supported\
    \x20instance\n\x20configurations\x20is\x20requested.\x20Values\x20are\
    \x20of\x20the\x20form\n\x20`projects/<project>`.\n\n\r\n\x05\x04\x03\x02\
    \0\x05\x12\x04\xa0\x03\x02\x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xa0\
    \x03\t\x0f\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xa0\x03\x12\x13\n\x0f\n\
    \x05\x04\x03\x02\0\x08\x12\x06\xa0\x03\x14\xa5\x03\x03\n\x10\n\x08\x04\
    \x03\x02\0\x08\x9c\x08\0\x12\x04\xa1\x03\x04*\n\x11\n\x07\x04\x03\x02\0\
    \x08\x9f\x08\x12\x06\xa2\x03\x04\xa4\x03\x05\n\x95\x01\n\x04\x04\x03\x02\
    \x01\x12\x04\xa9\x03\x02\x16\x1a\x86\x01\x20Number\x20of\x20instance\x20\
    configurations\x20to\x20be\x20returned\x20in\x20the\x20response.\x20If\
    \x200\x20or\n\x20less,\x20defaults\x20to\x20the\x20server's\x20maximum\
    \x20allowed\x20page\x20size.\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xa9\
    \x03\x02\x07\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xa9\x03\x08\x11\n\r\n\
    \x05\x04\x03\x02\x01\x03\x12\x04\xa9\x03\x14\x15\n\x8b\x02\n\x04\x04\x03\
    \x02\x02\x12\x04\xae\x03\x02\x18\x1a\xfc\x01\x20If\x20non-empty,\x20`pag\
    e_token`\x20should\x20contain\x20a\n\x20[next_page_token][google.spanner\
    .admin.instance.v1.ListInstanceConfigsResponse.next_page_token]\n\x20fro\
    m\x20a\x20previous\x20[ListInstanceConfigsResponse][google.spanner.admin\
    .instance.v1.ListInstanceConfigsResponse].\n\n\r\n\x05\x04\x03\x02\x02\
    \x05\x12\x04\xae\x03\x02\x08\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\xae\
    \x03\t\x13\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xae\x03\x16\x17\n{\n\
    \x02\x04\x04\x12\x06\xb2\x03\0\xba\x03\x01\x1am\x20The\x20response\x20fo\
    r\x20[ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmi\
    n.ListInstanceConfigs].\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xb2\x03\x08#\n\
    >\n\x04\x04\x04\x02\0\x12\x04\xb4\x03\x02/\x1a0\x20The\x20list\x20of\x20\
    requested\x20instance\x20configurations.\n\n\r\n\x05\x04\x04\x02\0\x04\
    \x12\x04\xb4\x03\x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xb4\x03\x0b\
    \x19\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xb4\x03\x1a*\n\r\n\x05\x04\x04\
    \x02\0\x03\x12\x04\xb4\x03-.\n\xd6\x01\n\x04\x04\x04\x02\x01\x12\x04\xb9\
    \x03\x02\x1d\x1a\xc7\x01\x20`next_page_token`\x20can\x20be\x20sent\x20in\
    \x20a\x20subsequent\n\x20[ListInstanceConfigs][google.spanner.admin.inst\
    ance.v1.InstanceAdmin.ListInstanceConfigs]\x20call\x20to\n\x20fetch\x20m\
    ore\x20of\x20the\x20matching\x20instance\x20configurations.\n\n\r\n\x05\
    \x04\x04\x02\x01\x05\x12\x04\xb9\x03\x02\x08\n\r\n\x05\x04\x04\x02\x01\
    \x01\x12\x04\xb9\x03\t\x18\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xb9\x03\
    \x1b\x1c\n~\n\x02\x04\x05\x12\x06\xbe\x03\0\xc7\x03\x01\x1ap\x20The\x20r\
    equest\x20for\n\x20[GetInstanceConfigRequest][google.spanner.admin.insta\
    nce.v1.InstanceAdmin.GetInstanceConfig].\n\n\x0b\n\x03\x04\x05\x01\x12\
    \x04\xbe\x03\x08\x20\n\x95\x01\n\x04\x04\x05\x02\0\x12\x06\xc1\x03\x02\
    \xc6\x03\x04\x1a\x84\x01\x20Required.\x20The\x20name\x20of\x20the\x20req\
    uested\x20instance\x20configuration.\x20Values\x20are\x20of\n\x20the\x20\
    form\x20`projects/<project>/instanceConfigs/<config>`.\n\n\r\n\x05\x04\
    \x05\x02\0\x05\x12\x04\xc1\x03\x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\
    \x04\xc1\x03\t\r\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xc1\x03\x10\x11\n\
    \x0f\n\x05\x04\x05\x02\0\x08\x12\x06\xc1\x03\x12\xc6\x03\x03\n\x10\n\x08\
    \x04\x05\x02\0\x08\x9c\x08\0\x12\x04\xc2\x03\x04*\n\x11\n\x07\x04\x05\
    \x02\0\x08\x9f\x08\x12\x06\xc3\x03\x04\xc5\x03\x05\nj\n\x02\x04\x06\x12\
    \x06\xca\x03\0\xd8\x03\x01\x1a\\\x20The\x20request\x20for\x20[GetInstanc\
    e][google.spanner.admin.instance.v1.InstanceAdmin.GetInstance].\n\n\x0b\
    \n\x03\x04\x06\x01\x12\x04\xca\x03\x08\x1a\n\x82\x01\n\x04\x04\x06\x02\0\
    \x12\x06\xcd\x03\x02\xd2\x03\x04\x1ar\x20Required.\x20The\x20name\x20of\
    \x20the\x20requested\x20instance.\x20Values\x20are\x20of\x20the\x20form\
    \n\x20`projects/<project>/instances/<instance>`.\n\n\r\n\x05\x04\x06\x02\
    \0\x05\x12\x04\xcd\x03\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xcd\
    \x03\t\r\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xcd\x03\x10\x11\n\x0f\n\x05\
    \x04\x06\x02\0\x08\x12\x06\xcd\x03\x12\xd2\x03\x03\n\x10\n\x08\x04\x06\
    \x02\0\x08\x9c\x08\0\x12\x04\xce\x03\x04*\n\x11\n\x07\x04\x06\x02\0\x08\
    \x9f\x08\x12\x06\xcf\x03\x04\xd1\x03\x05\n\xa2\x01\n\x04\x04\x06\x02\x01\
    \x12\x04\xd7\x03\x02+\x1a\x93\x01\x20If\x20field_mask\x20is\x20present,\
    \x20specifies\x20the\x20subset\x20of\x20[][Instance]\x20fields\x20that\n\
    \x20should\x20be\x20returned.\n\x20If\x20absent,\x20all\x20[][Instance]\
    \x20fields\x20are\x20returned.\n\n\r\n\x05\x04\x06\x02\x01\x06\x12\x04\
    \xd7\x03\x02\x1b\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xd7\x03\x1c&\n\r\
    \n\x05\x04\x06\x02\x01\x03\x12\x04\xd7\x03)*\np\n\x02\x04\x07\x12\x06\
    \xdb\x03\0\xed\x03\x01\x1ab\x20The\x20request\x20for\x20[CreateInstance]\
    [google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance].\n\n\x0b\
    \n\x03\x04\x07\x01\x12\x04\xdb\x03\x08\x1d\n\x82\x01\n\x04\x04\x07\x02\0\
    \x12\x06\xde\x03\x02\xe3\x03\x04\x1ar\x20Required.\x20The\x20name\x20of\
    \x20the\x20project\x20in\x20which\x20to\x20create\x20the\x20instance.\
    \x20Values\n\x20are\x20of\x20the\x20form\x20`projects/<project>`.\n\n\r\
    \n\x05\x04\x07\x02\0\x05\x12\x04\xde\x03\x02\x08\n\r\n\x05\x04\x07\x02\0\
    \x01\x12\x04\xde\x03\t\x0f\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xde\x03\
    \x12\x13\n\x0f\n\x05\x04\x07\x02\0\x08\x12\x06\xde\x03\x14\xe3\x03\x03\n\
    \x10\n\x08\x04\x07\x02\0\x08\x9c\x08\0\x12\x04\xdf\x03\x04*\n\x11\n\x07\
    \x04\x07\x02\0\x08\x9f\x08\x12\x06\xe0\x03\x04\xe2\x03\x05\n\xae\x01\n\
    \x04\x04\x07\x02\x01\x12\x04\xe8\x03\x02B\x1a\x9f\x01\x20Required.\x20Th\
    e\x20ID\x20of\x20the\x20instance\x20to\x20create.\x20\x20Valid\x20identi\
    fiers\x20are\x20of\x20the\n\x20form\x20`[a-z][-a-z0-9]*[a-z0-9]`\x20and\
    \x20must\x20be\x20between\x202\x20and\x2064\x20characters\x20in\n\x20len\
    gth.\n\n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\xe8\x03\x02\x08\n\r\n\x05\
    \x04\x07\x02\x01\x01\x12\x04\xe8\x03\t\x14\n\r\n\x05\x04\x07\x02\x01\x03\
    \x12\x04\xe8\x03\x17\x18\n\r\n\x05\x04\x07\x02\x01\x08\x12\x04\xe8\x03\
    \x19A\n\x10\n\x08\x04\x07\x02\x01\x08\x9c\x08\0\x12\x04\xe8\x03\x1a@\n\
    \x89\x01\n\x04\x04\x07\x02\x02\x12\x04\xec\x03\x02A\x1a{\x20Required.\
    \x20The\x20instance\x20to\x20create.\x20\x20The\x20name\x20may\x20be\x20\
    omitted,\x20but\x20if\n\x20specified\x20must\x20be\x20`<parent>/instance\
    s/<instance_id>`.\n\n\r\n\x05\x04\x07\x02\x02\x06\x12\x04\xec\x03\x02\n\
    \n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xec\x03\x0b\x13\n\r\n\x05\x04\x07\
    \x02\x02\x03\x12\x04\xec\x03\x16\x17\n\r\n\x05\x04\x07\x02\x02\x08\x12\
    \x04\xec\x03\x18@\n\x10\n\x08\x04\x07\x02\x02\x08\x9c\x08\0\x12\x04\xec\
    \x03\x19?\nn\n\x02\x04\x08\x12\x06\xf0\x03\0\x97\x04\x01\x1a`\x20The\x20\
    request\x20for\x20[ListInstances][google.spanner.admin.instance.v1.Insta\
    nceAdmin.ListInstances].\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xf0\x03\x08\
    \x1c\n\x8d\x01\n\x04\x04\x08\x02\0\x12\x06\xf3\x03\x02\xf8\x03\x04\x1a}\
    \x20Required.\x20The\x20name\x20of\x20the\x20project\x20for\x20which\x20\
    a\x20list\x20of\x20instances\x20is\n\x20requested.\x20Values\x20are\x20o\
    f\x20the\x20form\x20`projects/<project>`.\n\n\r\n\x05\x04\x08\x02\0\x05\
    \x12\x04\xf3\x03\x02\x08\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xf3\x03\t\
    \x0f\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xf3\x03\x12\x13\n\x0f\n\x05\x04\
    \x08\x02\0\x08\x12\x06\xf3\x03\x14\xf8\x03\x03\n\x10\n\x08\x04\x08\x02\0\
    \x08\x9c\x08\0\x12\x04\xf4\x03\x04*\n\x11\n\x07\x04\x08\x02\0\x08\x9f\
    \x08\x12\x06\xf5\x03\x04\xf7\x03\x05\n\x86\x01\n\x04\x04\x08\x02\x01\x12\
    \x04\xfc\x03\x02\x16\x1ax\x20Number\x20of\x20instances\x20to\x20be\x20re\
    turned\x20in\x20the\x20response.\x20If\x200\x20or\x20less,\x20defaults\n\
    \x20to\x20the\x20server's\x20maximum\x20allowed\x20page\x20size.\n\n\r\n\
    \x05\x04\x08\x02\x01\x05\x12\x04\xfc\x03\x02\x07\n\r\n\x05\x04\x08\x02\
    \x01\x01\x12\x04\xfc\x03\x08\x11\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\
    \xfc\x03\x14\x15\n\xf9\x01\n\x04\x04\x08\x02\x02\x12\x04\x81\x04\x02\x18\
    \x1a\xea\x01\x20If\x20non-empty,\x20`page_token`\x20should\x20contain\
    \x20a\n\x20[next_page_token][google.spanner.admin.instance.v1.ListInstan\
    cesResponse.next_page_token]\x20from\x20a\n\x20previous\x20[ListInstance\
    sResponse][google.spanner.admin.instance.v1.ListInstancesResponse].\n\n\
    \r\n\x05\x04\x08\x02\x02\x05\x12\x04\x81\x04\x02\x08\n\r\n\x05\x04\x08\
    \x02\x02\x01\x12\x04\x81\x04\t\x13\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\
    \x81\x04\x16\x17\n\xdd\x06\n\x04\x04\x08\x02\x03\x12\x04\x96\x04\x02\x14\
    \x1a\xce\x06\x20An\x20expression\x20for\x20filtering\x20the\x20results\
    \x20of\x20the\x20request.\x20Filter\x20rules\x20are\n\x20case\x20insensi\
    tive.\x20The\x20fields\x20eligible\x20for\x20filtering\x20are:\n\n\x20\
    \x20\x20*\x20`name`\n\x20\x20\x20*\x20`display_name`\n\x20\x20\x20*\x20`\
    labels.key`\x20where\x20key\x20is\x20the\x20name\x20of\x20a\x20label\n\n\
    \x20Some\x20examples\x20of\x20using\x20filters\x20are:\n\n\x20\x20\x20*\
    \x20`name:*`\x20-->\x20The\x20instance\x20has\x20a\x20name.\n\x20\x20\
    \x20*\x20`name:Howl`\x20-->\x20The\x20instance's\x20name\x20contains\x20\
    the\x20string\x20\"howl\".\n\x20\x20\x20*\x20`name:HOWL`\x20-->\x20Equiv\
    alent\x20to\x20above.\n\x20\x20\x20*\x20`NAME:howl`\x20-->\x20Equivalent\
    \x20to\x20above.\n\x20\x20\x20*\x20`labels.env:*`\x20-->\x20The\x20insta\
    nce\x20has\x20the\x20label\x20\"env\".\n\x20\x20\x20*\x20`labels.env:dev\
    `\x20-->\x20The\x20instance\x20has\x20the\x20label\x20\"env\"\x20and\x20\
    the\x20value\x20of\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20the\x20label\x20contains\x20\
    the\x20string\x20\"dev\".\n\x20\x20\x20*\x20`name:howl\x20labels.env:dev\
    `\x20-->\x20The\x20instance's\x20name\x20contains\x20\"howl\"\x20and\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20it\x20ha\
    s\x20the\x20label\x20\"env\"\x20with\x20its\x20value\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containing\x20\"dev\".\n\
    \n\r\n\x05\x04\x08\x02\x03\x05\x12\x04\x96\x04\x02\x08\n\r\n\x05\x04\x08\
    \x02\x03\x01\x12\x04\x96\x04\t\x0f\n\r\n\x05\x04\x08\x02\x03\x03\x12\x04\
    \x96\x04\x12\x13\no\n\x02\x04\t\x12\x06\x9a\x04\0\xa2\x04\x01\x1aa\x20Th\
    e\x20response\x20for\x20[ListInstances][google.spanner.admin.instance.v1\
    .InstanceAdmin.ListInstances].\n\n\x0b\n\x03\x04\t\x01\x12\x04\x9a\x04\
    \x08\x1d\n0\n\x04\x04\t\x02\0\x12\x04\x9c\x04\x02\"\x1a\"\x20The\x20list\
    \x20of\x20requested\x20instances.\n\n\r\n\x05\x04\t\x02\0\x04\x12\x04\
    \x9c\x04\x02\n\n\r\n\x05\x04\t\x02\0\x06\x12\x04\x9c\x04\x0b\x13\n\r\n\
    \x05\x04\t\x02\0\x01\x12\x04\x9c\x04\x14\x1d\n\r\n\x05\x04\t\x02\0\x03\
    \x12\x04\x9c\x04\x20!\n\xbc\x01\n\x04\x04\t\x02\x01\x12\x04\xa1\x04\x02\
    \x1d\x1a\xad\x01\x20`next_page_token`\x20can\x20be\x20sent\x20in\x20a\
    \x20subsequent\n\x20[ListInstances][google.spanner.admin.instance.v1.Ins\
    tanceAdmin.ListInstances]\x20call\x20to\x20fetch\x20more\n\x20of\x20the\
    \x20matching\x20instances.\n\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xa1\x04\
    \x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xa1\x04\t\x18\n\r\n\x05\x04\
    \t\x02\x01\x03\x12\x04\xa1\x04\x1b\x1c\np\n\x02\x04\n\x12\x06\xa5\x04\0\
    \xaf\x04\x01\x1ab\x20The\x20request\x20for\x20[UpdateInstance][google.sp\
    anner.admin.instance.v1.InstanceAdmin.UpdateInstance].\n\n\x0b\n\x03\x04\
    \n\x01\x12\x04\xa5\x04\x08\x1d\n\xdd\x01\n\x04\x04\n\x02\0\x12\x04\xa8\
    \x04\x02A\x1a\xce\x01\x20Required.\x20The\x20instance\x20to\x20update,\
    \x20which\x20must\x20always\x20include\x20the\x20instance\n\x20name.\x20\
    \x20Otherwise,\x20only\x20fields\x20mentioned\x20in\x20[][google.spanner\
    .admin.instance.v1.UpdateInstanceRequest.field_mask]\x20need\x20be\x20in\
    cluded.\n\n\r\n\x05\x04\n\x02\0\x06\x12\x04\xa8\x04\x02\n\n\r\n\x05\x04\
    \n\x02\0\x01\x12\x04\xa8\x04\x0b\x13\n\r\n\x05\x04\n\x02\0\x03\x12\x04\
    \xa8\x04\x16\x17\n\r\n\x05\x04\n\x02\0\x08\x12\x04\xa8\x04\x18@\n\x10\n\
    \x08\x04\n\x02\0\x08\x9c\x08\0\x12\x04\xa8\x04\x19?\n\xd7\x02\n\x04\x04\
    \n\x02\x01\x12\x04\xae\x04\x02T\x1a\xc8\x02\x20Required.\x20A\x20mask\
    \x20specifying\x20which\x20fields\x20in\x20[][google.spanner.admin.insta\
    nce.v1.UpdateInstanceRequest.instance]\x20should\x20be\x20updated.\n\x20\
    The\x20field\x20mask\x20must\x20always\x20be\x20specified;\x20this\x20pr\
    events\x20any\x20future\x20fields\x20in\n\x20[][google.spanner.admin.ins\
    tance.v1.Instance]\x20from\x20being\x20erased\x20accidentally\x20by\x20c\
    lients\x20that\x20do\x20not\x20know\n\x20about\x20them.\n\n\r\n\x05\x04\
    \n\x02\x01\x06\x12\x04\xae\x04\x02\x1b\n\r\n\x05\x04\n\x02\x01\x01\x12\
    \x04\xae\x04\x1c&\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xae\x04)*\n\r\n\
    \x05\x04\n\x02\x01\x08\x12\x04\xae\x04+S\n\x10\n\x08\x04\n\x02\x01\x08\
    \x9c\x08\0\x12\x04\xae\x04,R\np\n\x02\x04\x0b\x12\x06\xb2\x04\0\xbb\x04\
    \x01\x1ab\x20The\x20request\x20for\x20[DeleteInstance][google.spanner.ad\
    min.instance.v1.InstanceAdmin.DeleteInstance].\n\n\x0b\n\x03\x04\x0b\x01\
    \x12\x04\xb2\x04\x08\x1d\n\x85\x01\n\x04\x04\x0b\x02\0\x12\x06\xb5\x04\
    \x02\xba\x04\x04\x1au\x20Required.\x20The\x20name\x20of\x20the\x20instan\
    ce\x20to\x20be\x20deleted.\x20Values\x20are\x20of\x20the\x20form\n\x20`p\
    rojects/<project>/instances/<instance>`\n\n\r\n\x05\x04\x0b\x02\0\x05\
    \x12\x04\xb5\x04\x02\x08\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xb5\x04\t\r\
    \n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xb5\x04\x10\x11\n\x0f\n\x05\x04\x0b\
    \x02\0\x08\x12\x06\xb5\x04\x12\xba\x04\x03\n\x10\n\x08\x04\x0b\x02\0\x08\
    \x9c\x08\0\x12\x04\xb6\x04\x04*\n\x11\n\x07\x04\x0b\x02\0\x08\x9f\x08\
    \x12\x06\xb7\x04\x04\xb9\x04\x05\n\x8d\x01\n\x02\x04\x0c\x12\x06\xbf\x04\
    \0\xcf\x04\x01\x1a\x7f\x20Metadata\x20type\x20for\x20the\x20operation\
    \x20returned\x20by\n\x20[CreateInstance][google.spanner.admin.instance.v\
    1.InstanceAdmin.CreateInstance].\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xbf\
    \x04\x08\x1e\n+\n\x04\x04\x0c\x02\0\x12\x04\xc1\x04\x02\x18\x1a\x1d\x20T\
    he\x20instance\x20being\x20created.\n\n\r\n\x05\x04\x0c\x02\0\x06\x12\
    \x04\xc1\x04\x02\n\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xc1\x04\x0b\x13\n\
    \r\n\x05\x04\x0c\x02\0\x03\x12\x04\xc1\x04\x16\x17\n\x8d\x01\n\x04\x04\
    \x0c\x02\x01\x12\x04\xc6\x04\x02+\x1a\x7f\x20The\x20time\x20at\x20which\
    \x20the\n\x20[CreateInstance][google.spanner.admin.instance.v1.InstanceA\
    dmin.CreateInstance]\x20request\x20was\n\x20received.\n\n\r\n\x05\x04\
    \x0c\x02\x01\x06\x12\x04\xc6\x04\x02\x1b\n\r\n\x05\x04\x0c\x02\x01\x01\
    \x12\x04\xc6\x04\x1c&\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\xc6\x04)*\n\
    \xbd\x01\n\x04\x04\x0c\x02\x02\x12\x04\xcb\x04\x02,\x1a\xae\x01\x20The\
    \x20time\x20at\x20which\x20this\x20operation\x20was\x20cancelled.\x20If\
    \x20set,\x20this\x20operation\x20is\n\x20in\x20the\x20process\x20of\x20u\
    ndoing\x20itself\x20(which\x20is\x20guaranteed\x20to\x20succeed)\x20and\
    \n\x20cannot\x20be\x20cancelled\x20again.\n\n\r\n\x05\x04\x0c\x02\x02\
    \x06\x12\x04\xcb\x04\x02\x1b\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\xcb\
    \x04\x1c'\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xcb\x04*+\nV\n\x04\x04\
    \x0c\x02\x03\x12\x04\xce\x04\x02)\x1aH\x20The\x20time\x20at\x20which\x20\
    this\x20operation\x20failed\x20or\x20was\x20completed\x20successfully.\n\
    \n\r\n\x05\x04\x0c\x02\x03\x06\x12\x04\xce\x04\x02\x1b\n\r\n\x05\x04\x0c\
    \x02\x03\x01\x12\x04\xce\x04\x1c$\n\r\n\x05\x04\x0c\x02\x03\x03\x12\x04\
    \xce\x04'(\n\x8d\x01\n\x02\x04\r\x12\x06\xd3\x04\0\xe2\x04\x01\x1a\x7f\
    \x20Metadata\x20type\x20for\x20the\x20operation\x20returned\x20by\n\x20[\
    UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateIns\
    tance].\n\n\x0b\n\x03\x04\r\x01\x12\x04\xd3\x04\x08\x1e\n4\n\x04\x04\r\
    \x02\0\x12\x04\xd5\x04\x02\x18\x1a&\x20The\x20desired\x20end\x20state\
    \x20of\x20the\x20update.\n\n\r\n\x05\x04\r\x02\0\x06\x12\x04\xd5\x04\x02\
    \n\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xd5\x04\x0b\x13\n\r\n\x05\x04\r\x02\
    \0\x03\x12\x04\xd5\x04\x16\x17\n\x88\x01\n\x04\x04\r\x02\x01\x12\x04\xd9\
    \x04\x02+\x1az\x20The\x20time\x20at\x20which\x20[UpdateInstance][google.\
    spanner.admin.instance.v1.InstanceAdmin.UpdateInstance]\n\x20request\x20\
    was\x20received.\n\n\r\n\x05\x04\r\x02\x01\x06\x12\x04\xd9\x04\x02\x1b\n\
    \r\n\x05\x04\r\x02\x01\x01\x12\x04\xd9\x04\x1c&\n\r\n\x05\x04\r\x02\x01\
    \x03\x12\x04\xd9\x04)*\n\xbd\x01\n\x04\x04\r\x02\x02\x12\x04\xde\x04\x02\
    ,\x1a\xae\x01\x20The\x20time\x20at\x20which\x20this\x20operation\x20was\
    \x20cancelled.\x20If\x20set,\x20this\x20operation\x20is\n\x20in\x20the\
    \x20process\x20of\x20undoing\x20itself\x20(which\x20is\x20guaranteed\x20\
    to\x20succeed)\x20and\n\x20cannot\x20be\x20cancelled\x20again.\n\n\r\n\
    \x05\x04\r\x02\x02\x06\x12\x04\xde\x04\x02\x1b\n\r\n\x05\x04\r\x02\x02\
    \x01\x12\x04\xde\x04\x1c'\n\r\n\x05\x04\r\x02\x02\x03\x12\x04\xde\x04*+\
    \nV\n\x04\x04\r\x02\x03\x12\x04\xe1\x04\x02)\x1aH\x20The\x20time\x20at\
    \x20which\x20this\x20operation\x20failed\x20or\x20was\x20completed\x20su\
    ccessfully.\n\n\r\n\x05\x04\r\x02\x03\x06\x12\x04\xe1\x04\x02\x1b\n\r\n\
    \x05\x04\r\x02\x03\x01\x12\x04\xe1\x04\x1c$\n\r\n\x05\x04\r\x02\x03\x03\
    \x12\x04\xe1\x04'(b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(10);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            deps.push(super::field_behavior::file_descriptor().clone());
            deps.push(super::resource::file_descriptor().clone());
            deps.push(super::iam_policy::file_descriptor().clone());
            deps.push(super::policy::file_descriptor().clone());
            deps.push(super::operations::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::field_mask::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(ReplicaInfo::generated_message_descriptor_data());
            messages.push(InstanceConfig::generated_message_descriptor_data());
            messages.push(Instance::generated_message_descriptor_data());
            messages.push(ListInstanceConfigsRequest::generated_message_descriptor_data());
            messages.push(ListInstanceConfigsResponse::generated_message_descriptor_data());
            messages.push(GetInstanceConfigRequest::generated_message_descriptor_data());
            messages.push(GetInstanceRequest::generated_message_descriptor_data());
            messages.push(CreateInstanceRequest::generated_message_descriptor_data());
            messages.push(ListInstancesRequest::generated_message_descriptor_data());
            messages.push(ListInstancesResponse::generated_message_descriptor_data());
            messages.push(UpdateInstanceRequest::generated_message_descriptor_data());
            messages.push(DeleteInstanceRequest::generated_message_descriptor_data());
            messages.push(CreateInstanceMetadata::generated_message_descriptor_data());
            messages.push(UpdateInstanceMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(replica_info::ReplicaType::generated_enum_descriptor_data());
            enums.push(instance::State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
