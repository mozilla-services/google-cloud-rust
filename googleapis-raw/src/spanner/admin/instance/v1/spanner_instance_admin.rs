// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/spanner/admin/instance/v1/spanner_instance_admin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReplicaInfo {
    // message fields
    pub location: ::std::string::String,
    pub field_type: ReplicaInfo_ReplicaType,
    pub default_leader_location: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReplicaInfo {
    fn default() -> &'a ReplicaInfo {
        <ReplicaInfo as ::protobuf::Message>::default_instance()
    }
}

impl ReplicaInfo {
    pub fn new() -> ReplicaInfo {
        ::std::default::Default::default()
    }

    // string location = 1;


    pub fn get_location(&self) -> &str {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location, ::std::string::String::new())
    }

    // .google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType type = 2;


    pub fn get_field_type(&self) -> ReplicaInfo_ReplicaType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ReplicaInfo_ReplicaType::TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ReplicaInfo_ReplicaType) {
        self.field_type = v;
    }

    // bool default_leader_location = 3;


    pub fn get_default_leader_location(&self) -> bool {
        self.default_leader_location
    }
    pub fn clear_default_leader_location(&mut self) {
        self.default_leader_location = false;
    }

    // Param is passed by value, moved
    pub fn set_default_leader_location(&mut self, v: bool) {
        self.default_leader_location = v;
    }
}

impl ::protobuf::Message for ReplicaInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.default_leader_location = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.location);
        }
        if self.field_type != ReplicaInfo_ReplicaType::TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.default_leader_location != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.location.is_empty() {
            os.write_string(1, &self.location)?;
        }
        if self.field_type != ReplicaInfo_ReplicaType::TYPE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.default_leader_location != false {
            os.write_bool(3, self.default_leader_location)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReplicaInfo {
        ReplicaInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "location",
                |m: &ReplicaInfo| { &m.location },
                |m: &mut ReplicaInfo| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ReplicaInfo_ReplicaType>>(
                "type",
                |m: &ReplicaInfo| { &m.field_type },
                |m: &mut ReplicaInfo| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "default_leader_location",
                |m: &ReplicaInfo| { &m.default_leader_location },
                |m: &mut ReplicaInfo| { &mut m.default_leader_location },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReplicaInfo>(
                "ReplicaInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReplicaInfo {
        static instance: ::protobuf::rt::LazyV2<ReplicaInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReplicaInfo::new)
    }
}

impl ::protobuf::Clear for ReplicaInfo {
    fn clear(&mut self) {
        self.location.clear();
        self.field_type = ReplicaInfo_ReplicaType::TYPE_UNSPECIFIED;
        self.default_leader_location = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReplicaInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplicaInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ReplicaInfo_ReplicaType {
    TYPE_UNSPECIFIED = 0,
    READ_WRITE = 1,
    READ_ONLY = 2,
    WITNESS = 3,
}

impl ::protobuf::ProtobufEnum for ReplicaInfo_ReplicaType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReplicaInfo_ReplicaType> {
        match value {
            0 => ::std::option::Option::Some(ReplicaInfo_ReplicaType::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ReplicaInfo_ReplicaType::READ_WRITE),
            2 => ::std::option::Option::Some(ReplicaInfo_ReplicaType::READ_ONLY),
            3 => ::std::option::Option::Some(ReplicaInfo_ReplicaType::WITNESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReplicaInfo_ReplicaType] = &[
            ReplicaInfo_ReplicaType::TYPE_UNSPECIFIED,
            ReplicaInfo_ReplicaType::READ_WRITE,
            ReplicaInfo_ReplicaType::READ_ONLY,
            ReplicaInfo_ReplicaType::WITNESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ReplicaInfo_ReplicaType>("ReplicaInfo.ReplicaType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ReplicaInfo_ReplicaType {
}

impl ::std::default::Default for ReplicaInfo_ReplicaType {
    fn default() -> Self {
        ReplicaInfo_ReplicaType::TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplicaInfo_ReplicaType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstanceConfig {
    // message fields
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub config_type: InstanceConfig_Type,
    pub replicas: ::protobuf::RepeatedField<ReplicaInfo>,
    pub optional_replicas: ::protobuf::RepeatedField<ReplicaInfo>,
    pub base_config: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub etag: ::std::string::String,
    pub leader_options: ::protobuf::RepeatedField<::std::string::String>,
    pub reconciling: bool,
    pub state: InstanceConfig_State,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstanceConfig {
    fn default() -> &'a InstanceConfig {
        <InstanceConfig as ::protobuf::Message>::default_instance()
    }
}

impl InstanceConfig {
    pub fn new() -> InstanceConfig {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // .google.spanner.admin.instance.v1.InstanceConfig.Type config_type = 5;


    pub fn get_config_type(&self) -> InstanceConfig_Type {
        self.config_type
    }
    pub fn clear_config_type(&mut self) {
        self.config_type = InstanceConfig_Type::TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_config_type(&mut self, v: InstanceConfig_Type) {
        self.config_type = v;
    }

    // repeated .google.spanner.admin.instance.v1.ReplicaInfo replicas = 3;


    pub fn get_replicas(&self) -> &[ReplicaInfo] {
        &self.replicas
    }
    pub fn clear_replicas(&mut self) {
        self.replicas.clear();
    }

    // Param is passed by value, moved
    pub fn set_replicas(&mut self, v: ::protobuf::RepeatedField<ReplicaInfo>) {
        self.replicas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_replicas(&mut self) -> &mut ::protobuf::RepeatedField<ReplicaInfo> {
        &mut self.replicas
    }

    // Take field
    pub fn take_replicas(&mut self) -> ::protobuf::RepeatedField<ReplicaInfo> {
        ::std::mem::replace(&mut self.replicas, ::protobuf::RepeatedField::new())
    }

    // repeated .google.spanner.admin.instance.v1.ReplicaInfo optional_replicas = 6;


    pub fn get_optional_replicas(&self) -> &[ReplicaInfo] {
        &self.optional_replicas
    }
    pub fn clear_optional_replicas(&mut self) {
        self.optional_replicas.clear();
    }

    // Param is passed by value, moved
    pub fn set_optional_replicas(&mut self, v: ::protobuf::RepeatedField<ReplicaInfo>) {
        self.optional_replicas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_optional_replicas(&mut self) -> &mut ::protobuf::RepeatedField<ReplicaInfo> {
        &mut self.optional_replicas
    }

    // Take field
    pub fn take_optional_replicas(&mut self) -> ::protobuf::RepeatedField<ReplicaInfo> {
        ::std::mem::replace(&mut self.optional_replicas, ::protobuf::RepeatedField::new())
    }

    // string base_config = 7;


    pub fn get_base_config(&self) -> &str {
        &self.base_config
    }
    pub fn clear_base_config(&mut self) {
        self.base_config.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_config(&mut self, v: ::std::string::String) {
        self.base_config = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_config(&mut self) -> &mut ::std::string::String {
        &mut self.base_config
    }

    // Take field
    pub fn take_base_config(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_config, ::std::string::String::new())
    }

    // repeated .google.spanner.admin.instance.v1.InstanceConfig.LabelsEntry labels = 8;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // string etag = 9;


    pub fn get_etag(&self) -> &str {
        &self.etag
    }
    pub fn clear_etag(&mut self) {
        self.etag.clear();
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::string::String) {
        self.etag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::string::String {
        &mut self.etag
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.etag, ::std::string::String::new())
    }

    // repeated string leader_options = 4;


    pub fn get_leader_options(&self) -> &[::std::string::String] {
        &self.leader_options
    }
    pub fn clear_leader_options(&mut self) {
        self.leader_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_leader_options(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.leader_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_leader_options(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.leader_options
    }

    // Take field
    pub fn take_leader_options(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.leader_options, ::protobuf::RepeatedField::new())
    }

    // bool reconciling = 10;


    pub fn get_reconciling(&self) -> bool {
        self.reconciling
    }
    pub fn clear_reconciling(&mut self) {
        self.reconciling = false;
    }

    // Param is passed by value, moved
    pub fn set_reconciling(&mut self, v: bool) {
        self.reconciling = v;
    }

    // .google.spanner.admin.instance.v1.InstanceConfig.State state = 11;


    pub fn get_state(&self) -> InstanceConfig_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = InstanceConfig_State::STATE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: InstanceConfig_State) {
        self.state = v;
    }
}

impl ::protobuf::Message for InstanceConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.replicas {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.optional_replicas {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.config_type, 5, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.replicas)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.optional_replicas)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_config)?;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.etag)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.leader_options)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.reconciling = tmp;
                },
                11 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 11, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if self.config_type != InstanceConfig_Type::TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.config_type);
        }
        for value in &self.replicas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.optional_replicas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.base_config.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.base_config);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.labels);
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.etag);
        }
        for value in &self.leader_options {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.reconciling != false {
            my_size += 2;
        }
        if self.state != InstanceConfig_State::STATE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(11, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if self.config_type != InstanceConfig_Type::TYPE_UNSPECIFIED {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.config_type))?;
        }
        for v in &self.replicas {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.optional_replicas {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.base_config.is_empty() {
            os.write_string(7, &self.base_config)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.labels, os)?;
        if !self.etag.is_empty() {
            os.write_string(9, &self.etag)?;
        }
        for v in &self.leader_options {
            os.write_string(4, &v)?;
        };
        if self.reconciling != false {
            os.write_bool(10, self.reconciling)?;
        }
        if self.state != InstanceConfig_State::STATE_UNSPECIFIED {
            os.write_enum(11, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstanceConfig {
        InstanceConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &InstanceConfig| { &m.name },
                |m: &mut InstanceConfig| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &InstanceConfig| { &m.display_name },
                |m: &mut InstanceConfig| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InstanceConfig_Type>>(
                "config_type",
                |m: &InstanceConfig| { &m.config_type },
                |m: &mut InstanceConfig| { &mut m.config_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReplicaInfo>>(
                "replicas",
                |m: &InstanceConfig| { &m.replicas },
                |m: &mut InstanceConfig| { &mut m.replicas },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReplicaInfo>>(
                "optional_replicas",
                |m: &InstanceConfig| { &m.optional_replicas },
                |m: &mut InstanceConfig| { &mut m.optional_replicas },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_config",
                |m: &InstanceConfig| { &m.base_config },
                |m: &mut InstanceConfig| { &mut m.base_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &InstanceConfig| { &m.labels },
                |m: &mut InstanceConfig| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "etag",
                |m: &InstanceConfig| { &m.etag },
                |m: &mut InstanceConfig| { &mut m.etag },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "leader_options",
                |m: &InstanceConfig| { &m.leader_options },
                |m: &mut InstanceConfig| { &mut m.leader_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "reconciling",
                |m: &InstanceConfig| { &m.reconciling },
                |m: &mut InstanceConfig| { &mut m.reconciling },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InstanceConfig_State>>(
                "state",
                |m: &InstanceConfig| { &m.state },
                |m: &mut InstanceConfig| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstanceConfig>(
                "InstanceConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstanceConfig {
        static instance: ::protobuf::rt::LazyV2<InstanceConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstanceConfig::new)
    }
}

impl ::protobuf::Clear for InstanceConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.config_type = InstanceConfig_Type::TYPE_UNSPECIFIED;
        self.replicas.clear();
        self.optional_replicas.clear();
        self.base_config.clear();
        self.labels.clear();
        self.etag.clear();
        self.leader_options.clear();
        self.reconciling = false;
        self.state = InstanceConfig_State::STATE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstanceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InstanceConfig_Type {
    TYPE_UNSPECIFIED = 0,
    GOOGLE_MANAGED = 1,
    USER_MANAGED = 2,
}

impl ::protobuf::ProtobufEnum for InstanceConfig_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InstanceConfig_Type> {
        match value {
            0 => ::std::option::Option::Some(InstanceConfig_Type::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(InstanceConfig_Type::GOOGLE_MANAGED),
            2 => ::std::option::Option::Some(InstanceConfig_Type::USER_MANAGED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InstanceConfig_Type] = &[
            InstanceConfig_Type::TYPE_UNSPECIFIED,
            InstanceConfig_Type::GOOGLE_MANAGED,
            InstanceConfig_Type::USER_MANAGED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<InstanceConfig_Type>("InstanceConfig.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for InstanceConfig_Type {
}

impl ::std::default::Default for InstanceConfig_Type {
    fn default() -> Self {
        InstanceConfig_Type::TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceConfig_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InstanceConfig_State {
    STATE_UNSPECIFIED = 0,
    CREATING = 1,
    READY = 2,
}

impl ::protobuf::ProtobufEnum for InstanceConfig_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InstanceConfig_State> {
        match value {
            0 => ::std::option::Option::Some(InstanceConfig_State::STATE_UNSPECIFIED),
            1 => ::std::option::Option::Some(InstanceConfig_State::CREATING),
            2 => ::std::option::Option::Some(InstanceConfig_State::READY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InstanceConfig_State] = &[
            InstanceConfig_State::STATE_UNSPECIFIED,
            InstanceConfig_State::CREATING,
            InstanceConfig_State::READY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<InstanceConfig_State>("InstanceConfig.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for InstanceConfig_State {
}

impl ::std::default::Default for InstanceConfig_State {
    fn default() -> Self {
        InstanceConfig_State::STATE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceConfig_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Instance {
    // message fields
    pub name: ::std::string::String,
    pub config: ::std::string::String,
    pub display_name: ::std::string::String,
    pub node_count: i32,
    pub processing_units: i32,
    pub state: Instance_State,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub endpoint_uris: ::protobuf::RepeatedField<::std::string::String>,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Instance {
    fn default() -> &'a Instance {
        <Instance as ::protobuf::Message>::default_instance()
    }
}

impl Instance {
    pub fn new() -> Instance {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string config = 2;


    pub fn get_config(&self) -> &str {
        &self.config
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::std::string::String) {
        self.config = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut ::std::string::String {
        &mut self.config
    }

    // Take field
    pub fn take_config(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.config, ::std::string::String::new())
    }

    // string display_name = 3;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // int32 node_count = 5;


    pub fn get_node_count(&self) -> i32 {
        self.node_count
    }
    pub fn clear_node_count(&mut self) {
        self.node_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_count(&mut self, v: i32) {
        self.node_count = v;
    }

    // int32 processing_units = 9;


    pub fn get_processing_units(&self) -> i32 {
        self.processing_units
    }
    pub fn clear_processing_units(&mut self) {
        self.processing_units = 0;
    }

    // Param is passed by value, moved
    pub fn set_processing_units(&mut self, v: i32) {
        self.processing_units = v;
    }

    // .google.spanner.admin.instance.v1.Instance.State state = 6;


    pub fn get_state(&self) -> Instance_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = Instance_State::STATE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: Instance_State) {
        self.state = v;
    }

    // repeated .google.spanner.admin.instance.v1.Instance.LabelsEntry labels = 7;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // repeated string endpoint_uris = 8;


    pub fn get_endpoint_uris(&self) -> &[::std::string::String] {
        &self.endpoint_uris
    }
    pub fn clear_endpoint_uris(&mut self) {
        self.endpoint_uris.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint_uris(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.endpoint_uris = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint_uris(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.endpoint_uris
    }

    // Take field
    pub fn take_endpoint_uris(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.endpoint_uris, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Timestamp create_time = 11;


    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp update_time = 12;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Instance {
    fn is_initialized(&self) -> bool {
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.config)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_count = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.processing_units = tmp;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.endpoint_uris)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.config.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.config);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        if self.node_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.node_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.processing_units != 0 {
            my_size += ::protobuf::rt::value_size(9, self.processing_units, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.state != Instance_State::STATE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(6, self.state);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.labels);
        for value in &self.endpoint_uris {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.config.is_empty() {
            os.write_string(2, &self.config)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        if self.node_count != 0 {
            os.write_int32(5, self.node_count)?;
        }
        if self.processing_units != 0 {
            os.write_int32(9, self.processing_units)?;
        }
        if self.state != Instance_State::STATE_UNSPECIFIED {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.labels, os)?;
        for v in &self.endpoint_uris {
            os.write_string(8, &v)?;
        };
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Instance {
        Instance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Instance| { &m.name },
                |m: &mut Instance| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "config",
                |m: &Instance| { &m.config },
                |m: &mut Instance| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Instance| { &m.display_name },
                |m: &mut Instance| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_count",
                |m: &Instance| { &m.node_count },
                |m: &mut Instance| { &mut m.node_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "processing_units",
                |m: &Instance| { &m.processing_units },
                |m: &mut Instance| { &mut m.processing_units },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Instance_State>>(
                "state",
                |m: &Instance| { &m.state },
                |m: &mut Instance| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &Instance| { &m.labels },
                |m: &mut Instance| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "endpoint_uris",
                |m: &Instance| { &m.endpoint_uris },
                |m: &mut Instance| { &mut m.endpoint_uris },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "create_time",
                |m: &Instance| { &m.create_time },
                |m: &mut Instance| { &mut m.create_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "update_time",
                |m: &Instance| { &m.update_time },
                |m: &mut Instance| { &mut m.update_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Instance>(
                "Instance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Instance {
        static instance: ::protobuf::rt::LazyV2<Instance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Instance::new)
    }
}

impl ::protobuf::Clear for Instance {
    fn clear(&mut self) {
        self.name.clear();
        self.config.clear();
        self.display_name.clear();
        self.node_count = 0;
        self.processing_units = 0;
        self.state = Instance_State::STATE_UNSPECIFIED;
        self.labels.clear();
        self.endpoint_uris.clear();
        self.create_time.clear();
        self.update_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Instance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Instance_State {
    STATE_UNSPECIFIED = 0,
    CREATING = 1,
    READY = 2,
}

impl ::protobuf::ProtobufEnum for Instance_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Instance_State> {
        match value {
            0 => ::std::option::Option::Some(Instance_State::STATE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Instance_State::CREATING),
            2 => ::std::option::Option::Some(Instance_State::READY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Instance_State] = &[
            Instance_State::STATE_UNSPECIFIED,
            Instance_State::CREATING,
            Instance_State::READY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Instance_State>("Instance.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Instance_State {
}

impl ::std::default::Default for Instance_State {
    fn default() -> Self {
        Instance_State::STATE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstanceConfigsRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigsRequest {
    fn default() -> &'a ListInstanceConfigsRequest {
        <ListInstanceConfigsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigsRequest {
    pub fn new() -> ListInstanceConfigsRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstanceConfigsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstanceConfigsRequest {
        ListInstanceConfigsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInstanceConfigsRequest| { &m.parent },
                |m: &mut ListInstanceConfigsRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListInstanceConfigsRequest| { &m.page_size },
                |m: &mut ListInstanceConfigsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInstanceConfigsRequest| { &m.page_token },
                |m: &mut ListInstanceConfigsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstanceConfigsRequest>(
                "ListInstanceConfigsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstanceConfigsRequest {
        static instance: ::protobuf::rt::LazyV2<ListInstanceConfigsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstanceConfigsRequest::new)
    }
}

impl ::protobuf::Clear for ListInstanceConfigsRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstanceConfigsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstanceConfigsResponse {
    // message fields
    pub instance_configs: ::protobuf::RepeatedField<InstanceConfig>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigsResponse {
    fn default() -> &'a ListInstanceConfigsResponse {
        <ListInstanceConfigsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigsResponse {
    pub fn new() -> ListInstanceConfigsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.spanner.admin.instance.v1.InstanceConfig instance_configs = 1;


    pub fn get_instance_configs(&self) -> &[InstanceConfig] {
        &self.instance_configs
    }
    pub fn clear_instance_configs(&mut self) {
        self.instance_configs.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_configs(&mut self, v: ::protobuf::RepeatedField<InstanceConfig>) {
        self.instance_configs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instance_configs(&mut self) -> &mut ::protobuf::RepeatedField<InstanceConfig> {
        &mut self.instance_configs
    }

    // Take field
    pub fn take_instance_configs(&mut self) -> ::protobuf::RepeatedField<InstanceConfig> {
        ::std::mem::replace(&mut self.instance_configs, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstanceConfigsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.instance_configs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instance_configs)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.instance_configs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.instance_configs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstanceConfigsResponse {
        ListInstanceConfigsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceConfig>>(
                "instance_configs",
                |m: &ListInstanceConfigsResponse| { &m.instance_configs },
                |m: &mut ListInstanceConfigsResponse| { &mut m.instance_configs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInstanceConfigsResponse| { &m.next_page_token },
                |m: &mut ListInstanceConfigsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstanceConfigsResponse>(
                "ListInstanceConfigsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstanceConfigsResponse {
        static instance: ::protobuf::rt::LazyV2<ListInstanceConfigsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstanceConfigsResponse::new)
    }
}

impl ::protobuf::Clear for ListInstanceConfigsResponse {
    fn clear(&mut self) {
        self.instance_configs.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstanceConfigsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInstanceConfigRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInstanceConfigRequest {
    fn default() -> &'a GetInstanceConfigRequest {
        <GetInstanceConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceConfigRequest {
    pub fn new() -> GetInstanceConfigRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetInstanceConfigRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInstanceConfigRequest {
        GetInstanceConfigRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetInstanceConfigRequest| { &m.name },
                |m: &mut GetInstanceConfigRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInstanceConfigRequest>(
                "GetInstanceConfigRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInstanceConfigRequest {
        static instance: ::protobuf::rt::LazyV2<GetInstanceConfigRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInstanceConfigRequest::new)
    }
}

impl ::protobuf::Clear for GetInstanceConfigRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInstanceConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceConfigRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceConfigRequest {
    // message fields
    pub parent: ::std::string::String,
    pub instance_config_id: ::std::string::String,
    pub instance_config: ::protobuf::SingularPtrField<InstanceConfig>,
    pub validate_only: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceConfigRequest {
    fn default() -> &'a CreateInstanceConfigRequest {
        <CreateInstanceConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceConfigRequest {
    pub fn new() -> CreateInstanceConfigRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string instance_config_id = 2;


    pub fn get_instance_config_id(&self) -> &str {
        &self.instance_config_id
    }
    pub fn clear_instance_config_id(&mut self) {
        self.instance_config_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_config_id(&mut self, v: ::std::string::String) {
        self.instance_config_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_config_id(&mut self) -> &mut ::std::string::String {
        &mut self.instance_config_id
    }

    // Take field
    pub fn take_instance_config_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_config_id, ::std::string::String::new())
    }

    // .google.spanner.admin.instance.v1.InstanceConfig instance_config = 3;


    pub fn get_instance_config(&self) -> &InstanceConfig {
        self.instance_config.as_ref().unwrap_or_else(|| <InstanceConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance_config(&mut self) {
        self.instance_config.clear();
    }

    pub fn has_instance_config(&self) -> bool {
        self.instance_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance_config(&mut self, v: InstanceConfig) {
        self.instance_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_config(&mut self) -> &mut InstanceConfig {
        if self.instance_config.is_none() {
            self.instance_config.set_default();
        }
        self.instance_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance_config(&mut self) -> InstanceConfig {
        self.instance_config.take().unwrap_or_else(|| InstanceConfig::new())
    }

    // bool validate_only = 4;


    pub fn get_validate_only(&self) -> bool {
        self.validate_only
    }
    pub fn clear_validate_only(&mut self) {
        self.validate_only = false;
    }

    // Param is passed by value, moved
    pub fn set_validate_only(&mut self, v: bool) {
        self.validate_only = v;
    }
}

impl ::protobuf::Message for CreateInstanceConfigRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_config_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance_config)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.validate_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.instance_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.instance_config_id);
        }
        if let Some(ref v) = self.instance_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.validate_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.instance_config_id.is_empty() {
            os.write_string(2, &self.instance_config_id)?;
        }
        if let Some(ref v) = self.instance_config.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.validate_only != false {
            os.write_bool(4, self.validate_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceConfigRequest {
        CreateInstanceConfigRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateInstanceConfigRequest| { &m.parent },
                |m: &mut CreateInstanceConfigRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_config_id",
                |m: &CreateInstanceConfigRequest| { &m.instance_config_id },
                |m: &mut CreateInstanceConfigRequest| { &mut m.instance_config_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceConfig>>(
                "instance_config",
                |m: &CreateInstanceConfigRequest| { &m.instance_config },
                |m: &mut CreateInstanceConfigRequest| { &mut m.instance_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "validate_only",
                |m: &CreateInstanceConfigRequest| { &m.validate_only },
                |m: &mut CreateInstanceConfigRequest| { &mut m.validate_only },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceConfigRequest>(
                "CreateInstanceConfigRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceConfigRequest {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceConfigRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceConfigRequest::new)
    }
}

impl ::protobuf::Clear for CreateInstanceConfigRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.instance_config_id.clear();
        self.instance_config.clear();
        self.validate_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceConfigRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceConfigRequest {
    // message fields
    pub instance_config: ::protobuf::SingularPtrField<InstanceConfig>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    pub validate_only: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceConfigRequest {
    fn default() -> &'a UpdateInstanceConfigRequest {
        <UpdateInstanceConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceConfigRequest {
    pub fn new() -> UpdateInstanceConfigRequest {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.InstanceConfig instance_config = 1;


    pub fn get_instance_config(&self) -> &InstanceConfig {
        self.instance_config.as_ref().unwrap_or_else(|| <InstanceConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance_config(&mut self) {
        self.instance_config.clear();
    }

    pub fn has_instance_config(&self) -> bool {
        self.instance_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance_config(&mut self, v: InstanceConfig) {
        self.instance_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_config(&mut self) -> &mut InstanceConfig {
        if self.instance_config.is_none() {
            self.instance_config.set_default();
        }
        self.instance_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance_config(&mut self) -> InstanceConfig {
        self.instance_config.take().unwrap_or_else(|| InstanceConfig::new())
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }

    // bool validate_only = 3;


    pub fn get_validate_only(&self) -> bool {
        self.validate_only
    }
    pub fn clear_validate_only(&mut self) {
        self.validate_only = false;
    }

    // Param is passed by value, moved
    pub fn set_validate_only(&mut self, v: bool) {
        self.validate_only = v;
    }
}

impl ::protobuf::Message for UpdateInstanceConfigRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance_config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.validate_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.validate_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.validate_only != false {
            os.write_bool(3, self.validate_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceConfigRequest {
        UpdateInstanceConfigRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceConfig>>(
                "instance_config",
                |m: &UpdateInstanceConfigRequest| { &m.instance_config },
                |m: &mut UpdateInstanceConfigRequest| { &mut m.instance_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdateInstanceConfigRequest| { &m.update_mask },
                |m: &mut UpdateInstanceConfigRequest| { &mut m.update_mask },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "validate_only",
                |m: &UpdateInstanceConfigRequest| { &m.validate_only },
                |m: &mut UpdateInstanceConfigRequest| { &mut m.validate_only },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceConfigRequest>(
                "UpdateInstanceConfigRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceConfigRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceConfigRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceConfigRequest::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceConfigRequest {
    fn clear(&mut self) {
        self.instance_config.clear();
        self.update_mask.clear();
        self.validate_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceConfigRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteInstanceConfigRequest {
    // message fields
    pub name: ::std::string::String,
    pub etag: ::std::string::String,
    pub validate_only: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteInstanceConfigRequest {
    fn default() -> &'a DeleteInstanceConfigRequest {
        <DeleteInstanceConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteInstanceConfigRequest {
    pub fn new() -> DeleteInstanceConfigRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string etag = 2;


    pub fn get_etag(&self) -> &str {
        &self.etag
    }
    pub fn clear_etag(&mut self) {
        self.etag.clear();
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::string::String) {
        self.etag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::string::String {
        &mut self.etag
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.etag, ::std::string::String::new())
    }

    // bool validate_only = 3;


    pub fn get_validate_only(&self) -> bool {
        self.validate_only
    }
    pub fn clear_validate_only(&mut self) {
        self.validate_only = false;
    }

    // Param is passed by value, moved
    pub fn set_validate_only(&mut self, v: bool) {
        self.validate_only = v;
    }
}

impl ::protobuf::Message for DeleteInstanceConfigRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.etag)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.validate_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.etag);
        }
        if self.validate_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.etag.is_empty() {
            os.write_string(2, &self.etag)?;
        }
        if self.validate_only != false {
            os.write_bool(3, self.validate_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteInstanceConfigRequest {
        DeleteInstanceConfigRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteInstanceConfigRequest| { &m.name },
                |m: &mut DeleteInstanceConfigRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "etag",
                |m: &DeleteInstanceConfigRequest| { &m.etag },
                |m: &mut DeleteInstanceConfigRequest| { &mut m.etag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "validate_only",
                |m: &DeleteInstanceConfigRequest| { &m.validate_only },
                |m: &mut DeleteInstanceConfigRequest| { &mut m.validate_only },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteInstanceConfigRequest>(
                "DeleteInstanceConfigRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteInstanceConfigRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteInstanceConfigRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteInstanceConfigRequest::new)
    }
}

impl ::protobuf::Clear for DeleteInstanceConfigRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.etag.clear();
        self.validate_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteInstanceConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteInstanceConfigRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstanceConfigOperationsRequest {
    // message fields
    pub parent: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigOperationsRequest {
    fn default() -> &'a ListInstanceConfigOperationsRequest {
        <ListInstanceConfigOperationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigOperationsRequest {
    pub fn new() -> ListInstanceConfigOperationsRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstanceConfigOperationsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstanceConfigOperationsRequest {
        ListInstanceConfigOperationsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInstanceConfigOperationsRequest| { &m.parent },
                |m: &mut ListInstanceConfigOperationsRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListInstanceConfigOperationsRequest| { &m.filter },
                |m: &mut ListInstanceConfigOperationsRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListInstanceConfigOperationsRequest| { &m.page_size },
                |m: &mut ListInstanceConfigOperationsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInstanceConfigOperationsRequest| { &m.page_token },
                |m: &mut ListInstanceConfigOperationsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstanceConfigOperationsRequest>(
                "ListInstanceConfigOperationsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstanceConfigOperationsRequest {
        static instance: ::protobuf::rt::LazyV2<ListInstanceConfigOperationsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstanceConfigOperationsRequest::new)
    }
}

impl ::protobuf::Clear for ListInstanceConfigOperationsRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstanceConfigOperationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigOperationsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstanceConfigOperationsResponse {
    // message fields
    pub operations: ::protobuf::RepeatedField<super::operations::Operation>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigOperationsResponse {
    fn default() -> &'a ListInstanceConfigOperationsResponse {
        <ListInstanceConfigOperationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigOperationsResponse {
    pub fn new() -> ListInstanceConfigOperationsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.longrunning.Operation operations = 1;


    pub fn get_operations(&self) -> &[super::operations::Operation] {
        &self.operations
    }
    pub fn clear_operations(&mut self) {
        self.operations.clear();
    }

    // Param is passed by value, moved
    pub fn set_operations(&mut self, v: ::protobuf::RepeatedField<super::operations::Operation>) {
        self.operations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_operations(&mut self) -> &mut ::protobuf::RepeatedField<super::operations::Operation> {
        &mut self.operations
    }

    // Take field
    pub fn take_operations(&mut self) -> ::protobuf::RepeatedField<super::operations::Operation> {
        ::std::mem::replace(&mut self.operations, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstanceConfigOperationsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.operations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.operations)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.operations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.operations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstanceConfigOperationsResponse {
        ListInstanceConfigOperationsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::operations::Operation>>(
                "operations",
                |m: &ListInstanceConfigOperationsResponse| { &m.operations },
                |m: &mut ListInstanceConfigOperationsResponse| { &mut m.operations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInstanceConfigOperationsResponse| { &m.next_page_token },
                |m: &mut ListInstanceConfigOperationsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstanceConfigOperationsResponse>(
                "ListInstanceConfigOperationsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstanceConfigOperationsResponse {
        static instance: ::protobuf::rt::LazyV2<ListInstanceConfigOperationsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstanceConfigOperationsResponse::new)
    }
}

impl ::protobuf::Clear for ListInstanceConfigOperationsResponse {
    fn clear(&mut self) {
        self.operations.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstanceConfigOperationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigOperationsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    pub field_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInstanceRequest {
    fn default() -> &'a GetInstanceRequest {
        <GetInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceRequest {
    pub fn new() -> GetInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.FieldMask field_mask = 2;


    pub fn get_field_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.field_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_mask(&mut self) {
        self.field_mask.clear();
    }

    pub fn has_field_mask(&self) -> bool {
        self.field_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.field_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.field_mask.is_none() {
            self.field_mask.set_default();
        }
        self.field_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.field_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for GetInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.field_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.field_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.field_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInstanceRequest {
        GetInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetInstanceRequest| { &m.name },
                |m: &mut GetInstanceRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "field_mask",
                |m: &GetInstanceRequest| { &m.field_mask },
                |m: &mut GetInstanceRequest| { &mut m.field_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInstanceRequest>(
                "GetInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<GetInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInstanceRequest::new)
    }
}

impl ::protobuf::Clear for GetInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.field_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceRequest {
    // message fields
    pub parent: ::std::string::String,
    pub instance_id: ::std::string::String,
    pub instance: ::protobuf::SingularPtrField<Instance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceRequest {
    fn default() -> &'a CreateInstanceRequest {
        <CreateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceRequest {
    pub fn new() -> CreateInstanceRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string instance_id = 2;


    pub fn get_instance_id(&self) -> &str {
        &self.instance_id
    }
    pub fn clear_instance_id(&mut self) {
        self.instance_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id(&mut self, v: ::std::string::String) {
        self.instance_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id
    }

    // Take field
    pub fn take_instance_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id, ::std::string::String::new())
    }

    // .google.spanner.admin.instance.v1.Instance instance = 3;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }
}

impl ::protobuf::Message for CreateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.instance_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.instance_id);
        }
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.instance_id.is_empty() {
            os.write_string(2, &self.instance_id)?;
        }
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceRequest {
        CreateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateInstanceRequest| { &m.parent },
                |m: &mut CreateInstanceRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id",
                |m: &CreateInstanceRequest| { &m.instance_id },
                |m: &mut CreateInstanceRequest| { &mut m.instance_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &CreateInstanceRequest| { &m.instance },
                |m: &mut CreateInstanceRequest| { &mut m.instance },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceRequest>(
                "CreateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for CreateInstanceRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.instance_id.clear();
        self.instance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesRequest {
    fn default() -> &'a ListInstancesRequest {
        <ListInstancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesRequest {
    pub fn new() -> ListInstancesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }

    // string filter = 4;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        if !self.filter.is_empty() {
            os.write_string(4, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesRequest {
        ListInstancesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInstancesRequest| { &m.parent },
                |m: &mut ListInstancesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListInstancesRequest| { &m.page_size },
                |m: &mut ListInstancesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInstancesRequest| { &m.page_token },
                |m: &mut ListInstancesRequest| { &mut m.page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListInstancesRequest| { &m.filter },
                |m: &mut ListInstancesRequest| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesRequest>(
                "ListInstancesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesRequest {
        static instance: ::protobuf::rt::LazyV2<ListInstancesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesRequest::new)
    }
}

impl ::protobuf::Clear for ListInstancesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesResponse {
    // message fields
    pub instances: ::protobuf::RepeatedField<Instance>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesResponse {
    fn default() -> &'a ListInstancesResponse {
        <ListInstancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesResponse {
    pub fn new() -> ListInstancesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.spanner.admin.instance.v1.Instance instances = 1;


    pub fn get_instances(&self) -> &[Instance] {
        &self.instances
    }
    pub fn clear_instances(&mut self) {
        self.instances.clear();
    }

    // Param is passed by value, moved
    pub fn set_instances(&mut self, v: ::protobuf::RepeatedField<Instance>) {
        self.instances = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instances(&mut self) -> &mut ::protobuf::RepeatedField<Instance> {
        &mut self.instances
    }

    // Take field
    pub fn take_instances(&mut self) -> ::protobuf::RepeatedField<Instance> {
        ::std::mem::replace(&mut self.instances, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.instances {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instances)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.instances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.instances {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesResponse {
        ListInstancesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instances",
                |m: &ListInstancesResponse| { &m.instances },
                |m: &mut ListInstancesResponse| { &mut m.instances },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInstancesResponse| { &m.next_page_token },
                |m: &mut ListInstancesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesResponse>(
                "ListInstancesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesResponse {
        static instance: ::protobuf::rt::LazyV2<ListInstancesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesResponse::new)
    }
}

impl ::protobuf::Clear for ListInstancesResponse {
    fn clear(&mut self) {
        self.instances.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceRequest {
    // message fields
    pub instance: ::protobuf::SingularPtrField<Instance>,
    pub field_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceRequest {
    fn default() -> &'a UpdateInstanceRequest {
        <UpdateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceRequest {
    pub fn new() -> UpdateInstanceRequest {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.Instance instance = 1;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }

    // .google.protobuf.FieldMask field_mask = 2;


    pub fn get_field_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.field_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_mask(&mut self) {
        self.field_mask.clear();
    }

    pub fn has_field_mask(&self) -> bool {
        self.field_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.field_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.field_mask.is_none() {
            self.field_mask.set_default();
        }
        self.field_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.field_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for UpdateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.field_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.field_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.field_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceRequest {
        UpdateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &UpdateInstanceRequest| { &m.instance },
                |m: &mut UpdateInstanceRequest| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "field_mask",
                |m: &UpdateInstanceRequest| { &m.field_mask },
                |m: &mut UpdateInstanceRequest| { &mut m.field_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceRequest>(
                "UpdateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceRequest {
    fn clear(&mut self) {
        self.instance.clear();
        self.field_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteInstanceRequest {
    fn default() -> &'a DeleteInstanceRequest {
        <DeleteInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteInstanceRequest {
    pub fn new() -> DeleteInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteInstanceRequest {
        DeleteInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteInstanceRequest| { &m.name },
                |m: &mut DeleteInstanceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteInstanceRequest>(
                "DeleteInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteInstanceRequest::new)
    }
}

impl ::protobuf::Clear for DeleteInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceMetadata {
    // message fields
    pub instance: ::protobuf::SingularPtrField<Instance>,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub cancel_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceMetadata {
    fn default() -> &'a CreateInstanceMetadata {
        <CreateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceMetadata {
    pub fn new() -> CreateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.Instance instance = 1;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }

    // .google.protobuf.Timestamp start_time = 2;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp cancel_time = 3;


    pub fn get_cancel_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.cancel_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cancel_time(&mut self) {
        self.cancel_time.clear();
    }

    pub fn has_cancel_time(&self) -> bool {
        self.cancel_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cancel_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.cancel_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.cancel_time.is_none() {
            self.cancel_time.set_default();
        }
        self.cancel_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_cancel_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.cancel_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 4;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CreateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cancel_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cancel_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceMetadata {
        CreateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &CreateInstanceMetadata| { &m.instance },
                |m: &mut CreateInstanceMetadata| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &CreateInstanceMetadata| { &m.start_time },
                |m: &mut CreateInstanceMetadata| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "cancel_time",
                |m: &CreateInstanceMetadata| { &m.cancel_time },
                |m: &mut CreateInstanceMetadata| { &mut m.cancel_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &CreateInstanceMetadata| { &m.end_time },
                |m: &mut CreateInstanceMetadata| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceMetadata>(
                "CreateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for CreateInstanceMetadata {
    fn clear(&mut self) {
        self.instance.clear();
        self.start_time.clear();
        self.cancel_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceMetadata {
    // message fields
    pub instance: ::protobuf::SingularPtrField<Instance>,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub cancel_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceMetadata {
    fn default() -> &'a UpdateInstanceMetadata {
        <UpdateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceMetadata {
    pub fn new() -> UpdateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.Instance instance = 1;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }

    // .google.protobuf.Timestamp start_time = 2;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp cancel_time = 3;


    pub fn get_cancel_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.cancel_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cancel_time(&mut self) {
        self.cancel_time.clear();
    }

    pub fn has_cancel_time(&self) -> bool {
        self.cancel_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cancel_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.cancel_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.cancel_time.is_none() {
            self.cancel_time.set_default();
        }
        self.cancel_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_cancel_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.cancel_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 4;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UpdateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cancel_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cancel_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceMetadata {
        UpdateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &UpdateInstanceMetadata| { &m.instance },
                |m: &mut UpdateInstanceMetadata| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &UpdateInstanceMetadata| { &m.start_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "cancel_time",
                |m: &UpdateInstanceMetadata| { &m.cancel_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.cancel_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &UpdateInstanceMetadata| { &m.end_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceMetadata>(
                "UpdateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceMetadata {
    fn clear(&mut self) {
        self.instance.clear();
        self.start_time.clear();
        self.cancel_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceConfigMetadata {
    // message fields
    pub instance_config: ::protobuf::SingularPtrField<InstanceConfig>,
    pub progress: ::protobuf::SingularPtrField<super::common::OperationProgress>,
    pub cancel_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceConfigMetadata {
    fn default() -> &'a CreateInstanceConfigMetadata {
        <CreateInstanceConfigMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceConfigMetadata {
    pub fn new() -> CreateInstanceConfigMetadata {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.InstanceConfig instance_config = 1;


    pub fn get_instance_config(&self) -> &InstanceConfig {
        self.instance_config.as_ref().unwrap_or_else(|| <InstanceConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance_config(&mut self) {
        self.instance_config.clear();
    }

    pub fn has_instance_config(&self) -> bool {
        self.instance_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance_config(&mut self, v: InstanceConfig) {
        self.instance_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_config(&mut self) -> &mut InstanceConfig {
        if self.instance_config.is_none() {
            self.instance_config.set_default();
        }
        self.instance_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance_config(&mut self) -> InstanceConfig {
        self.instance_config.take().unwrap_or_else(|| InstanceConfig::new())
    }

    // .google.spanner.admin.instance.v1.OperationProgress progress = 2;


    pub fn get_progress(&self) -> &super::common::OperationProgress {
        self.progress.as_ref().unwrap_or_else(|| <super::common::OperationProgress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_progress(&mut self) {
        self.progress.clear();
    }

    pub fn has_progress(&self) -> bool {
        self.progress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_progress(&mut self, v: super::common::OperationProgress) {
        self.progress = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_progress(&mut self) -> &mut super::common::OperationProgress {
        if self.progress.is_none() {
            self.progress.set_default();
        }
        self.progress.as_mut().unwrap()
    }

    // Take field
    pub fn take_progress(&mut self) -> super::common::OperationProgress {
        self.progress.take().unwrap_or_else(|| super::common::OperationProgress::new())
    }

    // .google.protobuf.Timestamp cancel_time = 3;


    pub fn get_cancel_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.cancel_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cancel_time(&mut self) {
        self.cancel_time.clear();
    }

    pub fn has_cancel_time(&self) -> bool {
        self.cancel_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cancel_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.cancel_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.cancel_time.is_none() {
            self.cancel_time.set_default();
        }
        self.cancel_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_cancel_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.cancel_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CreateInstanceConfigMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.instance_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.progress {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cancel_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance_config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.progress)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cancel_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.progress.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.progress.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceConfigMetadata {
        CreateInstanceConfigMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceConfig>>(
                "instance_config",
                |m: &CreateInstanceConfigMetadata| { &m.instance_config },
                |m: &mut CreateInstanceConfigMetadata| { &mut m.instance_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::OperationProgress>>(
                "progress",
                |m: &CreateInstanceConfigMetadata| { &m.progress },
                |m: &mut CreateInstanceConfigMetadata| { &mut m.progress },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "cancel_time",
                |m: &CreateInstanceConfigMetadata| { &m.cancel_time },
                |m: &mut CreateInstanceConfigMetadata| { &mut m.cancel_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceConfigMetadata>(
                "CreateInstanceConfigMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceConfigMetadata {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceConfigMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceConfigMetadata::new)
    }
}

impl ::protobuf::Clear for CreateInstanceConfigMetadata {
    fn clear(&mut self) {
        self.instance_config.clear();
        self.progress.clear();
        self.cancel_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceConfigMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceConfigMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceConfigMetadata {
    // message fields
    pub instance_config: ::protobuf::SingularPtrField<InstanceConfig>,
    pub progress: ::protobuf::SingularPtrField<super::common::OperationProgress>,
    pub cancel_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceConfigMetadata {
    fn default() -> &'a UpdateInstanceConfigMetadata {
        <UpdateInstanceConfigMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceConfigMetadata {
    pub fn new() -> UpdateInstanceConfigMetadata {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.InstanceConfig instance_config = 1;


    pub fn get_instance_config(&self) -> &InstanceConfig {
        self.instance_config.as_ref().unwrap_or_else(|| <InstanceConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance_config(&mut self) {
        self.instance_config.clear();
    }

    pub fn has_instance_config(&self) -> bool {
        self.instance_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance_config(&mut self, v: InstanceConfig) {
        self.instance_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_config(&mut self) -> &mut InstanceConfig {
        if self.instance_config.is_none() {
            self.instance_config.set_default();
        }
        self.instance_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance_config(&mut self) -> InstanceConfig {
        self.instance_config.take().unwrap_or_else(|| InstanceConfig::new())
    }

    // .google.spanner.admin.instance.v1.OperationProgress progress = 2;


    pub fn get_progress(&self) -> &super::common::OperationProgress {
        self.progress.as_ref().unwrap_or_else(|| <super::common::OperationProgress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_progress(&mut self) {
        self.progress.clear();
    }

    pub fn has_progress(&self) -> bool {
        self.progress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_progress(&mut self, v: super::common::OperationProgress) {
        self.progress = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_progress(&mut self) -> &mut super::common::OperationProgress {
        if self.progress.is_none() {
            self.progress.set_default();
        }
        self.progress.as_mut().unwrap()
    }

    // Take field
    pub fn take_progress(&mut self) -> super::common::OperationProgress {
        self.progress.take().unwrap_or_else(|| super::common::OperationProgress::new())
    }

    // .google.protobuf.Timestamp cancel_time = 3;


    pub fn get_cancel_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.cancel_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cancel_time(&mut self) {
        self.cancel_time.clear();
    }

    pub fn has_cancel_time(&self) -> bool {
        self.cancel_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cancel_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.cancel_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.cancel_time.is_none() {
            self.cancel_time.set_default();
        }
        self.cancel_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_cancel_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.cancel_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UpdateInstanceConfigMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.instance_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.progress {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cancel_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance_config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.progress)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cancel_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.progress.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.progress.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceConfigMetadata {
        UpdateInstanceConfigMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceConfig>>(
                "instance_config",
                |m: &UpdateInstanceConfigMetadata| { &m.instance_config },
                |m: &mut UpdateInstanceConfigMetadata| { &mut m.instance_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::OperationProgress>>(
                "progress",
                |m: &UpdateInstanceConfigMetadata| { &m.progress },
                |m: &mut UpdateInstanceConfigMetadata| { &mut m.progress },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "cancel_time",
                |m: &UpdateInstanceConfigMetadata| { &m.cancel_time },
                |m: &mut UpdateInstanceConfigMetadata| { &mut m.cancel_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceConfigMetadata>(
                "UpdateInstanceConfigMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceConfigMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceConfigMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceConfigMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceConfigMetadata {
    fn clear(&mut self) {
        self.instance_config.clear();
        self.progress.clear();
        self.cancel_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceConfigMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceConfigMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=google/spanner/admin/instance/v1/spanner_instance_admin.proto\x12\x20\
    google.spanner.admin.instance.v1\x1a\x1cgoogle/api/annotations.proto\x1a\
    \x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\
    \x19google/api/resource.proto\x1a\x1egoogle/iam/v1/iam_policy.proto\x1a\
    \x1agoogle/iam/v1/policy.proto\x1a#google/longrunning/operations.proto\
    \x1a\x1bgoogle/protobuf/empty.proto\x1a\x20google/protobuf/field_mask.pr\
    oto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a-google/spanner/admin/inst\
    ance/v1/common.proto\"\x81\x02\n\x0bReplicaInfo\x12\x1a\n\x08location\
    \x18\x01\x20\x01(\tR\x08location\x12M\n\x04type\x18\x02\x20\x01(\x0e29.g\
    oogle.spanner.admin.instance.v1.ReplicaInfo.ReplicaTypeR\x04type\x126\n\
    \x17default_leader_location\x18\x03\x20\x01(\x08R\x15defaultLeaderLocati\
    on\"O\n\x0bReplicaType\x12\x14\n\x10TYPE_UNSPECIFIED\x10\0\x12\x0e\n\nRE\
    AD_WRITE\x10\x01\x12\r\n\tREAD_ONLY\x10\x02\x12\x0b\n\x07WITNESS\x10\x03\
    \"\xc2\x07\n\x0eInstanceConfig\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04\
    name\x12!\n\x0cdisplay_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12[\n\
    \x0bconfig_type\x18\x05\x20\x01(\x0e25.google.spanner.admin.instance.v1.\
    InstanceConfig.TypeR\nconfigTypeB\x03\xe0A\x03\x12I\n\x08replicas\x18\
    \x03\x20\x03(\x0b2-.google.spanner.admin.instance.v1.ReplicaInfoR\x08rep\
    licas\x12_\n\x11optional_replicas\x18\x06\x20\x03(\x0b2-.google.spanner.\
    admin.instance.v1.ReplicaInfoR\x10optionalReplicasB\x03\xe0A\x03\x12K\n\
    \x0bbase_config\x18\x07\x20\x01(\tR\nbaseConfigB*\xfaA'\n%spanner.google\
    apis.com/InstanceConfig\x12T\n\x06labels\x18\x08\x20\x03(\x0b2<.google.s\
    panner.admin.instance.v1.InstanceConfig.LabelsEntryR\x06labels\x12\x12\n\
    \x04etag\x18\t\x20\x01(\tR\x04etag\x12%\n\x0eleader_options\x18\x04\x20\
    \x03(\tR\rleaderOptions\x12%\n\x0breconciling\x18\n\x20\x01(\x08R\x0brec\
    oncilingB\x03\xe0A\x03\x12Q\n\x05state\x18\x0b\x20\x01(\x0e26.google.spa\
    nner.admin.instance.v1.InstanceConfig.StateR\x05stateB\x03\xe0A\x03\x1a9\
    \n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"B\n\x04Type\x12\x14\n\
    \x10TYPE_UNSPECIFIED\x10\0\x12\x12\n\x0eGOOGLE_MANAGED\x10\x01\x12\x10\n\
    \x0cUSER_MANAGED\x10\x02\"7\n\x05State\x12\x15\n\x11STATE_UNSPECIFIED\
    \x10\0\x12\x0c\n\x08CREATING\x10\x01\x12\t\n\x05READY\x10\x02:`\xeaA]\n%\
    spanner.googleapis.com/InstanceConfig\x124projects/{project}/instanceCon\
    figs/{instance_config}\"\xe5\x05\n\x08Instance\x12\x17\n\x04name\x18\x01\
    \x20\x01(\tR\x04nameB\x03\xe0A\x02\x12E\n\x06config\x18\x02\x20\x01(\tR\
    \x06configB-\xfaA'\n%spanner.googleapis.com/InstanceConfig\xe0A\x02\x12&\
    \n\x0cdisplay_name\x18\x03\x20\x01(\tR\x0bdisplayNameB\x03\xe0A\x02\x12\
    \x1d\n\nnode_count\x18\x05\x20\x01(\x05R\tnodeCount\x12)\n\x10processing\
    _units\x18\t\x20\x01(\x05R\x0fprocessingUnits\x12K\n\x05state\x18\x06\
    \x20\x01(\x0e20.google.spanner.admin.instance.v1.Instance.StateR\x05stat\
    eB\x03\xe0A\x03\x12N\n\x06labels\x18\x07\x20\x03(\x0b26.google.spanner.a\
    dmin.instance.v1.Instance.LabelsEntryR\x06labels\x12#\n\rendpoint_uris\
    \x18\x08\x20\x03(\tR\x0cendpointUris\x12@\n\x0bcreate_time\x18\x0b\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\ncreateTimeB\x03\xe0A\x03\x12@\
    \n\x0bupdate_time\x18\x0c\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\n\
    updateTimeB\x03\xe0A\x03\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01\"7\n\x05State\x12\x15\n\x11STATE_UNSPECIFIED\x10\0\x12\x0c\n\x08CR\
    EATING\x10\x01\x12\t\n\x05READY\x10\x02:M\xeaAJ\n\x1fspanner.googleapis.\
    com/Instance\x12'projects/{project}/instances/{instance}\"\xa5\x01\n\x1a\
    ListInstanceConfigsRequest\x12K\n\x06parent\x18\x01\x20\x01(\tR\x06paren\
    tB3\xfaA-\n+cloudresourcemanager.googleapis.com/Project\xe0A\x02\x12\x1b\
    \n\tpage_size\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\
    \x18\x03\x20\x01(\tR\tpageToken\"\xa2\x01\n\x1bListInstanceConfigsRespon\
    se\x12[\n\x10instance_configs\x18\x01\x20\x03(\x0b20.google.spanner.admi\
    n.instance.v1.InstanceConfigR\x0finstanceConfigs\x12&\n\x0fnext_page_tok\
    en\x18\x02\x20\x01(\tR\rnextPageToken\"]\n\x18GetInstanceConfigRequest\
    \x12A\n\x04name\x18\x01\x20\x01(\tR\x04nameB-\xfaA'\n%spanner.googleapis\
    .com/InstanceConfig\xe0A\x02\"\xa2\x02\n\x1bCreateInstanceConfigRequest\
    \x12K\n\x06parent\x18\x01\x20\x01(\tR\x06parentB3\xfaA-\n+cloudresourcem\
    anager.googleapis.com/Project\xe0A\x02\x121\n\x12instance_config_id\x18\
    \x02\x20\x01(\tR\x10instanceConfigIdB\x03\xe0A\x02\x12^\n\x0finstance_co\
    nfig\x18\x03\x20\x01(\x0b20.google.spanner.admin.instance.v1.InstanceCon\
    figR\x0einstanceConfigB\x03\xe0A\x02\x12#\n\rvalidate_only\x18\x04\x20\
    \x01(\x08R\x0cvalidateOnly\"\xe4\x01\n\x1bUpdateInstanceConfigRequest\
    \x12^\n\x0finstance_config\x18\x01\x20\x01(\x0b20.google.spanner.admin.i\
    nstance.v1.InstanceConfigR\x0einstanceConfigB\x03\xe0A\x02\x12@\n\x0bupd\
    ate_mask\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMas\
    kB\x03\xe0A\x02\x12#\n\rvalidate_only\x18\x03\x20\x01(\x08R\x0cvalidateO\
    nly\"\x99\x01\n\x1bDeleteInstanceConfigRequest\x12A\n\x04name\x18\x01\
    \x20\x01(\tR\x04nameB-\xfaA'\n%spanner.googleapis.com/InstanceConfig\xe0\
    A\x02\x12\x12\n\x04etag\x18\x02\x20\x01(\tR\x04etag\x12#\n\rvalidate_onl\
    y\x18\x03\x20\x01(\x08R\x0cvalidateOnly\"\xc6\x01\n#ListInstanceConfigOp\
    erationsRequest\x12K\n\x06parent\x18\x01\x20\x01(\tR\x06parentB3\xfaA-\n\
    +cloudresourcemanager.googleapis.com/Project\xe0A\x02\x12\x16\n\x06filte\
    r\x18\x02\x20\x01(\tR\x06filter\x12\x1b\n\tpage_size\x18\x03\x20\x01(\
    \x05R\x08pageSize\x12\x1d\n\npage_token\x18\x04\x20\x01(\tR\tpageToken\"\
    \x8d\x01\n$ListInstanceConfigOperationsResponse\x12=\n\noperations\x18\
    \x01\x20\x03(\x0b2\x1d.google.longrunning.OperationR\noperations\x12&\n\
    \x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\"\x8c\x01\n\x12Ge\
    tInstanceRequest\x12;\n\x04name\x18\x01\x20\x01(\tR\x04nameB'\xfaA!\n\
    \x1fspanner.googleapis.com/Instance\xe0A\x02\x129\n\nfield_mask\x18\x02\
    \x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\tfieldMask\"\xd7\x01\n\x15\
    CreateInstanceRequest\x12K\n\x06parent\x18\x01\x20\x01(\tR\x06parentB3\
    \xfaA-\n+cloudresourcemanager.googleapis.com/Project\xe0A\x02\x12$\n\x0b\
    instance_id\x18\x02\x20\x01(\tR\ninstanceIdB\x03\xe0A\x02\x12K\n\x08inst\
    ance\x18\x03\x20\x01(\x0b2*.google.spanner.admin.instance.v1.InstanceR\
    \x08instanceB\x03\xe0A\x02\"\xb7\x01\n\x14ListInstancesRequest\x12K\n\
    \x06parent\x18\x01\x20\x01(\tR\x06parentB3\xfaA-\n+cloudresourcemanager.\
    googleapis.com/Project\xe0A\x02\x12\x1b\n\tpage_size\x18\x02\x20\x01(\
    \x05R\x08pageSize\x12\x1d\n\npage_token\x18\x03\x20\x01(\tR\tpageToken\
    \x12\x16\n\x06filter\x18\x04\x20\x01(\tR\x06filter\"\x89\x01\n\x15ListIn\
    stancesResponse\x12H\n\tinstances\x18\x01\x20\x03(\x0b2*.google.spanner.\
    admin.instance.v1.InstanceR\tinstances\x12&\n\x0fnext_page_token\x18\x02\
    \x20\x01(\tR\rnextPageToken\"\xa4\x01\n\x15UpdateInstanceRequest\x12K\n\
    \x08instance\x18\x01\x20\x01(\x0b2*.google.spanner.admin.instance.v1.Ins\
    tanceR\x08instanceB\x03\xe0A\x02\x12>\n\nfield_mask\x18\x02\x20\x01(\x0b\
    2\x1a.google.protobuf.FieldMaskR\tfieldMaskB\x03\xe0A\x02\"T\n\x15Delete\
    InstanceRequest\x12;\n\x04name\x18\x01\x20\x01(\tR\x04nameB'\xfaA!\n\x1f\
    spanner.googleapis.com/Instance\xe0A\x02\"\x8f\x02\n\x16CreateInstanceMe\
    tadata\x12F\n\x08instance\x18\x01\x20\x01(\x0b2*.google.spanner.admin.in\
    stance.v1.InstanceR\x08instance\x129\n\nstart_time\x18\x02\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\tstartTime\x12;\n\x0bcancel_time\x18\x03\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ncancelTime\x125\n\x08end_\
    time\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x07endTime\"\
    \x8f\x02\n\x16UpdateInstanceMetadata\x12F\n\x08instance\x18\x01\x20\x01(\
    \x0b2*.google.spanner.admin.instance.v1.InstanceR\x08instance\x129\n\nst\
    art_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tstartTime\
    \x12;\n\x0bcancel_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.Timesta\
    mpR\ncancelTime\x125\n\x08end_time\x18\x04\x20\x01(\x0b2\x1a.google.prot\
    obuf.TimestampR\x07endTime\"\x87\x02\n\x1cCreateInstanceConfigMetadata\
    \x12Y\n\x0finstance_config\x18\x01\x20\x01(\x0b20.google.spanner.admin.i\
    nstance.v1.InstanceConfigR\x0einstanceConfig\x12O\n\x08progress\x18\x02\
    \x20\x01(\x0b23.google.spanner.admin.instance.v1.OperationProgressR\x08p\
    rogress\x12;\n\x0bcancel_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.\
    TimestampR\ncancelTime\"\x87\x02\n\x1cUpdateInstanceConfigMetadata\x12Y\
    \n\x0finstance_config\x18\x01\x20\x01(\x0b20.google.spanner.admin.instan\
    ce.v1.InstanceConfigR\x0einstanceConfig\x12O\n\x08progress\x18\x02\x20\
    \x01(\x0b23.google.spanner.admin.instance.v1.OperationProgressR\x08progr\
    ess\x12;\n\x0bcancel_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.Time\
    stampR\ncancelTime2\xf2\x18\n\rInstanceAdmin\x12\xcc\x01\n\x13ListInstan\
    ceConfigs\x12<.google.spanner.admin.instance.v1.ListInstanceConfigsReque\
    st\x1a=.google.spanner.admin.instance.v1.ListInstanceConfigsResponse\"8\
    \x82\xd3\xe4\x93\x02)\x12'/v1/{parent=projects/*}/instanceConfigs\xdaA\
    \x06parent\x12\xb9\x01\n\x11GetInstanceConfig\x12:.google.spanner.admin.\
    instance.v1.GetInstanceConfigRequest\x1a0.google.spanner.admin.instance.\
    v1.InstanceConfig\"6\x82\xd3\xe4\x93\x02)\x12'/v1/{name=projects/*/insta\
    nceConfigs/*}\xdaA\x04name\x12\xc8\x02\n\x14CreateInstanceConfig\x12=.go\
    ogle.spanner.admin.instance.v1.CreateInstanceConfigRequest\x1a\x1d.googl\
    e.longrunning.Operation\"\xd1\x01\xcaAp\n/google.spanner.admin.instance.\
    v1.InstanceConfig\x12=google.spanner.admin.instance.v1.CreateInstanceCon\
    figMetadata\x82\xd3\xe4\x93\x02,\"'/v1/{parent=projects/*}/instanceConfi\
    gs:\x01*\xdaA)parent,instance_config,instance_config_id\x12\xca\x02\n\
    \x14UpdateInstanceConfig\x12=.google.spanner.admin.instance.v1.UpdateIns\
    tanceConfigRequest\x1a\x1d.google.longrunning.Operation\"\xd3\x01\xcaAp\
    \n/google.spanner.admin.instance.v1.InstanceConfig\x12=google.spanner.ad\
    min.instance.v1.UpdateInstanceConfigMetadata\x82\xd3\xe4\x93\x02<27/v1/{\
    instance_config.name=projects/*/instanceConfigs/*}:\x01*\xdaA\x1binstanc\
    e_config,update_mask\x12\xa5\x01\n\x14DeleteInstanceConfig\x12=.google.s\
    panner.admin.instance.v1.DeleteInstanceConfigRequest\x1a\x16.google.prot\
    obuf.Empty\"6\x82\xd3\xe4\x93\x02)*'/v1/{name=projects/*/instanceConfigs\
    /*}\xdaA\x04name\x12\xf0\x01\n\x1cListInstanceConfigOperations\x12E.goog\
    le.spanner.admin.instance.v1.ListInstanceConfigOperationsRequest\x1aF.go\
    ogle.spanner.admin.instance.v1.ListInstanceConfigOperationsResponse\"A\
    \x82\xd3\xe4\x93\x022\x120/v1/{parent=projects/*}/instanceConfigOperatio\
    ns\xdaA\x06parent\x12\xb4\x01\n\rListInstances\x126.google.spanner.admin\
    .instance.v1.ListInstancesRequest\x1a7.google.spanner.admin.instance.v1.\
    ListInstancesResponse\"2\x82\xd3\xe4\x93\x02#\x12!/v1/{parent=projects/*\
    }/instances\xdaA\x06parent\x12\xa1\x01\n\x0bGetInstance\x124.google.span\
    ner.admin.instance.v1.GetInstanceRequest\x1a*.google.spanner.admin.insta\
    nce.v1.Instance\"0\x82\xd3\xe4\x93\x02#\x12!/v1/{name=projects/*/instanc\
    es/*}\xdaA\x04name\x12\x9c\x02\n\x0eCreateInstance\x127.google.spanner.a\
    dmin.instance.v1.CreateInstanceRequest\x1a\x1d.google.longrunning.Operat\
    ion\"\xb1\x01\xcaAd\n)google.spanner.admin.instance.v1.Instance\x127goog\
    le.spanner.admin.instance.v1.CreateInstanceMetadata\x82\xd3\xe4\x93\x02&\
    \"!/v1/{parent=projects/*}/instances:\x01*\xdaA\x1bparent,instance_id,in\
    stance\x12\x9d\x02\n\x0eUpdateInstance\x127.google.spanner.admin.instanc\
    e.v1.UpdateInstanceRequest\x1a\x1d.google.longrunning.Operation\"\xb2\
    \x01\xcaAd\n)google.spanner.admin.instance.v1.Instance\x127google.spanne\
    r.admin.instance.v1.UpdateInstanceMetadata\x82\xd3\xe4\x93\x02/2*/v1/{in\
    stance.name=projects/*/instances/*}:\x01*\xdaA\x13instance,field_mask\
    \x12\x93\x01\n\x0eDeleteInstance\x127.google.spanner.admin.instance.v1.D\
    eleteInstanceRequest\x1a\x16.google.protobuf.Empty\"0\x82\xd3\xe4\x93\
    \x02#*!/v1/{name=projects/*/instances/*}\xdaA\x04name\x12\x9a\x01\n\x0cS\
    etIamPolicy\x12\".google.iam.v1.SetIamPolicyRequest\x1a\x15.google.iam.v\
    1.Policy\"O\x82\xd3\xe4\x93\x027\"2/v1/{resource=projects/*/instances/*}\
    :setIamPolicy:\x01*\xdaA\x0fresource,policy\x12\x93\x01\n\x0cGetIamPolic\
    y\x12\".google.iam.v1.GetIamPolicyRequest\x1a\x15.google.iam.v1.Policy\"\
    H\x82\xd3\xe4\x93\x027\"2/v1/{resource=projects/*/instances/*}:getIamPol\
    icy:\x01*\xdaA\x08resource\x12\xc5\x01\n\x12TestIamPermissions\x12(.goog\
    le.iam.v1.TestIamPermissionsRequest\x1a).google.iam.v1.TestIamPermission\
    sResponse\"Z\x82\xd3\xe4\x93\x02=\"8/v1/{resource=projects/*/instances/*\
    }:testIamPermissions:\x01*\xdaA\x14resource,permissions\x1ax\xd2A\\https\
    ://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/aut\
    h/spanner.admin\xcaA\x16spanner.googleapis.comB\x8b\x02\n$com.google.spa\
    nner.admin.instance.v1B\x19SpannerInstanceAdminProtoP\x01ZFcloud.google.\
    com/go/spanner/admin/instance/apiv1/instancepb;instancepb\xaa\x02&Google\
    .Cloud.Spanner.Admin.Instance.V1\xca\x02&Google\\Cloud\\Spanner\\Admin\\\
    Instance\\V1\xea\x02+Google::Cloud::Spanner::Admin::Instance::V1J\xdd\
    \xc5\x02\n\x07\x12\x05\x0e\0\xb8\x08\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\
    \0\x122\xb1\x04\x20Copyright\x202022\x20Google\x20LLC\n\n\x20Licensed\
    \x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"Li\
    cense\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\
    \x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\
    \x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www\
    .apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20appl\
    icable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20d\
    istributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITION\
    S\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\
    \x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\
    \x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\
    \x08\n\x01\x02\x12\x03\x10\0)\n\t\n\x02\x03\0\x12\x03\x12\0&\n\t\n\x02\
    \x03\x01\x12\x03\x13\0!\n\t\n\x02\x03\x02\x12\x03\x14\0)\n\t\n\x02\x03\
    \x03\x12\x03\x15\0#\n\t\n\x02\x03\x04\x12\x03\x16\0(\n\t\n\x02\x03\x05\
    \x12\x03\x17\0$\n\t\n\x02\x03\x06\x12\x03\x18\0-\n\t\n\x02\x03\x07\x12\
    \x03\x19\0%\n\t\n\x02\x03\x08\x12\x03\x1a\0*\n\t\n\x02\x03\t\x12\x03\x1b\
    \0)\n\t\n\x02\x03\n\x12\x03\x1c\07\n\x08\n\x01\x08\x12\x03\x1e\0C\n\t\n\
    \x02\x08%\x12\x03\x1e\0C\n\x08\n\x01\x08\x12\x03\x1f\0]\n\t\n\x02\x08\
    \x0b\x12\x03\x1f\0]\n\x08\n\x01\x08\x12\x03\x20\0\"\n\t\n\x02\x08\n\x12\
    \x03\x20\0\"\n\x08\n\x01\x08\x12\x03!\0:\n\t\n\x02\x08\x08\x12\x03!\0:\n\
    \x08\n\x01\x08\x12\x03\"\0=\n\t\n\x02\x08\x01\x12\x03\"\0=\n\x08\n\x01\
    \x08\x12\x03#\0E\n\t\n\x02\x08)\x12\x03#\0E\n\x08\n\x01\x08\x12\x03$\0D\
    \n\t\n\x02\x08-\x12\x03$\0D\n\xdd\x08\n\x02\x06\0\x12\x05;\0\x95\x03\x01\
    \x1a\xcf\x08\x20Cloud\x20Spanner\x20Instance\x20Admin\x20API\n\n\x20The\
    \x20Cloud\x20Spanner\x20Instance\x20Admin\x20API\x20can\x20be\x20used\
    \x20to\x20create,\x20delete,\n\x20modify\x20and\x20list\x20instances.\
    \x20Instances\x20are\x20dedicated\x20Cloud\x20Spanner\x20serving\n\x20an\
    d\x20storage\x20resources\x20to\x20be\x20used\x20by\x20Cloud\x20Spanner\
    \x20databases.\n\n\x20Each\x20instance\x20has\x20a\x20\"configuration\",\
    \x20which\x20dictates\x20where\x20the\n\x20serving\x20resources\x20for\
    \x20the\x20Cloud\x20Spanner\x20instance\x20are\x20located\x20(e.g.,\n\
    \x20US-central,\x20Europe).\x20Configurations\x20are\x20created\x20by\
    \x20Google\x20based\x20on\n\x20resource\x20availability.\n\n\x20Cloud\
    \x20Spanner\x20billing\x20is\x20based\x20on\x20the\x20instances\x20that\
    \x20exist\x20and\x20their\n\x20sizes.\x20After\x20an\x20instance\x20exis\
    ts,\x20there\x20are\x20no\x20additional\n\x20per-database\x20or\x20per-o\
    peration\x20charges\x20for\x20use\x20of\x20the\x20instance\n\x20(though\
    \x20there\x20may\x20be\x20additional\x20network\x20bandwidth\x20charges)\
    .\n\x20Instances\x20offer\x20isolation:\x20problems\x20with\x20databases\
    \x20in\x20one\x20instance\n\x20will\x20not\x20affect\x20other\x20instanc\
    es.\x20However,\x20within\x20an\x20instance\n\x20databases\x20can\x20aff\
    ect\x20each\x20other.\x20For\x20example,\x20if\x20one\x20database\x20in\
    \x20an\n\x20instance\x20receives\x20a\x20lot\x20of\x20requests\x20and\
    \x20consumes\x20most\x20of\x20the\n\x20instance\x20resources,\x20fewer\
    \x20resources\x20are\x20available\x20for\x20other\n\x20databases\x20in\
    \x20that\x20instance,\x20and\x20their\x20performance\x20may\x20suffer.\n\
    \n\n\n\x03\x06\0\x01\x12\x03;\x08\x15\n\n\n\x03\x06\0\x03\x12\x03<\x02>\
    \n\x0c\n\x05\x06\0\x03\x99\x08\x12\x03<\x02>\n\x0b\n\x03\x06\0\x03\x12\
    \x04=\x02?6\n\r\n\x05\x06\0\x03\x9a\x08\x12\x04=\x02?6\nP\n\x04\x06\0\
    \x02\0\x12\x04B\x02H\x03\x1aB\x20Lists\x20the\x20supported\x20instance\
    \x20configurations\x20for\x20a\x20given\x20project.\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03B\x06\x19\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03B\x1a4\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03C\x0f*\n\r\n\x05\x06\0\x02\0\x04\x12\
    \x04D\x04F\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04D\x04F\x06\
    \n\x0c\n\x05\x06\0\x02\0\x04\x12\x03G\x044\n\x0f\n\x08\x06\0\x02\0\x04\
    \x9b\x08\0\x12\x03G\x044\nK\n\x04\x06\0\x02\x01\x12\x04K\x02P\x03\x1a=\
    \x20Gets\x20information\x20about\x20a\x20particular\x20instance\x20confi\
    guration.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03K\x06\x17\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03K\x180\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03K;\
    I\n\r\n\x05\x06\0\x02\x01\x04\x12\x04L\x04N\x06\n\x11\n\t\x06\0\x02\x01\
    \x04\xb0\xca\xbc\"\x12\x04L\x04N\x06\n\x0c\n\x05\x06\0\x02\x01\x04\x12\
    \x03O\x042\n\x0f\n\x08\x06\0\x02\x01\x04\x9b\x08\0\x12\x03O\x042\n\xca\
    \x0e\n\x04\x06\0\x02\x02\x12\x05{\x02\x87\x01\x03\x1a\xba\x0e\x20Creates\
    \x20an\x20instance\x20config\x20and\x20begins\x20preparing\x20it\x20to\
    \x20be\x20used.\x20The\n\x20returned\x20[long-running\x20operation][goog\
    le.longrunning.Operation]\n\x20can\x20be\x20used\x20to\x20track\x20the\
    \x20progress\x20of\x20preparing\x20the\x20new\n\x20instance\x20config.\
    \x20The\x20instance\x20config\x20name\x20is\x20assigned\x20by\x20the\x20\
    caller.\x20If\x20the\n\x20named\x20instance\x20config\x20already\x20exis\
    ts,\x20`CreateInstanceConfig`\x20returns\n\x20`ALREADY_EXISTS`.\n\n\x20I\
    mmediately\x20after\x20the\x20request\x20returns:\n\n\x20\x20\x20*\x20Th\
    e\x20instance\x20config\x20is\x20readable\x20via\x20the\x20API,\x20with\
    \x20all\x20requested\n\x20\x20\x20\x20\x20attributes.\x20The\x20instance\
    \x20config's\n\x20\x20\x20\x20\x20[reconciling][google.spanner.admin.ins\
    tance.v1.InstanceConfig.reconciling]\n\x20\x20\x20\x20\x20field\x20is\
    \x20set\x20to\x20true.\x20Its\x20state\x20is\x20`CREATING`.\n\n\x20While\
    \x20the\x20operation\x20is\x20pending:\n\n\x20\x20\x20*\x20Cancelling\
    \x20the\x20operation\x20renders\x20the\x20instance\x20config\x20immediat\
    ely\n\x20\x20\x20\x20\x20unreadable\x20via\x20the\x20API.\n\x20\x20\x20*\
    \x20Except\x20for\x20deleting\x20the\x20creating\x20resource,\x20all\x20\
    other\x20attempts\x20to\x20modify\n\x20\x20\x20\x20\x20the\x20instance\
    \x20config\x20are\x20rejected.\n\n\x20Upon\x20completion\x20of\x20the\
    \x20returned\x20operation:\n\n\x20\x20\x20*\x20Instances\x20can\x20be\
    \x20created\x20using\x20the\x20instance\x20configuration.\n\x20\x20\x20*\
    \x20The\x20instance\x20config's\n\x20\x20\x20[reconciling][google.spanne\
    r.admin.instance.v1.InstanceConfig.reconciling]\n\x20\x20\x20field\x20be\
    comes\x20false.\x20Its\x20state\x20becomes\x20`READY`.\n\n\x20The\x20ret\
    urned\x20[long-running\x20operation][google.longrunning.Operation]\x20wi\
    ll\n\x20have\x20a\x20name\x20of\x20the\x20format\n\x20`<instance_config_\
    name>/operations/<operation_id>`\x20and\x20can\x20be\x20used\x20to\x20tr\
    ack\n\x20creation\x20of\x20the\x20instance\x20config.\x20The\n\x20[metad\
    ata][google.longrunning.Operation.metadata]\x20field\x20type\x20is\n\x20\
    [CreateInstanceConfigMetadata][google.spanner.admin.instance.v1.CreateIn\
    stanceConfigMetadata].\n\x20The\x20[response][google.longrunning.Operati\
    on.response]\x20field\x20type\x20is\n\x20[InstanceConfig][google.spanner\
    .admin.instance.v1.InstanceConfig],\x20if\n\x20successful.\n\n\x20Author\
    ization\x20requires\x20`spanner.instanceConfigs.create`\x20permission\
    \x20on\n\x20the\x20resource\n\x20[parent][google.spanner.admin.instance.\
    v1.CreateInstanceConfigRequest.parent].\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03{\x06\x1a\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03{\x1b6\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03|\x0f+\n\x0e\n\x05\x06\0\x02\x02\x04\x12\
    \x05}\x04\x80\x01\x06\n\x12\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x05}\
    \x04\x80\x01\x06\n\x0f\n\x05\x06\0\x02\x02\x04\x12\x06\x81\x01\x04\x82\
    \x014\n\x12\n\x08\x06\0\x02\x02\x04\x9b\x08\0\x12\x06\x81\x01\x04\x82\
    \x014\n\x0f\n\x05\x06\0\x02\x02\x04\x12\x06\x83\x01\x04\x86\x01\x06\n\
    \x11\n\x07\x06\0\x02\x02\x04\x99\x08\x12\x06\x83\x01\x04\x86\x01\x06\n\
    \x99\x0f\n\x04\x06\0\x02\x03\x12\x06\xb5\x01\x02\xc0\x01\x03\x1a\x88\x0f\
    \x20Updates\x20an\x20instance\x20config.\x20The\x20returned\n\x20[long-r\
    unning\x20operation][google.longrunning.Operation]\x20can\x20be\x20used\
    \x20to\x20track\n\x20the\x20progress\x20of\x20updating\x20the\x20instanc\
    e.\x20If\x20the\x20named\x20instance\x20config\x20does\n\x20not\x20exist\
    ,\x20returns\x20`NOT_FOUND`.\n\n\x20Only\x20user\x20managed\x20configura\
    tions\x20can\x20be\x20updated.\n\n\x20Immediately\x20after\x20the\x20req\
    uest\x20returns:\n\n\x20\x20\x20*\x20The\x20instance\x20config's\n\x20\
    \x20\x20\x20\x20[reconciling][google.spanner.admin.instance.v1.InstanceC\
    onfig.reconciling]\n\x20\x20\x20\x20\x20field\x20is\x20set\x20to\x20true\
    .\n\n\x20While\x20the\x20operation\x20is\x20pending:\n\n\x20\x20\x20*\
    \x20Cancelling\x20the\x20operation\x20sets\x20its\x20metadata's\n\x20\
    \x20\x20\x20\x20[cancel_time][google.spanner.admin.instance.v1.UpdateIns\
    tanceConfigMetadata.cancel_time].\n\x20\x20\x20\x20\x20The\x20operation\
    \x20is\x20guaranteed\x20to\x20succeed\x20at\x20undoing\x20all\x20changes\
    ,\x20after\n\x20\x20\x20\x20\x20which\x20point\x20it\x20terminates\x20wi\
    th\x20a\x20`CANCELLED`\x20status.\n\x20\x20\x20*\x20All\x20other\x20atte\
    mpts\x20to\x20modify\x20the\x20instance\x20config\x20are\x20rejected.\n\
    \x20\x20\x20*\x20Reading\x20the\x20instance\x20config\x20via\x20the\x20A\
    PI\x20continues\x20to\x20give\x20the\n\x20\x20\x20\x20\x20pre-request\
    \x20values.\n\n\x20Upon\x20completion\x20of\x20the\x20returned\x20operat\
    ion:\n\n\x20\x20\x20*\x20Creating\x20instances\x20using\x20the\x20instan\
    ce\x20configuration\x20uses\x20the\x20new\n\x20\x20\x20\x20\x20values.\n\
    \x20\x20\x20*\x20The\x20instance\x20config's\x20new\x20values\x20are\x20\
    readable\x20via\x20the\x20API.\n\x20\x20\x20*\x20The\x20instance\x20conf\
    ig's\n\x20\x20\x20[reconciling][google.spanner.admin.instance.v1.Instanc\
    eConfig.reconciling]\n\x20\x20\x20field\x20becomes\x20false.\n\n\x20The\
    \x20returned\x20[long-running\x20operation][google.longrunning.Operation\
    ]\x20will\n\x20have\x20a\x20name\x20of\x20the\x20format\n\x20`<instance_\
    config_name>/operations/<operation_id>`\x20and\x20can\x20be\x20used\x20t\
    o\x20track\n\x20the\x20instance\x20config\x20modification.\x20\x20The\n\
    \x20[metadata][google.longrunning.Operation.metadata]\x20field\x20type\
    \x20is\n\x20[UpdateInstanceConfigMetadata][google.spanner.admin.instance\
    .v1.UpdateInstanceConfigMetadata].\n\x20The\x20[response][google.longrun\
    ning.Operation.response]\x20field\x20type\x20is\n\x20[InstanceConfig][go\
    ogle.spanner.admin.instance.v1.InstanceConfig],\x20if\n\x20successful.\n\
    \n\x20Authorization\x20requires\x20`spanner.instanceConfigs.update`\x20p\
    ermission\x20on\n\x20the\x20resource\x20[name][google.spanner.admin.inst\
    ance.v1.InstanceConfig.name].\n\n\r\n\x05\x06\0\x02\x03\x01\x12\x04\xb5\
    \x01\x06\x1a\n\r\n\x05\x06\0\x02\x03\x02\x12\x04\xb5\x01\x1b6\n\r\n\x05\
    \x06\0\x02\x03\x03\x12\x04\xb6\x01\x0f+\n\x0f\n\x05\x06\0\x02\x03\x04\
    \x12\x06\xb7\x01\x04\xba\x01\x06\n\x13\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\
    \"\x12\x06\xb7\x01\x04\xba\x01\x06\n\r\n\x05\x06\0\x02\x03\x04\x12\x04\
    \xbb\x01\x04I\n\x10\n\x08\x06\0\x02\x03\x04\x9b\x08\0\x12\x04\xbb\x01\
    \x04I\n\x0f\n\x05\x06\0\x02\x03\x04\x12\x06\xbc\x01\x04\xbf\x01\x06\n\
    \x11\n\x07\x06\0\x02\x03\x04\x99\x08\x12\x06\xbc\x01\x04\xbf\x01\x06\n\
    \x86\x03\n\x04\x06\0\x02\x04\x12\x06\xca\x01\x02\xd0\x01\x03\x1a\xf5\x02\
    \x20Deletes\x20the\x20instance\x20config.\x20Deletion\x20is\x20only\x20a\
    llowed\x20when\x20no\n\x20instances\x20are\x20using\x20the\x20configurat\
    ion.\x20If\x20any\x20instances\x20are\x20using\n\x20the\x20config,\x20re\
    turns\x20`FAILED_PRECONDITION`.\n\n\x20Only\x20user\x20managed\x20config\
    urations\x20can\x20be\x20deleted.\n\n\x20Authorization\x20requires\x20`s\
    panner.instanceConfigs.delete`\x20permission\x20on\n\x20the\x20resource\
    \x20[name][google.spanner.admin.instance.v1.InstanceConfig.name].\n\n\r\
    \n\x05\x06\0\x02\x04\x01\x12\x04\xca\x01\x06\x1a\n\r\n\x05\x06\0\x02\x04\
    \x02\x12\x04\xca\x01\x1b6\n\r\n\x05\x06\0\x02\x04\x03\x12\x04\xcb\x01\
    \x0f$\n\x0f\n\x05\x06\0\x02\x04\x04\x12\x06\xcc\x01\x04\xce\x01\x06\n\
    \x13\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x06\xcc\x01\x04\xce\x01\x06\
    \n\r\n\x05\x06\0\x02\x04\x04\x12\x04\xcf\x01\x042\n\x10\n\x08\x06\0\x02\
    \x04\x04\x9b\x08\0\x12\x04\xcf\x01\x042\n\xaa\x05\n\x04\x06\0\x02\x05\
    \x12\x06\xdd\x01\x02\xe3\x01\x03\x1a\x99\x05\x20Lists\x20the\x20user-man\
    aged\x20instance\x20config\x20[long-running\n\x20operations][google.long\
    running.Operation]\x20in\x20the\x20given\x20project.\x20An\x20instance\n\
    \x20config\x20operation\x20has\x20a\x20name\x20of\x20the\x20form\n\x20`p\
    rojects/<project>/instanceConfigs/<instance_config>/operations/<operatio\
    n>`.\n\x20The\x20long-running\x20operation\n\x20[metadata][google.longru\
    nning.Operation.metadata]\x20field\x20type\n\x20`metadata.type_url`\x20d\
    escribes\x20the\x20type\x20of\x20the\x20metadata.\x20Operations\x20retur\
    ned\n\x20include\x20those\x20that\x20have\x20completed/failed/canceled\
    \x20within\x20the\x20last\x207\x20days,\n\x20and\x20pending\x20operation\
    s.\x20Operations\x20returned\x20are\x20ordered\x20by\n\x20`operation.met\
    adata.value.start_time`\x20in\x20descending\x20order\x20starting\n\x20fr\
    om\x20the\x20most\x20recently\x20started\x20operation.\n\n\r\n\x05\x06\0\
    \x02\x05\x01\x12\x04\xdd\x01\x06\"\n\r\n\x05\x06\0\x02\x05\x02\x12\x04\
    \xdd\x01#F\n\r\n\x05\x06\0\x02\x05\x03\x12\x04\xde\x01\x0f3\n\x0f\n\x05\
    \x06\0\x02\x05\x04\x12\x06\xdf\x01\x04\xe1\x01\x06\n\x13\n\t\x06\0\x02\
    \x05\x04\xb0\xca\xbc\"\x12\x06\xdf\x01\x04\xe1\x01\x06\n\r\n\x05\x06\0\
    \x02\x05\x04\x12\x04\xe2\x01\x044\n\x10\n\x08\x06\0\x02\x05\x04\x9b\x08\
    \0\x12\x04\xe2\x01\x044\n;\n\x04\x06\0\x02\x06\x12\x06\xe6\x01\x02\xeb\
    \x01\x03\x1a+\x20Lists\x20all\x20instances\x20in\x20the\x20given\x20proj\
    ect.\n\n\r\n\x05\x06\0\x02\x06\x01\x12\x04\xe6\x01\x06\x13\n\r\n\x05\x06\
    \0\x02\x06\x02\x12\x04\xe6\x01\x14(\n\r\n\x05\x06\0\x02\x06\x03\x12\x04\
    \xe6\x013H\n\x0f\n\x05\x06\0\x02\x06\x04\x12\x06\xe7\x01\x04\xe9\x01\x06\
    \n\x13\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x06\xe7\x01\x04\xe9\x01\
    \x06\n\r\n\x05\x06\0\x02\x06\x04\x12\x04\xea\x01\x044\n\x10\n\x08\x06\0\
    \x02\x06\x04\x9b\x08\0\x12\x04\xea\x01\x044\n?\n\x04\x06\0\x02\x07\x12\
    \x06\xee\x01\x02\xf3\x01\x03\x1a/\x20Gets\x20information\x20about\x20a\
    \x20particular\x20instance.\n\n\r\n\x05\x06\0\x02\x07\x01\x12\x04\xee\
    \x01\x06\x11\n\r\n\x05\x06\0\x02\x07\x02\x12\x04\xee\x01\x12$\n\r\n\x05\
    \x06\0\x02\x07\x03\x12\x04\xee\x01/7\n\x0f\n\x05\x06\0\x02\x07\x04\x12\
    \x06\xef\x01\x04\xf1\x01\x06\n\x13\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\
    \x12\x06\xef\x01\x04\xf1\x01\x06\n\r\n\x05\x06\0\x02\x07\x04\x12\x04\xf2\
    \x01\x042\n\x10\n\x08\x06\0\x02\x07\x04\x9b\x08\0\x12\x04\xf2\x01\x042\n\
    \xaa\x0c\n\x04\x06\0\x02\x08\x12\x06\x97\x02\x02\xa2\x02\x03\x1a\x99\x0c\
    \x20Creates\x20an\x20instance\x20and\x20begins\x20preparing\x20it\x20to\
    \x20begin\x20serving.\x20The\n\x20returned\x20[long-running\x20operation\
    ][google.longrunning.Operation]\n\x20can\x20be\x20used\x20to\x20track\
    \x20the\x20progress\x20of\x20preparing\x20the\x20new\n\x20instance.\x20T\
    he\x20instance\x20name\x20is\x20assigned\x20by\x20the\x20caller.\x20If\
    \x20the\n\x20named\x20instance\x20already\x20exists,\x20`CreateInstance`\
    \x20returns\n\x20`ALREADY_EXISTS`.\n\n\x20Immediately\x20upon\x20complet\
    ion\x20of\x20this\x20request:\n\n\x20\x20\x20*\x20The\x20instance\x20is\
    \x20readable\x20via\x20the\x20API,\x20with\x20all\x20requested\x20attrib\
    utes\n\x20\x20\x20\x20\x20but\x20no\x20allocated\x20resources.\x20Its\
    \x20state\x20is\x20`CREATING`.\n\n\x20Until\x20completion\x20of\x20the\
    \x20returned\x20operation:\n\n\x20\x20\x20*\x20Cancelling\x20the\x20oper\
    ation\x20renders\x20the\x20instance\x20immediately\x20unreadable\n\x20\
    \x20\x20\x20\x20via\x20the\x20API.\n\x20\x20\x20*\x20The\x20instance\x20\
    can\x20be\x20deleted.\n\x20\x20\x20*\x20All\x20other\x20attempts\x20to\
    \x20modify\x20the\x20instance\x20are\x20rejected.\n\n\x20Upon\x20complet\
    ion\x20of\x20the\x20returned\x20operation:\n\n\x20\x20\x20*\x20Billing\
    \x20for\x20all\x20successfully-allocated\x20resources\x20begins\x20(some\
    \x20types\n\x20\x20\x20\x20\x20may\x20have\x20lower\x20than\x20the\x20re\
    quested\x20levels).\n\x20\x20\x20*\x20Databases\x20can\x20be\x20created\
    \x20in\x20the\x20instance.\n\x20\x20\x20*\x20The\x20instance's\x20alloca\
    ted\x20resource\x20levels\x20are\x20readable\x20via\x20the\x20API.\n\x20\
    \x20\x20*\x20The\x20instance's\x20state\x20becomes\x20`READY`.\n\n\x20Th\
    e\x20returned\x20[long-running\x20operation][google.longrunning.Operatio\
    n]\x20will\n\x20have\x20a\x20name\x20of\x20the\x20format\x20`<instance_n\
    ame>/operations/<operation_id>`\x20and\n\x20can\x20be\x20used\x20to\x20t\
    rack\x20creation\x20of\x20the\x20instance.\x20\x20The\n\x20[metadata][go\
    ogle.longrunning.Operation.metadata]\x20field\x20type\x20is\n\x20[Create\
    InstanceMetadata][google.spanner.admin.instance.v1.CreateInstanceMetadat\
    a].\n\x20The\x20[response][google.longrunning.Operation.response]\x20fie\
    ld\x20type\x20is\n\x20[Instance][google.spanner.admin.instance.v1.Instan\
    ce],\x20if\x20successful.\n\n\r\n\x05\x06\0\x02\x08\x01\x12\x04\x97\x02\
    \x06\x14\n\r\n\x05\x06\0\x02\x08\x02\x12\x04\x97\x02\x15*\n\r\n\x05\x06\
    \0\x02\x08\x03\x12\x04\x98\x02\x0f+\n\x0f\n\x05\x06\0\x02\x08\x04\x12\
    \x06\x99\x02\x04\x9c\x02\x06\n\x13\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\
    \x12\x06\x99\x02\x04\x9c\x02\x06\n\r\n\x05\x06\0\x02\x08\x04\x12\x04\x9d\
    \x02\x04I\n\x10\n\x08\x06\0\x02\x08\x04\x9b\x08\0\x12\x04\x9d\x02\x04I\n\
    \x0f\n\x05\x06\0\x02\x08\x04\x12\x06\x9e\x02\x04\xa1\x02\x06\n\x11\n\x07\
    \x06\0\x02\x08\x04\x99\x08\x12\x06\x9e\x02\x04\xa1\x02\x06\n\xbc\x0f\n\
    \x04\x06\0\x02\t\x12\x06\xcc\x02\x02\xd7\x02\x03\x1a\xab\x0f\x20Updates\
    \x20an\x20instance,\x20and\x20begins\x20allocating\x20or\x20releasing\
    \x20resources\n\x20as\x20requested.\x20The\x20returned\x20[long-running\
    \n\x20operation][google.longrunning.Operation]\x20can\x20be\x20used\x20t\
    o\x20track\x20the\n\x20progress\x20of\x20updating\x20the\x20instance.\
    \x20If\x20the\x20named\x20instance\x20does\x20not\n\x20exist,\x20returns\
    \x20`NOT_FOUND`.\n\n\x20Immediately\x20upon\x20completion\x20of\x20this\
    \x20request:\n\n\x20\x20\x20*\x20For\x20resource\x20types\x20for\x20whic\
    h\x20a\x20decrease\x20in\x20the\x20instance's\x20allocation\n\x20\x20\
    \x20\x20\x20has\x20been\x20requested,\x20billing\x20is\x20based\x20on\
    \x20the\x20newly-requested\x20level.\n\n\x20Until\x20completion\x20of\
    \x20the\x20returned\x20operation:\n\n\x20\x20\x20*\x20Cancelling\x20the\
    \x20operation\x20sets\x20its\x20metadata's\n\x20\x20\x20\x20\x20[cancel_\
    time][google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_tim\
    e],\n\x20\x20\x20\x20\x20and\x20begins\x20restoring\x20resources\x20to\
    \x20their\x20pre-request\x20values.\x20The\n\x20\x20\x20\x20\x20operatio\
    n\x20is\x20guaranteed\x20to\x20succeed\x20at\x20undoing\x20all\x20resour\
    ce\x20changes,\n\x20\x20\x20\x20\x20after\x20which\x20point\x20it\x20ter\
    minates\x20with\x20a\x20`CANCELLED`\x20status.\n\x20\x20\x20*\x20All\x20\
    other\x20attempts\x20to\x20modify\x20the\x20instance\x20are\x20rejected.\
    \n\x20\x20\x20*\x20Reading\x20the\x20instance\x20via\x20the\x20API\x20co\
    ntinues\x20to\x20give\x20the\x20pre-request\n\x20\x20\x20\x20\x20resourc\
    e\x20levels.\n\n\x20Upon\x20completion\x20of\x20the\x20returned\x20opera\
    tion:\n\n\x20\x20\x20*\x20Billing\x20begins\x20for\x20all\x20successfull\
    y-allocated\x20resources\x20(some\x20types\n\x20\x20\x20\x20\x20may\x20h\
    ave\x20lower\x20than\x20the\x20requested\x20levels).\n\x20\x20\x20*\x20A\
    ll\x20newly-reserved\x20resources\x20are\x20available\x20for\x20serving\
    \x20the\x20instance's\n\x20\x20\x20\x20\x20tables.\n\x20\x20\x20*\x20The\
    \x20instance's\x20new\x20resource\x20levels\x20are\x20readable\x20via\
    \x20the\x20API.\n\n\x20The\x20returned\x20[long-running\x20operation][go\
    ogle.longrunning.Operation]\x20will\n\x20have\x20a\x20name\x20of\x20the\
    \x20format\x20`<instance_name>/operations/<operation_id>`\x20and\n\x20ca\
    n\x20be\x20used\x20to\x20track\x20the\x20instance\x20modification.\x20\
    \x20The\n\x20[metadata][google.longrunning.Operation.metadata]\x20field\
    \x20type\x20is\n\x20[UpdateInstanceMetadata][google.spanner.admin.instan\
    ce.v1.UpdateInstanceMetadata].\n\x20The\x20[response][google.longrunning\
    .Operation.response]\x20field\x20type\x20is\n\x20[Instance][google.spann\
    er.admin.instance.v1.Instance],\x20if\x20successful.\n\n\x20Authorizatio\
    n\x20requires\x20`spanner.instances.update`\x20permission\x20on\n\x20the\
    \x20resource\x20[name][google.spanner.admin.instance.v1.Instance.name].\
    \n\n\r\n\x05\x06\0\x02\t\x01\x12\x04\xcc\x02\x06\x14\n\r\n\x05\x06\0\x02\
    \t\x02\x12\x04\xcc\x02\x15*\n\r\n\x05\x06\0\x02\t\x03\x12\x04\xcd\x02\
    \x0f+\n\x0f\n\x05\x06\0\x02\t\x04\x12\x06\xce\x02\x04\xd1\x02\x06\n\x13\
    \n\t\x06\0\x02\t\x04\xb0\xca\xbc\"\x12\x06\xce\x02\x04\xd1\x02\x06\n\r\n\
    \x05\x06\0\x02\t\x04\x12\x04\xd2\x02\x04A\n\x10\n\x08\x06\0\x02\t\x04\
    \x9b\x08\0\x12\x04\xd2\x02\x04A\n\x0f\n\x05\x06\0\x02\t\x04\x12\x06\xd3\
    \x02\x04\xd6\x02\x06\n\x11\n\x07\x06\0\x02\t\x04\x99\x08\x12\x06\xd3\x02\
    \x04\xd6\x02\x06\n\xc8\x02\n\x04\x06\0\x02\n\x12\x06\xe4\x02\x02\xe9\x02\
    \x03\x1a\xb7\x02\x20Deletes\x20an\x20instance.\n\n\x20Immediately\x20upo\
    n\x20completion\x20of\x20the\x20request:\n\n\x20\x20\x20*\x20Billing\x20\
    ceases\x20for\x20all\x20of\x20the\x20instance's\x20reserved\x20resources\
    .\n\n\x20Soon\x20afterward:\n\n\x20\x20\x20*\x20The\x20instance\x20and\
    \x20*all\x20of\x20its\x20databases*\x20immediately\x20and\n\x20\x20\x20\
    \x20\x20irrevocably\x20disappear\x20from\x20the\x20API.\x20All\x20data\
    \x20in\x20the\x20databases\n\x20\x20\x20\x20\x20is\x20permanently\x20del\
    eted.\n\n\r\n\x05\x06\0\x02\n\x01\x12\x04\xe4\x02\x06\x14\n\r\n\x05\x06\
    \0\x02\n\x02\x12\x04\xe4\x02\x15*\n\r\n\x05\x06\0\x02\n\x03\x12\x04\xe4\
    \x025J\n\x0f\n\x05\x06\0\x02\n\x04\x12\x06\xe5\x02\x04\xe7\x02\x06\n\x13\
    \n\t\x06\0\x02\n\x04\xb0\xca\xbc\"\x12\x06\xe5\x02\x04\xe7\x02\x06\n\r\n\
    \x05\x06\0\x02\n\x04\x12\x04\xe8\x02\x042\n\x10\n\x08\x06\0\x02\n\x04\
    \x9b\x08\0\x12\x04\xe8\x02\x042\n\xdf\x01\n\x04\x06\0\x02\x0b\x12\x06\
    \xf0\x02\x02\xf7\x02\x03\x1a\xce\x01\x20Sets\x20the\x20access\x20control\
    \x20policy\x20on\x20an\x20instance\x20resource.\x20Replaces\x20any\n\x20\
    existing\x20policy.\n\n\x20Authorization\x20requires\x20`spanner.instanc\
    es.setIamPolicy`\x20on\n\x20[resource][google.iam.v1.SetIamPolicyRequest\
    .resource].\n\n\r\n\x05\x06\0\x02\x0b\x01\x12\x04\xf0\x02\x06\x12\n\r\n\
    \x05\x06\0\x02\x0b\x02\x12\x04\xf0\x02\x134\n\r\n\x05\x06\0\x02\x0b\x03\
    \x12\x04\xf1\x02\x0f#\n\x0f\n\x05\x06\0\x02\x0b\x04\x12\x06\xf2\x02\x04\
    \xf5\x02\x06\n\x13\n\t\x06\0\x02\x0b\x04\xb0\xca\xbc\"\x12\x06\xf2\x02\
    \x04\xf5\x02\x06\n\r\n\x05\x06\0\x02\x0b\x04\x12\x04\xf6\x02\x04=\n\x10\
    \n\x08\x06\0\x02\x0b\x04\x9b\x08\0\x12\x04\xf6\x02\x04=\n\x90\x02\n\x04\
    \x06\0\x02\x0c\x12\x06\xfe\x02\x02\x85\x03\x03\x1a\xff\x01\x20Gets\x20th\
    e\x20access\x20control\x20policy\x20for\x20an\x20instance\x20resource.\
    \x20Returns\x20an\x20empty\n\x20policy\x20if\x20an\x20instance\x20exists\
    \x20but\x20does\x20not\x20have\x20a\x20policy\x20set.\n\n\x20Authorizati\
    on\x20requires\x20`spanner.instances.getIamPolicy`\x20on\n\x20[resource]\
    [google.iam.v1.GetIamPolicyRequest.resource].\n\n\r\n\x05\x06\0\x02\x0c\
    \x01\x12\x04\xfe\x02\x06\x12\n\r\n\x05\x06\0\x02\x0c\x02\x12\x04\xfe\x02\
    \x134\n\r\n\x05\x06\0\x02\x0c\x03\x12\x04\xff\x02\x0f#\n\x0f\n\x05\x06\0\
    \x02\x0c\x04\x12\x06\x80\x03\x04\x83\x03\x06\n\x13\n\t\x06\0\x02\x0c\x04\
    \xb0\xca\xbc\"\x12\x06\x80\x03\x04\x83\x03\x06\n\r\n\x05\x06\0\x02\x0c\
    \x04\x12\x04\x84\x03\x046\n\x10\n\x08\x06\0\x02\x0c\x04\x9b\x08\0\x12\
    \x04\x84\x03\x046\n\xd5\x02\n\x04\x06\0\x02\r\x12\x06\x8d\x03\x02\x94\
    \x03\x03\x1a\xc4\x02\x20Returns\x20permissions\x20that\x20the\x20caller\
    \x20has\x20on\x20the\x20specified\x20instance\x20resource.\n\n\x20Attemp\
    ting\x20this\x20RPC\x20on\x20a\x20non-existent\x20Cloud\x20Spanner\x20in\
    stance\x20resource\x20will\n\x20result\x20in\x20a\x20NOT_FOUND\x20error\
    \x20if\x20the\x20user\x20has\x20`spanner.instances.list`\n\x20permission\
    \x20on\x20the\x20containing\x20Google\x20Cloud\x20Project.\x20Otherwise\
    \x20returns\x20an\n\x20empty\x20set\x20of\x20permissions.\n\n\r\n\x05\
    \x06\0\x02\r\x01\x12\x04\x8d\x03\x06\x18\n\r\n\x05\x06\0\x02\r\x02\x12\
    \x04\x8d\x03\x19@\n\r\n\x05\x06\0\x02\r\x03\x12\x04\x8e\x03\x0f7\n\x0f\n\
    \x05\x06\0\x02\r\x04\x12\x06\x8f\x03\x04\x92\x03\x06\n\x13\n\t\x06\0\x02\
    \r\x04\xb0\xca\xbc\"\x12\x06\x8f\x03\x04\x92\x03\x06\n\r\n\x05\x06\0\x02\
    \r\x04\x12\x04\x93\x03\x04B\n\x10\n\x08\x06\0\x02\r\x04\x9b\x08\0\x12\
    \x04\x93\x03\x04B\n\x0c\n\x02\x04\0\x12\x06\x97\x03\0\xc5\x03\x01\n\x0b\
    \n\x03\x04\0\x01\x12\x04\x97\x03\x08\x13\n\xad\x01\n\x04\x04\0\x04\0\x12\
    \x06\x9b\x03\x02\xb8\x03\x03\x1a\x9c\x01\x20Indicates\x20the\x20type\x20\
    of\x20replica.\x20\x20See\x20the\x20[replica\x20types\n\x20documentation\
    ](https://cloud.google.com/spanner/docs/replication#replica_types)\n\x20\
    for\x20more\x20details.\n\n\r\n\x05\x04\0\x04\0\x01\x12\x04\x9b\x03\x07\
    \x12\n\x20\n\x06\x04\0\x04\0\x02\0\x12\x04\x9d\x03\x04\x19\x1a\x10\x20No\
    t\x20specified.\n\n\x0f\n\x07\x04\0\x04\0\x02\0\x01\x12\x04\x9d\x03\x04\
    \x14\n\x0f\n\x07\x04\0\x04\0\x02\0\x02\x12\x04\x9d\x03\x17\x18\n\xfe\x01\
    \n\x06\x04\0\x04\0\x02\x01\x12\x04\xa6\x03\x04\x13\x1a\xed\x01\x20Read-w\
    rite\x20replicas\x20support\x20both\x20reads\x20and\x20writes.\x20These\
    \x20replicas:\n\n\x20*\x20Maintain\x20a\x20full\x20copy\x20of\x20your\
    \x20data.\n\x20*\x20Serve\x20reads.\n\x20*\x20Can\x20vote\x20whether\x20\
    to\x20commit\x20a\x20write.\n\x20*\x20Participate\x20in\x20leadership\
    \x20election.\n\x20*\x20Are\x20eligible\x20to\x20become\x20a\x20leader.\
    \n\n\x0f\n\x07\x04\0\x04\0\x02\x01\x01\x12\x04\xa6\x03\x04\x0e\n\x0f\n\
    \x07\x04\0\x04\0\x02\x01\x02\x12\x04\xa6\x03\x11\x12\n\xeb\x01\n\x06\x04\
    \0\x04\0\x02\x02\x12\x04\xae\x03\x04\x12\x1a\xda\x01\x20Read-only\x20rep\
    licas\x20only\x20support\x20reads\x20(not\x20writes).\x20Read-only\x20re\
    plicas:\n\n\x20*\x20Maintain\x20a\x20full\x20copy\x20of\x20your\x20data.\
    \n\x20*\x20Serve\x20reads.\n\x20*\x20Do\x20not\x20participate\x20in\x20v\
    oting\x20to\x20commit\x20writes.\n\x20*\x20Are\x20not\x20eligible\x20to\
    \x20become\x20a\x20leader.\n\n\x0f\n\x07\x04\0\x04\0\x02\x02\x01\x12\x04\
    \xae\x03\x04\r\n\x0f\n\x07\x04\0\x04\0\x02\x02\x02\x12\x04\xae\x03\x10\
    \x11\n\xa4\x02\n\x06\x04\0\x04\0\x02\x03\x12\x04\xb7\x03\x04\x10\x1a\x93\
    \x02\x20Witness\x20replicas\x20don't\x20support\x20reads\x20but\x20do\
    \x20participate\x20in\x20voting\x20to\n\x20commit\x20writes.\x20Witness\
    \x20replicas:\n\n\x20*\x20Do\x20not\x20maintain\x20a\x20full\x20copy\x20\
    of\x20data.\n\x20*\x20Do\x20not\x20serve\x20reads.\n\x20*\x20Vote\x20whe\
    ther\x20to\x20commit\x20writes.\n\x20*\x20Participate\x20in\x20leader\
    \x20election\x20but\x20are\x20not\x20eligible\x20to\x20become\x20leader.\
    \n\n\x0f\n\x07\x04\0\x04\0\x02\x03\x01\x12\x04\xb7\x03\x04\x0b\n\x0f\n\
    \x07\x04\0\x04\0\x02\x03\x02\x12\x04\xb7\x03\x0e\x0f\nJ\n\x04\x04\0\x02\
    \0\x12\x04\xbb\x03\x02\x16\x1a<\x20The\x20location\x20of\x20the\x20servi\
    ng\x20resources,\x20e.g.\x20\"us-central1\".\n\n\r\n\x05\x04\0\x02\0\x05\
    \x12\x04\xbb\x03\x02\x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\xbb\x03\t\x11\
    \n\r\n\x05\x04\0\x02\0\x03\x12\x04\xbb\x03\x14\x15\n$\n\x04\x04\0\x02\
    \x01\x12\x04\xbe\x03\x02\x17\x1a\x16\x20The\x20type\x20of\x20replica.\n\
    \n\r\n\x05\x04\0\x02\x01\x06\x12\x04\xbe\x03\x02\r\n\r\n\x05\x04\0\x02\
    \x01\x01\x12\x04\xbe\x03\x0e\x12\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\xbe\
    \x03\x15\x16\n\xee\x01\n\x04\x04\0\x02\x02\x12\x04\xc4\x03\x02#\x1a\xdf\
    \x01\x20If\x20true,\x20this\x20location\x20is\x20designated\x20as\x20the\
    \x20default\x20leader\x20location\x20where\n\x20leader\x20replicas\x20ar\
    e\x20placed.\x20See\x20the\x20[region\x20types\n\x20documentation](https\
    ://cloud.google.com/spanner/docs/instances#region_types)\n\x20for\x20mor\
    e\x20details.\n\n\r\n\x05\x04\0\x02\x02\x05\x12\x04\xc4\x03\x02\x06\n\r\
    \n\x05\x04\0\x02\x02\x01\x12\x04\xc4\x03\x07\x1e\n\r\n\x05\x04\0\x02\x02\
    \x03\x12\x04\xc4\x03!\"\n\x97\x01\n\x02\x04\x01\x12\x06\xc9\x03\0\xb2\
    \x04\x01\x1a\x88\x01\x20A\x20possible\x20configuration\x20for\x20a\x20Cl\
    oud\x20Spanner\x20instance.\x20Configurations\n\x20define\x20the\x20geog\
    raphic\x20placement\x20of\x20nodes\x20and\x20their\x20replication.\n\n\
    \x0b\n\x03\x04\x01\x01\x12\x04\xc9\x03\x08\x16\n\r\n\x03\x04\x01\x07\x12\
    \x06\xca\x03\x02\xcd\x03\x04\n\x0f\n\x05\x04\x01\x07\x9d\x08\x12\x06\xca\
    \x03\x02\xcd\x03\x04\n1\n\x04\x04\x01\x04\0\x12\x06\xd0\x03\x02\xd9\x03\
    \x03\x1a!\x20The\x20type\x20of\x20this\x20configuration.\n\n\r\n\x05\x04\
    \x01\x04\0\x01\x12\x04\xd0\x03\x07\x0b\n\x1e\n\x06\x04\x01\x04\0\x02\0\
    \x12\x04\xd2\x03\x04\x19\x1a\x0e\x20Unspecified.\n\n\x0f\n\x07\x04\x01\
    \x04\0\x02\0\x01\x12\x04\xd2\x03\x04\x14\n\x0f\n\x07\x04\x01\x04\0\x02\0\
    \x02\x12\x04\xd2\x03\x17\x18\n/\n\x06\x04\x01\x04\0\x02\x01\x12\x04\xd5\
    \x03\x04\x17\x1a\x1f\x20Google\x20managed\x20configuration.\n\n\x0f\n\
    \x07\x04\x01\x04\0\x02\x01\x01\x12\x04\xd5\x03\x04\x12\n\x0f\n\x07\x04\
    \x01\x04\0\x02\x01\x02\x12\x04\xd5\x03\x15\x16\n-\n\x06\x04\x01\x04\0\
    \x02\x02\x12\x04\xd8\x03\x04\x15\x1a\x1d\x20User\x20managed\x20configura\
    tion.\n\n\x0f\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x04\xd8\x03\x04\x10\n\
    \x0f\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x04\xd8\x03\x13\x14\nE\n\x04\
    \x04\x01\x04\x01\x12\x06\xdc\x03\x02\xe6\x03\x03\x1a5\x20Indicates\x20th\
    e\x20current\x20state\x20of\x20the\x20instance\x20config.\n\n\r\n\x05\
    \x04\x01\x04\x01\x01\x12\x04\xdc\x03\x07\x0c\n\x20\n\x06\x04\x01\x04\x01\
    \x02\0\x12\x04\xde\x03\x04\x1a\x1a\x10\x20Not\x20specified.\n\n\x0f\n\
    \x07\x04\x01\x04\x01\x02\0\x01\x12\x04\xde\x03\x04\x15\n\x0f\n\x07\x04\
    \x01\x04\x01\x02\0\x02\x12\x04\xde\x03\x18\x19\n=\n\x06\x04\x01\x04\x01\
    \x02\x01\x12\x04\xe1\x03\x04\x11\x1a-\x20The\x20instance\x20config\x20is\
    \x20still\x20being\x20created.\n\n\x0f\n\x07\x04\x01\x04\x01\x02\x01\x01\
    \x12\x04\xe1\x03\x04\x0c\n\x0f\n\x07\x04\x01\x04\x01\x02\x01\x02\x12\x04\
    \xe1\x03\x0f\x10\na\n\x06\x04\x01\x04\x01\x02\x02\x12\x04\xe5\x03\x04\
    \x0e\x1aQ\x20The\x20instance\x20config\x20is\x20fully\x20created\x20and\
    \x20ready\x20to\x20be\x20used\x20to\x20create\n\x20instances.\n\n\x0f\n\
    \x07\x04\x01\x04\x01\x02\x02\x01\x12\x04\xe5\x03\x04\t\n\x0f\n\x07\x04\
    \x01\x04\x01\x02\x02\x02\x12\x04\xe5\x03\x0c\r\n\x94\x01\n\x04\x04\x01\
    \x02\0\x12\x04\xeb\x03\x02\x12\x1a\x85\x01\x20A\x20unique\x20identifier\
    \x20for\x20the\x20instance\x20configuration.\x20\x20Values\n\x20are\x20o\
    f\x20the\x20form\n\x20`projects/<project>/instanceConfigs/[a-z][-a-z0-9]\
    *`.\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xeb\x03\x02\x08\n\r\n\x05\x04\
    \x01\x02\0\x01\x12\x04\xeb\x03\t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\
    \xeb\x03\x10\x11\nM\n\x04\x04\x01\x02\x01\x12\x04\xee\x03\x02\x1a\x1a?\
    \x20The\x20name\x20of\x20this\x20instance\x20configuration\x20as\x20it\
    \x20appears\x20in\x20UIs.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xee\
    \x03\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xee\x03\t\x15\n\r\n\
    \x05\x04\x01\x02\x01\x03\x12\x04\xee\x03\x18\x19\ne\n\x04\x04\x01\x02\
    \x02\x12\x04\xf2\x03\x02C\x1aW\x20Output\x20only.\x20Whether\x20this\x20\
    instance\x20config\x20is\x20a\x20Google\x20or\x20User\x20Managed\n\x20Co\
    nfiguration.\n\n\r\n\x05\x04\x01\x02\x02\x06\x12\x04\xf2\x03\x02\x06\n\r\
    \n\x05\x04\x01\x02\x02\x01\x12\x04\xf2\x03\x07\x12\n\r\n\x05\x04\x01\x02\
    \x02\x03\x12\x04\xf2\x03\x15\x16\n\r\n\x05\x04\x01\x02\x02\x08\x12\x04\
    \xf2\x03\x17B\n\x10\n\x08\x04\x01\x02\x02\x08\x9c\x08\0\x12\x04\xf2\x03\
    \x18A\ns\n\x04\x04\x01\x02\x03\x12\x04\xf6\x03\x02$\x1ae\x20The\x20geogr\
    aphic\x20placement\x20of\x20nodes\x20in\x20this\x20instance\x20configura\
    tion\x20and\x20their\n\x20replication\x20properties.\n\n\r\n\x05\x04\x01\
    \x02\x03\x04\x12\x04\xf6\x03\x02\n\n\r\n\x05\x04\x01\x02\x03\x06\x12\x04\
    \xf6\x03\x0b\x16\n\r\n\x05\x04\x01\x02\x03\x01\x12\x04\xf6\x03\x17\x1f\n\
    \r\n\x05\x04\x01\x02\x03\x03\x12\x04\xf6\x03\"#\n\x9d\x01\n\x04\x04\x01\
    \x02\x04\x12\x06\xfa\x03\x02\xfb\x032\x1a\x8c\x01\x20Output\x20only.\x20\
    The\x20available\x20optional\x20replicas\x20to\x20choose\x20from\x20for\
    \x20user\n\x20managed\x20configurations.\x20Populated\x20for\x20Google\
    \x20managed\x20configurations.\n\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04\
    \xfa\x03\x02\n\n\r\n\x05\x04\x01\x02\x04\x06\x12\x04\xfa\x03\x0b\x16\n\r\
    \n\x05\x04\x01\x02\x04\x01\x12\x04\xfa\x03\x17(\n\r\n\x05\x04\x01\x02\
    \x04\x03\x12\x04\xfa\x03+,\n\r\n\x05\x04\x01\x02\x04\x08\x12\x04\xfb\x03\
    \x061\n\x10\n\x08\x04\x01\x02\x04\x08\x9c\x08\0\x12\x04\xfb\x03\x070\n\
    \xa7\x02\n\x04\x04\x01\x02\x05\x12\x06\x81\x04\x02\x83\x04\x05\x1a\x96\
    \x02\x20Base\x20configuration\x20name,\x20e.g.\x20projects/<project_name\
    >/instanceConfigs/nam3,\n\x20based\x20on\x20which\x20this\x20configurati\
    on\x20is\x20created.\x20Only\x20set\x20for\x20user\x20managed\n\x20confi\
    gurations.\x20`base_config`\x20must\x20refer\x20to\x20a\x20configuration\
    \x20of\x20type\n\x20GOOGLE_MANAGED\x20in\x20the\x20same\x20project\x20as\
    \x20this\x20configuration.\n\n\r\n\x05\x04\x01\x02\x05\x05\x12\x04\x81\
    \x04\x02\x08\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\x81\x04\t\x14\n\r\n\
    \x05\x04\x01\x02\x05\x03\x12\x04\x81\x04\x17\x18\n\x0f\n\x05\x04\x01\x02\
    \x05\x08\x12\x06\x81\x04\x19\x83\x04\x04\n\x11\n\x07\x04\x01\x02\x05\x08\
    \x9f\x08\x12\x06\x81\x04\x1a\x83\x04\x03\n\xd5\t\n\x04\x04\x01\x02\x06\
    \x12\x04\x9a\x04\x02!\x1a\xc6\t\x20Cloud\x20Labels\x20are\x20a\x20flexib\
    le\x20and\x20lightweight\x20mechanism\x20for\x20organizing\x20cloud\n\
    \x20resources\x20into\x20groups\x20that\x20reflect\x20a\x20customer's\
    \x20organizational\x20needs\x20and\n\x20deployment\x20strategies.\x20Clo\
    ud\x20Labels\x20can\x20be\x20used\x20to\x20filter\x20collections\x20of\n\
    \x20resources.\x20They\x20can\x20be\x20used\x20to\x20control\x20how\x20r\
    esource\x20metrics\x20are\x20aggregated.\n\x20And\x20they\x20can\x20be\
    \x20used\x20as\x20arguments\x20to\x20policy\x20management\x20rules\x20(e\
    .g.\x20route,\n\x20firewall,\x20load\x20balancing,\x20etc.).\n\n\x20\x20\
    *\x20Label\x20keys\x20must\x20be\x20between\x201\x20and\x2063\x20charact\
    ers\x20long\x20and\x20must\x20conform\x20to\n\x20\x20\x20\x20the\x20foll\
    owing\x20regular\x20expression:\x20`[a-z][a-z0-9_-]{0,62}`.\n\x20\x20*\
    \x20Label\x20values\x20must\x20be\x20between\x200\x20and\x2063\x20charac\
    ters\x20long\x20and\x20must\x20conform\n\x20\x20\x20\x20to\x20the\x20reg\
    ular\x20expression\x20`[a-z0-9_-]{0,63}`.\n\x20\x20*\x20No\x20more\x20th\
    an\x2064\x20labels\x20can\x20be\x20associated\x20with\x20a\x20given\x20r\
    esource.\n\n\x20See\x20https://goo.gl/xmQnxf\x20for\x20more\x20informati\
    on\x20on\x20and\x20examples\x20of\x20labels.\n\n\x20If\x20you\x20plan\
    \x20to\x20use\x20labels\x20in\x20your\x20own\x20code,\x20please\x20note\
    \x20that\x20additional\n\x20characters\x20may\x20be\x20allowed\x20in\x20\
    the\x20future.\x20Therefore,\x20you\x20are\x20advised\x20to\x20use\n\x20\
    an\x20internal\x20label\x20representation,\x20such\x20as\x20JSON,\x20whi\
    ch\x20doesn't\x20rely\x20upon\n\x20specific\x20characters\x20being\x20di\
    sallowed.\x20\x20For\x20example,\x20representing\x20labels\n\x20as\x20th\
    e\x20string:\x20\x20name\x20+\x20\"_\"\x20+\x20value\x20\x20would\x20pro\
    ve\x20problematic\x20if\x20we\x20were\x20to\n\x20allow\x20\"_\"\x20in\
    \x20a\x20future\x20release.\n\n\r\n\x05\x04\x01\x02\x06\x06\x12\x04\x9a\
    \x04\x02\x15\n\r\n\x05\x04\x01\x02\x06\x01\x12\x04\x9a\x04\x16\x1c\n\r\n\
    \x05\x04\x01\x02\x06\x03\x12\x04\x9a\x04\x1f\x20\n\xb1\x05\n\x04\x04\x01\
    \x02\x07\x12\x04\xa6\x04\x02\x12\x1a\xa2\x05\x20etag\x20is\x20used\x20fo\
    r\x20optimistic\x20concurrency\x20control\x20as\x20a\x20way\n\x20to\x20h\
    elp\x20prevent\x20simultaneous\x20updates\x20of\x20a\x20instance\x20conf\
    ig\x20from\x20overwriting\n\x20each\x20other.\x20It\x20is\x20strongly\
    \x20suggested\x20that\x20systems\x20make\x20use\x20of\x20the\x20etag\x20\
    in\n\x20the\x20read-modify-write\x20cycle\x20to\x20perform\x20instance\
    \x20config\x20updates\x20in\x20order\x20to\n\x20avoid\x20race\x20conditi\
    ons:\x20An\x20etag\x20is\x20returned\x20in\x20the\x20response\x20which\
    \x20contains\n\x20instance\x20configs,\x20and\x20systems\x20are\x20expec\
    ted\x20to\x20put\x20that\x20etag\x20in\x20the\x20request\n\x20to\x20upda\
    te\x20instance\x20config\x20to\x20ensure\x20that\x20their\x20change\x20w\
    ill\x20be\x20applied\x20to\n\x20the\x20same\x20version\x20of\x20the\x20i\
    nstance\x20config.\n\x20If\x20no\x20etag\x20is\x20provided\x20in\x20the\
    \x20call\x20to\x20update\x20instance\x20config,\x20then\x20the\n\x20exis\
    ting\x20instance\x20config\x20is\x20overwritten\x20blindly.\n\n\r\n\x05\
    \x04\x01\x02\x07\x05\x12\x04\xa6\x04\x02\x08\n\r\n\x05\x04\x01\x02\x07\
    \x01\x12\x04\xa6\x04\t\r\n\r\n\x05\x04\x01\x02\x07\x03\x12\x04\xa6\x04\
    \x10\x11\n\x86\x01\n\x04\x04\x01\x02\x08\x12\x04\xaa\x04\x02%\x1ax\x20Al\
    lowed\x20values\x20of\x20the\x20\"default_leader\"\x20schema\x20option\
    \x20for\x20databases\x20in\n\x20instances\x20that\x20use\x20this\x20inst\
    ance\x20configuration.\n\n\r\n\x05\x04\x01\x02\x08\x04\x12\x04\xaa\x04\
    \x02\n\n\r\n\x05\x04\x01\x02\x08\x05\x12\x04\xaa\x04\x0b\x11\n\r\n\x05\
    \x04\x01\x02\x08\x01\x12\x04\xaa\x04\x12\x20\n\r\n\x05\x04\x01\x02\x08\
    \x03\x12\x04\xaa\x04#$\n\x9b\x01\n\x04\x04\x01\x02\t\x12\x04\xae\x04\x02\
    D\x1a\x8c\x01\x20Output\x20only.\x20If\x20true,\x20the\x20instance\x20co\
    nfig\x20is\x20being\x20created\x20or\x20updated.\x20If\n\x20false,\x20th\
    ere\x20are\x20no\x20ongoing\x20operations\x20for\x20the\x20instance\x20c\
    onfig.\n\n\r\n\x05\x04\x01\x02\t\x05\x12\x04\xae\x04\x02\x06\n\r\n\x05\
    \x04\x01\x02\t\x01\x12\x04\xae\x04\x07\x12\n\r\n\x05\x04\x01\x02\t\x03\
    \x12\x04\xae\x04\x15\x17\n\r\n\x05\x04\x01\x02\t\x08\x12\x04\xae\x04\x18\
    C\n\x10\n\x08\x04\x01\x02\t\x08\x9c\x08\0\x12\x04\xae\x04\x19B\n?\n\x04\
    \x04\x01\x02\n\x12\x04\xb1\x04\x02?\x1a1\x20Output\x20only.\x20The\x20cu\
    rrent\x20instance\x20config\x20state.\n\n\r\n\x05\x04\x01\x02\n\x06\x12\
    \x04\xb1\x04\x02\x07\n\r\n\x05\x04\x01\x02\n\x01\x12\x04\xb1\x04\x08\r\n\
    \r\n\x05\x04\x01\x02\n\x03\x12\x04\xb1\x04\x10\x12\n\r\n\x05\x04\x01\x02\
    \n\x08\x12\x04\xb1\x04\x13>\n\x10\n\x08\x04\x01\x02\n\x08\x9c\x08\0\x12\
    \x04\xb1\x04\x14=\n\\\n\x02\x04\x02\x12\x06\xb5\x04\0\x9a\x05\x01\x1aN\
    \x20An\x20isolated\x20set\x20of\x20Cloud\x20Spanner\x20resources\x20on\
    \x20which\x20databases\x20can\x20be\x20hosted.\n\n\x0b\n\x03\x04\x02\x01\
    \x12\x04\xb5\x04\x08\x10\n\r\n\x03\x04\x02\x07\x12\x06\xb6\x04\x02\xb9\
    \x04\x04\n\x0f\n\x05\x04\x02\x07\x9d\x08\x12\x06\xb6\x04\x02\xb9\x04\x04\
    \n>\n\x04\x04\x02\x04\0\x12\x06\xbc\x04\x02\xc8\x04\x03\x1a.\x20Indicate\
    s\x20the\x20current\x20state\x20of\x20the\x20instance.\n\n\r\n\x05\x04\
    \x02\x04\0\x01\x12\x04\xbc\x04\x07\x0c\n\x20\n\x06\x04\x02\x04\0\x02\0\
    \x12\x04\xbe\x04\x04\x1a\x1a\x10\x20Not\x20specified.\n\n\x0f\n\x07\x04\
    \x02\x04\0\x02\0\x01\x12\x04\xbe\x04\x04\x15\n\x0f\n\x07\x04\x02\x04\0\
    \x02\0\x02\x12\x04\xbe\x04\x18\x19\n\x94\x01\n\x06\x04\x02\x04\0\x02\x01\
    \x12\x04\xc3\x04\x04\x11\x1a\x83\x01\x20The\x20instance\x20is\x20still\
    \x20being\x20created.\x20Resources\x20may\x20not\x20be\n\x20available\
    \x20yet,\x20and\x20operations\x20such\x20as\x20database\x20creation\x20m\
    ay\x20not\n\x20work.\n\n\x0f\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x04\xc3\
    \x04\x04\x0c\n\x0f\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x04\xc3\x04\x0f\
    \x10\na\n\x06\x04\x02\x04\0\x02\x02\x12\x04\xc7\x04\x04\x0e\x1aQ\x20The\
    \x20instance\x20is\x20fully\x20created\x20and\x20ready\x20to\x20do\x20wo\
    rk\x20such\x20as\n\x20creating\x20databases.\n\n\x0f\n\x07\x04\x02\x04\0\
    \x02\x02\x01\x12\x04\xc7\x04\x04\t\n\x0f\n\x07\x04\x02\x04\0\x02\x02\x02\
    \x12\x04\xc7\x04\x0c\r\n\x96\x02\n\x04\x04\x02\x02\0\x12\x04\xce\x04\x02\
    ;\x1a\x87\x02\x20Required.\x20A\x20unique\x20identifier\x20for\x20the\
    \x20instance,\x20which\x20cannot\x20be\x20changed\n\x20after\x20the\x20i\
    nstance\x20is\x20created.\x20Values\x20are\x20of\x20the\x20form\n\x20`pr\
    ojects/<project>/instances/[a-z][-a-z0-9]*[a-z0-9]`.\x20The\x20final\n\
    \x20segment\x20of\x20the\x20name\x20must\x20be\x20between\x202\x20and\
    \x2064\x20characters\x20in\x20length.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\
    \x04\xce\x04\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xce\x04\t\r\n\r\
    \n\x05\x04\x02\x02\0\x03\x12\x04\xce\x04\x10\x11\n\r\n\x05\x04\x02\x02\0\
    \x08\x12\x04\xce\x04\x12:\n\x10\n\x08\x04\x02\x02\0\x08\x9c\x08\0\x12\
    \x04\xce\x04\x139\n\xc0\x02\n\x04\x04\x02\x02\x01\x12\x06\xd4\x04\x02\
    \xd9\x04\x04\x1a\xaf\x02\x20Required.\x20The\x20name\x20of\x20the\x20ins\
    tance's\x20configuration.\x20Values\x20are\x20of\x20the\x20form\n\x20`pr\
    ojects/<project>/instanceConfigs/<configuration>`.\x20See\n\x20also\x20[\
    InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig]\x20and\
    \n\x20[ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdm\
    in.ListInstanceConfigs].\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xd4\x04\
    \x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xd4\x04\t\x0f\n\r\n\x05\
    \x04\x02\x02\x01\x03\x12\x04\xd4\x04\x12\x13\n\x0f\n\x05\x04\x02\x02\x01\
    \x08\x12\x06\xd4\x04\x14\xd9\x04\x03\n\x10\n\x08\x04\x02\x02\x01\x08\x9c\
    \x08\0\x12\x04\xd5\x04\x04*\n\x11\n\x07\x04\x02\x02\x01\x08\x9f\x08\x12\
    \x06\xd6\x04\x04\xd8\x04\x05\n\x9e\x01\n\x04\x04\x02\x02\x02\x12\x04\xdd\
    \x04\x02C\x1a\x8f\x01\x20Required.\x20The\x20descriptive\x20name\x20for\
    \x20this\x20instance\x20as\x20it\x20appears\x20in\x20UIs.\n\x20Must\x20b\
    e\x20unique\x20per\x20project\x20and\x20between\x204\x20and\x2030\x20cha\
    racters\x20in\x20length.\n\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\xdd\x04\
    \x02\x08\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\xdd\x04\t\x15\n\r\n\x05\
    \x04\x02\x02\x02\x03\x12\x04\xdd\x04\x18\x19\n\r\n\x05\x04\x02\x02\x02\
    \x08\x12\x04\xdd\x04\x1aB\n\x10\n\x08\x04\x02\x02\x02\x08\x9c\x08\0\x12\
    \x04\xdd\x04\x1bA\n\xf8\x02\n\x04\x04\x02\x02\x03\x12\x04\xe7\x04\x02\
    \x17\x1a\xe9\x02\x20The\x20number\x20of\x20nodes\x20allocated\x20to\x20t\
    his\x20instance.\x20At\x20most\x20one\x20of\x20either\n\x20node_count\
    \x20or\x20processing_units\x20should\x20be\x20present\x20in\x20the\x20me\
    ssage.\x20This\n\x20may\x20be\x20zero\x20in\x20API\x20responses\x20for\
    \x20instances\x20that\x20are\x20not\x20yet\x20in\x20state\n\x20`READY`.\
    \n\n\x20See\x20[the\n\x20documentation](https://cloud.google.com/spanner\
    /docs/compute-capacity)\n\x20for\x20more\x20information\x20about\x20node\
    s\x20and\x20processing\x20units.\n\n\r\n\x05\x04\x02\x02\x03\x05\x12\x04\
    \xe7\x04\x02\x07\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\xe7\x04\x08\x12\n\
    \r\n\x05\x04\x02\x02\x03\x03\x12\x04\xe7\x04\x15\x16\n\xfb\x02\n\x04\x04\
    \x02\x02\x04\x12\x04\xf0\x04\x02\x1d\x1a\xec\x02\x20The\x20number\x20of\
    \x20processing\x20units\x20allocated\x20to\x20this\x20instance.\x20At\
    \x20most\x20one\x20of\n\x20processing_units\x20or\x20node_count\x20shoul\
    d\x20be\x20present\x20in\x20the\x20message.\x20This\x20may\n\x20be\x20ze\
    ro\x20in\x20API\x20responses\x20for\x20instances\x20that\x20are\x20not\
    \x20yet\x20in\x20state\x20`READY`.\n\n\x20See\x20[the\n\x20documentation\
    ](https://cloud.google.com/spanner/docs/compute-capacity)\n\x20for\x20mo\
    re\x20information\x20about\x20nodes\x20and\x20processing\x20units.\n\n\r\
    \n\x05\x04\x02\x02\x04\x05\x12\x04\xf0\x04\x02\x07\n\r\n\x05\x04\x02\x02\
    \x04\x01\x12\x04\xf0\x04\x08\x18\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\
    \xf0\x04\x1b\x1c\n\xd2\x02\n\x04\x04\x02\x02\x05\x12\x04\xf7\x04\x02>\
    \x1a\xc3\x02\x20Output\x20only.\x20The\x20current\x20instance\x20state.\
    \x20For\n\x20[CreateInstance][google.spanner.admin.instance.v1.InstanceA\
    dmin.CreateInstance],\n\x20the\x20state\x20must\x20be\x20either\x20omitt\
    ed\x20or\x20set\x20to\x20`CREATING`.\x20For\n\x20[UpdateInstance][google\
    .spanner.admin.instance.v1.InstanceAdmin.UpdateInstance],\n\x20the\x20st\
    ate\x20must\x20be\x20either\x20omitted\x20or\x20set\x20to\x20`READY`.\n\
    \n\r\n\x05\x04\x02\x02\x05\x06\x12\x04\xf7\x04\x02\x07\n\r\n\x05\x04\x02\
    \x02\x05\x01\x12\x04\xf7\x04\x08\r\n\r\n\x05\x04\x02\x02\x05\x03\x12\x04\
    \xf7\x04\x10\x11\n\r\n\x05\x04\x02\x02\x05\x08\x12\x04\xf7\x04\x12=\n\
    \x10\n\x08\x04\x02\x02\x05\x08\x9c\x08\0\x12\x04\xf7\x04\x13<\n\xd1\t\n\
    \x04\x04\x02\x02\x06\x12\x04\x8e\x05\x02!\x1a\xc2\t\x20Cloud\x20Labels\
    \x20are\x20a\x20flexible\x20and\x20lightweight\x20mechanism\x20for\x20or\
    ganizing\x20cloud\n\x20resources\x20into\x20groups\x20that\x20reflect\
    \x20a\x20customer's\x20organizational\x20needs\x20and\n\x20deployment\
    \x20strategies.\x20Cloud\x20Labels\x20can\x20be\x20used\x20to\x20filter\
    \x20collections\x20of\n\x20resources.\x20They\x20can\x20be\x20used\x20to\
    \x20control\x20how\x20resource\x20metrics\x20are\x20aggregated.\n\x20And\
    \x20they\x20can\x20be\x20used\x20as\x20arguments\x20to\x20policy\x20mana\
    gement\x20rules\x20(e.g.\x20route,\n\x20firewall,\x20load\x20balancing,\
    \x20etc.).\n\n\x20\x20*\x20Label\x20keys\x20must\x20be\x20between\x201\
    \x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\x20to\n\
    \x20\x20\x20\x20the\x20following\x20regular\x20expression:\x20`[a-z][a-z\
    0-9_-]{0,62}`.\n\x20\x20*\x20Label\x20values\x20must\x20be\x20between\
    \x200\x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\n\x20\
    \x20\x20\x20to\x20the\x20regular\x20expression\x20`[a-z0-9_-]{0,63}`.\n\
    \x20\x20*\x20No\x20more\x20than\x2064\x20labels\x20can\x20be\x20associat\
    ed\x20with\x20a\x20given\x20resource.\n\n\x20See\x20https://goo.gl/xmQnx\
    f\x20for\x20more\x20information\x20on\x20and\x20examples\x20of\x20labels\
    .\n\n\x20If\x20you\x20plan\x20to\x20use\x20labels\x20in\x20your\x20own\
    \x20code,\x20please\x20note\x20that\x20additional\n\x20characters\x20may\
    \x20be\x20allowed\x20in\x20the\x20future.\x20And\x20so\x20you\x20are\x20\
    advised\x20to\x20use\x20an\n\x20internal\x20label\x20representation,\x20\
    such\x20as\x20JSON,\x20which\x20doesn't\x20rely\x20upon\n\x20specific\
    \x20characters\x20being\x20disallowed.\x20\x20For\x20example,\x20represe\
    nting\x20labels\n\x20as\x20the\x20string:\x20\x20name\x20+\x20\"_\"\x20+\
    \x20value\x20\x20would\x20prove\x20problematic\x20if\x20we\x20were\x20to\
    \n\x20allow\x20\"_\"\x20in\x20a\x20future\x20release.\n\n\r\n\x05\x04\
    \x02\x02\x06\x06\x12\x04\x8e\x05\x02\x15\n\r\n\x05\x04\x02\x02\x06\x01\
    \x12\x04\x8e\x05\x16\x1c\n\r\n\x05\x04\x02\x02\x06\x03\x12\x04\x8e\x05\
    \x1f\x20\n8\n\x04\x04\x02\x02\x07\x12\x04\x91\x05\x02$\x1a*\x20Deprecate\
    d.\x20This\x20field\x20is\x20not\x20populated.\n\n\r\n\x05\x04\x02\x02\
    \x07\x04\x12\x04\x91\x05\x02\n\n\r\n\x05\x04\x02\x02\x07\x05\x12\x04\x91\
    \x05\x0b\x11\n\r\n\x05\x04\x02\x02\x07\x01\x12\x04\x91\x05\x12\x1f\n\r\n\
    \x05\x04\x02\x02\x07\x03\x12\x04\x91\x05\"#\nJ\n\x04\x04\x02\x02\x08\x12\
    \x06\x94\x05\x02\x95\x052\x1a:\x20Output\x20only.\x20The\x20time\x20at\
    \x20which\x20the\x20instance\x20was\x20created.\n\n\r\n\x05\x04\x02\x02\
    \x08\x06\x12\x04\x94\x05\x02\x1b\n\r\n\x05\x04\x02\x02\x08\x01\x12\x04\
    \x94\x05\x1c'\n\r\n\x05\x04\x02\x02\x08\x03\x12\x04\x94\x05*,\n\r\n\x05\
    \x04\x02\x02\x08\x08\x12\x04\x95\x05\x061\n\x10\n\x08\x04\x02\x02\x08\
    \x08\x9c\x08\0\x12\x04\x95\x05\x070\nX\n\x04\x04\x02\x02\t\x12\x06\x98\
    \x05\x02\x99\x052\x1aH\x20Output\x20only.\x20The\x20time\x20at\x20which\
    \x20the\x20instance\x20was\x20most\x20recently\x20updated.\n\n\r\n\x05\
    \x04\x02\x02\t\x06\x12\x04\x98\x05\x02\x1b\n\r\n\x05\x04\x02\x02\t\x01\
    \x12\x04\x98\x05\x1c'\n\r\n\x05\x04\x02\x02\t\x03\x12\x04\x98\x05*,\n\r\
    \n\x05\x04\x02\x02\t\x08\x12\x04\x99\x05\x061\n\x10\n\x08\x04\x02\x02\t\
    \x08\x9c\x08\0\x12\x04\x99\x05\x070\n{\n\x02\x04\x03\x12\x06\x9e\x05\0\
    \xb2\x05\x01\x1am\x20The\x20request\x20for\n\x20[ListInstanceConfigs][go\
    ogle.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].\n\n\
    \x0b\n\x03\x04\x03\x01\x12\x04\x9e\x05\x08\"\n\xa7\x01\n\x04\x04\x03\x02\
    \0\x12\x06\xa2\x05\x02\xa7\x05\x04\x1a\x96\x01\x20Required.\x20The\x20na\
    me\x20of\x20the\x20project\x20for\x20which\x20a\x20list\x20of\x20support\
    ed\x20instance\n\x20configurations\x20is\x20requested.\x20Values\x20are\
    \x20of\x20the\x20form\n\x20`projects/<project>`.\n\n\r\n\x05\x04\x03\x02\
    \0\x05\x12\x04\xa2\x05\x02\x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xa2\
    \x05\t\x0f\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xa2\x05\x12\x13\n\x0f\n\
    \x05\x04\x03\x02\0\x08\x12\x06\xa2\x05\x14\xa7\x05\x03\n\x10\n\x08\x04\
    \x03\x02\0\x08\x9c\x08\0\x12\x04\xa3\x05\x04*\n\x11\n\x07\x04\x03\x02\0\
    \x08\x9f\x08\x12\x06\xa4\x05\x04\xa6\x05\x05\n\x95\x01\n\x04\x04\x03\x02\
    \x01\x12\x04\xab\x05\x02\x16\x1a\x86\x01\x20Number\x20of\x20instance\x20\
    configurations\x20to\x20be\x20returned\x20in\x20the\x20response.\x20If\
    \x200\x20or\n\x20less,\x20defaults\x20to\x20the\x20server's\x20maximum\
    \x20allowed\x20page\x20size.\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xab\
    \x05\x02\x07\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xab\x05\x08\x11\n\r\n\
    \x05\x04\x03\x02\x01\x03\x12\x04\xab\x05\x14\x15\n\x8c\x02\n\x04\x04\x03\
    \x02\x02\x12\x04\xb1\x05\x02\x18\x1a\xfd\x01\x20If\x20non-empty,\x20`pag\
    e_token`\x20should\x20contain\x20a\n\x20[next_page_token][google.spanner\
    .admin.instance.v1.ListInstanceConfigsResponse.next_page_token]\n\x20fro\
    m\x20a\x20previous\n\x20[ListInstanceConfigsResponse][google.spanner.adm\
    in.instance.v1.ListInstanceConfigsResponse].\n\n\r\n\x05\x04\x03\x02\x02\
    \x05\x12\x04\xb1\x05\x02\x08\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\xb1\
    \x05\t\x13\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xb1\x05\x16\x17\n|\n\
    \x02\x04\x04\x12\x06\xb6\x05\0\xbe\x05\x01\x1an\x20The\x20response\x20fo\
    r\n\x20[ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAd\
    min.ListInstanceConfigs].\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xb6\x05\x08#\
    \n>\n\x04\x04\x04\x02\0\x12\x04\xb8\x05\x02/\x1a0\x20The\x20list\x20of\
    \x20requested\x20instance\x20configurations.\n\n\r\n\x05\x04\x04\x02\0\
    \x04\x12\x04\xb8\x05\x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xb8\x05\
    \x0b\x19\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xb8\x05\x1a*\n\r\n\x05\x04\
    \x04\x02\0\x03\x12\x04\xb8\x05-.\n\xd6\x01\n\x04\x04\x04\x02\x01\x12\x04\
    \xbd\x05\x02\x1d\x1a\xc7\x01\x20`next_page_token`\x20can\x20be\x20sent\
    \x20in\x20a\x20subsequent\n\x20[ListInstanceConfigs][google.spanner.admi\
    n.instance.v1.InstanceAdmin.ListInstanceConfigs]\n\x20call\x20to\x20fetc\
    h\x20more\x20of\x20the\x20matching\x20instance\x20configurations.\n\n\r\
    \n\x05\x04\x04\x02\x01\x05\x12\x04\xbd\x05\x02\x08\n\r\n\x05\x04\x04\x02\
    \x01\x01\x12\x04\xbd\x05\t\x18\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xbd\
    \x05\x1b\x1c\n~\n\x02\x04\x05\x12\x06\xc2\x05\0\xcb\x05\x01\x1ap\x20The\
    \x20request\x20for\n\x20[GetInstanceConfigRequest][google.spanner.admin.\
    instance.v1.InstanceAdmin.GetInstanceConfig].\n\n\x0b\n\x03\x04\x05\x01\
    \x12\x04\xc2\x05\x08\x20\n\x95\x01\n\x04\x04\x05\x02\0\x12\x06\xc5\x05\
    \x02\xca\x05\x04\x1a\x84\x01\x20Required.\x20The\x20name\x20of\x20the\
    \x20requested\x20instance\x20configuration.\x20Values\x20are\x20of\n\x20\
    the\x20form\x20`projects/<project>/instanceConfigs/<config>`.\n\n\r\n\
    \x05\x04\x05\x02\0\x05\x12\x04\xc5\x05\x02\x08\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\xc5\x05\t\r\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xc5\x05\x10\
    \x11\n\x0f\n\x05\x04\x05\x02\0\x08\x12\x06\xc5\x05\x12\xca\x05\x03\n\x10\
    \n\x08\x04\x05\x02\0\x08\x9c\x08\0\x12\x04\xc6\x05\x04*\n\x11\n\x07\x04\
    \x05\x02\0\x08\x9f\x08\x12\x06\xc7\x05\x04\xc9\x05\x05\nj\n\x02\x04\x06\
    \x12\x06\xcf\x05\0\xe9\x05\x01\x1a\\\x20The\x20request\x20for\n\x20[Crea\
    teInstanceConfigRequest][InstanceAdmin.CreateInstanceConfigRequest].\n\n\
    \x0b\n\x03\x04\x06\x01\x12\x04\xcf\x05\x08#\n\x89\x01\n\x04\x04\x06\x02\
    \0\x12\x06\xd2\x05\x02\xd7\x05\x04\x1ay\x20Required.\x20The\x20name\x20o\
    f\x20the\x20project\x20in\x20which\x20to\x20create\x20the\x20instance\
    \x20config.\n\x20Values\x20are\x20of\x20the\x20form\x20`projects/<projec\
    t>`.\n\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xd2\x05\x02\x08\n\r\n\x05\x04\
    \x06\x02\0\x01\x12\x04\xd2\x05\t\x0f\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\
    \xd2\x05\x12\x13\n\x0f\n\x05\x04\x06\x02\0\x08\x12\x06\xd2\x05\x14\xd7\
    \x05\x03\n\x10\n\x08\x04\x06\x02\0\x08\x9c\x08\0\x12\x04\xd3\x05\x04*\n\
    \x11\n\x07\x04\x06\x02\0\x08\x9f\x08\x12\x06\xd4\x05\x04\xd6\x05\x05\n\
    \x95\x02\n\x04\x04\x06\x02\x01\x12\x04\xdd\x05\x02I\x1a\x86\x02\x20Requi\
    red.\x20The\x20ID\x20of\x20the\x20instance\x20config\x20to\x20create.\
    \x20\x20Valid\x20identifiers\x20are\n\x20of\x20the\x20form\x20`custom-[-\
    a-z0-9]*[a-z0-9]`\x20and\x20must\x20be\x20between\x202\x20and\x2064\n\
    \x20characters\x20in\x20length.\x20The\x20`custom-`\x20prefix\x20is\x20r\
    equired\x20to\x20avoid\x20name\n\x20conflicts\x20with\x20Google\x20manag\
    ed\x20configurations.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xdd\x05\
    \x02\x08\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xdd\x05\t\x1b\n\r\n\x05\
    \x04\x06\x02\x01\x03\x12\x04\xdd\x05\x1e\x1f\n\r\n\x05\x04\x06\x02\x01\
    \x08\x12\x04\xdd\x05\x20H\n\x10\n\x08\x04\x06\x02\x01\x08\x9c\x08\0\x12\
    \x04\xdd\x05!G\n\xb5\x02\n\x04\x04\x06\x02\x02\x12\x04\xe4\x05\x02N\x1a\
    \xa6\x02\x20Required.\x20The\x20InstanceConfig\x20proto\x20of\x20the\x20\
    configuration\x20to\x20create.\n\x20instance_config.name\x20must\x20be\n\
    \x20`<parent>/instanceConfigs/<instance_config_id>`.\n\x20instance_confi\
    g.base_config\x20must\x20be\x20a\x20Google\x20managed\x20configuration\
    \x20name,\n\x20e.g.\x20<parent>/instanceConfigs/us-east1,\x20<parent>/in\
    stanceConfigs/nam3.\n\n\r\n\x05\x04\x06\x02\x02\x06\x12\x04\xe4\x05\x02\
    \x10\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xe4\x05\x11\x20\n\r\n\x05\x04\
    \x06\x02\x02\x03\x12\x04\xe4\x05#$\n\r\n\x05\x04\x06\x02\x02\x08\x12\x04\
    \xe4\x05%M\n\x10\n\x08\x04\x06\x02\x02\x08\x9c\x08\0\x12\x04\xe4\x05&L\n\
    k\n\x04\x04\x06\x02\x03\x12\x04\xe8\x05\x02\x19\x1a]\x20An\x20option\x20\
    to\x20validate,\x20but\x20not\x20actually\x20execute,\x20a\x20request,\n\
    \x20and\x20provide\x20the\x20same\x20response.\n\n\r\n\x05\x04\x06\x02\
    \x03\x05\x12\x04\xe8\x05\x02\x06\n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\
    \xe8\x05\x07\x14\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\xe8\x05\x17\x18\n\
    j\n\x02\x04\x07\x12\x06\xed\x05\0\x82\x06\x01\x1a\\\x20The\x20request\
    \x20for\n\x20[UpdateInstanceConfigRequest][InstanceAdmin.UpdateInstanceC\
    onfigRequest].\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xed\x05\x08#\n\x82\x03\
    \n\x04\x04\x07\x02\0\x12\x04\xf4\x05\x02N\x1a\xf3\x02\x20Required.\x20Th\
    e\x20user\x20instance\x20config\x20to\x20update,\x20which\x20must\x20alw\
    ays\x20include\x20the\n\x20instance\x20config\x20name.\x20Otherwise,\x20\
    only\x20fields\x20mentioned\x20in\n\x20[update_mask][google.spanner.admi\
    n.instance.v1.UpdateInstanceConfigRequest.update_mask]\n\x20need\x20be\
    \x20included.\x20To\x20prevent\x20conflicts\x20of\x20concurrent\x20updat\
    es,\n\x20[etag][google.spanner.admin.instance.v1.InstanceConfig.reconcil\
    ing]\x20can\n\x20be\x20used.\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\xf4\
    \x05\x02\x10\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xf4\x05\x11\x20\n\r\n\
    \x05\x04\x07\x02\0\x03\x12\x04\xf4\x05#$\n\r\n\x05\x04\x07\x02\0\x08\x12\
    \x04\xf4\x05%M\n\x10\n\x08\x04\x07\x02\0\x08\x9c\x08\0\x12\x04\xf4\x05&L\
    \n\x9a\x03\n\x04\x04\x07\x02\x01\x12\x06\xfc\x05\x02\xfd\x05/\x1a\x89\
    \x03\x20Required.\x20A\x20mask\x20specifying\x20which\x20fields\x20in\n\
    \x20[InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig]\
    \x20should\x20be\n\x20updated.\x20The\x20field\x20mask\x20must\x20always\
    \x20be\x20specified;\x20this\x20prevents\x20any\x20future\n\x20fields\
    \x20in\x20[InstanceConfig][google.spanner.admin.instance.v1.InstanceConf\
    ig]\n\x20from\x20being\x20erased\x20accidentally\x20by\x20clients\x20tha\
    t\x20do\x20not\x20know\x20about\x20them.\x20Only\n\x20display_name\x20an\
    d\x20labels\x20can\x20be\x20updated.\n\n\r\n\x05\x04\x07\x02\x01\x06\x12\
    \x04\xfc\x05\x02\x1b\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\xfc\x05\x1c'\
    \n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xfc\x05*+\n\r\n\x05\x04\x07\x02\
    \x01\x08\x12\x04\xfd\x05\x06.\n\x10\n\x08\x04\x07\x02\x01\x08\x9c\x08\0\
    \x12\x04\xfd\x05\x07-\nk\n\x04\x04\x07\x02\x02\x12\x04\x81\x06\x02\x19\
    \x1a]\x20An\x20option\x20to\x20validate,\x20but\x20not\x20actually\x20ex\
    ecute,\x20a\x20request,\n\x20and\x20provide\x20the\x20same\x20response.\
    \n\n\r\n\x05\x04\x07\x02\x02\x05\x12\x04\x81\x06\x02\x06\n\r\n\x05\x04\
    \x07\x02\x02\x01\x12\x04\x81\x06\x07\x14\n\r\n\x05\x04\x07\x02\x02\x03\
    \x12\x04\x81\x06\x17\x18\nj\n\x02\x04\x08\x12\x06\x86\x06\0\x9d\x06\x01\
    \x1a\\\x20The\x20request\x20for\n\x20[DeleteInstanceConfigRequest][Insta\
    nceAdmin.DeleteInstanceConfigRequest].\n\n\x0b\n\x03\x04\x08\x01\x12\x04\
    \x86\x06\x08#\n\xa2\x01\n\x04\x04\x08\x02\0\x12\x06\x8a\x06\x02\x8f\x06\
    \x04\x1a\x91\x01\x20Required.\x20The\x20name\x20of\x20the\x20instance\
    \x20configuration\x20to\x20be\x20deleted.\n\x20Values\x20are\x20of\x20th\
    e\x20form\n\x20`projects/<project>/instanceConfigs/<instance_config>`\n\
    \n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x8a\x06\x02\x08\n\r\n\x05\x04\x08\
    \x02\0\x01\x12\x04\x8a\x06\t\r\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x8a\
    \x06\x10\x11\n\x0f\n\x05\x04\x08\x02\0\x08\x12\x06\x8a\x06\x12\x8f\x06\
    \x03\n\x10\n\x08\x04\x08\x02\0\x08\x9c\x08\0\x12\x04\x8b\x06\x04*\n\x11\
    \n\x07\x04\x08\x02\0\x08\x9f\x08\x12\x06\x8c\x06\x04\x8e\x06\x05\n\x97\
    \x03\n\x04\x04\x08\x02\x01\x12\x04\x98\x06\x02\x12\x1a\x88\x03\x20Used\
    \x20for\x20optimistic\x20concurrency\x20control\x20as\x20a\x20way\x20to\
    \x20help\x20prevent\n\x20simultaneous\x20deletes\x20of\x20an\x20instance\
    \x20config\x20from\x20overwriting\x20each\n\x20other.\x20If\x20not\x20em\
    pty,\x20the\x20API\n\x20only\x20deletes\x20the\x20instance\x20config\x20\
    when\x20the\x20etag\x20provided\x20matches\x20the\x20current\n\x20status\
    \x20of\x20the\x20requested\x20instance\x20config.\x20Otherwise,\x20delet\
    es\x20the\x20instance\n\x20config\x20without\x20checking\x20the\x20curre\
    nt\x20status\x20of\x20the\x20requested\x20instance\n\x20config.\n\n\r\n\
    \x05\x04\x08\x02\x01\x05\x12\x04\x98\x06\x02\x08\n\r\n\x05\x04\x08\x02\
    \x01\x01\x12\x04\x98\x06\t\r\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\x98\
    \x06\x10\x11\nk\n\x04\x04\x08\x02\x02\x12\x04\x9c\x06\x02\x19\x1a]\x20An\
    \x20option\x20to\x20validate,\x20but\x20not\x20actually\x20execute,\x20a\
    \x20request,\n\x20and\x20provide\x20the\x20same\x20response.\n\n\r\n\x05\
    \x04\x08\x02\x02\x05\x12\x04\x9c\x06\x02\x06\n\r\n\x05\x04\x08\x02\x02\
    \x01\x12\x04\x9c\x06\x07\x14\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\x9c\
    \x06\x17\x18\n\x8d\x01\n\x02\x04\t\x12\x06\xa1\x06\0\xe2\x06\x01\x1a\x7f\
    \x20The\x20request\x20for\n\x20[ListInstanceConfigOperations][google.spa\
    nner.admin.instance.v1.InstanceAdmin.ListInstanceConfigOperations].\n\n\
    \x0b\n\x03\x04\t\x01\x12\x04\xa1\x06\x08+\nx\n\x04\x04\t\x02\0\x12\x06\
    \xa4\x06\x02\xa9\x06\x04\x1ah\x20Required.\x20The\x20project\x20of\x20th\
    e\x20instance\x20config\x20operations.\n\x20Values\x20are\x20of\x20the\
    \x20form\x20`projects/<project>`.\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\
    \xa4\x06\x02\x08\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xa4\x06\t\x0f\n\r\n\
    \x05\x04\t\x02\0\x03\x12\x04\xa4\x06\x12\x13\n\x0f\n\x05\x04\t\x02\0\x08\
    \x12\x06\xa4\x06\x14\xa9\x06\x03\n\x10\n\x08\x04\t\x02\0\x08\x9c\x08\0\
    \x12\x04\xa5\x06\x04*\n\x11\n\x07\x04\t\x02\0\x08\x9f\x08\x12\x06\xa6\
    \x06\x04\xa8\x06\x05\n\x9f\x10\n\x04\x04\t\x02\x01\x12\x04\xd6\x06\x02\
    \x14\x1a\x90\x10\x20An\x20expression\x20that\x20filters\x20the\x20list\
    \x20of\x20returned\x20operations.\n\n\x20A\x20filter\x20expression\x20co\
    nsists\x20of\x20a\x20field\x20name,\x20a\n\x20comparison\x20operator,\
    \x20and\x20a\x20value\x20for\x20filtering.\n\x20The\x20value\x20must\x20\
    be\x20a\x20string,\x20a\x20number,\x20or\x20a\x20boolean.\x20The\x20comp\
    arison\x20operator\n\x20must\x20be\x20one\x20of:\x20`<`,\x20`>`,\x20`<=`\
    ,\x20`>=`,\x20`!=`,\x20`=`,\x20or\x20`:`.\n\x20Colon\x20`:`\x20is\x20the\
    \x20contains\x20operator.\x20Filter\x20rules\x20are\x20not\x20case\x20se\
    nsitive.\n\n\x20The\x20following\x20fields\x20in\x20the\x20[Operation][g\
    oogle.longrunning.Operation]\n\x20are\x20eligible\x20for\x20filtering:\n\
    \n\x20\x20\x20*\x20`name`\x20-\x20The\x20name\x20of\x20the\x20long-runni\
    ng\x20operation\n\x20\x20\x20*\x20`done`\x20-\x20False\x20if\x20the\x20o\
    peration\x20is\x20in\x20progress,\x20else\x20true.\n\x20\x20\x20*\x20`me\
    tadata.@type`\x20-\x20the\x20type\x20of\x20metadata.\x20For\x20example,\
    \x20the\x20type\x20string\n\x20\x20\x20\x20\x20\x20for\n\x20\x20\x20\x20\
    \x20\x20[CreateInstanceConfigMetadata][google.spanner.admin.instance.v1.\
    CreateInstanceConfigMetadata]\n\x20\x20\x20\x20\x20\x20is\n\x20\x20\x20\
    \x20\x20\x20`type.googleapis.com/google.spanner.admin.instance.v1.Create\
    InstanceConfigMetadata`.\n\x20\x20\x20*\x20`metadata.<field_name>`\x20-\
    \x20any\x20field\x20in\x20metadata.value.\n\x20\x20\x20\x20\x20\x20`meta\
    data.@type`\x20must\x20be\x20specified\x20first,\x20if\x20filtering\x20o\
    n\x20metadata\n\x20\x20\x20\x20\x20\x20fields.\n\x20\x20\x20*\x20`error`\
    \x20-\x20Error\x20associated\x20with\x20the\x20long-running\x20operation\
    .\n\x20\x20\x20*\x20`response.@type`\x20-\x20the\x20type\x20of\x20respon\
    se.\n\x20\x20\x20*\x20`response.<field_name>`\x20-\x20any\x20field\x20in\
    \x20response.value.\n\n\x20You\x20can\x20combine\x20multiple\x20expressi\
    ons\x20by\x20enclosing\x20each\x20expression\x20in\n\x20parentheses.\x20\
    By\x20default,\x20expressions\x20are\x20combined\x20with\x20AND\x20logic\
    .\x20However,\n\x20you\x20can\x20specify\x20AND,\x20OR,\x20and\x20NOT\
    \x20logic\x20explicitly.\n\n\x20Here\x20are\x20a\x20few\x20examples:\n\n\
    \x20\x20\x20*\x20`done:true`\x20-\x20The\x20operation\x20is\x20complete.\
    \n\x20\x20\x20*\x20`(metadata.@type=`\x20\\\n\x20\x20\x20\x20\x20`type.g\
    oogleapis.com/google.spanner.admin.instance.v1.CreateInstanceConfigMetad\
    ata)\n\x20\x20\x20\x20\x20AND`\x20\\\n\x20\x20\x20\x20\x20`(metadata.ins\
    tance_config.name:custom-config)\x20AND`\x20\\\n\x20\x20\x20\x20\x20`(me\
    tadata.progress.start_time\x20<\x20\\\"2021-03-28T14:50:00Z\\\")\x20AND`\
    \x20\\\n\x20\x20\x20\x20\x20`(error:*)`\x20-\x20Return\x20operations\x20\
    where:\n\x20\x20\x20\x20\x20*\x20The\x20operation's\x20metadata\x20type\
    \x20is\n\x20\x20\x20\x20\x20[CreateInstanceConfigMetadata][google.spanne\
    r.admin.instance.v1.CreateInstanceConfigMetadata].\n\x20\x20\x20\x20\x20\
    *\x20The\x20instance\x20config\x20name\x20contains\x20\"custom-config\".\
    \n\x20\x20\x20\x20\x20*\x20The\x20operation\x20started\x20before\x202021\
    -03-28T14:50:00Z.\n\x20\x20\x20\x20\x20*\x20The\x20operation\x20resulted\
    \x20in\x20an\x20error.\n\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xd6\x06\x02\
    \x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xd6\x06\t\x0f\n\r\n\x05\x04\t\
    \x02\x01\x03\x12\x04\xd6\x06\x12\x13\n\x87\x01\n\x04\x04\t\x02\x02\x12\
    \x04\xda\x06\x02\x16\x1ay\x20Number\x20of\x20operations\x20to\x20be\x20r\
    eturned\x20in\x20the\x20response.\x20If\x200\x20or\n\x20less,\x20default\
    s\x20to\x20the\x20server's\x20maximum\x20allowed\x20page\x20size.\n\n\r\
    \n\x05\x04\t\x02\x02\x05\x12\x04\xda\x06\x02\x07\n\r\n\x05\x04\t\x02\x02\
    \x01\x12\x04\xda\x06\x08\x11\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xda\x06\
    \x14\x15\n\xd8\x02\n\x04\x04\t\x02\x03\x12\x04\xe1\x06\x02\x18\x1a\xc9\
    \x02\x20If\x20non-empty,\x20`page_token`\x20should\x20contain\x20a\n\x20\
    [next_page_token][google.spanner.admin.instance.v1.ListInstanceConfigOpe\
    rationsResponse.next_page_token]\n\x20from\x20a\x20previous\n\x20[ListIn\
    stanceConfigOperationsResponse][google.spanner.admin.instance.v1.ListIns\
    tanceConfigOperationsResponse]\n\x20to\x20the\x20same\x20`parent`\x20and\
    \x20with\x20the\x20same\x20`filter`.\n\n\r\n\x05\x04\t\x02\x03\x05\x12\
    \x04\xe1\x06\x02\x08\n\r\n\x05\x04\t\x02\x03\x01\x12\x04\xe1\x06\t\x13\n\
    \r\n\x05\x04\t\x02\x03\x03\x12\x04\xe1\x06\x16\x17\n\x8f\x01\n\x02\x04\n\
    \x12\x06\xe6\x06\0\xf2\x06\x01\x1a\x80\x01\x20The\x20response\x20for\n\
    \x20[ListInstanceConfigOperations][google.spanner.admin.instance.v1.Inst\
    anceAdmin.ListInstanceConfigOperations].\n\n\x0b\n\x03\x04\n\x01\x12\x04\
    \xe6\x06\x08,\n\xbd\x02\n\x04\x04\n\x02\0\x12\x04\xec\x06\x027\x1a\xae\
    \x02\x20The\x20list\x20of\x20matching\x20instance\x20config\x20[long-run\
    ning\n\x20operations][google.longrunning.Operation].\x20Each\x20operatio\
    n's\x20name\x20will\x20be\n\x20prefixed\x20by\x20the\x20instance\x20conf\
    ig's\x20name.\x20The\x20operation's\n\x20[metadata][google.longrunning.O\
    peration.metadata]\x20field\x20type\n\x20`metadata.type_url`\x20describe\
    s\x20the\x20type\x20of\x20the\x20metadata.\n\n\r\n\x05\x04\n\x02\0\x04\
    \x12\x04\xec\x06\x02\n\n\r\n\x05\x04\n\x02\0\x06\x12\x04\xec\x06\x0b'\n\
    \r\n\x05\x04\n\x02\0\x01\x12\x04\xec\x06(2\n\r\n\x05\x04\n\x02\0\x03\x12\
    \x04\xec\x0656\n\xd9\x01\n\x04\x04\n\x02\x01\x12\x04\xf1\x06\x02\x1d\x1a\
    \xca\x01\x20`next_page_token`\x20can\x20be\x20sent\x20in\x20a\x20subsequ\
    ent\n\x20[ListInstanceConfigOperations][google.spanner.admin.instance.v1\
    .InstanceAdmin.ListInstanceConfigOperations]\n\x20call\x20to\x20fetch\
    \x20more\x20of\x20the\x20matching\x20metadata.\n\n\r\n\x05\x04\n\x02\x01\
    \x05\x12\x04\xf1\x06\x02\x08\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xf1\x06\
    \t\x18\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xf1\x06\x1b\x1c\nk\n\x02\x04\
    \x0b\x12\x06\xf6\x06\0\x85\x07\x01\x1a]\x20The\x20request\x20for\n\x20[G\
    etInstance][google.spanner.admin.instance.v1.InstanceAdmin.GetInstance].\
    \n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xf6\x06\x08\x1a\n\x82\x01\n\x04\x04\
    \x0b\x02\0\x12\x06\xf9\x06\x02\xfe\x06\x04\x1ar\x20Required.\x20The\x20n\
    ame\x20of\x20the\x20requested\x20instance.\x20Values\x20are\x20of\x20the\
    \x20form\n\x20`projects/<project>/instances/<instance>`.\n\n\r\n\x05\x04\
    \x0b\x02\0\x05\x12\x04\xf9\x06\x02\x08\n\r\n\x05\x04\x0b\x02\0\x01\x12\
    \x04\xf9\x06\t\r\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xf9\x06\x10\x11\n\
    \x0f\n\x05\x04\x0b\x02\0\x08\x12\x06\xf9\x06\x12\xfe\x06\x03\n\x10\n\x08\
    \x04\x0b\x02\0\x08\x9c\x08\0\x12\x04\xfa\x06\x04*\n\x11\n\x07\x04\x0b\
    \x02\0\x08\x9f\x08\x12\x06\xfb\x06\x04\xfd\x06\x05\n\xf5\x01\n\x04\x04\
    \x0b\x02\x01\x12\x04\x84\x07\x02+\x1a\xe6\x01\x20If\x20field_mask\x20is\
    \x20present,\x20specifies\x20the\x20subset\x20of\n\x20[Instance][google.\
    spanner.admin.instance.v1.Instance]\x20fields\x20that\x20should\x20be\n\
    \x20returned.\x20If\x20absent,\x20all\n\x20[Instance][google.spanner.adm\
    in.instance.v1.Instance]\x20fields\x20are\x20returned.\n\n\r\n\x05\x04\
    \x0b\x02\x01\x06\x12\x04\x84\x07\x02\x1b\n\r\n\x05\x04\x0b\x02\x01\x01\
    \x12\x04\x84\x07\x1c&\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\x84\x07)*\nq\
    \n\x02\x04\x0c\x12\x06\x89\x07\0\x9b\x07\x01\x1ac\x20The\x20request\x20f\
    or\n\x20[CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.\
    CreateInstance].\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\x89\x07\x08\x1d\n\x82\
    \x01\n\x04\x04\x0c\x02\0\x12\x06\x8c\x07\x02\x91\x07\x04\x1ar\x20Require\
    d.\x20The\x20name\x20of\x20the\x20project\x20in\x20which\x20to\x20create\
    \x20the\x20instance.\x20Values\n\x20are\x20of\x20the\x20form\x20`project\
    s/<project>`.\n\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\x8c\x07\x02\x08\n\r\
    \n\x05\x04\x0c\x02\0\x01\x12\x04\x8c\x07\t\x0f\n\r\n\x05\x04\x0c\x02\0\
    \x03\x12\x04\x8c\x07\x12\x13\n\x0f\n\x05\x04\x0c\x02\0\x08\x12\x06\x8c\
    \x07\x14\x91\x07\x03\n\x10\n\x08\x04\x0c\x02\0\x08\x9c\x08\0\x12\x04\x8d\
    \x07\x04*\n\x11\n\x07\x04\x0c\x02\0\x08\x9f\x08\x12\x06\x8e\x07\x04\x90\
    \x07\x05\n\xae\x01\n\x04\x04\x0c\x02\x01\x12\x04\x96\x07\x02B\x1a\x9f\
    \x01\x20Required.\x20The\x20ID\x20of\x20the\x20instance\x20to\x20create.\
    \x20\x20Valid\x20identifiers\x20are\x20of\x20the\n\x20form\x20`[a-z][-a-\
    z0-9]*[a-z0-9]`\x20and\x20must\x20be\x20between\x202\x20and\x2064\x20cha\
    racters\x20in\n\x20length.\n\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\x96\
    \x07\x02\x08\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\x96\x07\t\x14\n\r\n\
    \x05\x04\x0c\x02\x01\x03\x12\x04\x96\x07\x17\x18\n\r\n\x05\x04\x0c\x02\
    \x01\x08\x12\x04\x96\x07\x19A\n\x10\n\x08\x04\x0c\x02\x01\x08\x9c\x08\0\
    \x12\x04\x96\x07\x1a@\n\x89\x01\n\x04\x04\x0c\x02\x02\x12\x04\x9a\x07\
    \x02A\x1a{\x20Required.\x20The\x20instance\x20to\x20create.\x20\x20The\
    \x20name\x20may\x20be\x20omitted,\x20but\x20if\n\x20specified\x20must\
    \x20be\x20`<parent>/instances/<instance_id>`.\n\n\r\n\x05\x04\x0c\x02\
    \x02\x06\x12\x04\x9a\x07\x02\n\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\x9a\
    \x07\x0b\x13\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\x9a\x07\x16\x17\n\r\n\
    \x05\x04\x0c\x02\x02\x08\x12\x04\x9a\x07\x18@\n\x10\n\x08\x04\x0c\x02\
    \x02\x08\x9c\x08\0\x12\x04\x9a\x07\x19?\no\n\x02\x04\r\x12\x06\x9f\x07\0\
    \xc7\x07\x01\x1aa\x20The\x20request\x20for\n\x20[ListInstances][google.s\
    panner.admin.instance.v1.InstanceAdmin.ListInstances].\n\n\x0b\n\x03\x04\
    \r\x01\x12\x04\x9f\x07\x08\x1c\n\x8d\x01\n\x04\x04\r\x02\0\x12\x06\xa2\
    \x07\x02\xa7\x07\x04\x1a}\x20Required.\x20The\x20name\x20of\x20the\x20pr\
    oject\x20for\x20which\x20a\x20list\x20of\x20instances\x20is\n\x20request\
    ed.\x20Values\x20are\x20of\x20the\x20form\x20`projects/<project>`.\n\n\r\
    \n\x05\x04\r\x02\0\x05\x12\x04\xa2\x07\x02\x08\n\r\n\x05\x04\r\x02\0\x01\
    \x12\x04\xa2\x07\t\x0f\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xa2\x07\x12\x13\
    \n\x0f\n\x05\x04\r\x02\0\x08\x12\x06\xa2\x07\x14\xa7\x07\x03\n\x10\n\x08\
    \x04\r\x02\0\x08\x9c\x08\0\x12\x04\xa3\x07\x04*\n\x11\n\x07\x04\r\x02\0\
    \x08\x9f\x08\x12\x06\xa4\x07\x04\xa6\x07\x05\n\x86\x01\n\x04\x04\r\x02\
    \x01\x12\x04\xab\x07\x02\x16\x1ax\x20Number\x20of\x20instances\x20to\x20\
    be\x20returned\x20in\x20the\x20response.\x20If\x200\x20or\x20less,\x20de\
    faults\n\x20to\x20the\x20server's\x20maximum\x20allowed\x20page\x20size.\
    \n\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\xab\x07\x02\x07\n\r\n\x05\x04\r\
    \x02\x01\x01\x12\x04\xab\x07\x08\x11\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\
    \xab\x07\x14\x15\n\xfa\x01\n\x04\x04\r\x02\x02\x12\x04\xb1\x07\x02\x18\
    \x1a\xeb\x01\x20If\x20non-empty,\x20`page_token`\x20should\x20contain\
    \x20a\n\x20[next_page_token][google.spanner.admin.instance.v1.ListInstan\
    cesResponse.next_page_token]\n\x20from\x20a\x20previous\n\x20[ListInstan\
    cesResponse][google.spanner.admin.instance.v1.ListInstancesResponse].\n\
    \n\r\n\x05\x04\r\x02\x02\x05\x12\x04\xb1\x07\x02\x08\n\r\n\x05\x04\r\x02\
    \x02\x01\x12\x04\xb1\x07\t\x13\n\r\n\x05\x04\r\x02\x02\x03\x12\x04\xb1\
    \x07\x16\x17\n\xdd\x06\n\x04\x04\r\x02\x03\x12\x04\xc6\x07\x02\x14\x1a\
    \xce\x06\x20An\x20expression\x20for\x20filtering\x20the\x20results\x20of\
    \x20the\x20request.\x20Filter\x20rules\x20are\n\x20case\x20insensitive.\
    \x20The\x20fields\x20eligible\x20for\x20filtering\x20are:\n\n\x20\x20\
    \x20*\x20`name`\n\x20\x20\x20*\x20`display_name`\n\x20\x20\x20*\x20`labe\
    ls.key`\x20where\x20key\x20is\x20the\x20name\x20of\x20a\x20label\n\n\x20\
    Some\x20examples\x20of\x20using\x20filters\x20are:\n\n\x20\x20\x20*\x20`\
    name:*`\x20-->\x20The\x20instance\x20has\x20a\x20name.\n\x20\x20\x20*\
    \x20`name:Howl`\x20-->\x20The\x20instance's\x20name\x20contains\x20the\
    \x20string\x20\"howl\".\n\x20\x20\x20*\x20`name:HOWL`\x20-->\x20Equivale\
    nt\x20to\x20above.\n\x20\x20\x20*\x20`NAME:howl`\x20-->\x20Equivalent\
    \x20to\x20above.\n\x20\x20\x20*\x20`labels.env:*`\x20-->\x20The\x20insta\
    nce\x20has\x20the\x20label\x20\"env\".\n\x20\x20\x20*\x20`labels.env:dev\
    `\x20-->\x20The\x20instance\x20has\x20the\x20label\x20\"env\"\x20and\x20\
    the\x20value\x20of\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20the\x20label\x20contains\x20\
    the\x20string\x20\"dev\".\n\x20\x20\x20*\x20`name:howl\x20labels.env:dev\
    `\x20-->\x20The\x20instance's\x20name\x20contains\x20\"howl\"\x20and\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20it\x20ha\
    s\x20the\x20label\x20\"env\"\x20with\x20its\x20value\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20containing\x20\"dev\".\n\
    \n\r\n\x05\x04\r\x02\x03\x05\x12\x04\xc6\x07\x02\x08\n\r\n\x05\x04\r\x02\
    \x03\x01\x12\x04\xc6\x07\t\x0f\n\r\n\x05\x04\r\x02\x03\x03\x12\x04\xc6\
    \x07\x12\x13\np\n\x02\x04\x0e\x12\x06\xcb\x07\0\xd3\x07\x01\x1ab\x20The\
    \x20response\x20for\n\x20[ListInstances][google.spanner.admin.instance.v\
    1.InstanceAdmin.ListInstances].\n\n\x0b\n\x03\x04\x0e\x01\x12\x04\xcb\
    \x07\x08\x1d\n0\n\x04\x04\x0e\x02\0\x12\x04\xcd\x07\x02\"\x1a\"\x20The\
    \x20list\x20of\x20requested\x20instances.\n\n\r\n\x05\x04\x0e\x02\0\x04\
    \x12\x04\xcd\x07\x02\n\n\r\n\x05\x04\x0e\x02\0\x06\x12\x04\xcd\x07\x0b\
    \x13\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xcd\x07\x14\x1d\n\r\n\x05\x04\
    \x0e\x02\0\x03\x12\x04\xcd\x07\x20!\n\xbc\x01\n\x04\x04\x0e\x02\x01\x12\
    \x04\xd2\x07\x02\x1d\x1a\xad\x01\x20`next_page_token`\x20can\x20be\x20se\
    nt\x20in\x20a\x20subsequent\n\x20[ListInstances][google.spanner.admin.in\
    stance.v1.InstanceAdmin.ListInstances]\n\x20call\x20to\x20fetch\x20more\
    \x20of\x20the\x20matching\x20instances.\n\n\r\n\x05\x04\x0e\x02\x01\x05\
    \x12\x04\xd2\x07\x02\x08\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xd2\x07\t\
    \x18\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xd2\x07\x1b\x1c\nq\n\x02\x04\
    \x0f\x12\x06\xd7\x07\0\xe5\x07\x01\x1ac\x20The\x20request\x20for\n\x20[U\
    pdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInst\
    ance].\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\xd7\x07\x08\x1d\n\xe9\x01\n\x04\
    \x04\x0f\x02\0\x12\x04\xdc\x07\x02A\x1a\xda\x01\x20Required.\x20The\x20i\
    nstance\x20to\x20update,\x20which\x20must\x20always\x20include\x20the\
    \x20instance\n\x20name.\x20\x20Otherwise,\x20only\x20fields\x20mentioned\
    \x20in\n\x20[field_mask][google.spanner.admin.instance.v1.UpdateInstance\
    Request.field_mask]\n\x20need\x20be\x20included.\n\n\r\n\x05\x04\x0f\x02\
    \0\x06\x12\x04\xdc\x07\x02\n\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xdc\x07\
    \x0b\x13\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xdc\x07\x16\x17\n\r\n\x05\
    \x04\x0f\x02\0\x08\x12\x04\xdc\x07\x18@\n\x10\n\x08\x04\x0f\x02\0\x08\
    \x9c\x08\0\x12\x04\xdc\x07\x19?\n\xd4\x02\n\x04\x04\x0f\x02\x01\x12\x06\
    \xe3\x07\x02\xe4\x07/\x1a\xc3\x02\x20Required.\x20A\x20mask\x20specifyin\
    g\x20which\x20fields\x20in\n\x20[Instance][google.spanner.admin.instance\
    .v1.Instance]\x20should\x20be\x20updated.\n\x20The\x20field\x20mask\x20m\
    ust\x20always\x20be\x20specified;\x20this\x20prevents\x20any\x20future\
    \x20fields\x20in\n\x20[Instance][google.spanner.admin.instance.v1.Instan\
    ce]\x20from\x20being\x20erased\n\x20accidentally\x20by\x20clients\x20tha\
    t\x20do\x20not\x20know\x20about\x20them.\n\n\r\n\x05\x04\x0f\x02\x01\x06\
    \x12\x04\xe3\x07\x02\x1b\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\xe3\x07\
    \x1c&\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\xe3\x07)*\n\r\n\x05\x04\x0f\
    \x02\x01\x08\x12\x04\xe4\x07\x06.\n\x10\n\x08\x04\x0f\x02\x01\x08\x9c\
    \x08\0\x12\x04\xe4\x07\x07-\nq\n\x02\x04\x10\x12\x06\xe9\x07\0\xf2\x07\
    \x01\x1ac\x20The\x20request\x20for\n\x20[DeleteInstance][google.spanner.\
    admin.instance.v1.InstanceAdmin.DeleteInstance].\n\n\x0b\n\x03\x04\x10\
    \x01\x12\x04\xe9\x07\x08\x1d\n\x85\x01\n\x04\x04\x10\x02\0\x12\x06\xec\
    \x07\x02\xf1\x07\x04\x1au\x20Required.\x20The\x20name\x20of\x20the\x20in\
    stance\x20to\x20be\x20deleted.\x20Values\x20are\x20of\x20the\x20form\n\
    \x20`projects/<project>/instances/<instance>`\n\n\r\n\x05\x04\x10\x02\0\
    \x05\x12\x04\xec\x07\x02\x08\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xec\x07\
    \t\r\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\xec\x07\x10\x11\n\x0f\n\x05\x04\
    \x10\x02\0\x08\x12\x06\xec\x07\x12\xf1\x07\x03\n\x10\n\x08\x04\x10\x02\0\
    \x08\x9c\x08\0\x12\x04\xed\x07\x04*\n\x11\n\x07\x04\x10\x02\0\x08\x9f\
    \x08\x12\x06\xee\x07\x04\xf0\x07\x05\n\x8d\x01\n\x02\x04\x11\x12\x06\xf6\
    \x07\0\x86\x08\x01\x1a\x7f\x20Metadata\x20type\x20for\x20the\x20operatio\
    n\x20returned\x20by\n\x20[CreateInstance][google.spanner.admin.instance.\
    v1.InstanceAdmin.CreateInstance].\n\n\x0b\n\x03\x04\x11\x01\x12\x04\xf6\
    \x07\x08\x1e\n+\n\x04\x04\x11\x02\0\x12\x04\xf8\x07\x02\x18\x1a\x1d\x20T\
    he\x20instance\x20being\x20created.\n\n\r\n\x05\x04\x11\x02\0\x06\x12\
    \x04\xf8\x07\x02\n\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\xf8\x07\x0b\x13\n\
    \r\n\x05\x04\x11\x02\0\x03\x12\x04\xf8\x07\x16\x17\n\x8d\x01\n\x04\x04\
    \x11\x02\x01\x12\x04\xfd\x07\x02+\x1a\x7f\x20The\x20time\x20at\x20which\
    \x20the\n\x20[CreateInstance][google.spanner.admin.instance.v1.InstanceA\
    dmin.CreateInstance]\n\x20request\x20was\x20received.\n\n\r\n\x05\x04\
    \x11\x02\x01\x06\x12\x04\xfd\x07\x02\x1b\n\r\n\x05\x04\x11\x02\x01\x01\
    \x12\x04\xfd\x07\x1c&\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\xfd\x07)*\n\
    \xbd\x01\n\x04\x04\x11\x02\x02\x12\x04\x82\x08\x02,\x1a\xae\x01\x20The\
    \x20time\x20at\x20which\x20this\x20operation\x20was\x20cancelled.\x20If\
    \x20set,\x20this\x20operation\x20is\n\x20in\x20the\x20process\x20of\x20u\
    ndoing\x20itself\x20(which\x20is\x20guaranteed\x20to\x20succeed)\x20and\
    \n\x20cannot\x20be\x20cancelled\x20again.\n\n\r\n\x05\x04\x11\x02\x02\
    \x06\x12\x04\x82\x08\x02\x1b\n\r\n\x05\x04\x11\x02\x02\x01\x12\x04\x82\
    \x08\x1c'\n\r\n\x05\x04\x11\x02\x02\x03\x12\x04\x82\x08*+\nV\n\x04\x04\
    \x11\x02\x03\x12\x04\x85\x08\x02)\x1aH\x20The\x20time\x20at\x20which\x20\
    this\x20operation\x20failed\x20or\x20was\x20completed\x20successfully.\n\
    \n\r\n\x05\x04\x11\x02\x03\x06\x12\x04\x85\x08\x02\x1b\n\r\n\x05\x04\x11\
    \x02\x03\x01\x12\x04\x85\x08\x1c$\n\r\n\x05\x04\x11\x02\x03\x03\x12\x04\
    \x85\x08'(\n\x8d\x01\n\x02\x04\x12\x12\x06\x8a\x08\0\x9a\x08\x01\x1a\x7f\
    \x20Metadata\x20type\x20for\x20the\x20operation\x20returned\x20by\n\x20[\
    UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateIns\
    tance].\n\n\x0b\n\x03\x04\x12\x01\x12\x04\x8a\x08\x08\x1e\n4\n\x04\x04\
    \x12\x02\0\x12\x04\x8c\x08\x02\x18\x1a&\x20The\x20desired\x20end\x20stat\
    e\x20of\x20the\x20update.\n\n\r\n\x05\x04\x12\x02\0\x06\x12\x04\x8c\x08\
    \x02\n\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x8c\x08\x0b\x13\n\r\n\x05\x04\
    \x12\x02\0\x03\x12\x04\x8c\x08\x16\x17\n\x89\x01\n\x04\x04\x12\x02\x01\
    \x12\x04\x91\x08\x02+\x1a{\x20The\x20time\x20at\x20which\n\x20[UpdateIns\
    tance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance]\n\
    \x20request\x20was\x20received.\n\n\r\n\x05\x04\x12\x02\x01\x06\x12\x04\
    \x91\x08\x02\x1b\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\x91\x08\x1c&\n\r\
    \n\x05\x04\x12\x02\x01\x03\x12\x04\x91\x08)*\n\xbd\x01\n\x04\x04\x12\x02\
    \x02\x12\x04\x96\x08\x02,\x1a\xae\x01\x20The\x20time\x20at\x20which\x20t\
    his\x20operation\x20was\x20cancelled.\x20If\x20set,\x20this\x20operation\
    \x20is\n\x20in\x20the\x20process\x20of\x20undoing\x20itself\x20(which\
    \x20is\x20guaranteed\x20to\x20succeed)\x20and\n\x20cannot\x20be\x20cance\
    lled\x20again.\n\n\r\n\x05\x04\x12\x02\x02\x06\x12\x04\x96\x08\x02\x1b\n\
    \r\n\x05\x04\x12\x02\x02\x01\x12\x04\x96\x08\x1c'\n\r\n\x05\x04\x12\x02\
    \x02\x03\x12\x04\x96\x08*+\nV\n\x04\x04\x12\x02\x03\x12\x04\x99\x08\x02)\
    \x1aH\x20The\x20time\x20at\x20which\x20this\x20operation\x20failed\x20or\
    \x20was\x20completed\x20successfully.\n\n\r\n\x05\x04\x12\x02\x03\x06\
    \x12\x04\x99\x08\x02\x1b\n\r\n\x05\x04\x12\x02\x03\x01\x12\x04\x99\x08\
    \x1c$\n\r\n\x05\x04\x12\x02\x03\x03\x12\x04\x99\x08'(\n\x9a\x01\n\x02\
    \x04\x13\x12\x06\x9e\x08\0\xa9\x08\x01\x1a\x8b\x01\x20Metadata\x20type\
    \x20for\x20the\x20operation\x20returned\x20by\n\x20[CreateInstanceConfig\
    ][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstanceConfig].\
    \n\n\x0b\n\x03\x04\x13\x01\x12\x04\x9e\x08\x08$\n5\n\x04\x04\x13\x02\0\
    \x12\x04\xa0\x08\x02%\x1a'\x20The\x20target\x20instance\x20config\x20end\
    \x20state.\n\n\r\n\x05\x04\x13\x02\0\x06\x12\x04\xa0\x08\x02\x10\n\r\n\
    \x05\x04\x13\x02\0\x01\x12\x04\xa0\x08\x11\x20\n\r\n\x05\x04\x13\x02\0\
    \x03\x12\x04\xa0\x08#$\n\x8c\x01\n\x04\x04\x13\x02\x01\x12\x04\xa5\x08\
    \x02!\x1a~\x20The\x20progress\x20of\x20the\n\x20[CreateInstanceConfig][g\
    oogle.spanner.admin.instance.v1.InstanceAdmin.CreateInstanceConfig]\n\
    \x20operation.\n\n\r\n\x05\x04\x13\x02\x01\x06\x12\x04\xa5\x08\x02\x13\n\
    \r\n\x05\x04\x13\x02\x01\x01\x12\x04\xa5\x08\x14\x1c\n\r\n\x05\x04\x13\
    \x02\x01\x03\x12\x04\xa5\x08\x1f\x20\n?\n\x04\x04\x13\x02\x02\x12\x04\
    \xa8\x08\x02,\x1a1\x20The\x20time\x20at\x20which\x20this\x20operation\
    \x20was\x20cancelled.\n\n\r\n\x05\x04\x13\x02\x02\x06\x12\x04\xa8\x08\
    \x02\x1b\n\r\n\x05\x04\x13\x02\x02\x01\x12\x04\xa8\x08\x1c'\n\r\n\x05\
    \x04\x13\x02\x02\x03\x12\x04\xa8\x08*+\n\x9a\x01\n\x02\x04\x14\x12\x06\
    \xad\x08\0\xb8\x08\x01\x1a\x8b\x01\x20Metadata\x20type\x20for\x20the\x20\
    operation\x20returned\x20by\n\x20[UpdateInstanceConfig][google.spanner.a\
    dmin.instance.v1.InstanceAdmin.UpdateInstanceConfig].\n\n\x0b\n\x03\x04\
    \x14\x01\x12\x04\xad\x08\x08$\n;\n\x04\x04\x14\x02\0\x12\x04\xaf\x08\x02\
    %\x1a-\x20The\x20desired\x20instance\x20config\x20after\x20updating.\n\n\
    \r\n\x05\x04\x14\x02\0\x06\x12\x04\xaf\x08\x02\x10\n\r\n\x05\x04\x14\x02\
    \0\x01\x12\x04\xaf\x08\x11\x20\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\xaf\
    \x08#$\n\x8c\x01\n\x04\x04\x14\x02\x01\x12\x04\xb4\x08\x02!\x1a~\x20The\
    \x20progress\x20of\x20the\n\x20[UpdateInstanceConfig][google.spanner.adm\
    in.instance.v1.InstanceAdmin.UpdateInstanceConfig]\n\x20operation.\n\n\r\
    \n\x05\x04\x14\x02\x01\x06\x12\x04\xb4\x08\x02\x13\n\r\n\x05\x04\x14\x02\
    \x01\x01\x12\x04\xb4\x08\x14\x1c\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\
    \xb4\x08\x1f\x20\n?\n\x04\x04\x14\x02\x02\x12\x04\xb7\x08\x02,\x1a1\x20T\
    he\x20time\x20at\x20which\x20this\x20operation\x20was\x20cancelled.\n\n\
    \r\n\x05\x04\x14\x02\x02\x06\x12\x04\xb7\x08\x02\x1b\n\r\n\x05\x04\x14\
    \x02\x02\x01\x12\x04\xb7\x08\x1c'\n\r\n\x05\x04\x14\x02\x02\x03\x12\x04\
    \xb7\x08*+b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
