// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/experimental/authorization_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct AuthorizationConfig {
    // message fields
    pub provider: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationConfig {
    fn default() -> &'a AuthorizationConfig {
        <AuthorizationConfig as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationConfig {
    pub fn new() -> AuthorizationConfig {
        ::std::default::Default::default()
    }

    // string provider = 1;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AuthorizationConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.provider);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.provider.is_empty() {
            os.write_string(1, &self.provider)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationConfig {
        AuthorizationConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "provider",
                |m: &AuthorizationConfig| { &m.provider },
                |m: &mut AuthorizationConfig| { &mut m.provider },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthorizationConfig>(
                "AuthorizationConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthorizationConfig {
        static instance: ::protobuf::rt::LazyV2<AuthorizationConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationConfig::new)
    }
}

impl ::protobuf::Clear for AuthorizationConfig {
    fn clear(&mut self) {
        self.provider.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthorizationConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n2google/api/experimental/authorization_config.proto\x12\ngoogle.api\"1\
    \n\x13AuthorizationConfig\x12\x1a\n\x08provider\x18\x01\x20\x01(\tR\x08p\
    roviderBb\n\x0ecom.google.apiB\x18AuthorizationConfigProtoP\x01Z-google.\
    golang.org/genproto/googleapis/api;api\xa2\x02\x04GAPIJ\xe7\x08\n\x06\
    \x12\x04\x0f\0(\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Co\
    pyright\x202018\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apa\
    che\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20m\
    ay\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\
    \x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/\
    LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\
    \x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\
    \x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20B\
    ASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIN\
    D,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20\
    for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\
    \x11\0\x13\n\x08\n\x01\x08\x12\x03\x13\0D\n\t\n\x02\x08\x0b\x12\x03\x13\
    \0D\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\
    \x08\n\x01\x08\x12\x03\x15\09\n\t\n\x02\x08\x08\x12\x03\x15\09\n\x08\n\
    \x01\x08\x12\x03\x16\0'\n\t\n\x02\x08\x01\x12\x03\x16\0'\n\x08\n\x01\x08\
    \x12\x03\x17\0\"\n\t\n\x02\x08$\x12\x03\x17\0\"\n\x84\x02\n\x02\x04\0\
    \x12\x04$\0(\x01\x1a\xf7\x01\x20Configuration\x20of\x20authorization.\n\
    \n\x20This\x20section\x20determines\x20the\x20authorization\x20provider,\
    \x20if\x20unspecified,\x20then\x20no\n\x20authorization\x20check\x20will\
    \x20be\x20done.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20experimental:\n\
    \x20\x20\x20\x20\x20\x20\x20authorization:\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20provider:\x20firebaserules.googleapis.com\n\n\n\n\x03\x04\0\x01\
    \x12\x03$\x08\x1b\n]\n\x04\x04\0\x02\0\x12\x03'\x02\x16\x1aP\x20The\x20n\
    ame\x20of\x20the\x20authorization\x20provider,\x20such\x20as\n\x20fireba\
    serules.googleapis.com.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04'\x02$\x1d\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03'\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03'\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
