// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/experimental/experimental.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Experimental {
    // message fields
    pub authorization: ::protobuf::SingularPtrField<super::authorization_config::AuthorizationConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Experimental {
    fn default() -> &'a Experimental {
        <Experimental as ::protobuf::Message>::default_instance()
    }
}

impl Experimental {
    pub fn new() -> Experimental {
        ::std::default::Default::default()
    }

    // .google.api.AuthorizationConfig authorization = 8;


    pub fn get_authorization(&self) -> &super::authorization_config::AuthorizationConfig {
        self.authorization.as_ref().unwrap_or_else(|| <super::authorization_config::AuthorizationConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_authorization(&mut self) {
        self.authorization.clear();
    }

    pub fn has_authorization(&self) -> bool {
        self.authorization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_authorization(&mut self, v: super::authorization_config::AuthorizationConfig) {
        self.authorization = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authorization(&mut self) -> &mut super::authorization_config::AuthorizationConfig {
        if self.authorization.is_none() {
            self.authorization.set_default();
        }
        self.authorization.as_mut().unwrap()
    }

    // Take field
    pub fn take_authorization(&mut self) -> super::authorization_config::AuthorizationConfig {
        self.authorization.take().unwrap_or_else(|| super::authorization_config::AuthorizationConfig::new())
    }
}

impl ::protobuf::Message for Experimental {
    fn is_initialized(&self) -> bool {
        for v in &self.authorization {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.authorization)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.authorization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.authorization.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Experimental {
        Experimental::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::authorization_config::AuthorizationConfig>>(
                "authorization",
                |m: &Experimental| { &m.authorization },
                |m: &mut Experimental| { &mut m.authorization },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Experimental>(
                "Experimental",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Experimental {
        static instance: ::protobuf::rt::LazyV2<Experimental> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Experimental::new)
    }
}

impl ::protobuf::Clear for Experimental {
    fn clear(&mut self) {
        self.authorization.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Experimental {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Experimental {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*google/api/experimental/experimental.proto\x12\ngoogle.api\x1a\x1cgoo\
    gle/api/annotations.proto\x1a2google/api/experimental/authorization_conf\
    ig.proto\"U\n\x0cExperimental\x12E\n\rauthorization\x18\x08\x20\x01(\x0b\
    2\x1f.google.api.AuthorizationConfigR\rauthorizationB[\n\x0ecom.google.a\
    piB\x11ExperimentalProtoP\x01Z-google.golang.org/genproto/googleapis/api\
    ;api\xa2\x02\x04GAPIJ\xbb\x07\n\x06\x12\x04\x0f\0\"\x01\n\xbe\x04\n\x01\
    \x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202018\x20Google\x20LLC.\n\
    \n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\
    \x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\t\n\x02\x03\0\x12\
    \x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\0<\n\x08\n\x01\x08\x12\x03\x16\
    \0D\n\t\n\x02\x08\x0b\x12\x03\x16\0D\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\
    \n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\x18\02\n\t\n\x02\
    \x08\x08\x12\x03\x18\02\n\x08\n\x01\x08\x12\x03\x19\0'\n\t\n\x02\x08\x01\
    \x12\x03\x19\0'\n\x08\n\x01\x08\x12\x03\x1a\0\"\n\t\n\x02\x08$\x12\x03\
    \x1a\0\"\nu\n\x02\x04\0\x12\x04\x1f\0\"\x01\x1ai\x20Experimental\x20serv\
    ice\x20configuration.\x20These\x20configuration\x20options\x20can\n\x20o\
    nly\x20be\x20used\x20by\x20whitelisted\x20users.\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x1f\x08\x14\n+\n\x04\x04\0\x02\0\x12\x03!\x02(\x1a\x1e\x20Autho\
    rization\x20configuration.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04!\x02\x1f\
    \x16\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03!\x02\x15\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03!\x16#\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03!&'b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
