// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/system_parameter.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  ### System parameter configuration
///
///  A system parameter is a special kind of parameter defined by the API
///  system, not by an individual API. It is typically mapped to an HTTP header
///  and/or a URL query parameter. This configuration specifies which methods
///  change the names of the system parameters.
// @@protoc_insertion_point(message:google.api.SystemParameters)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SystemParameters {
    // message fields
    // @@protoc_insertion_point(field:google.api.SystemParameters.rules)
    pub rules: ::std::vec::Vec<SystemParameterRule>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.SystemParameters.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SystemParameters {
    fn default() -> &'a SystemParameters {
        <SystemParameters as ::protobuf::Message>::default_instance()
    }
}

impl SystemParameters {
    pub fn new() -> SystemParameters {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &SystemParameters| { &m.rules },
            |m: &mut SystemParameters| { &mut m.rules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SystemParameters>(
            "SystemParameters",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SystemParameters {
    const NAME: &'static str = "SystemParameters";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SystemParameters {
        SystemParameters::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SystemParameters {
        static instance: SystemParameters = SystemParameters {
            rules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SystemParameters {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SystemParameters").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SystemParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SystemParameters {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Define a system parameter rule mapping system parameter definitions to
///  methods.
// @@protoc_insertion_point(message:google.api.SystemParameterRule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SystemParameterRule {
    // message fields
    ///  Selects the methods to which this rule applies. Use '*' to indicate all
    ///  methods in all APIs.
    ///
    ///  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
    // @@protoc_insertion_point(field:google.api.SystemParameterRule.selector)
    pub selector: ::std::string::String,
    ///  Define parameters. Multiple names may be defined for a parameter.
    ///  For a given method call, only one of them should be used. If multiple
    ///  names are used the behavior is implementation-dependent.
    ///  If none of the specified names are present the behavior is
    ///  parameter-dependent.
    // @@protoc_insertion_point(field:google.api.SystemParameterRule.parameters)
    pub parameters: ::std::vec::Vec<SystemParameter>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.SystemParameterRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SystemParameterRule {
    fn default() -> &'a SystemParameterRule {
        <SystemParameterRule as ::protobuf::Message>::default_instance()
    }
}

impl SystemParameterRule {
    pub fn new() -> SystemParameterRule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "selector",
            |m: &SystemParameterRule| { &m.selector },
            |m: &mut SystemParameterRule| { &mut m.selector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "parameters",
            |m: &SystemParameterRule| { &m.parameters },
            |m: &mut SystemParameterRule| { &mut m.parameters },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SystemParameterRule>(
            "SystemParameterRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SystemParameterRule {
    const NAME: &'static str = "SystemParameterRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.selector = is.read_string()?;
                },
                18 => {
                    self.parameters.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        for value in &self.parameters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        for v in &self.parameters {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SystemParameterRule {
        SystemParameterRule::new()
    }

    fn clear(&mut self) {
        self.selector.clear();
        self.parameters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SystemParameterRule {
        static instance: SystemParameterRule = SystemParameterRule {
            selector: ::std::string::String::new(),
            parameters: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SystemParameterRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SystemParameterRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SystemParameterRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SystemParameterRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Define a parameter's name and location. The parameter may be passed as either
///  an HTTP header or a URL query parameter, and if both are passed the behavior
///  is implementation-dependent.
// @@protoc_insertion_point(message:google.api.SystemParameter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SystemParameter {
    // message fields
    ///  Define the name of the parameter, such as "api_key" . It is case sensitive.
    // @@protoc_insertion_point(field:google.api.SystemParameter.name)
    pub name: ::std::string::String,
    ///  Define the HTTP header name to use for the parameter. It is case
    ///  insensitive.
    // @@protoc_insertion_point(field:google.api.SystemParameter.http_header)
    pub http_header: ::std::string::String,
    ///  Define the URL query parameter name to use for the parameter. It is case
    ///  sensitive.
    // @@protoc_insertion_point(field:google.api.SystemParameter.url_query_parameter)
    pub url_query_parameter: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.SystemParameter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SystemParameter {
    fn default() -> &'a SystemParameter {
        <SystemParameter as ::protobuf::Message>::default_instance()
    }
}

impl SystemParameter {
    pub fn new() -> SystemParameter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &SystemParameter| { &m.name },
            |m: &mut SystemParameter| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "http_header",
            |m: &SystemParameter| { &m.http_header },
            |m: &mut SystemParameter| { &mut m.http_header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url_query_parameter",
            |m: &SystemParameter| { &m.url_query_parameter },
            |m: &mut SystemParameter| { &mut m.url_query_parameter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SystemParameter>(
            "SystemParameter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SystemParameter {
    const NAME: &'static str = "SystemParameter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.http_header = is.read_string()?;
                },
                26 => {
                    self.url_query_parameter = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.http_header.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.http_header);
        }
        if !self.url_query_parameter.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.url_query_parameter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.http_header.is_empty() {
            os.write_string(2, &self.http_header)?;
        }
        if !self.url_query_parameter.is_empty() {
            os.write_string(3, &self.url_query_parameter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SystemParameter {
        SystemParameter::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.http_header.clear();
        self.url_query_parameter.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SystemParameter {
        static instance: SystemParameter = SystemParameter {
            name: ::std::string::String::new(),
            http_header: ::std::string::String::new(),
            url_query_parameter: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SystemParameter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SystemParameter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SystemParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SystemParameter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!google/api/system_parameter.proto\x12\ngoogle.api\"I\n\x10SystemParam\
    eters\x125\n\x05rules\x18\x01\x20\x03(\x0b2\x1f.google.api.SystemParamet\
    erRuleR\x05rules\"n\n\x13SystemParameterRule\x12\x1a\n\x08selector\x18\
    \x01\x20\x01(\tR\x08selector\x12;\n\nparameters\x18\x02\x20\x03(\x0b2\
    \x1b.google.api.SystemParameterR\nparameters\"v\n\x0fSystemParameter\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1f\n\x0bhttp_header\x18\
    \x02\x20\x01(\tR\nhttpHeader\x12.\n\x13url_query_parameter\x18\x03\x20\
    \x01(\tR\x11urlQueryParameterBv\n\x0ecom.google.apiB\x14SystemParameterP\
    rotoP\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfig;servi\
    ceconfig\xa2\x02\x04GAPIJ\xc2\x19\n\x06\x12\x04\x0f\0_\x01\n\xbe\x04\n\
    \x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LL\
    C.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\n\x01\x08\x12\
    \x03\x13\0\\\n\t\n\x02\x08\x0b\x12\x03\x13\0\\\n\x08\n\x01\x08\x12\x03\
    \x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\05\
    \n\t\n\x02\x08\x08\x12\x03\x15\05\n\x08\n\x01\x08\x12\x03\x16\0'\n\t\n\
    \x02\x08\x01\x12\x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\
    \x08$\x12\x03\x17\0\"\n\xba\x02\n\x02\x04\0\x12\x04\x1f\0>\x01\x1a\xad\
    \x02\x20###\x20System\x20parameter\x20configuration\n\n\x20A\x20system\
    \x20parameter\x20is\x20a\x20special\x20kind\x20of\x20parameter\x20define\
    d\x20by\x20the\x20API\n\x20system,\x20not\x20by\x20an\x20individual\x20A\
    PI.\x20It\x20is\x20typically\x20mapped\x20to\x20an\x20HTTP\x20header\n\
    \x20and/or\x20a\x20URL\x20query\x20parameter.\x20This\x20configuration\
    \x20specifies\x20which\x20methods\n\x20change\x20the\x20names\x20of\x20t\
    he\x20system\x20parameters.\n\n\n\n\x03\x04\0\x01\x12\x03\x1f\x08\x18\n\
    \xd7\x06\n\x04\x04\0\x02\0\x12\x03=\x02)\x1a\xc9\x06\x20Define\x20system\
    \x20parameters.\n\n\x20The\x20parameters\x20defined\x20here\x20will\x20o\
    verride\x20the\x20default\x20parameters\n\x20implemented\x20by\x20the\
    \x20system.\x20If\x20this\x20field\x20is\x20missing\x20from\x20the\x20se\
    rvice\n\x20config,\x20default\x20system\x20parameters\x20will\x20be\x20u\
    sed.\x20Default\x20system\x20parameters\n\x20and\x20names\x20is\x20imple\
    mentation-dependent.\n\n\x20Example:\x20define\x20api\x20key\x20for\x20a\
    ll\x20methods\n\n\x20\x20\x20\x20\x20system_parameters\n\x20\x20\x20\x20\
    \x20\x20\x20rules:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20selector:\
    \x20\"*\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parameters:\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20name:\x20api_key\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20url_query_pa\
    rameter:\x20api_key\n\n\n\x20Example:\x20define\x202\x20api\x20key\x20na\
    mes\x20for\x20a\x20specific\x20method.\n\n\x20\x20\x20\x20\x20system_par\
    ameters\n\x20\x20\x20\x20\x20\x20\x20rules:\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20-\x20selector:\x20\"/ListShelves\"\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20parameters:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20-\x20name:\x20api_key\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20http_header:\x20Api-Key1\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20name:\x20api_key\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20http_header:\x20Api-Key2\
    \n\n\x20**NOTE:**\x20All\x20service\x20configuration\x20rules\x20follow\
    \x20\"last\x20one\x20wins\"\x20order.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03=\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03=\x0b\x1e\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03=\x1f$\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03='(\n^\n\
    \x02\x04\x01\x12\x04B\0O\x01\x1aR\x20Define\x20a\x20system\x20parameter\
    \x20rule\x20mapping\x20system\x20parameter\x20definitions\x20to\n\x20met\
    hods.\n\n\n\n\x03\x04\x01\x01\x12\x03B\x08\x1b\n\xbe\x01\n\x04\x04\x01\
    \x02\0\x12\x03G\x02\x16\x1a\xb0\x01\x20Selects\x20the\x20methods\x20to\
    \x20which\x20this\x20rule\x20applies.\x20Use\x20'*'\x20to\x20indicate\
    \x20all\n\x20methods\x20in\x20all\x20APIs.\n\n\x20Refer\x20to\x20[select\
    or][google.api.DocumentationRule.selector]\x20for\x20syntax\x20details.\
    \n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03G\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03G\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03G\x14\x15\
    \n\xa4\x02\n\x04\x04\x01\x02\x01\x12\x03N\x02*\x1a\x96\x02\x20Define\x20\
    parameters.\x20Multiple\x20names\x20may\x20be\x20defined\x20for\x20a\x20\
    parameter.\n\x20For\x20a\x20given\x20method\x20call,\x20only\x20one\x20o\
    f\x20them\x20should\x20be\x20used.\x20If\x20multiple\n\x20names\x20are\
    \x20used\x20the\x20behavior\x20is\x20implementation-dependent.\n\x20If\
    \x20none\x20of\x20the\x20specified\x20names\x20are\x20present\x20the\x20\
    behavior\x20is\n\x20parameter-dependent.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03N\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03N\x0b\x1a\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03N\x1b%\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03N()\n\xc8\x01\n\x02\x04\x02\x12\x04T\0_\x01\x1a\xbb\x01\x20D\
    efine\x20a\x20parameter's\x20name\x20and\x20location.\x20The\x20paramete\
    r\x20may\x20be\x20passed\x20as\x20either\n\x20an\x20HTTP\x20header\x20or\
    \x20a\x20URL\x20query\x20parameter,\x20and\x20if\x20both\x20are\x20passe\
    d\x20the\x20behavior\n\x20is\x20implementation-dependent.\n\n\n\n\x03\
    \x04\x02\x01\x12\x03T\x08\x17\nZ\n\x04\x04\x02\x02\0\x12\x03V\x02\x12\
    \x1aM\x20Define\x20the\x20name\x20of\x20the\x20parameter,\x20such\x20as\
    \x20\"api_key\"\x20.\x20It\x20is\x20case\x20sensitive.\n\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03V\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03V\t\
    \r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03V\x10\x11\n]\n\x04\x04\x02\x02\
    \x01\x12\x03Z\x02\x19\x1aP\x20Define\x20the\x20HTTP\x20header\x20name\
    \x20to\x20use\x20for\x20the\x20parameter.\x20It\x20is\x20case\n\x20insen\
    sitive.\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03Z\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03Z\t\x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03Z\x17\x18\nc\n\x04\x04\x02\x02\x02\x12\x03^\x02!\x1aV\x20Define\x20t\
    he\x20URL\x20query\x20parameter\x20name\x20to\x20use\x20for\x20the\x20pa\
    rameter.\x20It\x20is\x20case\n\x20sensitive.\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x05\x12\x03^\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03^\t\x1c\
    \n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03^\x1f\x20b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(SystemParameters::generated_message_descriptor_data());
            messages.push(SystemParameterRule::generated_message_descriptor_data());
            messages.push(SystemParameter::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
