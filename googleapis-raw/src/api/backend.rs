// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/backend.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  `Backend` defines the backend configuration for a service.
// @@protoc_insertion_point(message:google.api.Backend)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Backend {
    // message fields
    ///  A list of API backend rules that apply to individual API methods.
    ///
    ///  **NOTE:** All service configuration rules follow "last one wins" order.
    // @@protoc_insertion_point(field:google.api.Backend.rules)
    pub rules: ::std::vec::Vec<BackendRule>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Backend.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Backend {
    fn default() -> &'a Backend {
        <Backend as ::protobuf::Message>::default_instance()
    }
}

impl Backend {
    pub fn new() -> Backend {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &Backend| { &m.rules },
            |m: &mut Backend| { &mut m.rules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Backend>(
            "Backend",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Backend {
    const NAME: &'static str = "Backend";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Backend {
        Backend::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Backend {
        static instance: Backend = Backend {
            rules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Backend {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Backend").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Backend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Backend {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A backend rule provides configuration for an individual API element.
// @@protoc_insertion_point(message:google.api.BackendRule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BackendRule {
    // message fields
    ///  Selects the methods to which this rule applies.
    ///
    ///  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
    // @@protoc_insertion_point(field:google.api.BackendRule.selector)
    pub selector: ::std::string::String,
    ///  The address of the API backend.
    // @@protoc_insertion_point(field:google.api.BackendRule.address)
    pub address: ::std::string::String,
    ///  The number of seconds to wait for a response from a request.  The default
    ///  deadline for gRPC is infinite (no deadline) and HTTP requests is 5 seconds.
    // @@protoc_insertion_point(field:google.api.BackendRule.deadline)
    pub deadline: f64,
    ///  Minimum deadline in seconds needed for this method. Calls having deadline
    ///  value lower than this will be rejected.
    // @@protoc_insertion_point(field:google.api.BackendRule.min_deadline)
    pub min_deadline: f64,
    ///  The number of seconds to wait for the completion of a long running
    ///  operation. The default is no deadline.
    // @@protoc_insertion_point(field:google.api.BackendRule.operation_deadline)
    pub operation_deadline: f64,
    // @@protoc_insertion_point(field:google.api.BackendRule.path_translation)
    pub path_translation: ::protobuf::EnumOrUnknown<backend_rule::PathTranslation>,
    // message oneof groups
    pub authentication: ::std::option::Option<backend_rule::Authentication>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.BackendRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BackendRule {
    fn default() -> &'a BackendRule {
        <BackendRule as ::protobuf::Message>::default_instance()
    }
}

impl BackendRule {
    pub fn new() -> BackendRule {
        ::std::default::Default::default()
    }

    // string jwt_audience = 7;

    pub fn jwt_audience(&self) -> &str {
        match self.authentication {
            ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_jwt_audience(&mut self) {
        self.authentication = ::std::option::Option::None;
    }

    pub fn has_jwt_audience(&self) -> bool {
        match self.authentication {
            ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_jwt_audience(&mut self, v: ::std::string::String) {
        self.authentication = ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(v))
    }

    // Mutable pointer to the field.
    pub fn mut_jwt_audience(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(_)) = self.authentication {
        } else {
            self.authentication = ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(::std::string::String::new()));
        }
        match self.authentication {
            ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_jwt_audience(&mut self) -> ::std::string::String {
        if self.has_jwt_audience() {
            match self.authentication.take() {
                ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "selector",
            |m: &BackendRule| { &m.selector },
            |m: &mut BackendRule| { &mut m.selector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &BackendRule| { &m.address },
            |m: &mut BackendRule| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "deadline",
            |m: &BackendRule| { &m.deadline },
            |m: &mut BackendRule| { &mut m.deadline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_deadline",
            |m: &BackendRule| { &m.min_deadline },
            |m: &mut BackendRule| { &mut m.min_deadline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_deadline",
            |m: &BackendRule| { &m.operation_deadline },
            |m: &mut BackendRule| { &mut m.operation_deadline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path_translation",
            |m: &BackendRule| { &m.path_translation },
            |m: &mut BackendRule| { &mut m.path_translation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "jwt_audience",
            BackendRule::has_jwt_audience,
            BackendRule::jwt_audience,
            BackendRule::set_jwt_audience,
        ));
        oneofs.push(backend_rule::Authentication::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BackendRule>(
            "BackendRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BackendRule {
    const NAME: &'static str = "BackendRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.selector = is.read_string()?;
                },
                18 => {
                    self.address = is.read_string()?;
                },
                25 => {
                    self.deadline = is.read_double()?;
                },
                33 => {
                    self.min_deadline = is.read_double()?;
                },
                41 => {
                    self.operation_deadline = is.read_double()?;
                },
                48 => {
                    self.path_translation = is.read_enum_or_unknown()?;
                },
                58 => {
                    self.authentication = ::std::option::Option::Some(backend_rule::Authentication::JwtAudience(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if self.deadline != 0. {
            my_size += 1 + 8;
        }
        if self.min_deadline != 0. {
            my_size += 1 + 8;
        }
        if self.operation_deadline != 0. {
            my_size += 1 + 8;
        }
        if self.path_translation != ::protobuf::EnumOrUnknown::new(backend_rule::PathTranslation::PATH_TRANSLATION_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(6, self.path_translation.value());
        }
        if let ::std::option::Option::Some(ref v) = self.authentication {
            match v {
                &backend_rule::Authentication::JwtAudience(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if self.deadline != 0. {
            os.write_double(3, self.deadline)?;
        }
        if self.min_deadline != 0. {
            os.write_double(4, self.min_deadline)?;
        }
        if self.operation_deadline != 0. {
            os.write_double(5, self.operation_deadline)?;
        }
        if self.path_translation != ::protobuf::EnumOrUnknown::new(backend_rule::PathTranslation::PATH_TRANSLATION_UNSPECIFIED) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.path_translation))?;
        }
        if let ::std::option::Option::Some(ref v) = self.authentication {
            match v {
                &backend_rule::Authentication::JwtAudience(ref v) => {
                    os.write_string(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BackendRule {
        BackendRule::new()
    }

    fn clear(&mut self) {
        self.selector.clear();
        self.address.clear();
        self.deadline = 0.;
        self.min_deadline = 0.;
        self.operation_deadline = 0.;
        self.path_translation = ::protobuf::EnumOrUnknown::new(backend_rule::PathTranslation::PATH_TRANSLATION_UNSPECIFIED);
        self.authentication = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BackendRule {
        static instance: BackendRule = BackendRule {
            selector: ::std::string::String::new(),
            address: ::std::string::String::new(),
            deadline: 0.,
            min_deadline: 0.,
            operation_deadline: 0.,
            path_translation: ::protobuf::EnumOrUnknown::from_i32(0),
            authentication: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BackendRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BackendRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BackendRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackendRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BackendRule`
pub mod backend_rule {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.api.BackendRule.authentication)
    pub enum Authentication {
        // @@protoc_insertion_point(oneof_field:google.api.BackendRule.jwt_audience)
        JwtAudience(::std::string::String),
    }

    impl ::protobuf::Oneof for Authentication {
    }

    impl ::protobuf::OneofFull for Authentication {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BackendRule as ::protobuf::MessageFull>::descriptor().oneof_by_name("authentication").unwrap()).clone()
        }
    }

    impl Authentication {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Authentication>("authentication")
        }
    }
    ///  Path Translation specifies how to combine the backend address with the
    ///  request path in order to produce the appropriate forwarding URL for the
    ///  request.
    ///
    ///  Path Translation is applicable only to HTTP-based backends. Backends which
    ///  do not accept requests over HTTP/HTTPS should leave `path_translation`
    ///  unspecified.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.api.BackendRule.PathTranslation)
    pub enum PathTranslation {
        // @@protoc_insertion_point(enum_value:google.api.BackendRule.PathTranslation.PATH_TRANSLATION_UNSPECIFIED)
        PATH_TRANSLATION_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.api.BackendRule.PathTranslation.CONSTANT_ADDRESS)
        CONSTANT_ADDRESS = 1,
        // @@protoc_insertion_point(enum_value:google.api.BackendRule.PathTranslation.APPEND_PATH_TO_ADDRESS)
        APPEND_PATH_TO_ADDRESS = 2,
    }

    impl ::protobuf::Enum for PathTranslation {
        const NAME: &'static str = "PathTranslation";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<PathTranslation> {
            match value {
                0 => ::std::option::Option::Some(PathTranslation::PATH_TRANSLATION_UNSPECIFIED),
                1 => ::std::option::Option::Some(PathTranslation::CONSTANT_ADDRESS),
                2 => ::std::option::Option::Some(PathTranslation::APPEND_PATH_TO_ADDRESS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<PathTranslation> {
            match str {
                "PATH_TRANSLATION_UNSPECIFIED" => ::std::option::Option::Some(PathTranslation::PATH_TRANSLATION_UNSPECIFIED),
                "CONSTANT_ADDRESS" => ::std::option::Option::Some(PathTranslation::CONSTANT_ADDRESS),
                "APPEND_PATH_TO_ADDRESS" => ::std::option::Option::Some(PathTranslation::APPEND_PATH_TO_ADDRESS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [PathTranslation] = &[
            PathTranslation::PATH_TRANSLATION_UNSPECIFIED,
            PathTranslation::CONSTANT_ADDRESS,
            PathTranslation::APPEND_PATH_TO_ADDRESS,
        ];
    }

    impl ::protobuf::EnumFull for PathTranslation {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("BackendRule.PathTranslation").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for PathTranslation {
        fn default() -> Self {
            PathTranslation::PATH_TRANSLATION_UNSPECIFIED
        }
    }

    impl PathTranslation {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PathTranslation>("BackendRule.PathTranslation")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/backend.proto\x12\ngoogle.api\"8\n\x07Backend\x12-\n\
    \x05rules\x18\x01\x20\x03(\x0b2\x17.google.api.BackendRuleR\x05rules\"\
    \xa3\x03\n\x0bBackendRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\tR\x08s\
    elector\x12\x18\n\x07address\x18\x02\x20\x01(\tR\x07address\x12\x1a\n\
    \x08deadline\x18\x03\x20\x01(\x01R\x08deadline\x12!\n\x0cmin_deadline\
    \x18\x04\x20\x01(\x01R\x0bminDeadline\x12-\n\x12operation_deadline\x18\
    \x05\x20\x01(\x01R\x11operationDeadline\x12R\n\x10path_translation\x18\
    \x06\x20\x01(\x0e2'.google.api.BackendRule.PathTranslationR\x0fpathTrans\
    lation\x12#\n\x0cjwt_audience\x18\x07\x20\x01(\tH\0R\x0bjwtAudience\"e\n\
    \x0fPathTranslation\x12\x20\n\x1cPATH_TRANSLATION_UNSPECIFIED\x10\0\x12\
    \x14\n\x10CONSTANT_ADDRESS\x10\x01\x12\x1a\n\x16APPEND_PATH_TO_ADDRESS\
    \x10\x02B\x10\n\x0eauthenticationBn\n\x0ecom.google.apiB\x0cBackendProto\
    P\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfig;serviceco\
    nfig\xa2\x02\x04GAPIJ\xb0#\n\x06\x12\x04\x0f\0~\x01\n\xbe\x04\n\x01\x0c\
    \x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\n\x01\x08\x12\x03\x13\0\
    \\\n\t\n\x02\x08\x0b\x12\x03\x13\0\\\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\
    \n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\0-\n\t\n\x02\
    \x08\x08\x12\x03\x15\0-\n\x08\n\x01\x08\x12\x03\x16\0'\n\t\n\x02\x08\x01\
    \x12\x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08$\x12\x03\
    \x17\0\"\nH\n\x02\x04\0\x12\x04\x1a\0\x1f\x01\x1a<\x20`Backend`\x20defin\
    es\x20the\x20backend\x20configuration\x20for\x20a\x20service.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x1a\x08\x0f\n\x9b\x01\n\x04\x04\0\x02\0\x12\x03\
    \x1e\x02!\x1a\x8d\x01\x20A\x20list\x20of\x20API\x20backend\x20rules\x20t\
    hat\x20apply\x20to\x20individual\x20API\x20methods.\n\n\x20**NOTE:**\x20\
    All\x20service\x20configuration\x20rules\x20follow\x20\"last\x20one\x20w\
    ins\"\x20order.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x1e\x02\n\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\x1e\x0b\x16\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x1e\x17\x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1e\x1f\x20\nR\n\
    \x02\x04\x01\x12\x04\"\0~\x01\x1aF\x20A\x20backend\x20rule\x20provides\
    \x20configuration\x20for\x20an\x20individual\x20API\x20element.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\"\x08\x13\n\xcd\x02\n\x04\x04\x01\x04\0\x12\x04\
    *\x02Z\x03\x1a\xbe\x02\x20Path\x20Translation\x20specifies\x20how\x20to\
    \x20combine\x20the\x20backend\x20address\x20with\x20the\n\x20request\x20\
    path\x20in\x20order\x20to\x20produce\x20the\x20appropriate\x20forwarding\
    \x20URL\x20for\x20the\n\x20request.\n\n\x20Path\x20Translation\x20is\x20\
    applicable\x20only\x20to\x20HTTP-based\x20backends.\x20Backends\x20which\
    \n\x20do\x20not\x20accept\x20requests\x20over\x20HTTP/HTTPS\x20should\
    \x20leave\x20`path_translation`\n\x20unspecified.\n\n\x0c\n\x05\x04\x01\
    \x04\0\x01\x12\x03*\x07\x16\n\r\n\x06\x04\x01\x04\0\x02\0\x12\x03+\x04%\
    \n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03+\x04\x20\n\x0e\n\x07\x04\
    \x01\x04\0\x02\0\x02\x12\x03+#$\n\x95\x07\n\x06\x04\x01\x04\0\x02\x01\
    \x12\x03D\x04\x19\x1a\x85\x07\x20Use\x20the\x20backend\x20address\x20as-\
    is,\x20with\x20no\x20modification\x20to\x20the\x20path.\x20If\x20the\n\
    \x20URL\x20pattern\x20contains\x20variables,\x20the\x20variable\x20names\
    \x20and\x20values\x20will\x20be\n\x20appended\x20to\x20the\x20query\x20s\
    tring.\x20If\x20a\x20query\x20string\x20parameter\x20and\x20a\x20URL\n\
    \x20pattern\x20variable\x20have\x20the\x20same\x20name,\x20this\x20may\
    \x20result\x20in\x20duplicate\x20keys\x20in\n\x20the\x20query\x20string.\
    \n\n\x20#\x20Examples\n\n\x20Given\x20the\x20following\x20operation\x20c\
    onfig:\n\n\x20\x20\x20\x20\x20Method\x20path:\x20\x20\x20\x20\x20\x20\
    \x20\x20/api/company/{cid}/user/{uid}\n\x20\x20\x20\x20\x20Backend\x20ad\
    dress:\x20\x20\x20\x20https://example.cloudfunctions.net/getUser\n\n\x20\
    Requests\x20to\x20the\x20following\x20request\x20paths\x20will\x20call\
    \x20the\x20backend\x20at\x20the\n\x20translated\x20path:\n\n\x20\x20\x20\
    \x20\x20Request\x20path:\x20/api/company/widgetworks/user/johndoe\n\x20\
    \x20\x20\x20\x20Translated:\n\x20\x20\x20\x20\x20https://example.cloudfu\
    nctions.net/getUser?cid=widgetworks&uid=johndoe\n\n\x20\x20\x20\x20\x20R\
    equest\x20path:\x20/api/company/widgetworks/user/johndoe?timezone=EST\n\
    \x20\x20\x20\x20\x20Translated:\n\x20\x20\x20\x20\x20https://example.clo\
    udfunctions.net/getUser?timezone=EST&cid=widgetworks&uid=johndoe\n\n\x0e\
    \n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03D\x04\x14\n\x0e\n\x07\x04\x01\
    \x04\0\x02\x01\x02\x12\x03D\x17\x18\n\x82\x05\n\x06\x04\x01\x04\0\x02\
    \x02\x12\x03Y\x04\x1f\x1a\xf2\x04\x20The\x20request\x20path\x20will\x20b\
    e\x20appended\x20to\x20the\x20backend\x20address.\n\n\x20#\x20Examples\n\
    \n\x20Given\x20the\x20following\x20operation\x20config:\n\n\x20\x20\x20\
    \x20\x20Method\x20path:\x20\x20\x20\x20\x20\x20\x20\x20/api/company/{cid\
    }/user/{uid}\n\x20\x20\x20\x20\x20Backend\x20address:\x20\x20\x20\x20htt\
    ps://example.appspot.com\n\n\x20Requests\x20to\x20the\x20following\x20re\
    quest\x20paths\x20will\x20call\x20the\x20backend\x20at\x20the\n\x20trans\
    lated\x20path:\n\n\x20\x20\x20\x20\x20Request\x20path:\x20/api/company/w\
    idgetworks/user/johndoe\n\x20\x20\x20\x20\x20Translated:\n\x20\x20\x20\
    \x20\x20https://example.appspot.com/api/company/widgetworks/user/johndoe\
    \n\n\x20\x20\x20\x20\x20Request\x20path:\x20/api/company/widgetworks/use\
    r/johndoe?timezone=EST\n\x20\x20\x20\x20\x20Translated:\n\x20\x20\x20\
    \x20\x20https://example.appspot.com/api/company/widgetworks/user/johndoe\
    ?timezone=EST\n\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03Y\x04\x1a\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x03Y\x1d\x1e\n\x90\x01\n\x04\
    \x04\x01\x02\0\x12\x03_\x02\x16\x1a\x82\x01\x20Selects\x20the\x20methods\
    \x20to\x20which\x20this\x20rule\x20applies.\n\n\x20Refer\x20to\x20[selec\
    tor][google.api.DocumentationRule.selector]\x20for\x20syntax\x20details.\
    \n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03_\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03_\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03_\x14\x15\
    \n.\n\x04\x04\x01\x02\x01\x12\x03b\x02\x15\x1a!\x20The\x20address\x20of\
    \x20the\x20API\x20backend.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03b\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03b\t\x10\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03b\x13\x14\n\xa6\x01\n\x04\x04\x01\x02\x02\x12\
    \x03f\x02\x16\x1a\x98\x01\x20The\x20number\x20of\x20seconds\x20to\x20wai\
    t\x20for\x20a\x20response\x20from\x20a\x20request.\x20\x20The\x20default\
    \n\x20deadline\x20for\x20gRPC\x20is\x20infinite\x20(no\x20deadline)\x20a\
    nd\x20HTTP\x20requests\x20is\x205\x20seconds.\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03f\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03f\t\x11\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03f\x14\x15\n\x81\x01\n\x04\x04\
    \x01\x02\x03\x12\x03j\x02\x1a\x1at\x20Minimum\x20deadline\x20in\x20secon\
    ds\x20needed\x20for\x20this\x20method.\x20Calls\x20having\x20deadline\n\
    \x20value\x20lower\x20than\x20this\x20will\x20be\x20rejected.\n\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03j\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03j\t\x15\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03j\x18\x19\ny\
    \n\x04\x04\x01\x02\x04\x12\x03n\x02\x20\x1al\x20The\x20number\x20of\x20s\
    econds\x20to\x20wait\x20for\x20the\x20completion\x20of\x20a\x20long\x20r\
    unning\n\x20operation.\x20The\x20default\x20is\x20no\x20deadline.\n\n\
    \x0c\n\x05\x04\x01\x02\x04\x05\x12\x03n\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03n\t\x1b\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03n\x1e\x1f\
    \n\x0b\n\x04\x04\x01\x02\x05\x12\x03p\x02'\n\x0c\n\x05\x04\x01\x02\x05\
    \x06\x12\x03p\x02\x11\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03p\x12\"\n\
    \x0c\n\x05\x04\x01\x02\x05\x03\x12\x03p%&\n\xf6\x02\n\x04\x04\x01\x08\0\
    \x12\x04z\x02}\x03\x1a\xe7\x02\x20Authentication\x20settings\x20used\x20\
    by\x20the\x20backend.\n\n\x20These\x20are\x20typically\x20used\x20to\x20\
    provide\x20service\x20management\x20functionality\x20to\n\x20a\x20backen\
    d\x20served\x20on\x20a\x20publicly-routable\x20URL.\x20The\x20`authentic\
    ation`\n\x20details\x20should\x20match\x20the\x20authentication\x20behav\
    ior\x20used\x20by\x20the\x20backend.\n\n\x20For\x20example,\x20specifyin\
    g\x20`jwt_audience`\x20implies\x20that\x20the\x20backend\x20expects\n\
    \x20authentication\x20via\x20a\x20JWT.\n\n\x0c\n\x05\x04\x01\x08\0\x01\
    \x12\x03z\x08\x16\nW\n\x04\x04\x01\x02\x06\x12\x03|\x04\x1c\x1aJ\x20The\
    \x20JWT\x20audience\x20is\x20used\x20when\x20generating\x20a\x20JWT\x20i\
    d\x20token\x20for\x20the\x20backend.\n\n\x0c\n\x05\x04\x01\x02\x06\x05\
    \x12\x03|\x04\n\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03|\x0b\x17\n\x0c\n\
    \x05\x04\x01\x02\x06\x03\x12\x03|\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Backend::generated_message_descriptor_data());
            messages.push(BackendRule::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(backend_rule::PathTranslation::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
