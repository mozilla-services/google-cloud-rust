// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/config_change.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Output generated from semantically comparing two versions of a service
///  configuration.
///
///  Includes detailed information about a field that have changed with
///  applicable advice about potential consequences for the change, such as
///  backwards-incompatibility.
// @@protoc_insertion_point(message:google.api.ConfigChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ConfigChange {
    // message fields
    ///  Object hierarchy path to the change, with levels separated by a '.'
    ///  character. For repeated fields, an applicable unique identifier field is
    ///  used for the index (usually selector, name, or id). For maps, the term
    ///  'key' is used. If the field has no unique identifier, the numeric index
    ///  is used.
    ///  Examples:
    ///  - visibility.rules[selector=="google.LibraryService.ListBooks"].restriction
    ///  - quota.metric_rules[selector=="google"].metric_costs[key=="reads"].value
    ///  - logging.producer_destinations[0]
    // @@protoc_insertion_point(field:google.api.ConfigChange.element)
    pub element: ::std::string::String,
    ///  Value of the changed object in the old Service configuration,
    ///  in JSON format. This field will not be populated if ChangeType == ADDED.
    // @@protoc_insertion_point(field:google.api.ConfigChange.old_value)
    pub old_value: ::std::string::String,
    ///  Value of the changed object in the new Service configuration,
    ///  in JSON format. This field will not be populated if ChangeType == REMOVED.
    // @@protoc_insertion_point(field:google.api.ConfigChange.new_value)
    pub new_value: ::std::string::String,
    ///  The type for this change, either ADDED, REMOVED, or MODIFIED.
    // @@protoc_insertion_point(field:google.api.ConfigChange.change_type)
    pub change_type: ::protobuf::EnumOrUnknown<ChangeType>,
    ///  Collection of advice provided for this change, useful for determining the
    ///  possible impact of this change.
    // @@protoc_insertion_point(field:google.api.ConfigChange.advices)
    pub advices: ::std::vec::Vec<Advice>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.ConfigChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConfigChange {
    fn default() -> &'a ConfigChange {
        <ConfigChange as ::protobuf::Message>::default_instance()
    }
}

impl ConfigChange {
    pub fn new() -> ConfigChange {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "element",
            |m: &ConfigChange| { &m.element },
            |m: &mut ConfigChange| { &mut m.element },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "old_value",
            |m: &ConfigChange| { &m.old_value },
            |m: &mut ConfigChange| { &mut m.old_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "new_value",
            |m: &ConfigChange| { &m.new_value },
            |m: &mut ConfigChange| { &mut m.new_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "change_type",
            |m: &ConfigChange| { &m.change_type },
            |m: &mut ConfigChange| { &mut m.change_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "advices",
            |m: &ConfigChange| { &m.advices },
            |m: &mut ConfigChange| { &mut m.advices },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConfigChange>(
            "ConfigChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConfigChange {
    const NAME: &'static str = "ConfigChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.element = is.read_string()?;
                },
                18 => {
                    self.old_value = is.read_string()?;
                },
                26 => {
                    self.new_value = is.read_string()?;
                },
                32 => {
                    self.change_type = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.advices.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.element.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.element);
        }
        if !self.old_value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.old_value);
        }
        if !self.new_value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.new_value);
        }
        if self.change_type != ::protobuf::EnumOrUnknown::new(ChangeType::CHANGE_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.change_type.value());
        }
        for value in &self.advices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.element.is_empty() {
            os.write_string(1, &self.element)?;
        }
        if !self.old_value.is_empty() {
            os.write_string(2, &self.old_value)?;
        }
        if !self.new_value.is_empty() {
            os.write_string(3, &self.new_value)?;
        }
        if self.change_type != ::protobuf::EnumOrUnknown::new(ChangeType::CHANGE_TYPE_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.change_type))?;
        }
        for v in &self.advices {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConfigChange {
        ConfigChange::new()
    }

    fn clear(&mut self) {
        self.element.clear();
        self.old_value.clear();
        self.new_value.clear();
        self.change_type = ::protobuf::EnumOrUnknown::new(ChangeType::CHANGE_TYPE_UNSPECIFIED);
        self.advices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConfigChange {
        static instance: ConfigChange = ConfigChange {
            element: ::std::string::String::new(),
            old_value: ::std::string::String::new(),
            new_value: ::std::string::String::new(),
            change_type: ::protobuf::EnumOrUnknown::from_i32(0),
            advices: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConfigChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConfigChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConfigChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Generated advice about this change, used for providing more
///  information about how a change will affect the existing service.
// @@protoc_insertion_point(message:google.api.Advice)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Advice {
    // message fields
    ///  Useful description for why this advice was applied and what actions should
    ///  be taken to mitigate any implied risks.
    // @@protoc_insertion_point(field:google.api.Advice.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Advice.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Advice {
    fn default() -> &'a Advice {
        <Advice as ::protobuf::Message>::default_instance()
    }
}

impl Advice {
    pub fn new() -> Advice {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Advice| { &m.description },
            |m: &mut Advice| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Advice>(
            "Advice",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Advice {
    const NAME: &'static str = "Advice";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Advice {
        Advice::new()
    }

    fn clear(&mut self) {
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Advice {
        static instance: Advice = Advice {
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Advice {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Advice").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Advice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Advice {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Classifies set of possible modifications to an object in the service
///  configuration.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.api.ChangeType)
pub enum ChangeType {
    // @@protoc_insertion_point(enum_value:google.api.ChangeType.CHANGE_TYPE_UNSPECIFIED)
    CHANGE_TYPE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:google.api.ChangeType.ADDED)
    ADDED = 1,
    // @@protoc_insertion_point(enum_value:google.api.ChangeType.REMOVED)
    REMOVED = 2,
    // @@protoc_insertion_point(enum_value:google.api.ChangeType.MODIFIED)
    MODIFIED = 3,
}

impl ::protobuf::Enum for ChangeType {
    const NAME: &'static str = "ChangeType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChangeType> {
        match value {
            0 => ::std::option::Option::Some(ChangeType::CHANGE_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ChangeType::ADDED),
            2 => ::std::option::Option::Some(ChangeType::REMOVED),
            3 => ::std::option::Option::Some(ChangeType::MODIFIED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ChangeType> {
        match str {
            "CHANGE_TYPE_UNSPECIFIED" => ::std::option::Option::Some(ChangeType::CHANGE_TYPE_UNSPECIFIED),
            "ADDED" => ::std::option::Option::Some(ChangeType::ADDED),
            "REMOVED" => ::std::option::Option::Some(ChangeType::REMOVED),
            "MODIFIED" => ::std::option::Option::Some(ChangeType::MODIFIED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ChangeType] = &[
        ChangeType::CHANGE_TYPE_UNSPECIFIED,
        ChangeType::ADDED,
        ChangeType::REMOVED,
        ChangeType::MODIFIED,
    ];
}

impl ::protobuf::EnumFull for ChangeType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ChangeType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ChangeType {
    fn default() -> Self {
        ChangeType::CHANGE_TYPE_UNSPECIFIED
    }
}

impl ChangeType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ChangeType>("ChangeType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egoogle/api/config_change.proto\x12\ngoogle.api\"\xc9\x01\n\x0cConf\
    igChange\x12\x18\n\x07element\x18\x01\x20\x01(\tR\x07element\x12\x1b\n\t\
    old_value\x18\x02\x20\x01(\tR\x08oldValue\x12\x1b\n\tnew_value\x18\x03\
    \x20\x01(\tR\x08newValue\x127\n\x0bchange_type\x18\x04\x20\x01(\x0e2\x16\
    .google.api.ChangeTypeR\nchangeType\x12,\n\x07advices\x18\x05\x20\x03(\
    \x0b2\x12.google.api.AdviceR\x07advices\"*\n\x06Advice\x12\x20\n\x0bdesc\
    ription\x18\x02\x20\x01(\tR\x0bdescription*O\n\nChangeType\x12\x1b\n\x17\
    CHANGE_TYPE_UNSPECIFIED\x10\0\x12\t\n\x05ADDED\x10\x01\x12\x0b\n\x07REMO\
    VED\x10\x02\x12\x0c\n\x08MODIFIED\x10\x03Bq\n\x0ecom.google.apiB\x11Conf\
    igChangeProtoP\x01ZCgoogle.golang.org/genproto/googleapis/api/configchan\
    ge;configchange\xa2\x02\x04GAPIJ\xe7\x18\n\x06\x12\x04\x0f\0T\x01\n\xbe\
    \x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\
    \x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Versio\
    n\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\n\x01\
    \x08\x12\x03\x13\0Z\n\t\n\x02\x08\x0b\x12\x03\x13\0Z\n\x08\n\x01\x08\x12\
    \x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\
    \02\n\t\n\x02\x08\x08\x12\x03\x15\02\n\x08\n\x01\x08\x12\x03\x16\0'\n\t\
    \n\x02\x08\x01\x12\x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\
    \x08$\x12\x03\x17\0\"\n\x8e\x02\n\x02\x04\0\x12\x04\x1f\09\x01\x1a\x81\
    \x02\x20Output\x20generated\x20from\x20semantically\x20comparing\x20two\
    \x20versions\x20of\x20a\x20service\n\x20configuration.\n\n\x20Includes\
    \x20detailed\x20information\x20about\x20a\x20field\x20that\x20have\x20ch\
    anged\x20with\n\x20applicable\x20advice\x20about\x20potential\x20consequ\
    ences\x20for\x20the\x20change,\x20such\x20as\n\x20backwards-incompatibil\
    ity.\n\n\n\n\x03\x04\0\x01\x12\x03\x1f\x08\x14\n\xff\x03\n\x04\x04\0\x02\
    \0\x12\x03)\x02\x15\x1a\xf1\x03\x20Object\x20hierarchy\x20path\x20to\x20\
    the\x20change,\x20with\x20levels\x20separated\x20by\x20a\x20'.'\n\x20cha\
    racter.\x20For\x20repeated\x20fields,\x20an\x20applicable\x20unique\x20i\
    dentifier\x20field\x20is\n\x20used\x20for\x20the\x20index\x20(usually\
    \x20selector,\x20name,\x20or\x20id).\x20For\x20maps,\x20the\x20term\n\
    \x20'key'\x20is\x20used.\x20If\x20the\x20field\x20has\x20no\x20unique\
    \x20identifier,\x20the\x20numeric\x20index\n\x20is\x20used.\n\x20Example\
    s:\n\x20-\x20visibility.rules[selector==\"google.LibraryService.ListBook\
    s\"].restriction\n\x20-\x20quota.metric_rules[selector==\"google\"].metr\
    ic_costs[key==\"reads\"].value\n\x20-\x20logging.producer_destinations[0\
    ]\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03)\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03)\x13\x14\n\x97\
    \x01\n\x04\x04\0\x02\x01\x12\x03-\x02\x17\x1a\x89\x01\x20Value\x20of\x20\
    the\x20changed\x20object\x20in\x20the\x20old\x20Service\x20configuration\
    ,\n\x20in\x20JSON\x20format.\x20This\x20field\x20will\x20not\x20be\x20po\
    pulated\x20if\x20ChangeType\x20==\x20ADDED.\n\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03-\t\x12\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03-\x15\x16\n\x99\x01\n\x04\x04\0\x02\x02\
    \x12\x031\x02\x17\x1a\x8b\x01\x20Value\x20of\x20the\x20changed\x20object\
    \x20in\x20the\x20new\x20Service\x20configuration,\n\x20in\x20JSON\x20for\
    mat.\x20This\x20field\x20will\x20not\x20be\x20populated\x20if\x20ChangeT\
    ype\x20==\x20REMOVED.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x031\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x031\t\x12\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x031\x15\x16\nL\n\x04\x04\0\x02\x03\x12\x034\x02\x1d\x1a?\x20Th\
    e\x20type\x20for\x20this\x20change,\x20either\x20ADDED,\x20REMOVED,\x20o\
    r\x20MODIFIED.\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x034\x02\x0c\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x034\r\x18\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x034\x1b\x1c\ny\n\x04\x04\0\x02\x04\x12\x038\x02\x1e\x1al\x20Collection\
    \x20of\x20advice\x20provided\x20for\x20this\x20change,\x20useful\x20for\
    \x20determining\x20the\n\x20possible\x20impact\x20of\x20this\x20change.\
    \n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x038\x02\n\n\x0c\n\x05\x04\0\x02\
    \x04\x06\x12\x038\x0b\x11\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x038\x12\x19\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x038\x1c\x1d\n\x8b\x01\n\x02\x04\x01\
    \x12\x04=\0A\x01\x1a\x7f\x20Generated\x20advice\x20about\x20this\x20chan\
    ge,\x20used\x20for\x20providing\x20more\n\x20information\x20about\x20how\
    \x20a\x20change\x20will\x20affect\x20the\x20existing\x20service.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03=\x08\x0e\n\x82\x01\n\x04\x04\x01\x02\0\x12\x03@\
    \x02\x19\x1au\x20Useful\x20description\x20for\x20why\x20this\x20advice\
    \x20was\x20applied\x20and\x20what\x20actions\x20should\n\x20be\x20taken\
    \x20to\x20mitigate\x20any\x20implied\x20risks.\n\n\x0c\n\x05\x04\x01\x02\
    \0\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03@\t\x14\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03@\x17\x18\nb\n\x02\x05\0\x12\x04E\0T\
    \x01\x1aV\x20Classifies\x20set\x20of\x20possible\x20modifications\x20to\
    \x20an\x20object\x20in\x20the\x20service\n\x20configuration.\n\n\n\n\x03\
    \x05\0\x01\x12\x03E\x05\x0f\n%\n\x04\x05\0\x02\0\x12\x03G\x02\x1e\x1a\
    \x18\x20No\x20value\x20was\x20provided.\n\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03G\x02\x19\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03G\x1c\x1d\ny\n\x04\
    \x05\0\x02\x01\x12\x03K\x02\x0c\x1al\x20The\x20changed\x20object\x20exis\
    ts\x20in\x20the\x20'new'\x20service\x20configuration,\x20but\x20not\n\
    \x20in\x20the\x20'old'\x20service\x20configuration.\n\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03K\x02\x07\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03K\n\
    \x0b\ny\n\x04\x05\0\x02\x02\x12\x03O\x02\x0e\x1al\x20The\x20changed\x20o\
    bject\x20exists\x20in\x20the\x20'old'\x20service\x20configuration,\x20bu\
    t\x20not\n\x20in\x20the\x20'new'\x20service\x20configuration.\n\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03O\x02\t\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03O\x0c\r\ne\n\x04\x05\0\x02\x03\x12\x03S\x02\x0f\x1aX\x20The\x20chang\
    ed\x20object\x20exists\x20in\x20both\x20service\x20configurations,\x20bu\
    t\x20its\x20value\n\x20is\x20different.\n\n\x0c\n\x05\x05\0\x02\x03\x01\
    \x12\x03S\x02\n\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03S\r\x0eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ConfigChange::generated_message_descriptor_data());
            messages.push(Advice::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ChangeType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
