// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/policy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct FieldPolicy {
    // message fields
    pub selector: ::std::string::String,
    pub resource_permission: ::std::string::String,
    pub resource_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldPolicy {
    fn default() -> &'a FieldPolicy {
        <FieldPolicy as ::protobuf::Message>::default_instance()
    }
}

impl FieldPolicy {
    pub fn new() -> FieldPolicy {
        ::std::default::Default::default()
    }

    // string selector = 1;


    pub fn get_selector(&self) -> &str {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    // string resource_permission = 2;


    pub fn get_resource_permission(&self) -> &str {
        &self.resource_permission
    }
    pub fn clear_resource_permission(&mut self) {
        self.resource_permission.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_permission(&mut self, v: ::std::string::String) {
        self.resource_permission = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_permission(&mut self) -> &mut ::std::string::String {
        &mut self.resource_permission
    }

    // Take field
    pub fn take_resource_permission(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_permission, ::std::string::String::new())
    }

    // string resource_type = 3;


    pub fn get_resource_type(&self) -> &str {
        &self.resource_type
    }
    pub fn clear_resource_type(&mut self) {
        self.resource_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_type(&mut self, v: ::std::string::String) {
        self.resource_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_type(&mut self) -> &mut ::std::string::String {
        &mut self.resource_type
    }

    // Take field
    pub fn take_resource_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FieldPolicy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_permission)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.resource_permission.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.resource_permission);
        }
        if !self.resource_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.resource_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.resource_permission.is_empty() {
            os.write_string(2, &self.resource_permission)?;
        }
        if !self.resource_type.is_empty() {
            os.write_string(3, &self.resource_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldPolicy {
        FieldPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "selector",
                |m: &FieldPolicy| { &m.selector },
                |m: &mut FieldPolicy| { &mut m.selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_permission",
                |m: &FieldPolicy| { &m.resource_permission },
                |m: &mut FieldPolicy| { &mut m.resource_permission },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_type",
                |m: &FieldPolicy| { &m.resource_type },
                |m: &mut FieldPolicy| { &mut m.resource_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldPolicy>(
                "FieldPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldPolicy {
        static instance: ::protobuf::rt::LazyV2<FieldPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldPolicy::new)
    }
}

impl ::protobuf::Clear for FieldPolicy {
    fn clear(&mut self) {
        self.selector.clear();
        self.resource_permission.clear();
        self.resource_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MethodPolicy {
    // message fields
    pub selector: ::std::string::String,
    pub request_policies: ::protobuf::RepeatedField<FieldPolicy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MethodPolicy {
    fn default() -> &'a MethodPolicy {
        <MethodPolicy as ::protobuf::Message>::default_instance()
    }
}

impl MethodPolicy {
    pub fn new() -> MethodPolicy {
        ::std::default::Default::default()
    }

    // string selector = 9;


    pub fn get_selector(&self) -> &str {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    // repeated .google.api.FieldPolicy request_policies = 2;


    pub fn get_request_policies(&self) -> &[FieldPolicy] {
        &self.request_policies
    }
    pub fn clear_request_policies(&mut self) {
        self.request_policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_policies(&mut self, v: ::protobuf::RepeatedField<FieldPolicy>) {
        self.request_policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_policies(&mut self) -> &mut ::protobuf::RepeatedField<FieldPolicy> {
        &mut self.request_policies
    }

    // Take field
    pub fn take_request_policies(&mut self) -> ::protobuf::RepeatedField<FieldPolicy> {
        ::std::mem::replace(&mut self.request_policies, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MethodPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.request_policies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.request_policies)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.selector);
        }
        for value in &self.request_policies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(9, &self.selector)?;
        }
        for v in &self.request_policies {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MethodPolicy {
        MethodPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "selector",
                |m: &MethodPolicy| { &m.selector },
                |m: &mut MethodPolicy| { &mut m.selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldPolicy>>(
                "request_policies",
                |m: &MethodPolicy| { &m.request_policies },
                |m: &mut MethodPolicy| { &mut m.request_policies },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MethodPolicy>(
                "MethodPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MethodPolicy {
        static instance: ::protobuf::rt::LazyV2<MethodPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MethodPolicy::new)
    }
}

impl ::protobuf::Clear for MethodPolicy {
    fn clear(&mut self) {
        self.selector.clear();
        self.request_policies.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MethodPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MethodPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

/// Extension fields
pub mod exts {

    pub const field_policy: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeMessage<super::FieldPolicy>> = ::protobuf::ext::ExtFieldOptional { field_number: 158361448, phantom: ::std::marker::PhantomData };

    pub const method_policy: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MethodOptions, ::protobuf::types::ProtobufTypeMessage<super::MethodPolicy>> = ::protobuf::ext::ExtFieldOptional { field_number: 161893301, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17google/api/policy.proto\x12\ngoogle.api\x1a\x20google/protobuf/des\
    criptor.proto\"\x7f\n\x0bFieldPolicy\x12\x1a\n\x08selector\x18\x01\x20\
    \x01(\tR\x08selector\x12/\n\x13resource_permission\x18\x02\x20\x01(\tR\
    \x12resourcePermission\x12#\n\rresource_type\x18\x03\x20\x01(\tR\x0creso\
    urceType\"n\n\x0cMethodPolicy\x12\x1a\n\x08selector\x18\t\x20\x01(\tR\
    \x08selector\x12B\n\x10request_policies\x18\x02\x20\x03(\x0b2\x17.google\
    .api.FieldPolicyR\x0frequestPolicies:\\\n\x0cfield_policy\x18\xe8\xce\
    \xc1K\x20\x01(\x0b2\x17.google.api.FieldPolicy\x12\x1d.google.protobuf.F\
    ieldOptionsR\x0bfieldPolicy:`\n\rmethod_policy\x18\xb5\x97\x99M\x20\x01(\
    \x0b2\x18.google.api.MethodPolicy\x12\x1e.google.protobuf.MethodOptionsR\
    \x0cmethodPolicyBp\n\x0ecom.google.apiB\x0bPolicyProtoP\x01ZEgoogle.gola\
    ng.org/genproto/googleapis/api/serviceconfig;serviceconfig\xf8\x01\x01\
    \xa2\x02\x04GAPIJ\xe0\x17\n\x06\x12\x04\x0e\0T\x01\n\xbc\x04\n\x01\x0c\
    \x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202023\x20Google\x20LLC\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\t\n\x02\x03\0\x12\x03\x12\0*\
    \n\x08\n\x01\x08\x12\x03\x14\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x14\0\x1f\n\
    \x08\n\x01\x08\x12\x03\x15\0\\\n\t\n\x02\x08\x0b\x12\x03\x15\0\\\n\x08\n\
    \x01\x08\x12\x03\x16\0\"\n\t\n\x02\x08\n\x12\x03\x16\0\"\n\x08\n\x01\x08\
    \x12\x03\x17\0,\n\t\n\x02\x08\x08\x12\x03\x17\0,\n\x08\n\x01\x08\x12\x03\
    \x18\0'\n\t\n\x02\x08\x01\x12\x03\x18\0'\n\x08\n\x01\x08\x12\x03\x19\0\"\
    \n\t\n\x02\x08$\x12\x03\x19\0\"\nK\n\x01\x07\x12\x04\x1c\0\x1f\x01\x1a@\
    \x20Provides\x20`google.api.field_policy`\x20annotation\x20at\x20proto\
    \x20fields.\n\n!\n\x02\x07\0\x12\x03\x1e\x02'\x1a\x16\x20See\x20[FieldPo\
    licy][].\n\n\n\n\x03\x07\0\x02\x12\x03\x1c\x07#\n\n\n\x03\x07\0\x06\x12\
    \x03\x1e\x02\r\n\n\n\x03\x07\0\x01\x12\x03\x1e\x0e\x1a\n\n\n\x03\x07\0\
    \x03\x12\x03\x1e\x1d&\nM\n\x01\x07\x12\x04\"\0%\x01\x1aB\x20Provides\x20\
    `google.api.method_policy`\x20annotation\x20at\x20proto\x20methods.\n\n\
    \"\n\x02\x07\x01\x12\x03$\x02)\x1a\x17\x20See\x20[MethodPolicy][].\n\n\n\
    \n\x03\x07\x01\x02\x12\x03\"\x07$\n\n\n\x03\x07\x01\x06\x12\x03$\x02\x0e\
    \n\n\n\x03\x07\x01\x01\x12\x03$\x0f\x1c\n\n\n\x03\x07\x01\x03\x12\x03$\
    \x1f(\n\xca\x03\n\x02\x04\0\x12\x04/\0D\x01\x1a\xbd\x03\x20Google\x20API\
    \x20Policy\x20Annotation\n\n\x20This\x20message\x20defines\x20a\x20simpl\
    e\x20API\x20policy\x20annotation\x20that\x20can\x20be\x20used\x20to\n\
    \x20annotate\x20API\x20request\x20and\x20response\x20message\x20fields\
    \x20with\x20applicable\x20policies.\n\x20One\x20field\x20may\x20have\x20\
    multiple\x20applicable\x20policies\x20that\x20must\x20all\x20be\x20satis\
    fied\n\x20before\x20a\x20request\x20can\x20be\x20processed.\x20This\x20p\
    olicy\x20annotation\x20is\x20used\x20to\n\x20generate\x20the\x20overall\
    \x20policy\x20that\x20will\x20be\x20used\x20for\x20automatic\x20runtime\
    \n\x20policy\x20enforcement\x20and\x20documentation\x20generation.\n\n\n\
    \n\x03\x04\0\x01\x12\x03/\x08\x13\n\xbc\x03\n\x04\x04\0\x02\0\x12\x03:\
    \x02\x16\x1a\xae\x03\x20Selects\x20one\x20or\x20more\x20request\x20or\
    \x20response\x20message\x20fields\x20to\x20apply\x20this\n\x20`FieldPoli\
    cy`.\n\n\x20When\x20a\x20`FieldPolicy`\x20is\x20used\x20in\x20proto\x20a\
    nnotation,\x20the\x20selector\x20must\n\x20be\x20left\x20as\x20empty.\
    \x20The\x20service\x20config\x20generator\x20will\x20automatically\x20fi\
    ll\n\x20the\x20correct\x20value.\n\n\x20When\x20a\x20`FieldPolicy`\x20is\
    \x20used\x20in\x20service\x20config,\x20the\x20selector\x20must\x20be\
    \x20a\n\x20comma-separated\x20string\x20with\x20valid\x20request\x20or\
    \x20response\x20field\x20paths,\n\x20such\x20as\x20\"foo.bar\"\x20or\x20\
    \"foo.bar,foo.baz\".\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03:\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03:\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03:\x14\x15\n\x86\x02\n\x04\x04\0\x02\x01\x12\x03@\x02!\x1a\xf8\
    \x01\x20Specifies\x20the\x20required\x20permission(s)\x20for\x20the\x20r\
    esource\x20referred\x20to\x20by\x20the\n\x20field.\x20It\x20requires\x20\
    the\x20field\x20contains\x20a\x20valid\x20resource\x20reference,\x20and\
    \n\x20the\x20request\x20must\x20pass\x20the\x20permission\x20checks\x20t\
    o\x20proceed.\x20For\x20example,\n\x20\"resourcemanager.projects.get\".\
    \n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03@\t\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03@\x1f\x20\n\
    U\n\x04\x04\0\x02\x02\x12\x03C\x02\x1b\x1aH\x20Specifies\x20the\x20resou\
    rce\x20type\x20for\x20the\x20resource\x20referred\x20to\x20by\x20the\x20\
    field.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03C\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03C\t\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03C\x19\
    \x1a\n9\n\x02\x04\x01\x12\x04G\0T\x01\x1a-\x20Defines\x20policies\x20app\
    lying\x20to\x20an\x20RPC\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03G\x08\
    \x14\n\xdc\x02\n\x04\x04\x01\x02\0\x12\x03P\x02\x16\x1a\xce\x02\x20Selec\
    ts\x20a\x20method\x20to\x20which\x20these\x20policies\x20should\x20be\
    \x20enforced,\x20for\x20example,\n\x20\"google.pubsub.v1.Subscriber.Crea\
    teSubscription\".\n\n\x20Refer\x20to\x20[selector][google.api.Documentat\
    ionRule.selector]\x20for\x20syntax\n\x20details.\n\n\x20NOTE:\x20This\
    \x20field\x20must\x20not\x20be\x20set\x20in\x20the\x20proto\x20annotatio\
    n.\x20It\x20will\x20be\n\x20automatically\x20filled\x20by\x20the\x20serv\
    ice\x20config\x20compiler\x20.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03P\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03P\t\x11\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03P\x14\x15\nC\n\x04\x04\x01\x02\x01\x12\x03S\x02,\
    \x1a6\x20Policies\x20that\x20are\x20applicable\x20to\x20the\x20request\
    \x20message.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03S\x02\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x06\x12\x03S\x0b\x16\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03S\x17'\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03S*+b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
