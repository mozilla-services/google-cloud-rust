// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/context.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:google.api.Context)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Context {
    // message fields
    ///  A list of RPC context rules that apply to individual API methods.
    ///
    ///  **NOTE:** All service configuration rules follow "last one wins" order.
    // @@protoc_insertion_point(field:google.api.Context.rules)
    pub rules: ::std::vec::Vec<ContextRule>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Context.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Context {
    fn default() -> &'a Context {
        <Context as ::protobuf::Message>::default_instance()
    }
}

impl Context {
    pub fn new() -> Context {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &Context| { &m.rules },
            |m: &mut Context| { &mut m.rules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Context>(
            "Context",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Context {
    const NAME: &'static str = "Context";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Context {
        Context::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Context {
        static instance: Context = Context {
            rules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Context {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Context").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Context {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Context {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A context rule provides information about the context for an individual API
///  element.
// @@protoc_insertion_point(message:google.api.ContextRule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContextRule {
    // message fields
    ///  Selects the methods to which this rule applies.
    ///
    ///  Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
    // @@protoc_insertion_point(field:google.api.ContextRule.selector)
    pub selector: ::std::string::String,
    ///  A list of full type names of requested contexts.
    // @@protoc_insertion_point(field:google.api.ContextRule.requested)
    pub requested: ::std::vec::Vec<::std::string::String>,
    ///  A list of full type names of provided contexts.
    // @@protoc_insertion_point(field:google.api.ContextRule.provided)
    pub provided: ::std::vec::Vec<::std::string::String>,
    ///  A list of full type names or extension IDs of extensions allowed in grpc
    ///  side channel from client to backend.
    // @@protoc_insertion_point(field:google.api.ContextRule.allowed_request_extensions)
    pub allowed_request_extensions: ::std::vec::Vec<::std::string::String>,
    ///  A list of full type names or extension IDs of extensions allowed in grpc
    ///  side channel from backend to client.
    // @@protoc_insertion_point(field:google.api.ContextRule.allowed_response_extensions)
    pub allowed_response_extensions: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.ContextRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContextRule {
    fn default() -> &'a ContextRule {
        <ContextRule as ::protobuf::Message>::default_instance()
    }
}

impl ContextRule {
    pub fn new() -> ContextRule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "selector",
            |m: &ContextRule| { &m.selector },
            |m: &mut ContextRule| { &mut m.selector },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requested",
            |m: &ContextRule| { &m.requested },
            |m: &mut ContextRule| { &mut m.requested },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "provided",
            |m: &ContextRule| { &m.provided },
            |m: &mut ContextRule| { &mut m.provided },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_request_extensions",
            |m: &ContextRule| { &m.allowed_request_extensions },
            |m: &mut ContextRule| { &mut m.allowed_request_extensions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "allowed_response_extensions",
            |m: &ContextRule| { &m.allowed_response_extensions },
            |m: &mut ContextRule| { &mut m.allowed_response_extensions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContextRule>(
            "ContextRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContextRule {
    const NAME: &'static str = "ContextRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.selector = is.read_string()?;
                },
                18 => {
                    self.requested.push(is.read_string()?);
                },
                26 => {
                    self.provided.push(is.read_string()?);
                },
                34 => {
                    self.allowed_request_extensions.push(is.read_string()?);
                },
                42 => {
                    self.allowed_response_extensions.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        for value in &self.requested {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.provided {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.allowed_request_extensions {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.allowed_response_extensions {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        for v in &self.requested {
            os.write_string(2, &v)?;
        };
        for v in &self.provided {
            os.write_string(3, &v)?;
        };
        for v in &self.allowed_request_extensions {
            os.write_string(4, &v)?;
        };
        for v in &self.allowed_response_extensions {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContextRule {
        ContextRule::new()
    }

    fn clear(&mut self) {
        self.selector.clear();
        self.requested.clear();
        self.provided.clear();
        self.allowed_request_extensions.clear();
        self.allowed_response_extensions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContextRule {
        static instance: ContextRule = ContextRule {
            selector: ::std::string::String::new(),
            requested: ::std::vec::Vec::new(),
            provided: ::std::vec::Vec::new(),
            allowed_request_extensions: ::std::vec::Vec::new(),
            allowed_response_extensions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ContextRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContextRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContextRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/context.proto\x12\ngoogle.api\"8\n\x07Context\x12-\n\
    \x05rules\x18\x01\x20\x03(\x0b2\x17.google.api.ContextRuleR\x05rules\"\
    \xe1\x01\n\x0bContextRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\tR\x08s\
    elector\x12\x1c\n\trequested\x18\x02\x20\x03(\tR\trequested\x12\x1a\n\
    \x08provided\x18\x03\x20\x03(\tR\x08provided\x12<\n\x1aallowed_request_e\
    xtensions\x18\x04\x20\x03(\tR\x18allowedRequestExtensions\x12>\n\x1ballo\
    wed_response_extensions\x18\x05\x20\x03(\tR\x19allowedResponseExtensions\
    Bn\n\x0ecom.google.apiB\x0cContextProtoP\x01ZEgoogle.golang.org/genproto\
    /googleapis/api/serviceconfig;serviceconfig\xa2\x02\x04GAPIJ\x8d\x17\n\
    \x06\x12\x04\x0f\0Y\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\
    \x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\
    \x12\x03\x11\0\x13\n\x08\n\x01\x08\x12\x03\x13\0\\\n\t\n\x02\x08\x0b\x12\
    \x03\x13\0\\\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\
    \0\"\n\x08\n\x01\x08\x12\x03\x15\0-\n\t\n\x02\x08\x08\x12\x03\x15\0-\n\
    \x08\n\x01\x08\x12\x03\x16\0'\n\t\n\x02\x08\x01\x12\x03\x16\0'\n\x08\n\
    \x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08$\x12\x03\x17\0\"\n\xdf\x08\n\x02\
    \x04\0\x12\x04=\0B\x01\x1a\xd2\x08\x20`Context`\x20defines\x20which\x20c\
    ontexts\x20an\x20API\x20requests.\n\n\x20Example:\n\n\x20\x20\x20\x20\
    \x20context:\n\x20\x20\x20\x20\x20\x20\x20rules:\n\x20\x20\x20\x20\x20\
    \x20\x20-\x20selector:\x20\"*\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20req\
    uested:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20google.rpc.context.Pro\
    jectContext\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20google.rpc.context\
    .OriginContext\n\n\x20The\x20above\x20specifies\x20that\x20all\x20method\
    s\x20in\x20the\x20API\x20request\n\x20`google.rpc.context.ProjectContext\
    `\x20and\n\x20`google.rpc.context.OriginContext`.\n\n\x20Available\x20co\
    ntext\x20types\x20are\x20defined\x20in\x20package\n\x20`google.rpc.conte\
    xt`.\n\n\x20This\x20also\x20provides\x20mechanism\x20to\x20whitelist\x20\
    any\x20protobuf\x20message\x20extension\x20that\n\x20can\x20be\x20sent\
    \x20in\x20grpc\x20metadata\x20using\x20\xe2\x80\x9cx-goog-ext-<extension\
    _id>-bin\xe2\x80\x9d\x20and\n\x20\xe2\x80\x9cx-goog-ext-<extension_id>-j\
    spb\xe2\x80\x9d\x20format.\x20For\x20example,\x20list\x20any\x20service\
    \n\x20specific\x20protobuf\x20types\x20that\x20can\x20appear\x20in\x20gr\
    pc\x20metadata\x20as\x20follows\x20in\x20your\n\x20yaml\x20file:\n\n\x20\
    Example:\n\n\x20\x20\x20\x20\x20context:\n\x20\x20\x20\x20\x20\x20\x20ru\
    les:\n\x20\x20\x20\x20\x20\x20\x20\x20-\x20selector:\x20\"google.example\
    .library.v1.LibraryService.CreateBook\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20allowed_request_extensions:\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20-\x20google.foo.v1.NewExtension\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20allowed_response_extensions:\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20-\x20google.foo.v1.NewExtension\n\n\x20You\x20can\x20als\
    o\x20specify\x20extension\x20ID\x20instead\x20of\x20fully\x20qualified\
    \x20extension\x20name\n\x20here.\n\n\n\n\x03\x04\0\x01\x12\x03=\x08\x0f\
    \n\x9b\x01\n\x04\x04\0\x02\0\x12\x03A\x02!\x1a\x8d\x01\x20A\x20list\x20o\
    f\x20RPC\x20context\x20rules\x20that\x20apply\x20to\x20individual\x20API\
    \x20methods.\n\n\x20**NOTE:**\x20All\x20service\x20configuration\x20rule\
    s\x20follow\x20\"last\x20one\x20wins\"\x20order.\n\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03A\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03A\x0b\x16\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03A\x17\x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03A\x1f\x20\nc\n\x02\x04\x01\x12\x04F\0Y\x01\x1aW\x20A\x20context\x20r\
    ule\x20provides\x20information\x20about\x20the\x20context\x20for\x20an\
    \x20individual\x20API\n\x20element.\n\n\n\n\x03\x04\x01\x01\x12\x03F\x08\
    \x13\n\x90\x01\n\x04\x04\x01\x02\0\x12\x03J\x02\x16\x1a\x82\x01\x20Selec\
    ts\x20the\x20methods\x20to\x20which\x20this\x20rule\x20applies.\n\n\x20R\
    efer\x20to\x20[selector][google.api.DocumentationRule.selector]\x20for\
    \x20syntax\x20details.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03J\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03J\t\x11\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03J\x14\x15\n?\n\x04\x04\x01\x02\x01\x12\x03M\x02\x20\x1a2\x20\
    A\x20list\x20of\x20full\x20type\x20names\x20of\x20requested\x20contexts.\
    \n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03M\x02\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03M\x0b\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03M\
    \x12\x1b\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03M\x1e\x1f\n>\n\x04\x04\
    \x01\x02\x02\x12\x03P\x02\x1f\x1a1\x20A\x20list\x20of\x20full\x20type\
    \x20names\x20of\x20provided\x20contexts.\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x04\x12\x03P\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03P\x0b\x11\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03P\x12\x1a\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03P\x1d\x1e\n}\n\x04\x04\x01\x02\x03\x12\x03T\x021\x1ap\
    \x20A\x20list\x20of\x20full\x20type\x20names\x20or\x20extension\x20IDs\
    \x20of\x20extensions\x20allowed\x20in\x20grpc\n\x20side\x20channel\x20fr\
    om\x20client\x20to\x20backend.\n\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\
    T\x02\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03T\x0b\x11\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03T\x12,\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03T/\
    0\n}\n\x04\x04\x01\x02\x04\x12\x03X\x022\x1ap\x20A\x20list\x20of\x20full\
    \x20type\x20names\x20or\x20extension\x20IDs\x20of\x20extensions\x20allow\
    ed\x20in\x20grpc\n\x20side\x20channel\x20from\x20backend\x20to\x20client\
    .\n\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03X\x02\n\n\x0c\n\x05\x04\x01\
    \x02\x04\x05\x12\x03X\x0b\x11\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03X\
    \x12-\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03X01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Context::generated_message_descriptor_data());
            messages.push(ContextRule::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
