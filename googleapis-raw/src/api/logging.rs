// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/logging.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.Logging)
pub struct Logging {
    // message fields
    ///  Logging configurations for sending logs to the producer project.
    ///  There can be multiple producer destinations, each one must have a
    ///  different monitored resource type. A log can be used in at most
    ///  one producer destination.
    // @@protoc_insertion_point(field:google.api.Logging.producer_destinations)
    pub producer_destinations: ::std::vec::Vec<logging::LoggingDestination>,
    ///  Logging configurations for sending logs to the consumer project.
    ///  There can be multiple consumer destinations, each one must have a
    ///  different monitored resource type. A log can be used in at most
    ///  one consumer destination.
    // @@protoc_insertion_point(field:google.api.Logging.consumer_destinations)
    pub consumer_destinations: ::std::vec::Vec<logging::LoggingDestination>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Logging.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Logging {
    fn default() -> &'a Logging {
        <Logging as ::protobuf::Message>::default_instance()
    }
}

impl Logging {
    pub fn new() -> Logging {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "producer_destinations",
            |m: &Logging| { &m.producer_destinations },
            |m: &mut Logging| { &mut m.producer_destinations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "consumer_destinations",
            |m: &Logging| { &m.consumer_destinations },
            |m: &mut Logging| { &mut m.consumer_destinations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Logging>(
            "Logging",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Logging {
    const NAME: &'static str = "Logging";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.producer_destinations.push(is.read_message()?);
                },
                18 => {
                    self.consumer_destinations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.producer_destinations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.consumer_destinations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.producer_destinations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.consumer_destinations {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Logging {
        Logging::new()
    }

    fn clear(&mut self) {
        self.producer_destinations.clear();
        self.consumer_destinations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Logging {
        static instance: Logging = Logging {
            producer_destinations: ::std::vec::Vec::new(),
            consumer_destinations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Logging {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Logging").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Logging {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logging {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Logging`
pub mod logging {
    ///  Configuration of a specific logging destination (the producer project
    ///  or the consumer project).
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.api.Logging.LoggingDestination)
    pub struct LoggingDestination {
        // message fields
        ///  The monitored resource type. The type must be defined in the
        ///  [Service.monitored_resources][google.api.Service.monitored_resources] section.
        // @@protoc_insertion_point(field:google.api.Logging.LoggingDestination.monitored_resource)
        pub monitored_resource: ::std::string::String,
        ///  Names of the logs to be sent to this destination. Each name must
        ///  be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
        ///  not a domain scoped name, it will be automatically prefixed with
        ///  the service name followed by "/".
        // @@protoc_insertion_point(field:google.api.Logging.LoggingDestination.logs)
        pub logs: ::std::vec::Vec<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.Logging.LoggingDestination.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LoggingDestination {
        fn default() -> &'a LoggingDestination {
            <LoggingDestination as ::protobuf::Message>::default_instance()
        }
    }

    impl LoggingDestination {
        pub fn new() -> LoggingDestination {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "monitored_resource",
                |m: &LoggingDestination| { &m.monitored_resource },
                |m: &mut LoggingDestination| { &mut m.monitored_resource },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "logs",
                |m: &LoggingDestination| { &m.logs },
                |m: &mut LoggingDestination| { &mut m.logs },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoggingDestination>(
                "Logging.LoggingDestination",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LoggingDestination {
        const NAME: &'static str = "LoggingDestination";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    26 => {
                        self.monitored_resource = is.read_string()?;
                    },
                    10 => {
                        self.logs.push(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.monitored_resource.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.monitored_resource);
            }
            for value in &self.logs {
                my_size += ::protobuf::rt::string_size(1, &value);
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.monitored_resource.is_empty() {
                os.write_string(3, &self.monitored_resource)?;
            }
            for v in &self.logs {
                os.write_string(1, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LoggingDestination {
            LoggingDestination::new()
        }

        fn clear(&mut self) {
            self.monitored_resource.clear();
            self.logs.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LoggingDestination {
            static instance: LoggingDestination = LoggingDestination {
                monitored_resource: ::std::string::String::new(),
                logs: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LoggingDestination {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Logging.LoggingDestination").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LoggingDestination {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LoggingDestination {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/logging.proto\x12\ngoogle.api\"\x9c\x02\n\x07Logging\
    \x12[\n\x15producer_destinations\x18\x01\x20\x03(\x0b2&.google.api.Loggi\
    ng.LoggingDestinationR\x14producerDestinations\x12[\n\x15consumer_destin\
    ations\x18\x02\x20\x03(\x0b2&.google.api.Logging.LoggingDestinationR\x14\
    consumerDestinations\x1aW\n\x12LoggingDestination\x12-\n\x12monitored_re\
    source\x18\x03\x20\x01(\tR\x11monitoredResource\x12\x12\n\x04logs\x18\
    \x01\x20\x03(\tR\x04logsBn\n\x0ecom.google.apiB\x0cLoggingProtoP\x01ZEgo\
    ogle.golang.org/genproto/googleapis/api/serviceconfig;serviceconfig\xa2\
    \x02\x04GAPIJ\x9b\x17\n\x06\x12\x04\x0f\0P\x01\n\xbe\x04\n\x01\x0c\x12\
    \x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\n\x01\x08\x12\x03\x13\0\\\n\
    \t\n\x02\x08\x0b\x12\x03\x13\0\\\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\n\
    \x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\0-\n\t\n\x02\x08\
    \x08\x12\x03\x15\0-\n\x08\n\x01\x08\x12\x03\x16\0'\n\t\n\x02\x08\x01\x12\
    \x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08$\x12\x03\x17\0\
    \"\n\xda\x07\n\x02\x04\0\x12\x046\0P\x01\x1a\xcd\x07\x20Logging\x20confi\
    guration\x20of\x20the\x20service.\n\n\x20The\x20following\x20example\x20\
    shows\x20how\x20to\x20configure\x20logs\x20to\x20be\x20sent\x20to\x20the\
    \n\x20producer\x20and\x20consumer\x20projects.\x20In\x20the\x20example,\
    \x20the\x20`activity_history`\n\x20log\x20is\x20sent\x20to\x20both\x20th\
    e\x20producer\x20and\x20consumer\x20projects,\x20whereas\x20the\n\x20`pu\
    rchase_history`\x20log\x20is\x20only\x20sent\x20to\x20the\x20producer\
    \x20project.\n\n\x20\x20\x20\x20\x20monitored_resources:\n\x20\x20\x20\
    \x20\x20-\x20type:\x20library.googleapis.com/branch\n\x20\x20\x20\x20\
    \x20\x20\x20labels:\n\x20\x20\x20\x20\x20\x20\x20-\x20key:\x20/city\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20description:\x20The\x20city\x20where\
    \x20the\x20library\x20branch\x20is\x20located\x20in.\n\x20\x20\x20\x20\
    \x20\x20\x20-\x20key:\x20/name\n\x20\x20\x20\x20\x20\x20\x20\x20\x20desc\
    ription:\x20The\x20name\x20of\x20the\x20branch.\n\x20\x20\x20\x20\x20log\
    s:\n\x20\x20\x20\x20\x20-\x20name:\x20activity_history\n\x20\x20\x20\x20\
    \x20\x20\x20labels:\n\x20\x20\x20\x20\x20\x20\x20-\x20key:\x20/customer_\
    id\n\x20\x20\x20\x20\x20-\x20name:\x20purchase_history\n\x20\x20\x20\x20\
    \x20logging:\n\x20\x20\x20\x20\x20\x20\x20producer_destinations:\n\x20\
    \x20\x20\x20\x20\x20\x20-\x20monitored_resource:\x20library.googleapis.c\
    om/branch\n\x20\x20\x20\x20\x20\x20\x20\x20\x20logs:\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20-\x20activity_history\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20-\x20purchase_history\n\x20\x20\x20\x20\x20\x20\x20consumer_dest\
    inations:\n\x20\x20\x20\x20\x20\x20\x20-\x20monitored_resource:\x20libra\
    ry.googleapis.com/branch\n\x20\x20\x20\x20\x20\x20\x20\x20\x20logs:\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20activity_history\n\n\n\n\x03\
    \x04\0\x01\x12\x036\x08\x0f\np\n\x04\x04\0\x03\0\x12\x049\x02C\x03\x1ab\
    \x20Configuration\x20of\x20a\x20specific\x20logging\x20destination\x20(t\
    he\x20producer\x20project\n\x20or\x20the\x20consumer\x20project).\n\n\
    \x0c\n\x05\x04\0\x03\0\x01\x12\x039\n\x1c\n\x9e\x01\n\x06\x04\0\x03\0\
    \x02\0\x12\x03<\x04\"\x1a\x8e\x01\x20The\x20monitored\x20resource\x20typ\
    e.\x20The\x20type\x20must\x20be\x20defined\x20in\x20the\n\x20[Service.mo\
    nitored_resources][google.api.Service.monitored_resources]\x20section.\n\
    \n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03<\x04\n\n\x0e\n\x07\x04\0\x03\
    \0\x02\0\x01\x12\x03<\x0b\x1d\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03<\
    \x20!\n\x8e\x02\n\x06\x04\0\x03\0\x02\x01\x12\x03B\x04\x1d\x1a\xfe\x01\
    \x20Names\x20of\x20the\x20logs\x20to\x20be\x20sent\x20to\x20this\x20dest\
    ination.\x20Each\x20name\x20must\n\x20be\x20defined\x20in\x20the\x20[Ser\
    vice.logs][google.api.Service.logs]\x20section.\x20If\x20the\x20log\x20n\
    ame\x20is\n\x20not\x20a\x20domain\x20scoped\x20name,\x20it\x20will\x20be\
    \x20automatically\x20prefixed\x20with\n\x20the\x20service\x20name\x20fol\
    lowed\x20by\x20\"/\".\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03B\x04\
    \x0c\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03B\r\x13\n\x0e\n\x07\x04\
    \0\x03\0\x02\x01\x01\x12\x03B\x14\x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x03\x12\x03B\x1b\x1c\n\xef\x01\n\x04\x04\0\x02\0\x12\x03I\x028\x1a\xe1\
    \x01\x20Logging\x20configurations\x20for\x20sending\x20logs\x20to\x20the\
    \x20producer\x20project.\n\x20There\x20can\x20be\x20multiple\x20producer\
    \x20destinations,\x20each\x20one\x20must\x20have\x20a\n\x20different\x20\
    monitored\x20resource\x20type.\x20A\x20log\x20can\x20be\x20used\x20in\
    \x20at\x20most\n\x20one\x20producer\x20destination.\n\n\x0c\n\x05\x04\0\
    \x02\0\x04\x12\x03I\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03I\x0b\x1d\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03I\x1e3\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03I67\n\xef\x01\n\x04\x04\0\x02\x01\x12\x03O\x028\x1a\xe1\x01\x20Loggi\
    ng\x20configurations\x20for\x20sending\x20logs\x20to\x20the\x20consumer\
    \x20project.\n\x20There\x20can\x20be\x20multiple\x20consumer\x20destinat\
    ions,\x20each\x20one\x20must\x20have\x20a\n\x20different\x20monitored\
    \x20resource\x20type.\x20A\x20log\x20can\x20be\x20used\x20in\x20at\x20mo\
    st\n\x20one\x20consumer\x20destination.\n\n\x0c\n\x05\x04\0\x02\x01\x04\
    \x12\x03O\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03O\x0b\x1d\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03O\x1e3\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03O67b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Logging::generated_message_descriptor_data());
            messages.push(logging::LoggingDestination::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
