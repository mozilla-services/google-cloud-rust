// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/launch_stage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  The launch stage as defined by [Google Cloud Platform
///  Launch Stages](http://cloud.google.com/terms/launch-stages).
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.api.LaunchStage)
pub enum LaunchStage {
    // @@protoc_insertion_point(enum_value:google.api.LaunchStage.LAUNCH_STAGE_UNSPECIFIED)
    LAUNCH_STAGE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:google.api.LaunchStage.EARLY_ACCESS)
    EARLY_ACCESS = 1,
    // @@protoc_insertion_point(enum_value:google.api.LaunchStage.ALPHA)
    ALPHA = 2,
    // @@protoc_insertion_point(enum_value:google.api.LaunchStage.BETA)
    BETA = 3,
    // @@protoc_insertion_point(enum_value:google.api.LaunchStage.GA)
    GA = 4,
    // @@protoc_insertion_point(enum_value:google.api.LaunchStage.DEPRECATED)
    DEPRECATED = 5,
}

impl ::protobuf::Enum for LaunchStage {
    const NAME: &'static str = "LaunchStage";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LaunchStage> {
        match value {
            0 => ::std::option::Option::Some(LaunchStage::LAUNCH_STAGE_UNSPECIFIED),
            1 => ::std::option::Option::Some(LaunchStage::EARLY_ACCESS),
            2 => ::std::option::Option::Some(LaunchStage::ALPHA),
            3 => ::std::option::Option::Some(LaunchStage::BETA),
            4 => ::std::option::Option::Some(LaunchStage::GA),
            5 => ::std::option::Option::Some(LaunchStage::DEPRECATED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<LaunchStage> {
        match str {
            "LAUNCH_STAGE_UNSPECIFIED" => ::std::option::Option::Some(LaunchStage::LAUNCH_STAGE_UNSPECIFIED),
            "EARLY_ACCESS" => ::std::option::Option::Some(LaunchStage::EARLY_ACCESS),
            "ALPHA" => ::std::option::Option::Some(LaunchStage::ALPHA),
            "BETA" => ::std::option::Option::Some(LaunchStage::BETA),
            "GA" => ::std::option::Option::Some(LaunchStage::GA),
            "DEPRECATED" => ::std::option::Option::Some(LaunchStage::DEPRECATED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LaunchStage] = &[
        LaunchStage::LAUNCH_STAGE_UNSPECIFIED,
        LaunchStage::EARLY_ACCESS,
        LaunchStage::ALPHA,
        LaunchStage::BETA,
        LaunchStage::GA,
        LaunchStage::DEPRECATED,
    ];
}

impl ::protobuf::EnumFull for LaunchStage {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LaunchStage").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LaunchStage {
    fn default() -> Self {
        LaunchStage::LAUNCH_STAGE_UNSPECIFIED
    }
}

impl LaunchStage {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LaunchStage>("LaunchStage")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dgoogle/api/launch_stage.proto\x12\ngoogle.api*j\n\x0bLaunchStage\
    \x12\x1c\n\x18LAUNCH_STAGE_UNSPECIFIED\x10\0\x12\x10\n\x0cEARLY_ACCESS\
    \x10\x01\x12\t\n\x05ALPHA\x10\x02\x12\x08\n\x04BETA\x10\x03\x12\x06\n\
    \x02GA\x10\x04\x12\x0e\n\nDEPRECATED\x10\x05BZ\n\x0ecom.google.apiB\x10L\
    aunchStageProtoP\x01Z-google.golang.org/genproto/googleapis/api;api\xa2\
    \x02\x04GAPIJ\xed\x15\n\x06\x12\x04\x0f\0B\x01\n\xbe\x04\n\x01\x0c\x12\
    \x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\n\x01\x08\x12\x03\x13\0D\n\
    \t\n\x02\x08\x0b\x12\x03\x13\0D\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\n\
    \x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\01\n\t\n\x02\x08\
    \x08\x12\x03\x15\01\n\x08\n\x01\x08\x12\x03\x16\0'\n\t\n\x02\x08\x01\x12\
    \x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08$\x12\x03\x17\0\
    \"\n\x81\x01\n\x02\x05\0\x12\x04\x1b\0B\x01\x1au\x20The\x20launch\x20sta\
    ge\x20as\x20defined\x20by\x20[Google\x20Cloud\x20Platform\n\x20Launch\
    \x20Stages](http://cloud.google.com/terms/launch-stages).\n\n\n\n\x03\
    \x05\0\x01\x12\x03\x1b\x05\x10\n-\n\x04\x05\0\x02\0\x12\x03\x1d\x02\x1f\
    \x1a\x20\x20Do\x20not\x20use\x20this\x20default\x20value.\n\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x1d\x02\x1a\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x1d\x1d\x1e\n\xc5\x02\n\x04\x05\0\x02\x01\x12\x03$\x02\x13\x1a\xb7\x02\
    \x20Early\x20Access\x20features\x20are\x20limited\x20to\x20a\x20closed\
    \x20group\x20of\x20testers.\x20To\x20use\n\x20these\x20features,\x20you\
    \x20must\x20sign\x20up\x20in\x20advance\x20and\x20sign\x20a\x20Trusted\
    \x20Tester\n\x20agreement\x20(which\x20includes\x20confidentiality\x20pr\
    ovisions).\x20These\x20features\x20may\n\x20be\x20unstable,\x20changed\
    \x20in\x20backward-incompatible\x20ways,\x20and\x20are\x20not\n\x20guara\
    nteed\x20to\x20be\x20released.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03$\
    \x02\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03$\x11\x12\n\xed\x04\n\x04\
    \x05\0\x02\x02\x12\x03/\x02\x0c\x1a\xdf\x04\x20Alpha\x20is\x20a\x20limit\
    ed\x20availability\x20test\x20for\x20releases\x20before\x20they\x20are\
    \x20cleared\n\x20for\x20widespread\x20use.\x20By\x20Alpha,\x20all\x20sig\
    nificant\x20design\x20issues\x20are\x20resolved\n\x20and\x20we\x20are\
    \x20in\x20the\x20process\x20of\x20verifying\x20functionality.\x20Alpha\
    \x20customers\n\x20need\x20to\x20apply\x20for\x20access,\x20agree\x20to\
    \x20applicable\x20terms,\x20and\x20have\x20their\n\x20projects\x20whitel\
    isted.\x20Alpha\x20releases\x20don\xe2\x80\x99t\x20have\x20to\x20be\x20f\
    eature\x20complete,\n\x20no\x20SLAs\x20are\x20provided,\x20and\x20there\
    \x20are\x20no\x20technical\x20support\x20obligations,\x20but\n\x20they\
    \x20will\x20be\x20far\x20enough\x20along\x20that\x20customers\x20can\x20\
    actually\x20use\x20them\x20in\n\x20test\x20environments\x20or\x20for\x20\
    limited-use\x20tests\x20--\x20just\x20like\x20they\x20would\x20in\n\x20n\
    ormal\x20production\x20cases.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03/\
    \x02\x07\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03/\n\x0b\n\xc9\x02\n\x04\
    \x05\0\x02\x03\x12\x036\x02\x0b\x1a\xbb\x02\x20Beta\x20is\x20the\x20poin\
    t\x20at\x20which\x20we\x20are\x20ready\x20to\x20open\x20a\x20release\x20\
    for\x20any\n\x20customer\x20to\x20use.\x20There\x20are\x20no\x20SLA\x20o\
    r\x20technical\x20support\x20obligations\x20in\x20a\n\x20Beta\x20release\
    .\x20Products\x20will\x20be\x20complete\x20from\x20a\x20feature\x20persp\
    ective,\x20but\n\x20may\x20have\x20some\x20open\x20outstanding\x20issues\
    .\x20Beta\x20releases\x20are\x20suitable\x20for\n\x20limited\x20producti\
    on\x20use\x20cases.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x036\x02\x06\n\
    \x0c\n\x05\x05\0\x02\x03\x02\x12\x036\t\n\nx\n\x04\x05\0\x02\x04\x12\x03\
    :\x02\t\x1ak\x20GA\x20features\x20are\x20open\x20to\x20all\x20developers\
    \x20and\x20are\x20considered\x20stable\x20and\n\x20fully\x20qualified\
    \x20for\x20production\x20use.\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03:\
    \x02\x04\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03:\x07\x08\n\xc9\x02\n\x04\
    \x05\0\x02\x05\x12\x03A\x02\x11\x1a\xbb\x02\x20Deprecated\x20features\
    \x20are\x20scheduled\x20to\x20be\x20shut\x20down\x20and\x20removed.\x20F\
    or\x20more\n\x20information,\x20see\x20the\x20\xe2\x80\x9cDeprecation\
    \x20Policy\xe2\x80\x9d\x20section\x20of\x20our\x20[Terms\x20of\n\x20Serv\
    ice](https://cloud.google.com/terms/)\n\x20and\x20the\x20[Google\x20Clou\
    d\x20Platform\x20Subject\x20to\x20the\x20Deprecation\n\x20Policy](https:\
    //cloud.google.com/terms/deprecation)\x20documentation.\n\n\x0c\n\x05\
    \x05\0\x02\x05\x01\x12\x03A\x02\x0c\n\x0c\n\x05\x05\0\x02\x05\x02\x12\
    \x03A\x0f\x10b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(LaunchStage::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
