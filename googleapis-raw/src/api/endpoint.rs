// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/endpoint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:google.api.Endpoint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Endpoint {
    // message fields
    ///  The canonical name of this endpoint.
    // @@protoc_insertion_point(field:google.api.Endpoint.name)
    pub name: ::std::string::String,
    ///  DEPRECATED: This field is no longer supported. Instead of using aliases,
    ///  please specify multiple [google.api.Endpoint][google.api.Endpoint] for each of the intended
    ///  aliases.
    ///
    ///  Additional names that this endpoint will be hosted on.
    // @@protoc_insertion_point(field:google.api.Endpoint.aliases)
    pub aliases: ::std::vec::Vec<::std::string::String>,
    ///  The list of features enabled on this endpoint.
    // @@protoc_insertion_point(field:google.api.Endpoint.features)
    pub features: ::std::vec::Vec<::std::string::String>,
    ///  The specification of an Internet routable address of API frontend that will
    ///  handle requests to this [API
    ///  Endpoint](https://cloud.google.com/apis/design/glossary). It should be
    ///  either a valid IPv4 address or a fully-qualified domain name. For example,
    ///  "8.8.8.8" or "myservice.appspot.com".
    // @@protoc_insertion_point(field:google.api.Endpoint.target)
    pub target: ::std::string::String,
    ///  Allowing
    ///  [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka
    ///  cross-domain traffic, would allow the backends served from this endpoint to
    ///  receive and respond to HTTP OPTIONS requests. The response will be used by
    ///  the browser to determine whether the subsequent cross-origin request is
    ///  allowed to proceed.
    // @@protoc_insertion_point(field:google.api.Endpoint.allow_cors)
    pub allow_cors: bool,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Endpoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Endpoint {
    fn default() -> &'a Endpoint {
        <Endpoint as ::protobuf::Message>::default_instance()
    }
}

impl Endpoint {
    pub fn new() -> Endpoint {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Endpoint| { &m.name },
            |m: &mut Endpoint| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "aliases",
            |m: &Endpoint| { &m.aliases },
            |m: &mut Endpoint| { &mut m.aliases },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "features",
            |m: &Endpoint| { &m.features },
            |m: &mut Endpoint| { &mut m.features },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target",
            |m: &Endpoint| { &m.target },
            |m: &mut Endpoint| { &mut m.target },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "allow_cors",
            |m: &Endpoint| { &m.allow_cors },
            |m: &mut Endpoint| { &mut m.allow_cors },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Endpoint>(
            "Endpoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Endpoint {
    const NAME: &'static str = "Endpoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.aliases.push(is.read_string()?);
                },
                34 => {
                    self.features.push(is.read_string()?);
                },
                810 => {
                    self.target = is.read_string()?;
                },
                40 => {
                    self.allow_cors = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.aliases {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.features {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.target.is_empty() {
            my_size += ::protobuf::rt::string_size(101, &self.target);
        }
        if self.allow_cors != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.aliases {
            os.write_string(2, &v)?;
        };
        for v in &self.features {
            os.write_string(4, &v)?;
        };
        if !self.target.is_empty() {
            os.write_string(101, &self.target)?;
        }
        if self.allow_cors != false {
            os.write_bool(5, self.allow_cors)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Endpoint {
        Endpoint::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.aliases.clear();
        self.features.clear();
        self.target.clear();
        self.allow_cors = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Endpoint {
        static instance: Endpoint = Endpoint {
            name: ::std::string::String::new(),
            aliases: ::std::vec::Vec::new(),
            features: ::std::vec::Vec::new(),
            target: ::std::string::String::new(),
            allow_cors: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Endpoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Endpoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Endpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Endpoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/api/endpoint.proto\x12\ngoogle.api\"\x8f\x01\n\x08Endpoint\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1c\n\x07aliases\x18\
    \x02\x20\x03(\tR\x07aliasesB\x02\x18\x01\x12\x1a\n\x08features\x18\x04\
    \x20\x03(\tR\x08features\x12\x16\n\x06target\x18e\x20\x01(\tR\x06target\
    \x12\x1d\n\nallow_cors\x18\x05\x20\x01(\x08R\tallowCorsBo\n\x0ecom.googl\
    e.apiB\rEndpointProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api/se\
    rviceconfig;serviceconfig\xa2\x02\x04GAPIJ\xa6\x15\n\x06\x12\x04\x0f\0E\
    \x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\
    \x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\
    \n\x01\x08\x12\x03\x13\0\\\n\t\n\x02\x08\x0b\x12\x03\x13\0\\\n\x08\n\x01\
    \x08\x12\x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\
    \x03\x15\0.\n\t\n\x02\x08\x08\x12\x03\x15\0.\n\x08\n\x01\x08\x12\x03\x16\
    \0'\n\t\n\x02\x08\x01\x12\x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\
    \n\x02\x08$\x12\x03\x17\0\"\n\xce\x05\n\x02\x04\0\x12\x04)\0E\x01\x1a\
    \xc1\x05\x20`Endpoint`\x20describes\x20a\x20network\x20endpoint\x20that\
    \x20serves\x20a\x20set\x20of\x20APIs.\n\x20A\x20service\x20may\x20expose\
    \x20any\x20number\x20of\x20endpoints,\x20and\x20all\x20endpoints\x20shar\
    e\x20the\n\x20same\x20service\x20configuration,\x20such\x20as\x20quota\
    \x20configuration\x20and\x20monitoring\n\x20configuration.\n\n\x20Exampl\
    e\x20service\x20configuration:\n\n\x20\x20\x20\x20\x20name:\x20library-e\
    xample.googleapis.com\n\x20\x20\x20\x20\x20endpoints:\n\x20\x20\x20\x20\
    \x20\x20\x20#\x20Below\x20entry\x20makes\x20'google.example.library.v1.L\
    ibrary'\n\x20\x20\x20\x20\x20\x20\x20#\x20API\x20be\x20served\x20from\
    \x20endpoint\x20address\x20library-example.googleapis.com.\n\x20\x20\x20\
    \x20\x20\x20\x20#\x20It\x20also\x20allows\x20HTTP\x20OPTIONS\x20calls\
    \x20to\x20be\x20passed\x20to\x20the\x20backend,\x20for\n\x20\x20\x20\x20\
    \x20\x20\x20#\x20it\x20to\x20decide\x20whether\x20the\x20subsequent\x20c\
    ross-origin\x20request\x20is\n\x20\x20\x20\x20\x20\x20\x20#\x20allowed\
    \x20to\x20proceed.\n\x20\x20\x20\x20\x20-\x20name:\x20library-example.go\
    ogleapis.com\n\x20\x20\x20\x20\x20\x20\x20allow_cors:\x20true\n\n\n\n\
    \x03\x04\0\x01\x12\x03)\x08\x10\n3\n\x04\x04\0\x02\0\x12\x03+\x02\x12\
    \x1a&\x20The\x20canonical\x20name\x20of\x20this\x20endpoint.\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03+\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03+\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03+\x10\x11\n\xf8\x01\n\x04\
    \x04\0\x02\x01\x12\x032\x022\x1a\xea\x01\x20DEPRECATED:\x20This\x20field\
    \x20is\x20no\x20longer\x20supported.\x20Instead\x20of\x20using\x20aliase\
    s,\n\x20please\x20specify\x20multiple\x20[google.api.Endpoint][google.ap\
    i.Endpoint]\x20for\x20each\x20of\x20the\x20intended\n\x20aliases.\n\n\
    \x20Additional\x20names\x20that\x20this\x20endpoint\x20will\x20be\x20hos\
    ted\x20on.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x032\x02\n\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x032\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x032\x12\x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x032\x1c\x1d\n\x0c\n\x05\
    \x04\0\x02\x01\x08\x12\x032\x1e1\n\r\n\x06\x04\0\x02\x01\x08\x03\x12\x03\
    2\x1f0\n=\n\x04\x04\0\x02\x02\x12\x035\x02\x1f\x1a0\x20The\x20list\x20of\
    \x20features\x20enabled\x20on\x20this\x20endpoint.\n\n\x0c\n\x05\x04\0\
    \x02\x02\x04\x12\x035\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x035\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x035\x12\x1a\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x035\x1d\x1e\n\xb4\x02\n\x04\x04\0\x02\x03\x12\x03<\x02\
    \x16\x1a\xa6\x02\x20The\x20specification\x20of\x20an\x20Internet\x20rout\
    able\x20address\x20of\x20API\x20frontend\x20that\x20will\n\x20handle\x20\
    requests\x20to\x20this\x20[API\n\x20Endpoint](https://cloud.google.com/a\
    pis/design/glossary).\x20It\x20should\x20be\n\x20either\x20a\x20valid\
    \x20IPv4\x20address\x20or\x20a\x20fully-qualified\x20domain\x20name.\x20\
    For\x20example,\n\x20\"8.8.8.8\"\x20or\x20\"myservice.appspot.com\".\n\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03<\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03<\t\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03<\x12\x15\n\xd9\
    \x02\n\x04\x04\0\x02\x04\x12\x03D\x02\x16\x1a\xcb\x02\x20Allowing\n\x20[\
    CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing),\x20a\
    ka\n\x20cross-domain\x20traffic,\x20would\x20allow\x20the\x20backends\
    \x20served\x20from\x20this\x20endpoint\x20to\n\x20receive\x20and\x20resp\
    ond\x20to\x20HTTP\x20OPTIONS\x20requests.\x20The\x20response\x20will\x20\
    be\x20used\x20by\n\x20the\x20browser\x20to\x20determine\x20whether\x20th\
    e\x20subsequent\x20cross-origin\x20request\x20is\n\x20allowed\x20to\x20p\
    roceed.\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03D\x02\x06\n\x0c\n\x05\x04\
    \0\x02\x04\x01\x12\x03D\x07\x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03D\
    \x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Endpoint::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
