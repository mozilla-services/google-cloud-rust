// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/control.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Selects and configures the service controller used by the service.  The
///  service controller handles features like abuse, quota, billing, logging,
///  monitoring, etc.
// @@protoc_insertion_point(message:google.api.Control)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Control {
    // message fields
    ///  The service control environment to use. If empty, no control plane
    ///  feature (like quota and billing) will be enabled.
    // @@protoc_insertion_point(field:google.api.Control.environment)
    pub environment: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Control.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Control {
    fn default() -> &'a Control {
        <Control as ::protobuf::Message>::default_instance()
    }
}

impl Control {
    pub fn new() -> Control {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "environment",
            |m: &Control| { &m.environment },
            |m: &mut Control| { &mut m.environment },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Control>(
            "Control",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Control {
    const NAME: &'static str = "Control";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.environment = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.environment.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.environment);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.environment.is_empty() {
            os.write_string(1, &self.environment)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Control {
        Control::new()
    }

    fn clear(&mut self) {
        self.environment.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Control {
        static instance: Control = Control {
            environment: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Control {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Control").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Control {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Control {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/control.proto\x12\ngoogle.api\"+\n\x07Control\x12\x20\n\
    \x0benvironment\x18\x01\x20\x01(\tR\x0benvironmentBn\n\x0ecom.google.api\
    B\x0cControlProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api/servic\
    econfig;serviceconfig\xa2\x02\x04GAPIJ\xae\x08\n\x06\x12\x04\x0f\0\x20\
    \x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\
    \x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\
    \n\x01\x08\x12\x03\x13\0\\\n\t\n\x02\x08\x0b\x12\x03\x13\0\\\n\x08\n\x01\
    \x08\x12\x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\
    \x03\x15\0-\n\t\n\x02\x08\x08\x12\x03\x15\0-\n\x08\n\x01\x08\x12\x03\x16\
    \0'\n\t\n\x02\x08\x01\x12\x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\
    \n\x02\x08$\x12\x03\x17\0\"\n\xb2\x01\n\x02\x04\0\x12\x04\x1c\0\x20\x01\
    \x1a\xa5\x01\x20Selects\x20and\x20configures\x20the\x20service\x20contro\
    ller\x20used\x20by\x20the\x20service.\x20\x20The\n\x20service\x20control\
    ler\x20handles\x20features\x20like\x20abuse,\x20quota,\x20billing,\x20lo\
    gging,\n\x20monitoring,\x20etc.\n\n\n\n\x03\x04\0\x01\x12\x03\x1c\x08\
    \x0f\n\x84\x01\n\x04\x04\0\x02\0\x12\x03\x1f\x02\x19\x1aw\x20The\x20serv\
    ice\x20control\x20environment\x20to\x20use.\x20If\x20empty,\x20no\x20con\
    trol\x20plane\n\x20feature\x20(like\x20quota\x20and\x20billing)\x20will\
    \x20be\x20enabled.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1f\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1f\t\x14\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x1f\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Control::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
