// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/httpbody.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:google.api.HttpBody)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HttpBody {
    // message fields
    ///  The HTTP Content-Type header value specifying the content type of the body.
    // @@protoc_insertion_point(field:google.api.HttpBody.content_type)
    pub content_type: ::std::string::String,
    ///  The HTTP request/response body as raw binary.
    // @@protoc_insertion_point(field:google.api.HttpBody.data)
    pub data: ::std::vec::Vec<u8>,
    ///  Application specific response metadata. Must be set in the first response
    ///  for streaming APIs.
    // @@protoc_insertion_point(field:google.api.HttpBody.extensions)
    pub extensions: ::std::vec::Vec<::protobuf::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.HttpBody.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HttpBody {
    fn default() -> &'a HttpBody {
        <HttpBody as ::protobuf::Message>::default_instance()
    }
}

impl HttpBody {
    pub fn new() -> HttpBody {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_type",
            |m: &HttpBody| { &m.content_type },
            |m: &mut HttpBody| { &mut m.content_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &HttpBody| { &m.data },
            |m: &mut HttpBody| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "extensions",
            |m: &HttpBody| { &m.extensions },
            |m: &mut HttpBody| { &mut m.extensions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HttpBody>(
            "HttpBody",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HttpBody {
    const NAME: &'static str = "HttpBody";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.content_type = is.read_string()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                26 => {
                    self.extensions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.content_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.content_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        for value in &self.extensions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.content_type.is_empty() {
            os.write_string(1, &self.content_type)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        for v in &self.extensions {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HttpBody {
        HttpBody::new()
    }

    fn clear(&mut self) {
        self.content_type.clear();
        self.data.clear();
        self.extensions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HttpBody {
        static instance: HttpBody = HttpBody {
            content_type: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            extensions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HttpBody {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HttpBody").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HttpBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpBody {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/api/httpbody.proto\x12\ngoogle.api\x1a\x19google/protobuf/a\
    ny.proto\"w\n\x08HttpBody\x12!\n\x0ccontent_type\x18\x01\x20\x01(\tR\x0b\
    contentType\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\x124\n\nexte\
    nsions\x18\x03\x20\x03(\x0b2\x14.google.protobuf.AnyR\nextensionsBh\n\
    \x0ecom.google.apiB\rHttpBodyProtoP\x01Z;google.golang.org/genproto/goog\
    leapis/api/httpbody;httpbody\xf8\x01\x01\xa2\x02\x04GAPIJ\xa4\x13\n\x06\
    \x12\x04\x0f\0M\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Co\
    pyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apa\
    che\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20m\
    ay\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\
    \x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/\
    LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\
    \x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\
    \x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20B\
    ASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIN\
    D,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20\
    for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\
    \x11\0\x13\n\t\n\x02\x03\0\x12\x03\x13\0#\n\x08\n\x01\x08\x12\x03\x15\0\
    \x1f\n\t\n\x02\x08\x1f\x12\x03\x15\0\x1f\n\x08\n\x01\x08\x12\x03\x16\0R\
    \n\t\n\x02\x08\x0b\x12\x03\x16\0R\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\
    \x02\x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\x18\0.\n\t\n\x02\x08\
    \x08\x12\x03\x18\0.\n\x08\n\x01\x08\x12\x03\x19\0'\n\t\n\x02\x08\x01\x12\
    \x03\x19\0'\n\x08\n\x01\x08\x12\x03\x1a\0\"\n\t\n\x02\x08$\x12\x03\x1a\0\
    \"\n\xa4\n\n\x02\x04\0\x12\x04C\0M\x01\x1a\x97\n\x20Message\x20that\x20r\
    epresents\x20an\x20arbitrary\x20HTTP\x20body.\x20It\x20should\x20only\
    \x20be\x20used\x20for\n\x20payload\x20formats\x20that\x20can't\x20be\x20\
    represented\x20as\x20JSON,\x20such\x20as\x20raw\x20binary\x20or\n\x20an\
    \x20HTML\x20page.\n\n\n\x20This\x20message\x20can\x20be\x20used\x20both\
    \x20in\x20streaming\x20and\x20non-streaming\x20API\x20methods\x20in\n\
    \x20the\x20request\x20as\x20well\x20as\x20the\x20response.\n\n\x20It\x20\
    can\x20be\x20used\x20as\x20a\x20top-level\x20request\x20field,\x20which\
    \x20is\x20convenient\x20if\x20one\n\x20wants\x20to\x20extract\x20paramet\
    ers\x20from\x20either\x20the\x20URL\x20or\x20HTTP\x20template\x20into\
    \x20the\n\x20request\x20fields\x20and\x20also\x20want\x20access\x20to\
    \x20the\x20raw\x20HTTP\x20body.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20m\
    essage\x20GetResourceRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20//\x20A\
    \x20unique\x20request\x20id.\n\x20\x20\x20\x20\x20\x20\x20string\x20requ\
    est_id\x20=\x201;\n\n\x20\x20\x20\x20\x20\x20\x20//\x20The\x20raw\x20HTT\
    P\x20body\x20is\x20bound\x20to\x20this\x20field.\n\x20\x20\x20\x20\x20\
    \x20\x20google.api.HttpBody\x20http_body\x20=\x202;\n\x20\x20\x20\x20\
    \x20}\n\n\x20\x20\x20\x20\x20service\x20ResourceService\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20rpc\x20GetResource(GetResourceRequest)\x20returns\
    \x20(google.api.HttpBody);\n\x20\x20\x20\x20\x20\x20\x20rpc\x20UpdateRes\
    ource(google.api.HttpBody)\x20returns\n\x20\x20\x20\x20\x20\x20\x20(goog\
    le.protobuf.Empty);\n\x20\x20\x20\x20\x20}\n\n\x20Example\x20with\x20str\
    eaming\x20methods:\n\n\x20\x20\x20\x20\x20service\x20CaldavService\x20{\
    \n\x20\x20\x20\x20\x20\x20\x20rpc\x20GetCalendar(stream\x20google.api.Ht\
    tpBody)\n\x20\x20\x20\x20\x20\x20\x20\x20\x20returns\x20(stream\x20googl\
    e.api.HttpBody);\n\x20\x20\x20\x20\x20\x20\x20rpc\x20UpdateCalendar(stre\
    am\x20google.api.HttpBody)\n\x20\x20\x20\x20\x20\x20\x20\x20\x20returns\
    \x20(stream\x20google.api.HttpBody);\n\x20\x20\x20\x20\x20}\n\n\x20Use\
    \x20of\x20this\x20type\x20only\x20changes\x20how\x20the\x20request\x20an\
    d\x20response\x20bodies\x20are\n\x20handled,\x20all\x20other\x20features\
    \x20will\x20continue\x20to\x20work\x20unchanged.\n\n\n\n\x03\x04\0\x01\
    \x12\x03C\x08\x10\nZ\n\x04\x04\0\x02\0\x12\x03E\x02\x1a\x1aM\x20The\x20H\
    TTP\x20Content-Type\x20header\x20value\x20specifying\x20the\x20content\
    \x20type\x20of\x20the\x20body.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03E\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03E\t\x15\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03E\x18\x19\n<\n\x04\x04\0\x02\x01\x12\x03H\x02\x11\x1a/\
    \x20The\x20HTTP\x20request/response\x20body\x20as\x20raw\x20binary.\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03H\x02\x07\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03H\x08\x0c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03H\x0f\x10\nm\
    \n\x04\x04\0\x02\x02\x12\x03L\x02.\x1a`\x20Application\x20specific\x20re\
    sponse\x20metadata.\x20Must\x20be\x20set\x20in\x20the\x20first\x20respon\
    se\n\x20for\x20streaming\x20APIs.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03L\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03L\x0b\x1e\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03L\x1f)\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03L,\
    -b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(HttpBody::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
