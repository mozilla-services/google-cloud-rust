// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/metric.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct MetricDescriptor {
    // message fields
    pub name: ::std::string::String,
    pub field_type: ::std::string::String,
    pub labels: ::protobuf::RepeatedField<super::label::LabelDescriptor>,
    pub metric_kind: MetricDescriptor_MetricKind,
    pub value_type: MetricDescriptor_ValueType,
    pub unit: ::std::string::String,
    pub description: ::std::string::String,
    pub display_name: ::std::string::String,
    pub metadata: ::protobuf::SingularPtrField<MetricDescriptor_MetricDescriptorMetadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricDescriptor {
    fn default() -> &'a MetricDescriptor {
        <MetricDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl MetricDescriptor {
    pub fn new() -> MetricDescriptor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string type = 8;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated .google.api.LabelDescriptor labels = 2;


    pub fn get_labels(&self) -> &[super::label::LabelDescriptor] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::label::LabelDescriptor>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // .google.api.MetricDescriptor.MetricKind metric_kind = 3;


    pub fn get_metric_kind(&self) -> MetricDescriptor_MetricKind {
        self.metric_kind
    }
    pub fn clear_metric_kind(&mut self) {
        self.metric_kind = MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_metric_kind(&mut self, v: MetricDescriptor_MetricKind) {
        self.metric_kind = v;
    }

    // .google.api.MetricDescriptor.ValueType value_type = 4;


    pub fn get_value_type(&self) -> MetricDescriptor_ValueType {
        self.value_type
    }
    pub fn clear_value_type(&mut self) {
        self.value_type = MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_value_type(&mut self, v: MetricDescriptor_ValueType) {
        self.value_type = v;
    }

    // string unit = 5;


    pub fn get_unit(&self) -> &str {
        &self.unit
    }
    pub fn clear_unit(&mut self) {
        self.unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: ::std::string::String) {
        self.unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unit(&mut self) -> &mut ::std::string::String {
        &mut self.unit
    }

    // Take field
    pub fn take_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unit, ::std::string::String::new())
    }

    // string description = 6;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string display_name = 7;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // .google.api.MetricDescriptor.MetricDescriptorMetadata metadata = 10;


    pub fn get_metadata(&self) -> &MetricDescriptor_MetricDescriptorMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <MetricDescriptor_MetricDescriptorMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: MetricDescriptor_MetricDescriptorMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut MetricDescriptor_MetricDescriptorMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> MetricDescriptor_MetricDescriptorMetadata {
        self.metadata.take().unwrap_or_else(|| MetricDescriptor_MetricDescriptorMetadata::new())
    }
}

impl ::protobuf::Message for MetricDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.metric_kind, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.value_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unit)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.field_type);
        }
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.metric_kind != MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.metric_kind);
        }
        if self.value_type != MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.value_type);
        }
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.unit);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.description);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.display_name);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(8, &self.field_type)?;
        }
        for v in &self.labels {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.metric_kind != MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.metric_kind))?;
        }
        if self.value_type != MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.value_type))?;
        }
        if !self.unit.is_empty() {
            os.write_string(5, &self.unit)?;
        }
        if !self.description.is_empty() {
            os.write_string(6, &self.description)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(7, &self.display_name)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricDescriptor {
        MetricDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &MetricDescriptor| { &m.name },
                |m: &mut MetricDescriptor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &MetricDescriptor| { &m.field_type },
                |m: &mut MetricDescriptor| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::label::LabelDescriptor>>(
                "labels",
                |m: &MetricDescriptor| { &m.labels },
                |m: &mut MetricDescriptor| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_MetricKind>>(
                "metric_kind",
                |m: &MetricDescriptor| { &m.metric_kind },
                |m: &mut MetricDescriptor| { &mut m.metric_kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_ValueType>>(
                "value_type",
                |m: &MetricDescriptor| { &m.value_type },
                |m: &mut MetricDescriptor| { &mut m.value_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unit",
                |m: &MetricDescriptor| { &m.unit },
                |m: &mut MetricDescriptor| { &mut m.unit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &MetricDescriptor| { &m.description },
                |m: &mut MetricDescriptor| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &MetricDescriptor| { &m.display_name },
                |m: &mut MetricDescriptor| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MetricDescriptor_MetricDescriptorMetadata>>(
                "metadata",
                |m: &MetricDescriptor| { &m.metadata },
                |m: &mut MetricDescriptor| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetricDescriptor>(
                "MetricDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetricDescriptor {
        static instance: ::protobuf::rt::LazyV2<MetricDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetricDescriptor::new)
    }
}

impl ::protobuf::Clear for MetricDescriptor {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.labels.clear();
        self.metric_kind = MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED;
        self.value_type = MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED;
        self.unit.clear();
        self.description.clear();
        self.display_name.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricDescriptor_MetricDescriptorMetadata {
    // message fields
    pub launch_stage: super::launch_stage::LaunchStage,
    pub sample_period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub ingest_delay: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricDescriptor_MetricDescriptorMetadata {
    fn default() -> &'a MetricDescriptor_MetricDescriptorMetadata {
        <MetricDescriptor_MetricDescriptorMetadata as ::protobuf::Message>::default_instance()
    }
}

impl MetricDescriptor_MetricDescriptorMetadata {
    pub fn new() -> MetricDescriptor_MetricDescriptorMetadata {
        ::std::default::Default::default()
    }

    // .google.api.LaunchStage launch_stage = 1;


    pub fn get_launch_stage(&self) -> super::launch_stage::LaunchStage {
        self.launch_stage
    }
    pub fn clear_launch_stage(&mut self) {
        self.launch_stage = super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_launch_stage(&mut self, v: super::launch_stage::LaunchStage) {
        self.launch_stage = v;
    }

    // .google.protobuf.Duration sample_period = 2;


    pub fn get_sample_period(&self) -> &::protobuf::well_known_types::Duration {
        self.sample_period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sample_period(&mut self) {
        self.sample_period.clear();
    }

    pub fn has_sample_period(&self) -> bool {
        self.sample_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sample_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.sample_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sample_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.sample_period.is_none() {
            self.sample_period.set_default();
        }
        self.sample_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_sample_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.sample_period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration ingest_delay = 3;


    pub fn get_ingest_delay(&self) -> &::protobuf::well_known_types::Duration {
        self.ingest_delay.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ingest_delay(&mut self) {
        self.ingest_delay.clear();
    }

    pub fn has_ingest_delay(&self) -> bool {
        self.ingest_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ingest_delay(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.ingest_delay = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ingest_delay(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.ingest_delay.is_none() {
            self.ingest_delay.set_default();
        }
        self.ingest_delay.as_mut().unwrap()
    }

    // Take field
    pub fn take_ingest_delay(&mut self) -> ::protobuf::well_known_types::Duration {
        self.ingest_delay.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for MetricDescriptor_MetricDescriptorMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.sample_period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ingest_delay {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.launch_stage, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sample_period)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ingest_delay)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.launch_stage != super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.launch_stage);
        }
        if let Some(ref v) = self.sample_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ingest_delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.launch_stage != super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.launch_stage))?;
        }
        if let Some(ref v) = self.sample_period.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ingest_delay.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricDescriptor_MetricDescriptorMetadata {
        MetricDescriptor_MetricDescriptorMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::launch_stage::LaunchStage>>(
                "launch_stage",
                |m: &MetricDescriptor_MetricDescriptorMetadata| { &m.launch_stage },
                |m: &mut MetricDescriptor_MetricDescriptorMetadata| { &mut m.launch_stage },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "sample_period",
                |m: &MetricDescriptor_MetricDescriptorMetadata| { &m.sample_period },
                |m: &mut MetricDescriptor_MetricDescriptorMetadata| { &mut m.sample_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "ingest_delay",
                |m: &MetricDescriptor_MetricDescriptorMetadata| { &m.ingest_delay },
                |m: &mut MetricDescriptor_MetricDescriptorMetadata| { &mut m.ingest_delay },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetricDescriptor_MetricDescriptorMetadata>(
                "MetricDescriptor.MetricDescriptorMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetricDescriptor_MetricDescriptorMetadata {
        static instance: ::protobuf::rt::LazyV2<MetricDescriptor_MetricDescriptorMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetricDescriptor_MetricDescriptorMetadata::new)
    }
}

impl ::protobuf::Clear for MetricDescriptor_MetricDescriptorMetadata {
    fn clear(&mut self) {
        self.launch_stage = super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED;
        self.sample_period.clear();
        self.ingest_delay.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricDescriptor_MetricDescriptorMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_MetricDescriptorMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MetricDescriptor_MetricKind {
    METRIC_KIND_UNSPECIFIED = 0,
    GAUGE = 1,
    DELTA = 2,
    CUMULATIVE = 3,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_MetricKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_MetricKind> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED),
            1 => ::std::option::Option::Some(MetricDescriptor_MetricKind::GAUGE),
            2 => ::std::option::Option::Some(MetricDescriptor_MetricKind::DELTA),
            3 => ::std::option::Option::Some(MetricDescriptor_MetricKind::CUMULATIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_MetricKind] = &[
            MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED,
            MetricDescriptor_MetricKind::GAUGE,
            MetricDescriptor_MetricKind::DELTA,
            MetricDescriptor_MetricKind::CUMULATIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MetricDescriptor_MetricKind>("MetricDescriptor.MetricKind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MetricDescriptor_MetricKind {
}

impl ::std::default::Default for MetricDescriptor_MetricKind {
    fn default() -> Self {
        MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_MetricKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MetricDescriptor_ValueType {
    VALUE_TYPE_UNSPECIFIED = 0,
    BOOL = 1,
    INT64 = 2,
    DOUBLE = 3,
    STRING = 4,
    DISTRIBUTION = 5,
    MONEY = 6,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_ValueType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_ValueType> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(MetricDescriptor_ValueType::BOOL),
            2 => ::std::option::Option::Some(MetricDescriptor_ValueType::INT64),
            3 => ::std::option::Option::Some(MetricDescriptor_ValueType::DOUBLE),
            4 => ::std::option::Option::Some(MetricDescriptor_ValueType::STRING),
            5 => ::std::option::Option::Some(MetricDescriptor_ValueType::DISTRIBUTION),
            6 => ::std::option::Option::Some(MetricDescriptor_ValueType::MONEY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_ValueType] = &[
            MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED,
            MetricDescriptor_ValueType::BOOL,
            MetricDescriptor_ValueType::INT64,
            MetricDescriptor_ValueType::DOUBLE,
            MetricDescriptor_ValueType::STRING,
            MetricDescriptor_ValueType::DISTRIBUTION,
            MetricDescriptor_ValueType::MONEY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MetricDescriptor_ValueType>("MetricDescriptor.ValueType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MetricDescriptor_ValueType {
}

impl ::std::default::Default for MetricDescriptor_ValueType {
    fn default() -> Self {
        MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_ValueType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metric {
    // message fields
    pub field_type: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    // string type = 3;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated .google.api.Metric.LabelsEntry labels = 2;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Metric {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.field_type);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(3, &self.field_type)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &Metric| { &m.field_type },
                |m: &mut Metric| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &Metric| { &m.labels },
                |m: &mut Metric| { &mut m.labels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metric>(
                "Metric",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metric {
        static instance: ::protobuf::rt::LazyV2<Metric> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metric::new)
    }
}

impl ::protobuf::Clear for Metric {
    fn clear(&mut self) {
        self.field_type.clear();
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17google/api/metric.proto\x12\ngoogle.api\x1a\x16google/api/label.pr\
    oto\x1a\x1dgoogle/api/launch_stage.proto\x1a\x1egoogle/protobuf/duration\
    .proto\"\xc7\x06\n\x10MetricDescriptor\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12\x12\n\x04type\x18\x08\x20\x01(\tR\x04type\x123\n\x06lab\
    els\x18\x02\x20\x03(\x0b2\x1b.google.api.LabelDescriptorR\x06labels\x12H\
    \n\x0bmetric_kind\x18\x03\x20\x01(\x0e2'.google.api.MetricDescriptor.Met\
    ricKindR\nmetricKind\x12E\n\nvalue_type\x18\x04\x20\x01(\x0e2&.google.ap\
    i.MetricDescriptor.ValueTypeR\tvalueType\x12\x12\n\x04unit\x18\x05\x20\
    \x01(\tR\x04unit\x12\x20\n\x0bdescription\x18\x06\x20\x01(\tR\x0bdescrip\
    tion\x12!\n\x0cdisplay_name\x18\x07\x20\x01(\tR\x0bdisplayName\x12Q\n\
    \x08metadata\x18\n\x20\x01(\x0b25.google.api.MetricDescriptor.MetricDesc\
    riptorMetadataR\x08metadata\x1a\xd4\x01\n\x18MetricDescriptorMetadata\
    \x12:\n\x0claunch_stage\x18\x01\x20\x01(\x0e2\x17.google.api.LaunchStage\
    R\x0blaunchStage\x12>\n\rsample_period\x18\x02\x20\x01(\x0b2\x19.google.\
    protobuf.DurationR\x0csamplePeriod\x12<\n\x0cingest_delay\x18\x03\x20\
    \x01(\x0b2\x19.google.protobuf.DurationR\x0bingestDelay\"O\n\nMetricKind\
    \x12\x1b\n\x17METRIC_KIND_UNSPECIFIED\x10\0\x12\t\n\x05GAUGE\x10\x01\x12\
    \t\n\x05DELTA\x10\x02\x12\x0e\n\nCUMULATIVE\x10\x03\"q\n\tValueType\x12\
    \x1a\n\x16VALUE_TYPE_UNSPECIFIED\x10\0\x12\x08\n\x04BOOL\x10\x01\x12\t\n\
    \x05INT64\x10\x02\x12\n\n\x06DOUBLE\x10\x03\x12\n\n\x06STRING\x10\x04\
    \x12\x10\n\x0cDISTRIBUTION\x10\x05\x12\t\n\x05MONEY\x10\x06\"\x8f\x01\n\
    \x06Metric\x12\x12\n\x04type\x18\x03\x20\x01(\tR\x04type\x126\n\x06label\
    s\x18\x02\x20\x03(\x0b2\x1e.google.api.Metric.LabelsEntryR\x06labels\x1a\
    9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B_\n\x0ecom.google.apiB\
    \x0bMetricProtoP\x01Z7google.golang.org/genproto/googleapis/api/metric;m\
    etric\xa2\x02\x04GAPIJ\xa3=\n\x07\x12\x05\x0f\0\xd7\x01\x01\n\xbe\x04\n\
    \x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202018\x20Google\x20LL\
    C.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\t\n\x02\x03\0\x12\
    \x03\x13\0\x20\n\t\n\x02\x03\x01\x12\x03\x14\0'\n\t\n\x02\x03\x02\x12\
    \x03\x15\0(\n\x08\n\x01\x08\x12\x03\x17\0N\n\t\n\x02\x08\x0b\x12\x03\x17\
    \0N\n\x08\n\x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\x18\0\"\n\
    \x08\n\x01\x08\x12\x03\x19\0,\n\t\n\x02\x08\x08\x12\x03\x19\0,\n\x08\n\
    \x01\x08\x12\x03\x1a\0'\n\t\n\x02\x08\x01\x12\x03\x1a\0'\n\x08\n\x01\x08\
    \x12\x03\x1b\0\"\n\t\n\x02\x08$\x12\x03\x1b\0\"\n\xbe\x01\n\x02\x04\0\
    \x12\x05!\0\xcb\x01\x01\x1a\xb0\x01\x20Defines\x20a\x20metric\x20type\
    \x20and\x20its\x20schema.\x20Once\x20a\x20metric\x20descriptor\x20is\x20\
    created,\n\x20deleting\x20or\x20altering\x20it\x20stops\x20data\x20colle\
    ction\x20and\x20makes\x20the\x20metric\x20type's\n\x20existing\x20data\
    \x20unusable.\n\n\n\n\x03\x04\0\x01\x12\x03!\x08\x18\nW\n\x04\x04\0\x03\
    \0\x12\x04#\x021\x03\x1aI\x20Additional\x20annotations\x20that\x20can\
    \x20be\x20used\x20to\x20guide\x20the\x20usage\x20of\x20a\x20metric.\n\n\
    \x0c\n\x05\x04\0\x03\0\x01\x12\x03#\n\"\n;\n\x06\x04\0\x03\0\x02\0\x12\
    \x03%\x04!\x1a,\x20The\x20launch\x20stage\x20of\x20the\x20metric\x20defi\
    nition.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\x04%\x04#$\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x06\x12\x03%\x04\x0f\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x01\x12\x03%\x10\x1c\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03%\x1f\x20\
    \n\x8a\x02\n\x06\x04\0\x03\0\x02\x01\x12\x03+\x04/\x1a\xfa\x01\x20The\
    \x20sampling\x20period\x20of\x20metric\x20data\x20points.\x20For\x20metr\
    ics\x20which\x20are\x20written\n\x20periodically,\x20consecutive\x20data\
    \x20points\x20are\x20stored\x20at\x20this\x20time\x20interval,\n\x20excl\
    uding\x20data\x20loss\x20due\x20to\x20errors.\x20Metrics\x20with\x20a\
    \x20higher\x20granularity\x20have\n\x20a\x20smaller\x20sampling\x20perio\
    d.\n\n\x0f\n\x07\x04\0\x03\0\x02\x01\x04\x12\x04+\x04%!\n\x0e\n\x07\x04\
    \0\x03\0\x02\x01\x06\x12\x03+\x04\x1c\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x01\x12\x03+\x1d*\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03+-.\n\xbc\
    \x01\n\x06\x04\0\x03\0\x02\x02\x12\x030\x04.\x1a\xac\x01\x20The\x20delay\
    \x20of\x20data\x20points\x20caused\x20by\x20ingestion.\x20Data\x20points\
    \x20older\x20than\x20this\n\x20age\x20are\x20guaranteed\x20to\x20be\x20i\
    ngested\x20and\x20available\x20to\x20be\x20read,\x20excluding\n\x20data\
    \x20loss\x20due\x20to\x20errors.\n\n\x0f\n\x07\x04\0\x03\0\x02\x02\x04\
    \x12\x040\x04+/\n\x0e\n\x07\x04\0\x03\0\x02\x02\x06\x12\x030\x04\x1c\n\
    \x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\x030\x1d)\n\x0e\n\x07\x04\0\x03\0\
    \x02\x02\x03\x12\x030,-\nO\n\x04\x04\0\x04\0\x12\x044\x02D\x03\x1aA\x20T\
    he\x20kind\x20of\x20measurement.\x20It\x20describes\x20how\x20the\x20dat\
    a\x20is\x20reported.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x034\x07\x11\n/\n\
    \x06\x04\0\x04\0\x02\0\x12\x036\x04\x20\x1a\x20\x20Do\x20not\x20use\x20t\
    his\x20default\x20value.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x036\
    \x04\x1b\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x036\x1e\x1f\n9\n\x06\x04\
    \0\x04\0\x02\x01\x12\x039\x04\x0e\x1a*\x20An\x20instantaneous\x20measure\
    ment\x20of\x20a\x20value.\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x039\
    \x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x039\x0c\r\n>\n\x06\x04\0\
    \x04\0\x02\x02\x12\x03<\x04\x0e\x1a/\x20The\x20change\x20in\x20a\x20valu\
    e\x20during\x20a\x20time\x20interval.\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\
    \x01\x12\x03<\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03<\x0c\r\n\
    \x8a\x02\n\x06\x04\0\x04\0\x02\x03\x12\x03C\x04\x13\x1a\xfa\x01\x20A\x20\
    value\x20accumulated\x20over\x20a\x20time\x20interval.\x20\x20Cumulative\
    \n\x20measurements\x20in\x20a\x20time\x20series\x20should\x20have\x20the\
    \x20same\x20start\x20time\n\x20and\x20increasing\x20end\x20times,\x20unt\
    il\x20an\x20event\x20resets\x20the\x20cumulative\n\x20value\x20to\x20zer\
    o\x20and\x20sets\x20a\x20new\x20start\x20time\x20for\x20the\x20following\
    \n\x20points.\n\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03C\x04\x0e\n\
    \x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03C\x11\x12\n+\n\x04\x04\0\x04\
    \x01\x12\x04G\x02^\x03\x1a\x1d\x20The\x20value\x20type\x20of\x20a\x20met\
    ric.\n\n\x0c\n\x05\x04\0\x04\x01\x01\x12\x03G\x07\x10\n/\n\x06\x04\0\x04\
    \x01\x02\0\x12\x03I\x04\x1f\x1a\x20\x20Do\x20not\x20use\x20this\x20defau\
    lt\x20value.\n\n\x0e\n\x07\x04\0\x04\x01\x02\0\x01\x12\x03I\x04\x1a\n\
    \x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\x03I\x1d\x1e\ni\n\x06\x04\0\x04\
    \x01\x02\x01\x12\x03M\x04\r\x1aZ\x20The\x20value\x20is\x20a\x20boolean.\
    \n\x20This\x20value\x20type\x20can\x20be\x20used\x20only\x20if\x20the\
    \x20metric\x20kind\x20is\x20`GAUGE`.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x01\
    \x01\x12\x03M\x04\x08\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x02\x12\x03M\x0b\
    \x0c\n6\n\x06\x04\0\x04\x01\x02\x02\x12\x03P\x04\x0e\x1a'\x20The\x20valu\
    e\x20is\x20a\x20signed\x2064-bit\x20integer.\n\n\x0e\n\x07\x04\0\x04\x01\
    \x02\x02\x01\x12\x03P\x04\t\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x02\x12\
    \x03P\x0c\r\nG\n\x06\x04\0\x04\x01\x02\x03\x12\x03S\x04\x0f\x1a8\x20The\
    \x20value\x20is\x20a\x20double\x20precision\x20floating\x20point\x20numb\
    er.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x03\x01\x12\x03S\x04\n\n\x0e\n\x07\
    \x04\0\x04\x01\x02\x03\x02\x12\x03S\r\x0e\nm\n\x06\x04\0\x04\x01\x02\x04\
    \x12\x03W\x04\x0f\x1a^\x20The\x20value\x20is\x20a\x20text\x20string.\n\
    \x20This\x20value\x20type\x20can\x20be\x20used\x20only\x20if\x20the\x20m\
    etric\x20kind\x20is\x20`GAUGE`.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x04\x01\
    \x12\x03W\x04\n\n\x0e\n\x07\x04\0\x04\x01\x02\x04\x02\x12\x03W\r\x0e\nJ\
    \n\x06\x04\0\x04\x01\x02\x05\x12\x03Z\x04\x15\x1a;\x20The\x20value\x20is\
    \x20a\x20[`Distribution`][google.api.Distribution].\n\n\x0e\n\x07\x04\0\
    \x04\x01\x02\x05\x01\x12\x03Z\x04\x10\n\x0e\n\x07\x04\0\x04\x01\x02\x05\
    \x02\x12\x03Z\x13\x14\n$\n\x06\x04\0\x04\x01\x02\x06\x12\x03]\x04\x0e\
    \x1a\x15\x20The\x20value\x20is\x20money.\n\n\x0e\n\x07\x04\0\x04\x01\x02\
    \x06\x01\x12\x03]\x04\t\n\x0e\n\x07\x04\0\x04\x01\x02\x06\x02\x12\x03]\
    \x0c\r\n:\n\x04\x04\0\x02\0\x12\x03a\x02\x12\x1a-\x20The\x20resource\x20\
    name\x20of\x20the\x20metric\x20descriptor.\n\n\r\n\x05\x04\0\x02\0\x04\
    \x12\x04a\x02^\x03\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03a\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03a\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03a\
    \x10\x11\n\xab\x03\n\x04\x04\0\x02\x01\x12\x03k\x02\x12\x1a\x9d\x03\x20T\
    he\x20metric\x20type,\x20including\x20its\x20DNS\x20name\x20prefix.\x20T\
    he\x20type\x20is\x20not\n\x20URL-encoded.\x20\x20All\x20user-defined\x20\
    metric\x20types\x20have\x20the\x20DNS\x20name\n\x20`custom.googleapis.co\
    m`\x20or\x20`external.googleapis.com`.\x20\x20Metric\x20types\x20should\
    \n\x20use\x20a\x20natural\x20hierarchical\x20grouping.\x20For\x20example\
    :\n\n\x20\x20\x20\x20\x20\"custom.googleapis.com/invoice/paid/amount\"\n\
    \x20\x20\x20\x20\x20\"external.googleapis.com/prometheus/up\"\n\x20\x20\
    \x20\x20\x20\"appengine.googleapis.com/http/server/response_latencies\"\
    \n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04k\x02a\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03k\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03k\t\r\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03k\x10\x11\n\xd5\x02\n\x04\x04\0\x02\
    \x02\x12\x03s\x02&\x1a\xc7\x02\x20The\x20set\x20of\x20labels\x20that\x20\
    can\x20be\x20used\x20to\x20describe\x20a\x20specific\n\x20instance\x20of\
    \x20this\x20metric\x20type.\x20For\x20example,\x20the\n\x20`appengine.go\
    ogleapis.com/http/server/response_latencies`\x20metric\n\x20type\x20has\
    \x20a\x20label\x20for\x20the\x20HTTP\x20response\x20code,\x20`response_c\
    ode`,\x20so\n\x20you\x20can\x20look\x20at\x20latencies\x20for\x20success\
    ful\x20responses\x20or\x20just\n\x20for\x20responses\x20that\x20failed.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03s\x02\n\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03s\x0b\x1a\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03s\x1b!\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03s$%\n\xa6\x01\n\x04\x04\0\x02\x03\
    \x12\x03w\x02\x1d\x1a\x98\x01\x20Whether\x20the\x20metric\x20records\x20\
    instantaneous\x20values,\x20changes\x20to\x20a\x20value,\x20etc.\n\x20So\
    me\x20combinations\x20of\x20`metric_kind`\x20and\x20`value_type`\x20migh\
    t\x20not\x20be\x20supported.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04w\x02s\
    &\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03w\x02\x0c\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03w\r\x18\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03w\x1b\x1c\n\
    \xa1\x01\n\x04\x04\0\x02\x04\x12\x03{\x02\x1b\x1a\x93\x01\x20Whether\x20\
    the\x20measurement\x20is\x20an\x20integer,\x20a\x20floating-point\x20num\
    ber,\x20etc.\n\x20Some\x20combinations\x20of\x20`metric_kind`\x20and\x20\
    `value_type`\x20might\x20not\x20be\x20supported.\n\n\r\n\x05\x04\0\x02\
    \x04\x04\x12\x04{\x02w\x1d\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03{\x02\
    \x0b\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03{\x0c\x16\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03{\x19\x1a\n\xc0\x0e\n\x04\x04\0\x02\x05\x12\x04\xbe\
    \x01\x02\x12\x1a\xb1\x0e\x20The\x20unit\x20in\x20which\x20the\x20metric\
    \x20value\x20is\x20reported.\x20It\x20is\x20only\x20applicable\n\x20if\
    \x20the\x20`value_type`\x20is\x20`INT64`,\x20`DOUBLE`,\x20or\x20`DISTRIB\
    UTION`.\x20The\n\x20supported\x20units\x20are\x20a\x20subset\x20of\x20[T\
    he\x20Unified\x20Code\x20for\x20Units\x20of\n\x20Measure](http://unitsof\
    measure.org/ucum.html)\x20standard:\n\n\x20**Basic\x20units\x20(UNIT)**\
    \n\n\x20*\x20`bit`\x20\x20\x20bit\n\x20*\x20`By`\x20\x20\x20\x20byte\n\
    \x20*\x20`s`\x20\x20\x20\x20\x20second\n\x20*\x20`min`\x20\x20\x20minute\
    \n\x20*\x20`h`\x20\x20\x20\x20\x20hour\n\x20*\x20`d`\x20\x20\x20\x20\x20\
    day\n\n\x20**Prefixes\x20(PREFIX)**\n\n\x20*\x20`k`\x20\x20\x20\x20\x20k\
    ilo\x20\x20\x20\x20(10**3)\n\x20*\x20`M`\x20\x20\x20\x20\x20mega\x20\x20\
    \x20\x20(10**6)\n\x20*\x20`G`\x20\x20\x20\x20\x20giga\x20\x20\x20\x20(10\
    **9)\n\x20*\x20`T`\x20\x20\x20\x20\x20tera\x20\x20\x20\x20(10**12)\n\x20\
    *\x20`P`\x20\x20\x20\x20\x20peta\x20\x20\x20\x20(10**15)\n\x20*\x20`E`\
    \x20\x20\x20\x20\x20exa\x20\x20\x20\x20\x20(10**18)\n\x20*\x20`Z`\x20\
    \x20\x20\x20\x20zetta\x20\x20\x20(10**21)\n\x20*\x20`Y`\x20\x20\x20\x20\
    \x20yotta\x20\x20\x20(10**24)\n\x20*\x20`m`\x20\x20\x20\x20\x20milli\x20\
    \x20\x20(10**-3)\n\x20*\x20`u`\x20\x20\x20\x20\x20micro\x20\x20\x20(10**\
    -6)\n\x20*\x20`n`\x20\x20\x20\x20\x20nano\x20\x20\x20\x20(10**-9)\n\x20*\
    \x20`p`\x20\x20\x20\x20\x20pico\x20\x20\x20\x20(10**-12)\n\x20*\x20`f`\
    \x20\x20\x20\x20\x20femto\x20\x20\x20(10**-15)\n\x20*\x20`a`\x20\x20\x20\
    \x20\x20atto\x20\x20\x20\x20(10**-18)\n\x20*\x20`z`\x20\x20\x20\x20\x20z\
    epto\x20\x20\x20(10**-21)\n\x20*\x20`y`\x20\x20\x20\x20\x20yocto\x20\x20\
    \x20(10**-24)\n\x20*\x20`Ki`\x20\x20\x20\x20kibi\x20\x20\x20\x20(2**10)\
    \n\x20*\x20`Mi`\x20\x20\x20\x20mebi\x20\x20\x20\x20(2**20)\n\x20*\x20`Gi\
    `\x20\x20\x20\x20gibi\x20\x20\x20\x20(2**30)\n\x20*\x20`Ti`\x20\x20\x20\
    \x20tebi\x20\x20\x20\x20(2**40)\n\n\x20**Grammar**\n\n\x20The\x20grammar\
    \x20also\x20includes\x20these\x20connectors:\n\n\x20*\x20`/`\x20\x20\x20\
    \x20division\x20(as\x20an\x20infix\x20operator,\x20e.g.\x20`1/s`).\n\x20\
    *\x20`.`\x20\x20\x20\x20multiplication\x20(as\x20an\x20infix\x20operator\
    ,\x20e.g.\x20`GBy.d`)\n\n\x20The\x20grammar\x20for\x20a\x20unit\x20is\
    \x20as\x20follows:\n\n\x20\x20\x20\x20\x20Expression\x20=\x20Component\
    \x20{\x20\".\"\x20Component\x20}\x20{\x20\"/\"\x20Component\x20}\x20;\n\
    \n\x20\x20\x20\x20\x20Component\x20=\x20(\x20[\x20PREFIX\x20]\x20UNIT\
    \x20|\x20\"%\"\x20)\x20[\x20Annotation\x20]\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20|\x20Annotation\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20|\x20\"1\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20;\n\n\x20\x20\x20\x20\x20Ann\
    otation\x20=\x20\"{\"\x20NAME\x20\"}\"\x20;\n\n\x20Notes:\n\n\x20*\x20`A\
    nnotation`\x20is\x20just\x20a\x20comment\x20if\x20it\x20follows\x20a\x20\
    `UNIT`\x20and\x20is\n\x20\x20\x20\x20equivalent\x20to\x20`1`\x20if\x20it\
    \x20is\x20used\x20alone.\x20For\x20examples,\n\x20\x20\x20\x20`{requests\
    }/s\x20==\x201/s`,\x20`By{transmitted}/s\x20==\x20By/s`.\n\x20*\x20`NAME\
    `\x20is\x20a\x20sequence\x20of\x20non-blank\x20printable\x20ASCII\x20cha\
    racters\x20not\n\x20\x20\x20\x20containing\x20'{'\x20or\x20'}'.\n\x20*\
    \x20`1`\x20represents\x20dimensionless\x20value\x201,\x20such\x20as\x20i\
    n\x20`1/s`.\n\x20*\x20`%`\x20represents\x20dimensionless\x20value\x201/1\
    00,\x20and\x20annotates\x20values\x20giving\n\x20\x20\x20\x20a\x20percen\
    tage.\n\n\x0e\n\x05\x04\0\x02\x05\x04\x12\x05\xbe\x01\x02{\x1b\n\r\n\x05\
    \x04\0\x02\x05\x05\x12\x04\xbe\x01\x02\x08\n\r\n\x05\x04\0\x02\x05\x01\
    \x12\x04\xbe\x01\t\r\n\r\n\x05\x04\0\x02\x05\x03\x12\x04\xbe\x01\x10\x11\
    \nY\n\x04\x04\0\x02\x06\x12\x04\xc1\x01\x02\x19\x1aK\x20A\x20detailed\
    \x20description\x20of\x20the\x20metric,\x20which\x20can\x20be\x20used\
    \x20in\x20documentation.\n\n\x0f\n\x05\x04\0\x02\x06\x04\x12\x06\xc1\x01\
    \x02\xbe\x01\x12\n\r\n\x05\x04\0\x02\x06\x05\x12\x04\xc1\x01\x02\x08\n\r\
    \n\x05\x04\0\x02\x06\x01\x12\x04\xc1\x01\t\x14\n\r\n\x05\x04\0\x02\x06\
    \x03\x12\x04\xc1\x01\x17\x18\n\xa3\x02\n\x04\x04\0\x02\x07\x12\x04\xc7\
    \x01\x02\x1a\x1a\x94\x02\x20A\x20concise\x20name\x20for\x20the\x20metric\
    ,\x20which\x20can\x20be\x20displayed\x20in\x20user\x20interfaces.\n\x20U\
    se\x20sentence\x20case\x20without\x20an\x20ending\x20period,\x20for\x20e\
    xample\x20\"Request\x20count\".\n\x20This\x20field\x20is\x20optional\x20\
    but\x20it\x20is\x20recommended\x20to\x20be\x20set\x20for\x20any\x20metri\
    cs\n\x20associated\x20with\x20user-visible\x20concepts,\x20such\x20as\
    \x20Quota.\n\n\x0f\n\x05\x04\0\x02\x07\x04\x12\x06\xc7\x01\x02\xc1\x01\
    \x19\n\r\n\x05\x04\0\x02\x07\x05\x12\x04\xc7\x01\x02\x08\n\r\n\x05\x04\0\
    \x02\x07\x01\x12\x04\xc7\x01\t\x15\n\r\n\x05\x04\0\x02\x07\x03\x12\x04\
    \xc7\x01\x18\x19\nR\n\x04\x04\0\x02\x08\x12\x04\xca\x01\x02)\x1aD\x20Opt\
    ional.\x20Metadata\x20which\x20can\x20be\x20used\x20to\x20guide\x20usage\
    \x20of\x20the\x20metric.\n\n\x0f\n\x05\x04\0\x02\x08\x04\x12\x06\xca\x01\
    \x02\xc7\x01\x1a\n\r\n\x05\x04\0\x02\x08\x06\x12\x04\xca\x01\x02\x1a\n\r\
    \n\x05\x04\0\x02\x08\x01\x12\x04\xca\x01\x1b#\n\r\n\x05\x04\0\x02\x08\
    \x03\x12\x04\xca\x01&(\n\x92\x01\n\x02\x04\x01\x12\x06\xcf\x01\0\xd7\x01\
    \x01\x1a\x83\x01\x20A\x20specific\x20metric,\x20identified\x20by\x20spec\
    ifying\x20values\x20for\x20all\x20of\x20the\n\x20labels\x20of\x20a\x20[`\
    MetricDescriptor`][google.api.MetricDescriptor].\n\n\x0b\n\x03\x04\x01\
    \x01\x12\x04\xcf\x01\x08\x0e\n\xa4\x01\n\x04\x04\x01\x02\0\x12\x04\xd2\
    \x01\x02\x12\x1a\x95\x01\x20An\x20existing\x20metric\x20type,\x20see\x20\
    [google.api.MetricDescriptor][google.api.MetricDescriptor].\n\x20For\x20\
    example,\x20`custom.googleapis.com/invoice/paid/amount`.\n\n\x0f\n\x05\
    \x04\x01\x02\0\x04\x12\x06\xd2\x01\x02\xcf\x01\x10\n\r\n\x05\x04\x01\x02\
    \0\x05\x12\x04\xd2\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xd2\
    \x01\t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xd2\x01\x10\x11\n\x92\x01\n\
    \x04\x04\x01\x02\x01\x12\x04\xd6\x01\x02!\x1a\x83\x01\x20The\x20set\x20o\
    f\x20label\x20values\x20that\x20uniquely\x20identify\x20this\x20metric.\
    \x20All\n\x20labels\x20listed\x20in\x20the\x20`MetricDescriptor`\x20must\
    \x20be\x20assigned\x20values.\n\n\x0f\n\x05\x04\x01\x02\x01\x04\x12\x06\
    \xd6\x01\x02\xd2\x01\x12\n\r\n\x05\x04\x01\x02\x01\x06\x12\x04\xd6\x01\
    \x02\x15\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xd6\x01\x16\x1c\n\r\n\x05\
    \x04\x01\x02\x01\x03\x12\x04\xd6\x01\x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
