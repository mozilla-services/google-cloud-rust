// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/servicecontrol/v1/service_controller.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct CheckRequest {
    // message fields
    pub service_name: ::std::string::String,
    pub operation: ::protobuf::SingularPtrField<super::operation::Operation>,
    pub service_config_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckRequest {
    fn default() -> &'a CheckRequest {
        <CheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckRequest {
    pub fn new() -> CheckRequest {
        ::std::default::Default::default()
    }

    // string service_name = 1;


    pub fn get_service_name(&self) -> &str {
        &self.service_name
    }
    pub fn clear_service_name(&mut self) {
        self.service_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_name(&mut self, v: ::std::string::String) {
        self.service_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_name(&mut self) -> &mut ::std::string::String {
        &mut self.service_name
    }

    // Take field
    pub fn take_service_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_name, ::std::string::String::new())
    }

    // .google.api.servicecontrol.v1.Operation operation = 2;


    pub fn get_operation(&self) -> &super::operation::Operation {
        self.operation.as_ref().unwrap_or_else(|| <super::operation::Operation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_operation(&mut self) {
        self.operation.clear();
    }

    pub fn has_operation(&self) -> bool {
        self.operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: super::operation::Operation) {
        self.operation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation(&mut self) -> &mut super::operation::Operation {
        if self.operation.is_none() {
            self.operation.set_default();
        }
        self.operation.as_mut().unwrap()
    }

    // Take field
    pub fn take_operation(&mut self) -> super::operation::Operation {
        self.operation.take().unwrap_or_else(|| super::operation::Operation::new())
    }

    // string service_config_id = 4;


    pub fn get_service_config_id(&self) -> &str {
        &self.service_config_id
    }
    pub fn clear_service_config_id(&mut self) {
        self.service_config_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_config_id(&mut self, v: ::std::string::String) {
        self.service_config_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_config_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_config_id
    }

    // Take field
    pub fn take_service_config_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_config_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CheckRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.operation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operation)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_config_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if let Some(ref v) = self.operation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.service_config_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if let Some(ref v) = self.operation.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.service_config_id.is_empty() {
            os.write_string(4, &self.service_config_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckRequest {
        CheckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_name",
                |m: &CheckRequest| { &m.service_name },
                |m: &mut CheckRequest| { &mut m.service_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::operation::Operation>>(
                "operation",
                |m: &CheckRequest| { &m.operation },
                |m: &mut CheckRequest| { &mut m.operation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_config_id",
                |m: &CheckRequest| { &m.service_config_id },
                |m: &mut CheckRequest| { &mut m.service_config_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckRequest>(
                "CheckRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckRequest {
        static instance: ::protobuf::rt::LazyV2<CheckRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckRequest::new)
    }
}

impl ::protobuf::Clear for CheckRequest {
    fn clear(&mut self) {
        self.service_name.clear();
        self.operation.clear();
        self.service_config_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckResponse {
    // message fields
    pub operation_id: ::std::string::String,
    pub check_errors: ::protobuf::RepeatedField<super::check_error::CheckError>,
    pub service_config_id: ::std::string::String,
    pub check_info: ::protobuf::SingularPtrField<CheckResponse_CheckInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckResponse {
    fn default() -> &'a CheckResponse {
        <CheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckResponse {
    pub fn new() -> CheckResponse {
        ::std::default::Default::default()
    }

    // string operation_id = 1;


    pub fn get_operation_id(&self) -> &str {
        &self.operation_id
    }
    pub fn clear_operation_id(&mut self) {
        self.operation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_operation_id(&mut self, v: ::std::string::String) {
        self.operation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation_id(&mut self) -> &mut ::std::string::String {
        &mut self.operation_id
    }

    // Take field
    pub fn take_operation_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.operation_id, ::std::string::String::new())
    }

    // repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;


    pub fn get_check_errors(&self) -> &[super::check_error::CheckError] {
        &self.check_errors
    }
    pub fn clear_check_errors(&mut self) {
        self.check_errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_check_errors(&mut self, v: ::protobuf::RepeatedField<super::check_error::CheckError>) {
        self.check_errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_check_errors(&mut self) -> &mut ::protobuf::RepeatedField<super::check_error::CheckError> {
        &mut self.check_errors
    }

    // Take field
    pub fn take_check_errors(&mut self) -> ::protobuf::RepeatedField<super::check_error::CheckError> {
        ::std::mem::replace(&mut self.check_errors, ::protobuf::RepeatedField::new())
    }

    // string service_config_id = 5;


    pub fn get_service_config_id(&self) -> &str {
        &self.service_config_id
    }
    pub fn clear_service_config_id(&mut self) {
        self.service_config_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_config_id(&mut self, v: ::std::string::String) {
        self.service_config_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_config_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_config_id
    }

    // Take field
    pub fn take_service_config_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_config_id, ::std::string::String::new())
    }

    // .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;


    pub fn get_check_info(&self) -> &CheckResponse_CheckInfo {
        self.check_info.as_ref().unwrap_or_else(|| <CheckResponse_CheckInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_check_info(&mut self) {
        self.check_info.clear();
    }

    pub fn has_check_info(&self) -> bool {
        self.check_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_check_info(&mut self, v: CheckResponse_CheckInfo) {
        self.check_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_check_info(&mut self) -> &mut CheckResponse_CheckInfo {
        if self.check_info.is_none() {
            self.check_info.set_default();
        }
        self.check_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_check_info(&mut self) -> CheckResponse_CheckInfo {
        self.check_info.take().unwrap_or_else(|| CheckResponse_CheckInfo::new())
    }
}

impl ::protobuf::Message for CheckResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.check_errors {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.check_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.operation_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.check_errors)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_config_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.check_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.operation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.operation_id);
        }
        for value in &self.check_errors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.service_config_id);
        }
        if let Some(ref v) = self.check_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.operation_id.is_empty() {
            os.write_string(1, &self.operation_id)?;
        }
        for v in &self.check_errors {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.service_config_id.is_empty() {
            os.write_string(5, &self.service_config_id)?;
        }
        if let Some(ref v) = self.check_info.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckResponse {
        CheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "operation_id",
                |m: &CheckResponse| { &m.operation_id },
                |m: &mut CheckResponse| { &mut m.operation_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::check_error::CheckError>>(
                "check_errors",
                |m: &CheckResponse| { &m.check_errors },
                |m: &mut CheckResponse| { &mut m.check_errors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_config_id",
                |m: &CheckResponse| { &m.service_config_id },
                |m: &mut CheckResponse| { &mut m.service_config_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CheckResponse_CheckInfo>>(
                "check_info",
                |m: &CheckResponse| { &m.check_info },
                |m: &mut CheckResponse| { &mut m.check_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckResponse>(
                "CheckResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckResponse {
        static instance: ::protobuf::rt::LazyV2<CheckResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckResponse::new)
    }
}

impl ::protobuf::Clear for CheckResponse {
    fn clear(&mut self) {
        self.operation_id.clear();
        self.check_errors.clear();
        self.service_config_id.clear();
        self.check_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckResponse_CheckInfo {
    // message fields
    pub consumer_info: ::protobuf::SingularPtrField<CheckResponse_ConsumerInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckResponse_CheckInfo {
    fn default() -> &'a CheckResponse_CheckInfo {
        <CheckResponse_CheckInfo as ::protobuf::Message>::default_instance()
    }
}

impl CheckResponse_CheckInfo {
    pub fn new() -> CheckResponse_CheckInfo {
        ::std::default::Default::default()
    }

    // .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;


    pub fn get_consumer_info(&self) -> &CheckResponse_ConsumerInfo {
        self.consumer_info.as_ref().unwrap_or_else(|| <CheckResponse_ConsumerInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consumer_info(&mut self) {
        self.consumer_info.clear();
    }

    pub fn has_consumer_info(&self) -> bool {
        self.consumer_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consumer_info(&mut self, v: CheckResponse_ConsumerInfo) {
        self.consumer_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consumer_info(&mut self) -> &mut CheckResponse_ConsumerInfo {
        if self.consumer_info.is_none() {
            self.consumer_info.set_default();
        }
        self.consumer_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_consumer_info(&mut self) -> CheckResponse_ConsumerInfo {
        self.consumer_info.take().unwrap_or_else(|| CheckResponse_ConsumerInfo::new())
    }
}

impl ::protobuf::Message for CheckResponse_CheckInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.consumer_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consumer_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.consumer_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.consumer_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckResponse_CheckInfo {
        CheckResponse_CheckInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CheckResponse_ConsumerInfo>>(
                "consumer_info",
                |m: &CheckResponse_CheckInfo| { &m.consumer_info },
                |m: &mut CheckResponse_CheckInfo| { &mut m.consumer_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckResponse_CheckInfo>(
                "CheckResponse.CheckInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckResponse_CheckInfo {
        static instance: ::protobuf::rt::LazyV2<CheckResponse_CheckInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckResponse_CheckInfo::new)
    }
}

impl ::protobuf::Clear for CheckResponse_CheckInfo {
    fn clear(&mut self) {
        self.consumer_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckResponse_CheckInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckResponse_CheckInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckResponse_ConsumerInfo {
    // message fields
    pub project_number: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckResponse_ConsumerInfo {
    fn default() -> &'a CheckResponse_ConsumerInfo {
        <CheckResponse_ConsumerInfo as ::protobuf::Message>::default_instance()
    }
}

impl CheckResponse_ConsumerInfo {
    pub fn new() -> CheckResponse_ConsumerInfo {
        ::std::default::Default::default()
    }

    // int64 project_number = 1;


    pub fn get_project_number(&self) -> i64 {
        self.project_number
    }
    pub fn clear_project_number(&mut self) {
        self.project_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_project_number(&mut self, v: i64) {
        self.project_number = v;
    }
}

impl ::protobuf::Message for CheckResponse_ConsumerInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.project_number = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.project_number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.project_number, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.project_number != 0 {
            os.write_int64(1, self.project_number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckResponse_ConsumerInfo {
        CheckResponse_ConsumerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "project_number",
                |m: &CheckResponse_ConsumerInfo| { &m.project_number },
                |m: &mut CheckResponse_ConsumerInfo| { &mut m.project_number },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckResponse_ConsumerInfo>(
                "CheckResponse.ConsumerInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckResponse_ConsumerInfo {
        static instance: ::protobuf::rt::LazyV2<CheckResponse_ConsumerInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckResponse_ConsumerInfo::new)
    }
}

impl ::protobuf::Clear for CheckResponse_ConsumerInfo {
    fn clear(&mut self) {
        self.project_number = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckResponse_ConsumerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckResponse_ConsumerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportRequest {
    // message fields
    pub service_name: ::std::string::String,
    pub operations: ::protobuf::RepeatedField<super::operation::Operation>,
    pub service_config_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportRequest {
    fn default() -> &'a ReportRequest {
        <ReportRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReportRequest {
    pub fn new() -> ReportRequest {
        ::std::default::Default::default()
    }

    // string service_name = 1;


    pub fn get_service_name(&self) -> &str {
        &self.service_name
    }
    pub fn clear_service_name(&mut self) {
        self.service_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_name(&mut self, v: ::std::string::String) {
        self.service_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_name(&mut self) -> &mut ::std::string::String {
        &mut self.service_name
    }

    // Take field
    pub fn take_service_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_name, ::std::string::String::new())
    }

    // repeated .google.api.servicecontrol.v1.Operation operations = 2;


    pub fn get_operations(&self) -> &[super::operation::Operation] {
        &self.operations
    }
    pub fn clear_operations(&mut self) {
        self.operations.clear();
    }

    // Param is passed by value, moved
    pub fn set_operations(&mut self, v: ::protobuf::RepeatedField<super::operation::Operation>) {
        self.operations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_operations(&mut self) -> &mut ::protobuf::RepeatedField<super::operation::Operation> {
        &mut self.operations
    }

    // Take field
    pub fn take_operations(&mut self) -> ::protobuf::RepeatedField<super::operation::Operation> {
        ::std::mem::replace(&mut self.operations, ::protobuf::RepeatedField::new())
    }

    // string service_config_id = 3;


    pub fn get_service_config_id(&self) -> &str {
        &self.service_config_id
    }
    pub fn clear_service_config_id(&mut self) {
        self.service_config_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_config_id(&mut self, v: ::std::string::String) {
        self.service_config_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_config_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_config_id
    }

    // Take field
    pub fn take_service_config_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_config_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReportRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.operations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.operations)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_config_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        for value in &self.operations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.service_config_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        for v in &self.operations {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.service_config_id.is_empty() {
            os.write_string(3, &self.service_config_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportRequest {
        ReportRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_name",
                |m: &ReportRequest| { &m.service_name },
                |m: &mut ReportRequest| { &mut m.service_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::operation::Operation>>(
                "operations",
                |m: &ReportRequest| { &m.operations },
                |m: &mut ReportRequest| { &mut m.operations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_config_id",
                |m: &ReportRequest| { &m.service_config_id },
                |m: &mut ReportRequest| { &mut m.service_config_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportRequest>(
                "ReportRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportRequest {
        static instance: ::protobuf::rt::LazyV2<ReportRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportRequest::new)
    }
}

impl ::protobuf::Clear for ReportRequest {
    fn clear(&mut self) {
        self.service_name.clear();
        self.operations.clear();
        self.service_config_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportResponse {
    // message fields
    pub report_errors: ::protobuf::RepeatedField<ReportResponse_ReportError>,
    pub service_config_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportResponse {
    fn default() -> &'a ReportResponse {
        <ReportResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReportResponse {
    pub fn new() -> ReportResponse {
        ::std::default::Default::default()
    }

    // repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;


    pub fn get_report_errors(&self) -> &[ReportResponse_ReportError] {
        &self.report_errors
    }
    pub fn clear_report_errors(&mut self) {
        self.report_errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_report_errors(&mut self, v: ::protobuf::RepeatedField<ReportResponse_ReportError>) {
        self.report_errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_report_errors(&mut self) -> &mut ::protobuf::RepeatedField<ReportResponse_ReportError> {
        &mut self.report_errors
    }

    // Take field
    pub fn take_report_errors(&mut self) -> ::protobuf::RepeatedField<ReportResponse_ReportError> {
        ::std::mem::replace(&mut self.report_errors, ::protobuf::RepeatedField::new())
    }

    // string service_config_id = 2;


    pub fn get_service_config_id(&self) -> &str {
        &self.service_config_id
    }
    pub fn clear_service_config_id(&mut self) {
        self.service_config_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_config_id(&mut self, v: ::std::string::String) {
        self.service_config_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_config_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_config_id
    }

    // Take field
    pub fn take_service_config_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_config_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReportResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.report_errors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.report_errors)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_config_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.report_errors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.service_config_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.report_errors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.service_config_id.is_empty() {
            os.write_string(2, &self.service_config_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportResponse {
        ReportResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReportResponse_ReportError>>(
                "report_errors",
                |m: &ReportResponse| { &m.report_errors },
                |m: &mut ReportResponse| { &mut m.report_errors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_config_id",
                |m: &ReportResponse| { &m.service_config_id },
                |m: &mut ReportResponse| { &mut m.service_config_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportResponse>(
                "ReportResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportResponse {
        static instance: ::protobuf::rt::LazyV2<ReportResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportResponse::new)
    }
}

impl ::protobuf::Clear for ReportResponse {
    fn clear(&mut self) {
        self.report_errors.clear();
        self.service_config_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportResponse_ReportError {
    // message fields
    pub operation_id: ::std::string::String,
    pub status: ::protobuf::SingularPtrField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportResponse_ReportError {
    fn default() -> &'a ReportResponse_ReportError {
        <ReportResponse_ReportError as ::protobuf::Message>::default_instance()
    }
}

impl ReportResponse_ReportError {
    pub fn new() -> ReportResponse_ReportError {
        ::std::default::Default::default()
    }

    // string operation_id = 1;


    pub fn get_operation_id(&self) -> &str {
        &self.operation_id
    }
    pub fn clear_operation_id(&mut self) {
        self.operation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_operation_id(&mut self, v: ::std::string::String) {
        self.operation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation_id(&mut self) -> &mut ::std::string::String {
        &mut self.operation_id
    }

    // Take field
    pub fn take_operation_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.operation_id, ::std::string::String::new())
    }

    // .google.rpc.Status status = 2;


    pub fn get_status(&self) -> &super::status::Status {
        self.status.as_ref().unwrap_or_else(|| <super::status::Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::status::Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::status::Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::status::Status {
        self.status.take().unwrap_or_else(|| super::status::Status::new())
    }
}

impl ::protobuf::Message for ReportResponse_ReportError {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.operation_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.operation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.operation_id);
        }
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.operation_id.is_empty() {
            os.write_string(1, &self.operation_id)?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportResponse_ReportError {
        ReportResponse_ReportError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "operation_id",
                |m: &ReportResponse_ReportError| { &m.operation_id },
                |m: &mut ReportResponse_ReportError| { &mut m.operation_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "status",
                |m: &ReportResponse_ReportError| { &m.status },
                |m: &mut ReportResponse_ReportError| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportResponse_ReportError>(
                "ReportResponse.ReportError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportResponse_ReportError {
        static instance: ::protobuf::rt::LazyV2<ReportResponse_ReportError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportResponse_ReportError::new)
    }
}

impl ::protobuf::Clear for ReportResponse_ReportError {
    fn clear(&mut self) {
        self.operation_id.clear();
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportResponse_ReportError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportResponse_ReportError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n5google/api/servicecontrol/v1/service_controller.proto\x12\x1cgoogle.a\
    pi.servicecontrol.v1\x1a\x1cgoogle/api/annotations.proto\x1a.google/api/\
    servicecontrol/v1/check_error.proto\x1a,google/api/servicecontrol/v1/ope\
    ration.proto\x1a\x17google/rpc/status.proto\"\xa4\x01\n\x0cCheckRequest\
    \x12!\n\x0cservice_name\x18\x01\x20\x01(\tR\x0bserviceName\x12E\n\topera\
    tion\x18\x02\x20\x01(\x0b2'.google.api.servicecontrol.v1.OperationR\tope\
    ration\x12*\n\x11service_config_id\x18\x04\x20\x01(\tR\x0fserviceConfigI\
    d\"\xa4\x03\n\rCheckResponse\x12!\n\x0coperation_id\x18\x01\x20\x01(\tR\
    \x0boperationId\x12K\n\x0ccheck_errors\x18\x02\x20\x03(\x0b2(.google.api\
    .servicecontrol.v1.CheckErrorR\x0bcheckErrors\x12*\n\x11service_config_i\
    d\x18\x05\x20\x01(\tR\x0fserviceConfigId\x12T\n\ncheck_info\x18\x06\x20\
    \x01(\x0b25.google.api.servicecontrol.v1.CheckResponse.CheckInfoR\tcheck\
    Info\x1aj\n\tCheckInfo\x12]\n\rconsumer_info\x18\x02\x20\x01(\x0b28.goog\
    le.api.servicecontrol.v1.CheckResponse.ConsumerInfoR\x0cconsumerInfo\x1a\
    5\n\x0cConsumerInfo\x12%\n\x0eproject_number\x18\x01\x20\x01(\x03R\rproj\
    ectNumber\"\xa7\x01\n\rReportRequest\x12!\n\x0cservice_name\x18\x01\x20\
    \x01(\tR\x0bserviceName\x12G\n\noperations\x18\x02\x20\x03(\x0b2'.google\
    .api.servicecontrol.v1.OperationR\noperations\x12*\n\x11service_config_i\
    d\x18\x03\x20\x01(\tR\x0fserviceConfigId\"\xf9\x01\n\x0eReportResponse\
    \x12]\n\rreport_errors\x18\x01\x20\x03(\x0b28.google.api.servicecontrol.\
    v1.ReportResponse.ReportErrorR\x0creportErrors\x12*\n\x11service_config_\
    id\x18\x02\x20\x01(\tR\x0fserviceConfigId\x1a\\\n\x0bReportError\x12!\n\
    \x0coperation_id\x18\x01\x20\x01(\tR\x0boperationId\x12*\n\x06status\x18\
    \x02\x20\x01(\x0b2\x12.google.rpc.StatusR\x06status2\xb9\x02\n\x11Servic\
    eController\x12\x8e\x01\n\x05Check\x12*.google.api.servicecontrol.v1.Che\
    ckRequest\x1a+.google.api.servicecontrol.v1.CheckResponse\",\x82\xd3\xe4\
    \x93\x02&\"!/v1/services/{service_name}:check:\x01*\x12\x92\x01\n\x06Rep\
    ort\x12+.google.api.servicecontrol.v1.ReportRequest\x1a,.google.api.serv\
    icecontrol.v1.ReportResponse\"-\x82\xd3\xe4\x93\x02'\"\"/v1/services/{se\
    rvice_name}:report:\x01*B\x92\x01\n\x20com.google.api.servicecontrol.v1B\
    \x16ServiceControllerProtoP\x01ZJgoogle.golang.org/genproto/googleapis/a\
    pi/servicecontrol/v1;servicecontrol\xf8\x01\x01\xa2\x02\x04GASCJ\xc39\n\
    \x07\x12\x05\x0e\0\xb8\x01\x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xb2\x04\x20Copyright\x202017\x20Google\x20Inc.\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\0%\n\t\n\x02\x03\0\x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\
    \x03\x13\08\n\t\n\x02\x03\x02\x12\x03\x14\06\n\t\n\x02\x03\x03\x12\x03\
    \x15\0!\n\x08\n\x01\x08\x12\x03\x17\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x17\
    \0\x1f\n\x08\n\x01\x08\x12\x03\x18\0a\n\t\n\x02\x08\x0b\x12\x03\x18\0a\n\
    \x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08\n\x12\x03\x19\0\"\n\x08\n\
    \x01\x08\x12\x03\x1a\07\n\t\n\x02\x08\x08\x12\x03\x1a\07\n\x08\n\x01\x08\
    \x12\x03\x1b\09\n\t\n\x02\x08\x01\x12\x03\x1b\09\n\x08\n\x01\x08\x12\x03\
    \x1c\0\"\n\t\n\x02\x08$\x12\x03\x1c\0\"\n\x99\x02\n\x02\x06\0\x12\x04#\0\
    F\x01\x1a\x8c\x02\x20[Google\x20Service\x20Control\x20API](/service-cont\
    rol/overview)\n\n\x20Lets\x20clients\x20check\x20and\x20report\x20operat\
    ions\x20against\x20a\x20[managed\n\x20service](https://cloud.google.com/\
    service-management/reference/rpc/google.api/servicemanagement.v1#google.\
    api.servicemanagement.v1.ManagedService).\n\n\n\n\x03\x06\0\x01\x12\x03#\
    \x08\x19\n\xf0\x04\n\x04\x06\0\x02\0\x12\x041\x023\x03\x1a\xe1\x04\x20Ch\
    ecks\x20an\x20operation\x20with\x20Google\x20Service\x20Control\x20to\
    \x20decide\x20whether\n\x20the\x20given\x20operation\x20should\x20procee\
    d.\x20It\x20should\x20be\x20called\x20before\x20the\n\x20operation\x20is\
    \x20executed.\n\n\x20If\x20feasible,\x20the\x20client\x20should\x20cache\
    \x20the\x20check\x20results\x20and\x20reuse\x20them\x20for\n\x2060\x20se\
    conds.\x20In\x20case\x20of\x20server\x20errors,\x20the\x20client\x20can\
    \x20rely\x20on\x20the\x20cached\n\x20results\x20for\x20longer\x20time.\n\
    \n\x20NOTE:\x20the\x20[CheckRequest][google.api.servicecontrol.v1.CheckR\
    equest]\x20has\x20the\x20size\x20limit\x20of\x2064KB.\n\n\x20This\x20met\
    hod\x20requires\x20the\x20`servicemanagement.services.check`\x20permissi\
    on\n\x20on\x20the\x20specified\x20service.\x20For\x20more\x20information\
    ,\x20see\n\x20[Google\x20Cloud\x20IAM](https://cloud.google.com/iam).\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x031\x06\x0b\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x031\x0c\x18\n\x0c\n\x05\x06\0\x02\0\x03\x12\x031#0\n\x0c\n\x05\
    \x06\0\x02\0\x04\x12\x032\x04W\n\x10\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\
    \x12\x032\x04W\n\xec\x05\n\x04\x06\0\x02\x01\x12\x04C\x02E\x03\x1a\xdd\
    \x05\x20Reports\x20operation\x20results\x20to\x20Google\x20Service\x20Co\
    ntrol,\x20such\x20as\x20logs\x20and\n\x20metrics.\x20It\x20should\x20be\
    \x20called\x20after\x20an\x20operation\x20is\x20completed.\n\n\x20If\x20\
    feasible,\x20the\x20client\x20should\x20aggregate\x20reporting\x20data\
    \x20for\x20up\x20to\x205\n\x20seconds\x20to\x20reduce\x20API\x20traffic.\
    \x20Limiting\x20aggregation\x20to\x205\x20seconds\x20is\x20to\n\x20reduc\
    e\x20data\x20loss\x20during\x20client\x20crashes.\x20Clients\x20should\
    \x20carefully\x20choose\n\x20the\x20aggregation\x20time\x20window\x20to\
    \x20avoid\x20data\x20loss\x20risk\x20more\x20than\x200.01%\n\x20for\x20b\
    usiness\x20and\x20compliance\x20reasons.\n\n\x20NOTE:\x20the\x20[ReportR\
    equest][google.api.servicecontrol.v1.ReportRequest]\x20has\x20the\x20siz\
    e\x20limit\x20of\x201MB.\n\n\x20This\x20method\x20requires\x20the\x20`se\
    rvicemanagement.services.report`\x20permission\n\x20on\x20the\x20specifi\
    ed\x20service.\x20For\x20more\x20information,\x20see\n\x20[Google\x20Clo\
    ud\x20IAM](https://cloud.google.com/iam).\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03C\x06\x0c\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03C\r\x1a\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03C%3\n\x0c\n\x05\x06\0\x02\x01\x04\x12\
    \x03D\x04X\n\x10\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x03D\x04X\n3\n\
    \x02\x04\0\x12\x04I\0[\x01\x1a'\x20Request\x20message\x20for\x20the\x20C\
    heck\x20method.\n\n\n\n\x03\x04\0\x01\x12\x03I\x08\x14\n\x90\x02\n\x04\
    \x04\0\x02\0\x12\x03P\x02\x1a\x1a\x82\x02\x20The\x20service\x20name\x20a\
    s\x20specified\x20in\x20its\x20service\x20configuration.\x20For\x20examp\
    le,\n\x20`\"pubsub.googleapis.com\"`.\n\n\x20See\n\x20[google.api.Servic\
    e](https://cloud.google.com/service-management/reference/rpc/google.api#\
    google.api.Service)\n\x20for\x20the\x20definition\x20of\x20a\x20service\
    \x20name.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04P\x02I\x16\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03P\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03P\t\x15\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03P\x18\x19\n+\n\x04\x04\0\x02\x01\x12\
    \x03S\x02\x1a\x1a\x1e\x20The\x20operation\x20to\x20be\x20checked.\n\n\r\
    \n\x05\x04\0\x02\x01\x04\x12\x04S\x02P\x1a\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03S\x02\x0b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03S\x0c\x15\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03S\x18\x19\n\xbc\x01\n\x04\x04\0\x02\x02\
    \x12\x03Z\x02\x1f\x1a\xae\x01\x20Specifies\x20which\x20version\x20of\x20\
    service\x20configuration\x20should\x20be\x20used\x20to\x20process\n\x20t\
    he\x20request.\n\n\x20If\x20unspecified\x20or\x20no\x20matching\x20versi\
    on\x20can\x20be\x20found,\x20the\n\x20latest\x20one\x20will\x20be\x20use\
    d.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04Z\x02S\x1a\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03Z\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03Z\t\x1a\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03Z\x1d\x1e\n4\n\x02\x04\x01\x12\x04^\
    \0{\x01\x1a(\x20Response\x20message\x20for\x20the\x20Check\x20method.\n\
    \n\n\n\x03\x04\x01\x01\x12\x03^\x08\x15\n\x0c\n\x04\x04\x01\x03\0\x12\
    \x04_\x02b\x03\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03_\n\x13\n-\n\x06\x04\
    \x01\x03\0\x02\0\x12\x03a\x04#\x1a\x1e\x20Consumer\x20info\x20of\x20this\
    \x20check.\n\n\x0f\n\x07\x04\x01\x03\0\x02\0\x04\x12\x04a\x04_\x15\n\x0e\
    \n\x07\x04\x01\x03\0\x02\0\x06\x12\x03a\x04\x10\n\x0e\n\x07\x04\x01\x03\
    \0\x02\0\x01\x12\x03a\x11\x1e\n\x0e\n\x07\x04\x01\x03\0\x02\0\x03\x12\
    \x03a!\"\nO\n\x04\x04\x01\x03\x01\x12\x04e\x02i\x03\x1aA\x20`ConsumerInf\
    o`\x20provides\x20information\x20about\x20the\x20consumer\x20project.\n\
    \n\x0c\n\x05\x04\x01\x03\x01\x01\x12\x03e\n\x16\nv\n\x06\x04\x01\x03\x01\
    \x02\0\x12\x03h\x04\x1d\x1ag\x20The\x20Google\x20cloud\x20project\x20num\
    ber,\x20e.g.\x201234567890.\x20A\x20value\x20of\x200\x20indicates\n\x20n\
    o\x20project\x20number\x20is\x20found.\n\n\x0f\n\x07\x04\x01\x03\x01\x02\
    \0\x04\x12\x04h\x04e\x18\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x05\x12\x03h\
    \x04\t\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x01\x12\x03h\n\x18\n\x0e\n\x07\
    \x04\x01\x03\x01\x02\0\x03\x12\x03h\x1b\x1c\n\x9e\x01\n\x04\x04\x01\x02\
    \0\x12\x03m\x02\x1a\x1a\x90\x01\x20The\x20same\x20operation_id\x20value\
    \x20used\x20in\x20the\x20[CheckRequest][google.api.servicecontrol.v1.Che\
    ckRequest].\n\x20Used\x20for\x20logging\x20and\x20diagnostics\x20purpose\
    s.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04m\x02i\x03\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03m\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03m\t\x15\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03m\x18\x19\n\xda\x01\n\x04\x04\x01\
    \x02\x01\x12\x03t\x02'\x1a\xcc\x01\x20Indicate\x20the\x20decision\x20of\
    \x20the\x20check.\n\n\x20If\x20no\x20check\x20errors\x20are\x20present,\
    \x20the\x20service\x20should\x20process\x20the\x20operation.\n\x20Otherw\
    ise\x20the\x20service\x20should\x20use\x20the\x20list\x20of\x20errors\
    \x20to\x20determine\x20the\n\x20appropriate\x20action.\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x04\x12\x03t\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03t\
    \x0b\x15\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03t\x16\"\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03t%&\n@\n\x04\x04\x01\x02\x02\x12\x03w\x02\x1f\
    \x1a3\x20The\x20actual\x20config\x20id\x20used\x20to\x20process\x20the\
    \x20request.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04w\x02t'\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03w\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03w\t\x1a\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03w\x1d\x1e\nX\n\
    \x04\x04\x01\x02\x03\x12\x03z\x02\x1b\x1aK\x20Feedback\x20data\x20return\
    ed\x20from\x20the\x20server\x20during\x20processing\x20a\x20Check\x20req\
    uest.\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04z\x02w\x1f\n\x0c\n\x05\x04\
    \x01\x02\x03\x06\x12\x03z\x02\x0b\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03z\x0c\x16\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03z\x19\x1a\n5\n\x02\
    \x04\x02\x12\x05~\0\x99\x01\x01\x1a(\x20Request\x20message\x20for\x20the\
    \x20Report\x20method.\n\n\n\n\x03\x04\x02\x01\x12\x03~\x08\x15\n\x91\x02\
    \n\x04\x04\x02\x02\0\x12\x04\x85\x01\x02\x1a\x1a\x82\x02\x20The\x20servi\
    ce\x20name\x20as\x20specified\x20in\x20its\x20service\x20configuration.\
    \x20For\x20example,\n\x20`\"pubsub.googleapis.com\"`.\n\n\x20See\n\x20[g\
    oogle.api.Service](https://cloud.google.com/service-management/reference\
    /rpc/google.api#google.api.Service)\n\x20for\x20the\x20definition\x20of\
    \x20a\x20service\x20name.\n\n\x0e\n\x05\x04\x02\x02\0\x04\x12\x05\x85\
    \x01\x02~\x17\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x85\x01\x02\x08\n\r\n\
    \x05\x04\x02\x02\0\x01\x12\x04\x85\x01\t\x15\n\r\n\x05\x04\x02\x02\0\x03\
    \x12\x04\x85\x01\x18\x19\n\xf5\x03\n\x04\x04\x02\x02\x01\x12\x04\x91\x01\
    \x02$\x1a\xe6\x03\x20Operations\x20to\x20be\x20reported.\n\n\x20Typicall\
    y\x20the\x20service\x20should\x20report\x20one\x20operation\x20per\x20re\
    quest.\n\x20Putting\x20multiple\x20operations\x20into\x20a\x20single\x20\
    request\x20is\x20allowed,\x20but\x20should\n\x20be\x20used\x20only\x20wh\
    en\x20multiple\x20operations\x20are\x20natually\x20available\x20at\x20th\
    e\x20time\n\x20of\x20the\x20report.\n\n\x20If\x20multiple\x20operations\
    \x20are\x20in\x20a\x20single\x20request,\x20the\x20total\x20request\x20s\
    ize\n\x20should\x20be\x20no\x20larger\x20than\x201MB.\x20See\x20[ReportR\
    esponse.report_errors][google.api.servicecontrol.v1.ReportResponse.repor\
    t_errors]\x20for\n\x20partial\x20failure\x20behavior.\n\n\r\n\x05\x04\
    \x02\x02\x01\x04\x12\x04\x91\x01\x02\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\
    \x04\x91\x01\x0b\x14\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x91\x01\x15\
    \x1f\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\x91\x01\"#\n\xb6\x01\n\x04\
    \x04\x02\x02\x02\x12\x04\x98\x01\x02\x1f\x1a\xa7\x01\x20Specifies\x20whi\
    ch\x20version\x20of\x20service\x20config\x20should\x20be\x20used\x20to\
    \x20process\x20the\n\x20request.\n\n\x20If\x20unspecified\x20or\x20no\
    \x20matching\x20version\x20can\x20be\x20found,\x20the\n\x20latest\x20one\
    \x20will\x20be\x20used.\n\n\x0f\n\x05\x04\x02\x02\x02\x04\x12\x06\x98\
    \x01\x02\x91\x01$\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\x98\x01\x02\x08\
    \n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\x98\x01\t\x1a\n\r\n\x05\x04\x02\
    \x02\x02\x03\x12\x04\x98\x01\x1d\x1e\n7\n\x02\x04\x03\x12\x06\x9c\x01\0\
    \xb8\x01\x01\x1a)\x20Response\x20message\x20for\x20the\x20Report\x20meth\
    od.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\x9c\x01\x08\x16\n|\n\x04\x04\x03\
    \x03\0\x12\x06\x9e\x01\x02\xa4\x01\x03\x1al\x20Represents\x20the\x20proc\
    essing\x20error\x20of\x20one\x20[Operation][google.api.servicecontrol.v1\
    .Operation]\x20in\x20the\x20request.\n\n\r\n\x05\x04\x03\x03\0\x01\x12\
    \x04\x9e\x01\n\x15\n{\n\x06\x04\x03\x03\0\x02\0\x12\x04\xa0\x01\x04\x1c\
    \x1ak\x20The\x20[Operation.operation_id][google.api.servicecontrol.v1.Op\
    eration.operation_id]\x20value\x20from\x20the\x20request.\n\n\x11\n\x07\
    \x04\x03\x03\0\x02\0\x04\x12\x06\xa0\x01\x04\x9e\x01\x17\n\x0f\n\x07\x04\
    \x03\x03\0\x02\0\x05\x12\x04\xa0\x01\x04\n\n\x0f\n\x07\x04\x03\x03\0\x02\
    \0\x01\x12\x04\xa0\x01\x0b\x17\n\x0f\n\x07\x04\x03\x03\0\x02\0\x03\x12\
    \x04\xa0\x01\x1a\x1b\no\n\x06\x04\x03\x03\0\x02\x01\x12\x04\xa3\x01\x04!\
    \x1a_\x20Details\x20of\x20the\x20error\x20when\x20processing\x20the\x20[\
    Operation][google.api.servicecontrol.v1.Operation].\n\n\x11\n\x07\x04\
    \x03\x03\0\x02\x01\x04\x12\x06\xa3\x01\x04\xa0\x01\x1c\n\x0f\n\x07\x04\
    \x03\x03\0\x02\x01\x06\x12\x04\xa3\x01\x04\x15\n\x0f\n\x07\x04\x03\x03\0\
    \x02\x01\x01\x12\x04\xa3\x01\x16\x1c\n\x0f\n\x07\x04\x03\x03\0\x02\x01\
    \x03\x12\x04\xa3\x01\x1f\x20\n\x8e\x06\n\x04\x04\x03\x02\0\x12\x04\xb4\
    \x01\x02)\x1a\xff\x05\x20Partial\x20failures,\x20one\x20for\x20each\x20`\
    Operation`\x20in\x20the\x20request\x20that\x20failed\n\x20processing.\
    \x20There\x20are\x20three\x20possible\x20combinations\x20of\x20the\x20RP\
    C\x20status:\n\n\x201.\x20The\x20combination\x20of\x20a\x20successful\
    \x20RPC\x20status\x20and\x20an\x20empty\x20`report_errors`\n\x20\x20\x20\
    \x20list\x20indicates\x20a\x20complete\x20success\x20where\x20all\x20`Op\
    erations`\x20in\x20the\n\x20\x20\x20\x20request\x20are\x20processed\x20s\
    uccessfully.\n\x202.\x20The\x20combination\x20of\x20a\x20successful\x20R\
    PC\x20status\x20and\x20a\x20non-empty\n\x20\x20\x20\x20`report_errors`\
    \x20list\x20indicates\x20a\x20partial\x20success\x20where\x20some\n\x20\
    \x20\x20\x20`Operations`\x20in\x20the\x20request\x20succeeded.\x20Each\n\
    \x20\x20\x20\x20`Operation`\x20that\x20failed\x20processing\x20has\x20a\
    \x20corresponding\x20item\n\x20\x20\x20\x20in\x20this\x20list.\n\x203.\
    \x20A\x20failed\x20RPC\x20status\x20indicates\x20a\x20general\x20non-det\
    erministic\x20failure.\n\x20\x20\x20\x20When\x20this\x20happens,\x20it's\
    \x20impossible\x20to\x20know\x20which\x20of\x20the\n\x20\x20\x20\x20'Ope\
    rations'\x20in\x20the\x20request\x20succeeded\x20or\x20failed.\n\n\r\n\
    \x05\x04\x03\x02\0\x04\x12\x04\xb4\x01\x02\n\n\r\n\x05\x04\x03\x02\0\x06\
    \x12\x04\xb4\x01\x0b\x16\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xb4\x01\x17\
    $\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xb4\x01'(\nA\n\x04\x04\x03\x02\x01\
    \x12\x04\xb7\x01\x02\x1f\x1a3\x20The\x20actual\x20config\x20id\x20used\
    \x20to\x20process\x20the\x20request.\n\n\x0f\n\x05\x04\x03\x02\x01\x04\
    \x12\x06\xb7\x01\x02\xb4\x01)\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xb7\
    \x01\x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xb7\x01\t\x1a\n\r\n\
    \x05\x04\x03\x02\x01\x03\x12\x04\xb7\x01\x1d\x1eb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
