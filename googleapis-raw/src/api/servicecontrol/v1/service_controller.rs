// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/servicecontrol/v1/service_controller.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Request message for the Check method.
// @@protoc_insertion_point(message:google.api.servicecontrol.v1.CheckRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CheckRequest {
    // message fields
    ///  The service name as specified in its service configuration. For example,
    ///  `"pubsub.googleapis.com"`.
    ///
    ///  See
    ///  [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
    ///  for the definition of a service name.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckRequest.service_name)
    pub service_name: ::std::string::String,
    ///  The operation to be checked.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckRequest.operation)
    pub operation: ::protobuf::MessageField<super::operation::Operation>,
    ///  Specifies which version of service configuration should be used to process
    ///  the request.
    ///
    ///  If unspecified or no matching version can be found, the
    ///  latest one will be used.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckRequest.service_config_id)
    pub service_config_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.CheckRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckRequest {
    fn default() -> &'a CheckRequest {
        <CheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckRequest {
    pub fn new() -> CheckRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &CheckRequest| { &m.service_name },
            |m: &mut CheckRequest| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::operation::Operation>(
            "operation",
            |m: &CheckRequest| { &m.operation },
            |m: &mut CheckRequest| { &mut m.operation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_config_id",
            |m: &CheckRequest| { &m.service_config_id },
            |m: &mut CheckRequest| { &mut m.service_config_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckRequest>(
            "CheckRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckRequest {
    const NAME: &'static str = "CheckRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.operation)?;
                },
                34 => {
                    self.service_config_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if let Some(v) = self.operation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.service_config_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if let Some(v) = self.operation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.service_config_id.is_empty() {
            os.write_string(4, &self.service_config_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckRequest {
        CheckRequest::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self.operation.clear();
        self.service_config_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckRequest {
        static instance: CheckRequest = CheckRequest {
            service_name: ::std::string::String::new(),
            operation: ::protobuf::MessageField::none(),
            service_config_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response message for the Check method.
// @@protoc_insertion_point(message:google.api.servicecontrol.v1.CheckResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CheckResponse {
    // message fields
    ///  The same operation_id value used in the
    ///  [CheckRequest][google.api.servicecontrol.v1.CheckRequest]. Used for logging
    ///  and diagnostics purposes.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckResponse.operation_id)
    pub operation_id: ::std::string::String,
    ///  The current service rollout id used to process the request.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
    pub service_rollout_id: ::std::string::String,
    ///  Indicate the decision of the check.
    ///
    ///  If no check errors are present, the service should process the operation.
    ///  Otherwise the service should use the list of errors to determine the
    ///  appropriate action.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckResponse.check_errors)
    pub check_errors: ::std::vec::Vec<super::check_error::CheckError>,
    ///  The actual config id used to process the request.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckResponse.service_config_id)
    pub service_config_id: ::std::string::String,
    ///  Feedback data returned from the server during processing a Check request.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckResponse.check_info)
    pub check_info: ::protobuf::MessageField<check_response::CheckInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.CheckResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckResponse {
    fn default() -> &'a CheckResponse {
        <CheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckResponse {
    pub fn new() -> CheckResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_id",
            |m: &CheckResponse| { &m.operation_id },
            |m: &mut CheckResponse| { &mut m.operation_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_rollout_id",
            |m: &CheckResponse| { &m.service_rollout_id },
            |m: &mut CheckResponse| { &mut m.service_rollout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "check_errors",
            |m: &CheckResponse| { &m.check_errors },
            |m: &mut CheckResponse| { &mut m.check_errors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_config_id",
            |m: &CheckResponse| { &m.service_config_id },
            |m: &mut CheckResponse| { &mut m.service_config_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, check_response::CheckInfo>(
            "check_info",
            |m: &CheckResponse| { &m.check_info },
            |m: &mut CheckResponse| { &mut m.check_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckResponse>(
            "CheckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckResponse {
    const NAME: &'static str = "CheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.operation_id = is.read_string()?;
                },
                90 => {
                    self.service_rollout_id = is.read_string()?;
                },
                18 => {
                    self.check_errors.push(is.read_message()?);
                },
                42 => {
                    self.service_config_id = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.check_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.operation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.operation_id);
        }
        if !self.service_rollout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.service_rollout_id);
        }
        for value in &self.check_errors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.service_config_id);
        }
        if let Some(v) = self.check_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.operation_id.is_empty() {
            os.write_string(1, &self.operation_id)?;
        }
        if !self.service_rollout_id.is_empty() {
            os.write_string(11, &self.service_rollout_id)?;
        }
        for v in &self.check_errors {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.service_config_id.is_empty() {
            os.write_string(5, &self.service_config_id)?;
        }
        if let Some(v) = self.check_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckResponse {
        CheckResponse::new()
    }

    fn clear(&mut self) {
        self.operation_id.clear();
        self.service_rollout_id.clear();
        self.check_errors.clear();
        self.service_config_id.clear();
        self.check_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckResponse {
        static instance: CheckResponse = CheckResponse {
            operation_id: ::std::string::String::new(),
            service_rollout_id: ::std::string::String::new(),
            check_errors: ::std::vec::Vec::new(),
            service_config_id: ::std::string::String::new(),
            check_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CheckResponse`
pub mod check_response {
    // @@protoc_insertion_point(message:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CheckInfo {
        // message fields
        ///  Consumer info of this check.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
        pub consumer_info: ::protobuf::MessageField<ConsumerInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.CheckResponse.CheckInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CheckInfo {
        fn default() -> &'a CheckInfo {
            <CheckInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl CheckInfo {
        pub fn new() -> CheckInfo {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConsumerInfo>(
                "consumer_info",
                |m: &CheckInfo| { &m.consumer_info },
                |m: &mut CheckInfo| { &mut m.consumer_info },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckInfo>(
                "CheckResponse.CheckInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CheckInfo {
        const NAME: &'static str = "CheckInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.consumer_info)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.consumer_info.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.consumer_info.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CheckInfo {
            CheckInfo::new()
        }

        fn clear(&mut self) {
            self.consumer_info.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CheckInfo {
            static instance: CheckInfo = CheckInfo {
                consumer_info: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CheckInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CheckResponse.CheckInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CheckInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CheckInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  `ConsumerInfo` provides information about the consumer project.
    // @@protoc_insertion_point(message:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ConsumerInfo {
        // message fields
        ///  The Google cloud project number, e.g. 1234567890. A value of 0 indicates
        ///  no project number is found.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.project_number)
        pub project_number: i64,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ConsumerInfo {
        fn default() -> &'a ConsumerInfo {
            <ConsumerInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl ConsumerInfo {
        pub fn new() -> ConsumerInfo {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "project_number",
                |m: &ConsumerInfo| { &m.project_number },
                |m: &mut ConsumerInfo| { &mut m.project_number },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsumerInfo>(
                "CheckResponse.ConsumerInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ConsumerInfo {
        const NAME: &'static str = "ConsumerInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.project_number = is.read_int64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.project_number != 0 {
                my_size += ::protobuf::rt::int64_size(1, self.project_number);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.project_number != 0 {
                os.write_int64(1, self.project_number)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ConsumerInfo {
            ConsumerInfo::new()
        }

        fn clear(&mut self) {
            self.project_number = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ConsumerInfo {
            static instance: ConsumerInfo = ConsumerInfo {
                project_number: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ConsumerInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CheckResponse.ConsumerInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ConsumerInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ConsumerInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Request message for the Report method.
// @@protoc_insertion_point(message:google.api.servicecontrol.v1.ReportRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReportRequest {
    // message fields
    ///  The service name as specified in its service configuration. For example,
    ///  `"pubsub.googleapis.com"`.
    ///
    ///  See
    ///  [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
    ///  for the definition of a service name.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportRequest.service_name)
    pub service_name: ::std::string::String,
    ///  Operations to be reported.
    ///
    ///  Typically the service should report one operation per request.
    ///  Putting multiple operations into a single request is allowed, but should
    ///  be used only when multiple operations are natually available at the time
    ///  of the report.
    ///
    ///  If multiple operations are in a single request, the total request size
    ///  should be no larger than 1MB. See
    ///  [ReportResponse.report_errors][google.api.servicecontrol.v1.ReportResponse.report_errors]
    ///  for partial failure behavior.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportRequest.operations)
    pub operations: ::std::vec::Vec<super::operation::Operation>,
    ///  Specifies which version of service config should be used to process the
    ///  request.
    ///
    ///  If unspecified or no matching version can be found, the
    ///  latest one will be used.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportRequest.service_config_id)
    pub service_config_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.ReportRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReportRequest {
    fn default() -> &'a ReportRequest {
        <ReportRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReportRequest {
    pub fn new() -> ReportRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &ReportRequest| { &m.service_name },
            |m: &mut ReportRequest| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "operations",
            |m: &ReportRequest| { &m.operations },
            |m: &mut ReportRequest| { &mut m.operations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_config_id",
            |m: &ReportRequest| { &m.service_config_id },
            |m: &mut ReportRequest| { &mut m.service_config_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReportRequest>(
            "ReportRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReportRequest {
    const NAME: &'static str = "ReportRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                18 => {
                    self.operations.push(is.read_message()?);
                },
                26 => {
                    self.service_config_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        for value in &self.operations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.service_config_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        for v in &self.operations {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.service_config_id.is_empty() {
            os.write_string(3, &self.service_config_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReportRequest {
        ReportRequest::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self.operations.clear();
        self.service_config_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReportRequest {
        static instance: ReportRequest = ReportRequest {
            service_name: ::std::string::String::new(),
            operations: ::std::vec::Vec::new(),
            service_config_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReportRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReportRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response message for the Report method.
// @@protoc_insertion_point(message:google.api.servicecontrol.v1.ReportResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReportResponse {
    // message fields
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportResponse.report_errors)
    pub report_errors: ::std::vec::Vec<report_response::ReportError>,
    ///  The actual config id used to process the request.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportResponse.service_config_id)
    pub service_config_id: ::std::string::String,
    ///  The current service rollout id used to process the request.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
    pub service_rollout_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.ReportResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReportResponse {
    fn default() -> &'a ReportResponse {
        <ReportResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReportResponse {
    pub fn new() -> ReportResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "report_errors",
            |m: &ReportResponse| { &m.report_errors },
            |m: &mut ReportResponse| { &mut m.report_errors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_config_id",
            |m: &ReportResponse| { &m.service_config_id },
            |m: &mut ReportResponse| { &mut m.service_config_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_rollout_id",
            |m: &ReportResponse| { &m.service_rollout_id },
            |m: &mut ReportResponse| { &mut m.service_rollout_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReportResponse>(
            "ReportResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReportResponse {
    const NAME: &'static str = "ReportResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.report_errors.push(is.read_message()?);
                },
                18 => {
                    self.service_config_id = is.read_string()?;
                },
                34 => {
                    self.service_rollout_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.report_errors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.service_config_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.service_config_id);
        }
        if !self.service_rollout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.service_rollout_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.report_errors {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.service_config_id.is_empty() {
            os.write_string(2, &self.service_config_id)?;
        }
        if !self.service_rollout_id.is_empty() {
            os.write_string(4, &self.service_rollout_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReportResponse {
        ReportResponse::new()
    }

    fn clear(&mut self) {
        self.report_errors.clear();
        self.service_config_id.clear();
        self.service_rollout_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReportResponse {
        static instance: ReportResponse = ReportResponse {
            report_errors: ::std::vec::Vec::new(),
            service_config_id: ::std::string::String::new(),
            service_rollout_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReportResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReportResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReportResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ReportResponse`
pub mod report_response {
    ///  Represents the processing error of one
    ///  [Operation][google.api.servicecontrol.v1.Operation] in the request.
    // @@protoc_insertion_point(message:google.api.servicecontrol.v1.ReportResponse.ReportError)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ReportError {
        // message fields
        ///  The
        ///  [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id]
        ///  value from the request.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
        pub operation_id: ::std::string::String,
        ///  Details of the error when processing the
        ///  [Operation][google.api.servicecontrol.v1.Operation].
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
        pub status: ::protobuf::MessageField<super::super::status::Status>,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.ReportResponse.ReportError.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ReportError {
        fn default() -> &'a ReportError {
            <ReportError as ::protobuf::Message>::default_instance()
        }
    }

    impl ReportError {
        pub fn new() -> ReportError {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "operation_id",
                |m: &ReportError| { &m.operation_id },
                |m: &mut ReportError| { &mut m.operation_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::status::Status>(
                "status",
                |m: &ReportError| { &m.status },
                |m: &mut ReportError| { &mut m.status },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReportError>(
                "ReportResponse.ReportError",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ReportError {
        const NAME: &'static str = "ReportError";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.operation_id = is.read_string()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.operation_id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.operation_id);
            }
            if let Some(v) = self.status.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.operation_id.is_empty() {
                os.write_string(1, &self.operation_id)?;
            }
            if let Some(v) = self.status.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ReportError {
            ReportError::new()
        }

        fn clear(&mut self) {
            self.operation_id.clear();
            self.status.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ReportError {
            static instance: ReportError = ReportError {
                operation_id: ::std::string::String::new(),
                status: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ReportError {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ReportResponse.ReportError").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ReportError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ReportError {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n5google/api/servicecontrol/v1/service_controller.proto\x12\x1cgoogle.a\
    pi.servicecontrol.v1\x1a\x1cgoogle/api/annotations.proto\x1a.google/api/\
    servicecontrol/v1/check_error.proto\x1a,google/api/servicecontrol/v1/ope\
    ration.proto\x1a\x17google/rpc/status.proto\"\xa4\x01\n\x0cCheckRequest\
    \x12!\n\x0cservice_name\x18\x01\x20\x01(\tR\x0bserviceName\x12E\n\topera\
    tion\x18\x02\x20\x01(\x0b2'.google.api.servicecontrol.v1.OperationR\tope\
    ration\x12*\n\x11service_config_id\x18\x04\x20\x01(\tR\x0fserviceConfigI\
    d\"\xd2\x03\n\rCheckResponse\x12!\n\x0coperation_id\x18\x01\x20\x01(\tR\
    \x0boperationId\x12,\n\x12service_rollout_id\x18\x0b\x20\x01(\tR\x10serv\
    iceRolloutId\x12K\n\x0ccheck_errors\x18\x02\x20\x03(\x0b2(.google.api.se\
    rvicecontrol.v1.CheckErrorR\x0bcheckErrors\x12*\n\x11service_config_id\
    \x18\x05\x20\x01(\tR\x0fserviceConfigId\x12T\n\ncheck_info\x18\x06\x20\
    \x01(\x0b25.google.api.servicecontrol.v1.CheckResponse.CheckInfoR\tcheck\
    Info\x1aj\n\tCheckInfo\x12]\n\rconsumer_info\x18\x02\x20\x01(\x0b28.goog\
    le.api.servicecontrol.v1.CheckResponse.ConsumerInfoR\x0cconsumerInfo\x1a\
    5\n\x0cConsumerInfo\x12%\n\x0eproject_number\x18\x01\x20\x01(\x03R\rproj\
    ectNumber\"\xa7\x01\n\rReportRequest\x12!\n\x0cservice_name\x18\x01\x20\
    \x01(\tR\x0bserviceName\x12G\n\noperations\x18\x02\x20\x03(\x0b2'.google\
    .api.servicecontrol.v1.OperationR\noperations\x12*\n\x11service_config_i\
    d\x18\x03\x20\x01(\tR\x0fserviceConfigId\"\xa7\x02\n\x0eReportResponse\
    \x12]\n\rreport_errors\x18\x01\x20\x03(\x0b28.google.api.servicecontrol.\
    v1.ReportResponse.ReportErrorR\x0creportErrors\x12*\n\x11service_config_\
    id\x18\x02\x20\x01(\tR\x0fserviceConfigId\x12,\n\x12service_rollout_id\
    \x18\x04\x20\x01(\tR\x10serviceRolloutId\x1a\\\n\x0bReportError\x12!\n\
    \x0coperation_id\x18\x01\x20\x01(\tR\x0boperationId\x12*\n\x06status\x18\
    \x02\x20\x01(\x0b2\x12.google.rpc.StatusR\x06status2\xb9\x02\n\x11Servic\
    eController\x12\x8e\x01\n\x05Check\x12*.google.api.servicecontrol.v1.Che\
    ckRequest\x1a+.google.api.servicecontrol.v1.CheckResponse\",\x82\xd3\xe4\
    \x93\x02&\"!/v1/services/{service_name}:check:\x01*\x12\x92\x01\n\x06Rep\
    ort\x12+.google.api.servicecontrol.v1.ReportRequest\x1a,.google.api.serv\
    icecontrol.v1.ReportResponse\"-\x82\xd3\xe4\x93\x02'\"\"/v1/services/{se\
    rvice_name}:report:\x01*B\x92\x01\n\x20com.google.api.servicecontrol.v1B\
    \x16ServiceControllerProtoP\x01ZJgoogle.golang.org/genproto/googleapis/a\
    pi/servicecontrol/v1;servicecontrol\xf8\x01\x01\xa2\x02\x04GASCJ\xf69\n\
    \x07\x12\x05\x0e\0\xcb\x01\x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xb2\x04\x20Copyright\x202017\x20Google\x20Inc.\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\0%\n\t\n\x02\x03\0\x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\
    \x03\x13\08\n\t\n\x02\x03\x02\x12\x03\x14\06\n\t\n\x02\x03\x03\x12\x03\
    \x15\0!\n\x08\n\x01\x08\x12\x03\x17\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x17\
    \0\x1f\n\x08\n\x01\x08\x12\x03\x18\0a\n\t\n\x02\x08\x0b\x12\x03\x18\0a\n\
    \x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08\n\x12\x03\x19\0\"\n\x08\n\
    \x01\x08\x12\x03\x1a\07\n\t\n\x02\x08\x08\x12\x03\x1a\07\n\x08\n\x01\x08\
    \x12\x03\x1b\09\n\t\n\x02\x08\x01\x12\x03\x1b\09\n\x08\n\x01\x08\x12\x03\
    \x1c\0\"\n\t\n\x02\x08$\x12\x03\x1c\0\"\n\x99\x02\n\x02\x06\0\x12\x04\"\
    \0M\x01\x1a\x8c\x02\x20[Google\x20Service\x20Control\x20API](/service-co\
    ntrol/overview)\n\n\x20Lets\x20clients\x20check\x20and\x20report\x20oper\
    ations\x20against\x20a\x20[managed\n\x20service](https://cloud.google.co\
    m/service-management/reference/rpc/google.api/servicemanagement.v1#googl\
    e.api.servicemanagement.v1.ManagedService).\n\n\n\n\x03\x06\0\x01\x12\
    \x03\"\x08\x19\n\xf1\x04\n\x04\x06\0\x02\0\x12\x041\x026\x03\x1a\xe2\x04\
    \x20Checks\x20an\x20operation\x20with\x20Google\x20Service\x20Control\
    \x20to\x20decide\x20whether\n\x20the\x20given\x20operation\x20should\x20\
    proceed.\x20It\x20should\x20be\x20called\x20before\x20the\n\x20operation\
    \x20is\x20executed.\n\n\x20If\x20feasible,\x20the\x20client\x20should\
    \x20cache\x20the\x20check\x20results\x20and\x20reuse\x20them\x20for\n\
    \x2060\x20seconds.\x20In\x20case\x20of\x20server\x20errors,\x20the\x20cl\
    ient\x20can\x20rely\x20on\x20the\x20cached\n\x20results\x20for\x20longer\
    \x20time.\n\n\x20NOTE:\x20the\x20[CheckRequest][google.api.servicecontro\
    l.v1.CheckRequest]\x20has\x20the\n\x20size\x20limit\x20of\x2064KB.\n\n\
    \x20This\x20method\x20requires\x20the\x20`servicemanagement.services.che\
    ck`\x20permission\n\x20on\x20the\x20specified\x20service.\x20For\x20more\
    \x20information,\x20see\n\x20[Google\x20Cloud\x20IAM](https://cloud.goog\
    le.com/iam).\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x031\x06\x0b\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x031\x0c\x18\n\x0c\n\x05\x06\0\x02\0\x03\x12\x031#0\
    \n\r\n\x05\x06\0\x02\0\x04\x12\x042\x045\x06\n\x11\n\t\x06\0\x02\0\x04\
    \xb0\xca\xbc\"\x12\x042\x045\x06\n\xed\x05\n\x04\x06\0\x02\x01\x12\x04G\
    \x02L\x03\x1a\xde\x05\x20Reports\x20operation\x20results\x20to\x20Google\
    \x20Service\x20Control,\x20such\x20as\x20logs\x20and\n\x20metrics.\x20It\
    \x20should\x20be\x20called\x20after\x20an\x20operation\x20is\x20complete\
    d.\n\n\x20If\x20feasible,\x20the\x20client\x20should\x20aggregate\x20rep\
    orting\x20data\x20for\x20up\x20to\x205\n\x20seconds\x20to\x20reduce\x20A\
    PI\x20traffic.\x20Limiting\x20aggregation\x20to\x205\x20seconds\x20is\
    \x20to\n\x20reduce\x20data\x20loss\x20during\x20client\x20crashes.\x20Cl\
    ients\x20should\x20carefully\x20choose\n\x20the\x20aggregation\x20time\
    \x20window\x20to\x20avoid\x20data\x20loss\x20risk\x20more\x20than\x200.0\
    1%\n\x20for\x20business\x20and\x20compliance\x20reasons.\n\n\x20NOTE:\
    \x20the\x20[ReportRequest][google.api.servicecontrol.v1.ReportRequest]\
    \x20has\n\x20the\x20size\x20limit\x20of\x201MB.\n\n\x20This\x20method\
    \x20requires\x20the\x20`servicemanagement.services.report`\x20permission\
    \n\x20on\x20the\x20specified\x20service.\x20For\x20more\x20information,\
    \x20see\n\x20[Google\x20Cloud\x20IAM](https://cloud.google.com/iam).\n\n\
    \x0c\n\x05\x06\0\x02\x01\x01\x12\x03G\x06\x0c\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03G\r\x1a\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03G%3\n\r\n\x05\
    \x06\0\x02\x01\x04\x12\x04H\x04K\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\
    \xbc\"\x12\x04H\x04K\x06\n3\n\x02\x04\0\x12\x04P\0b\x01\x1a'\x20Request\
    \x20message\x20for\x20the\x20Check\x20method.\n\n\n\n\x03\x04\0\x01\x12\
    \x03P\x08\x14\n\x90\x02\n\x04\x04\0\x02\0\x12\x03W\x02\x1a\x1a\x82\x02\
    \x20The\x20service\x20name\x20as\x20specified\x20in\x20its\x20service\
    \x20configuration.\x20For\x20example,\n\x20`\"pubsub.googleapis.com\"`.\
    \n\n\x20See\n\x20[google.api.Service](https://cloud.google.com/service-m\
    anagement/reference/rpc/google.api#google.api.Service)\n\x20for\x20the\
    \x20definition\x20of\x20a\x20service\x20name.\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03W\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03W\t\x15\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03W\x18\x19\n+\n\x04\x04\0\x02\x01\x12\x03Z\
    \x02\x1a\x1a\x1e\x20The\x20operation\x20to\x20be\x20checked.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x06\x12\x03Z\x02\x0b\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03Z\x0c\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03Z\x18\x19\n\xbc\
    \x01\n\x04\x04\0\x02\x02\x12\x03a\x02\x1f\x1a\xae\x01\x20Specifies\x20wh\
    ich\x20version\x20of\x20service\x20configuration\x20should\x20be\x20used\
    \x20to\x20process\n\x20the\x20request.\n\n\x20If\x20unspecified\x20or\
    \x20no\x20matching\x20version\x20can\x20be\x20found,\x20the\n\x20latest\
    \x20one\x20will\x20be\x20used.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03a\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03a\t\x1a\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03a\x1d\x1e\n5\n\x02\x04\x01\x12\x05e\0\x86\x01\x01\
    \x1a(\x20Response\x20message\x20for\x20the\x20Check\x20method.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03e\x08\x15\n\x0c\n\x04\x04\x01\x03\0\x12\x04f\x02\
    i\x03\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03f\n\x13\n-\n\x06\x04\x01\x03\
    \0\x02\0\x12\x03h\x04#\x1a\x1e\x20Consumer\x20info\x20of\x20this\x20chec\
    k.\n\n\x0e\n\x07\x04\x01\x03\0\x02\0\x06\x12\x03h\x04\x10\n\x0e\n\x07\
    \x04\x01\x03\0\x02\0\x01\x12\x03h\x11\x1e\n\x0e\n\x07\x04\x01\x03\0\x02\
    \0\x03\x12\x03h!\"\nO\n\x04\x04\x01\x03\x01\x12\x04l\x02p\x03\x1aA\x20`C\
    onsumerInfo`\x20provides\x20information\x20about\x20the\x20consumer\x20p\
    roject.\n\n\x0c\n\x05\x04\x01\x03\x01\x01\x12\x03l\n\x16\nv\n\x06\x04\
    \x01\x03\x01\x02\0\x12\x03o\x04\x1d\x1ag\x20The\x20Google\x20cloud\x20pr\
    oject\x20number,\x20e.g.\x201234567890.\x20A\x20value\x20of\x200\x20indi\
    cates\n\x20no\x20project\x20number\x20is\x20found.\n\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\0\x05\x12\x03o\x04\t\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x01\
    \x12\x03o\n\x18\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x03\x12\x03o\x1b\x1c\n\
    \x9f\x01\n\x04\x04\x01\x02\0\x12\x03u\x02\x1a\x1a\x91\x01\x20The\x20same\
    \x20operation_id\x20value\x20used\x20in\x20the\n\x20[CheckRequest][googl\
    e.api.servicecontrol.v1.CheckRequest].\x20Used\x20for\x20logging\n\x20an\
    d\x20diagnostics\x20purposes.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03u\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03u\t\x15\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03u\x18\x19\nJ\n\x04\x04\x01\x02\x01\x12\x03x\x02!\
    \x1a=\x20The\x20current\x20service\x20rollout\x20id\x20used\x20to\x20pro\
    cess\x20the\x20request.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03x\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03x\t\x1b\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03x\x1e\x20\n\xda\x01\n\x04\x04\x01\x02\x02\x12\x03\
    \x7f\x02'\x1a\xcc\x01\x20Indicate\x20the\x20decision\x20of\x20the\x20che\
    ck.\n\n\x20If\x20no\x20check\x20errors\x20are\x20present,\x20the\x20serv\
    ice\x20should\x20process\x20the\x20operation.\n\x20Otherwise\x20the\x20s\
    ervice\x20should\x20use\x20the\x20list\x20of\x20errors\x20to\x20determin\
    e\x20the\n\x20appropriate\x20action.\n\n\x0c\n\x05\x04\x01\x02\x02\x04\
    \x12\x03\x7f\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x7f\x0b\x15\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x7f\x16\"\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x7f%&\nA\n\x04\x04\x01\x02\x03\x12\x04\x82\x01\x02\x1f\
    \x1a3\x20The\x20actual\x20config\x20id\x20used\x20to\x20process\x20the\
    \x20request.\n\n\r\n\x05\x04\x01\x02\x03\x05\x12\x04\x82\x01\x02\x08\n\r\
    \n\x05\x04\x01\x02\x03\x01\x12\x04\x82\x01\t\x1a\n\r\n\x05\x04\x01\x02\
    \x03\x03\x12\x04\x82\x01\x1d\x1e\nY\n\x04\x04\x01\x02\x04\x12\x04\x85\
    \x01\x02\x1b\x1aK\x20Feedback\x20data\x20returned\x20from\x20the\x20serv\
    er\x20during\x20processing\x20a\x20Check\x20request.\n\n\r\n\x05\x04\x01\
    \x02\x04\x06\x12\x04\x85\x01\x02\x0b\n\r\n\x05\x04\x01\x02\x04\x01\x12\
    \x04\x85\x01\x0c\x16\n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\x85\x01\x19\
    \x1a\n6\n\x02\x04\x02\x12\x06\x89\x01\0\xa5\x01\x01\x1a(\x20Request\x20m\
    essage\x20for\x20the\x20Report\x20method.\n\n\x0b\n\x03\x04\x02\x01\x12\
    \x04\x89\x01\x08\x15\n\x91\x02\n\x04\x04\x02\x02\0\x12\x04\x90\x01\x02\
    \x1a\x1a\x82\x02\x20The\x20service\x20name\x20as\x20specified\x20in\x20i\
    ts\x20service\x20configuration.\x20For\x20example,\n\x20`\"pubsub.google\
    apis.com\"`.\n\n\x20See\n\x20[google.api.Service](https://cloud.google.c\
    om/service-management/reference/rpc/google.api#google.api.Service)\n\x20\
    for\x20the\x20definition\x20of\x20a\x20service\x20name.\n\n\r\n\x05\x04\
    \x02\x02\0\x05\x12\x04\x90\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\
    \x04\x90\x01\t\x15\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x90\x01\x18\x19\n\
    \xf6\x03\n\x04\x04\x02\x02\x01\x12\x04\x9d\x01\x02$\x1a\xe7\x03\x20Opera\
    tions\x20to\x20be\x20reported.\n\n\x20Typically\x20the\x20service\x20sho\
    uld\x20report\x20one\x20operation\x20per\x20request.\n\x20Putting\x20mul\
    tiple\x20operations\x20into\x20a\x20single\x20request\x20is\x20allowed,\
    \x20but\x20should\n\x20be\x20used\x20only\x20when\x20multiple\x20operati\
    ons\x20are\x20natually\x20available\x20at\x20the\x20time\n\x20of\x20the\
    \x20report.\n\n\x20If\x20multiple\x20operations\x20are\x20in\x20a\x20sin\
    gle\x20request,\x20the\x20total\x20request\x20size\n\x20should\x20be\x20\
    no\x20larger\x20than\x201MB.\x20See\n\x20[ReportResponse.report_errors][\
    google.api.servicecontrol.v1.ReportResponse.report_errors]\n\x20for\x20p\
    artial\x20failure\x20behavior.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\
    \x9d\x01\x02\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\x9d\x01\x0b\x14\n\r\
    \n\x05\x04\x02\x02\x01\x01\x12\x04\x9d\x01\x15\x1f\n\r\n\x05\x04\x02\x02\
    \x01\x03\x12\x04\x9d\x01\"#\n\xb6\x01\n\x04\x04\x02\x02\x02\x12\x04\xa4\
    \x01\x02\x1f\x1a\xa7\x01\x20Specifies\x20which\x20version\x20of\x20servi\
    ce\x20config\x20should\x20be\x20used\x20to\x20process\x20the\n\x20reques\
    t.\n\n\x20If\x20unspecified\x20or\x20no\x20matching\x20version\x20can\
    \x20be\x20found,\x20the\n\x20latest\x20one\x20will\x20be\x20used.\n\n\r\
    \n\x05\x04\x02\x02\x02\x05\x12\x04\xa4\x01\x02\x08\n\r\n\x05\x04\x02\x02\
    \x02\x01\x12\x04\xa4\x01\t\x1a\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\xa4\
    \x01\x1d\x1e\n7\n\x02\x04\x03\x12\x06\xa8\x01\0\xcb\x01\x01\x1a)\x20Resp\
    onse\x20message\x20for\x20the\x20Report\x20method.\n\n\x0b\n\x03\x04\x03\
    \x01\x12\x04\xa8\x01\x08\x16\n}\n\x04\x04\x03\x03\0\x12\x06\xab\x01\x02\
    \xb4\x01\x03\x1am\x20Represents\x20the\x20processing\x20error\x20of\x20o\
    ne\n\x20[Operation][google.api.servicecontrol.v1.Operation]\x20in\x20the\
    \x20request.\n\n\r\n\x05\x04\x03\x03\0\x01\x12\x04\xab\x01\n\x15\n}\n\
    \x06\x04\x03\x03\0\x02\0\x12\x04\xaf\x01\x04\x1c\x1am\x20The\n\x20[Opera\
    tion.operation_id][google.api.servicecontrol.v1.Operation.operation_id]\
    \n\x20value\x20from\x20the\x20request.\n\n\x0f\n\x07\x04\x03\x03\0\x02\0\
    \x05\x12\x04\xaf\x01\x04\n\n\x0f\n\x07\x04\x03\x03\0\x02\0\x01\x12\x04\
    \xaf\x01\x0b\x17\n\x0f\n\x07\x04\x03\x03\0\x02\0\x03\x12\x04\xaf\x01\x1a\
    \x1b\np\n\x06\x04\x03\x03\0\x02\x01\x12\x04\xb3\x01\x04!\x1a`\x20Details\
    \x20of\x20the\x20error\x20when\x20processing\x20the\n\x20[Operation][goo\
    gle.api.servicecontrol.v1.Operation].\n\n\x0f\n\x07\x04\x03\x03\0\x02\
    \x01\x06\x12\x04\xb3\x01\x04\x15\n\x0f\n\x07\x04\x03\x03\0\x02\x01\x01\
    \x12\x04\xb3\x01\x16\x1c\n\x0f\n\x07\x04\x03\x03\0\x02\x01\x03\x12\x04\
    \xb3\x01\x1f\x20\n\x8e\x06\n\x04\x04\x03\x02\0\x12\x04\xc4\x01\x02)\x1a\
    \xff\x05\x20Partial\x20failures,\x20one\x20for\x20each\x20`Operation`\
    \x20in\x20the\x20request\x20that\x20failed\n\x20processing.\x20There\x20\
    are\x20three\x20possible\x20combinations\x20of\x20the\x20RPC\x20status:\
    \n\n\x201.\x20The\x20combination\x20of\x20a\x20successful\x20RPC\x20stat\
    us\x20and\x20an\x20empty\x20`report_errors`\n\x20\x20\x20\x20list\x20ind\
    icates\x20a\x20complete\x20success\x20where\x20all\x20`Operations`\x20in\
    \x20the\n\x20\x20\x20\x20request\x20are\x20processed\x20successfully.\n\
    \x202.\x20The\x20combination\x20of\x20a\x20successful\x20RPC\x20status\
    \x20and\x20a\x20non-empty\n\x20\x20\x20\x20`report_errors`\x20list\x20in\
    dicates\x20a\x20partial\x20success\x20where\x20some\n\x20\x20\x20\x20`Op\
    erations`\x20in\x20the\x20request\x20succeeded.\x20Each\n\x20\x20\x20\
    \x20`Operation`\x20that\x20failed\x20processing\x20has\x20a\x20correspon\
    ding\x20item\n\x20\x20\x20\x20in\x20this\x20list.\n\x203.\x20A\x20failed\
    \x20RPC\x20status\x20indicates\x20a\x20general\x20non-deterministic\x20f\
    ailure.\n\x20\x20\x20\x20When\x20this\x20happens,\x20it's\x20impossible\
    \x20to\x20know\x20which\x20of\x20the\n\x20\x20\x20\x20'Operations'\x20in\
    \x20the\x20request\x20succeeded\x20or\x20failed.\n\n\r\n\x05\x04\x03\x02\
    \0\x04\x12\x04\xc4\x01\x02\n\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\xc4\x01\
    \x0b\x16\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xc4\x01\x17$\n\r\n\x05\x04\
    \x03\x02\0\x03\x12\x04\xc4\x01'(\nA\n\x04\x04\x03\x02\x01\x12\x04\xc7\
    \x01\x02\x1f\x1a3\x20The\x20actual\x20config\x20id\x20used\x20to\x20proc\
    ess\x20the\x20request.\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xc7\x01\
    \x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xc7\x01\t\x1a\n\r\n\x05\
    \x04\x03\x02\x01\x03\x12\x04\xc7\x01\x1d\x1e\nK\n\x04\x04\x03\x02\x02\
    \x12\x04\xca\x01\x02\x20\x1a=\x20The\x20current\x20service\x20rollout\
    \x20id\x20used\x20to\x20process\x20the\x20request.\n\n\r\n\x05\x04\x03\
    \x02\x02\x05\x12\x04\xca\x01\x02\x08\n\r\n\x05\x04\x03\x02\x02\x01\x12\
    \x04\xca\x01\t\x1b\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xca\x01\x1e\x1f\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::check_error::file_descriptor().clone());
            deps.push(super::operation::file_descriptor().clone());
            deps.push(super::status::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CheckRequest::generated_message_descriptor_data());
            messages.push(CheckResponse::generated_message_descriptor_data());
            messages.push(ReportRequest::generated_message_descriptor_data());
            messages.push(ReportResponse::generated_message_descriptor_data());
            messages.push(check_response::CheckInfo::generated_message_descriptor_data());
            messages.push(check_response::ConsumerInfo::generated_message_descriptor_data());
            messages.push(report_response::ReportError::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
