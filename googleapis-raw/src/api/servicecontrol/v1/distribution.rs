// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/servicecontrol/v1/distribution.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Distribution represents a frequency distribution of double-valued sample
///  points. It contains the size of the population of sample points plus
///  additional optional information:
///
///    - the arithmetic mean of the samples
///    - the minimum and maximum of the samples
///    - the sum-squared-deviation of the samples, used to compute variance
///    - a histogram of the values of the sample points
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.servicecontrol.v1.Distribution)
pub struct Distribution {
    // message fields
    ///  The total number of samples in the distribution. Must be >= 0.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.count)
    pub count: i64,
    ///  The arithmetic mean of the samples in the distribution. If `count` is
    ///  zero then this field must be zero.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.mean)
    pub mean: f64,
    ///  The minimum of the population of values. Ignored if `count` is zero.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.minimum)
    pub minimum: f64,
    ///  The maximum of the population of values. Ignored if `count` is zero.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.maximum)
    pub maximum: f64,
    ///  The sum of squared deviations from the mean:
    ///    Sum[i=1..count]((x_i - mean)^2)
    ///  where each x_i is a sample values. If `count` is zero then this field
    ///  must be zero, otherwise validation of the request fails.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.sum_of_squared_deviation)
    pub sum_of_squared_deviation: f64,
    ///  The number of samples in each histogram bucket. `bucket_counts` are
    ///  optional. If present, they must sum to the `count` value.
    ///
    ///  The buckets are defined below in `bucket_option`. There are N buckets.
    ///  `bucket_counts[0]` is the number of samples in the underflow bucket.
    ///  `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
    ///  in each of the finite buckets. And `bucket_counts[N] is the number
    ///  of samples in the overflow bucket. See the comments of `bucket_option`
    ///  below for more details.
    ///
    ///  Any suffix of trailing zeros may be omitted.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.bucket_counts)
    pub bucket_counts: ::std::vec::Vec<i64>,
    // message oneof groups
    pub bucket_option: ::std::option::Option<distribution::Bucket_option>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.Distribution.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Distribution {
    fn default() -> &'a Distribution {
        <Distribution as ::protobuf::Message>::default_instance()
    }
}

impl Distribution {
    pub fn new() -> Distribution {
        ::std::default::Default::default()
    }

    // .google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;

    pub fn linear_buckets(&self) -> &distribution::LinearBuckets {
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(ref v)) => v,
            _ => <distribution::LinearBuckets as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_linear_buckets(&mut self) {
        self.bucket_option = ::std::option::Option::None;
    }

    pub fn has_linear_buckets(&self) -> bool {
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_linear_buckets(&mut self, v: distribution::LinearBuckets) {
        self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(v))
    }

    // Mutable pointer to the field.
    pub fn mut_linear_buckets(&mut self) -> &mut distribution::LinearBuckets {
        if let ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(_)) = self.bucket_option {
        } else {
            self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(distribution::LinearBuckets::new()));
        }
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_linear_buckets(&mut self) -> distribution::LinearBuckets {
        if self.has_linear_buckets() {
            match self.bucket_option.take() {
                ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(v)) => v,
                _ => panic!(),
            }
        } else {
            distribution::LinearBuckets::new()
        }
    }

    // .google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;

    pub fn exponential_buckets(&self) -> &distribution::ExponentialBuckets {
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(ref v)) => v,
            _ => <distribution::ExponentialBuckets as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_exponential_buckets(&mut self) {
        self.bucket_option = ::std::option::Option::None;
    }

    pub fn has_exponential_buckets(&self) -> bool {
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exponential_buckets(&mut self, v: distribution::ExponentialBuckets) {
        self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exponential_buckets(&mut self) -> &mut distribution::ExponentialBuckets {
        if let ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(_)) = self.bucket_option {
        } else {
            self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(distribution::ExponentialBuckets::new()));
        }
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exponential_buckets(&mut self) -> distribution::ExponentialBuckets {
        if self.has_exponential_buckets() {
            match self.bucket_option.take() {
                ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(v)) => v,
                _ => panic!(),
            }
        } else {
            distribution::ExponentialBuckets::new()
        }
    }

    // .google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;

    pub fn explicit_buckets(&self) -> &distribution::ExplicitBuckets {
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(ref v)) => v,
            _ => <distribution::ExplicitBuckets as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_explicit_buckets(&mut self) {
        self.bucket_option = ::std::option::Option::None;
    }

    pub fn has_explicit_buckets(&self) -> bool {
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_explicit_buckets(&mut self, v: distribution::ExplicitBuckets) {
        self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(v))
    }

    // Mutable pointer to the field.
    pub fn mut_explicit_buckets(&mut self) -> &mut distribution::ExplicitBuckets {
        if let ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(_)) = self.bucket_option {
        } else {
            self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(distribution::ExplicitBuckets::new()));
        }
        match self.bucket_option {
            ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_explicit_buckets(&mut self) -> distribution::ExplicitBuckets {
        if self.has_explicit_buckets() {
            match self.bucket_option.take() {
                ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(v)) => v,
                _ => panic!(),
            }
        } else {
            distribution::ExplicitBuckets::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &Distribution| { &m.count },
            |m: &mut Distribution| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mean",
            |m: &Distribution| { &m.mean },
            |m: &mut Distribution| { &mut m.mean },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "minimum",
            |m: &Distribution| { &m.minimum },
            |m: &mut Distribution| { &mut m.minimum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "maximum",
            |m: &Distribution| { &m.maximum },
            |m: &mut Distribution| { &mut m.maximum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sum_of_squared_deviation",
            |m: &Distribution| { &m.sum_of_squared_deviation },
            |m: &mut Distribution| { &mut m.sum_of_squared_deviation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bucket_counts",
            |m: &Distribution| { &m.bucket_counts },
            |m: &mut Distribution| { &mut m.bucket_counts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, distribution::LinearBuckets>(
            "linear_buckets",
            Distribution::has_linear_buckets,
            Distribution::linear_buckets,
            Distribution::mut_linear_buckets,
            Distribution::set_linear_buckets,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, distribution::ExponentialBuckets>(
            "exponential_buckets",
            Distribution::has_exponential_buckets,
            Distribution::exponential_buckets,
            Distribution::mut_exponential_buckets,
            Distribution::set_exponential_buckets,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, distribution::ExplicitBuckets>(
            "explicit_buckets",
            Distribution::has_explicit_buckets,
            Distribution::explicit_buckets,
            Distribution::mut_explicit_buckets,
            Distribution::set_explicit_buckets,
        ));
        oneofs.push(distribution::Bucket_option::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Distribution>(
            "Distribution",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Distribution {
    const NAME: &'static str = "Distribution";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = is.read_int64()?;
                },
                17 => {
                    self.mean = is.read_double()?;
                },
                25 => {
                    self.minimum = is.read_double()?;
                },
                33 => {
                    self.maximum = is.read_double()?;
                },
                41 => {
                    self.sum_of_squared_deviation = is.read_double()?;
                },
                50 => {
                    is.read_repeated_packed_int64_into(&mut self.bucket_counts)?;
                },
                48 => {
                    self.bucket_counts.push(is.read_int64()?);
                },
                58 => {
                    self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::LinearBuckets(is.read_message()?));
                },
                66 => {
                    self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::ExponentialBuckets(is.read_message()?));
                },
                74 => {
                    self.bucket_option = ::std::option::Option::Some(distribution::Bucket_option::ExplicitBuckets(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.count);
        }
        if self.mean != 0. {
            my_size += 1 + 8;
        }
        if self.minimum != 0. {
            my_size += 1 + 8;
        }
        if self.maximum != 0. {
            my_size += 1 + 8;
        }
        if self.sum_of_squared_deviation != 0. {
            my_size += 1 + 8;
        }
        for value in &self.bucket_counts {
            my_size += ::protobuf::rt::int64_size(6, *value);
        };
        if let ::std::option::Option::Some(ref v) = self.bucket_option {
            match v {
                &distribution::Bucket_option::LinearBuckets(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &distribution::Bucket_option::ExponentialBuckets(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &distribution::Bucket_option::ExplicitBuckets(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.count != 0 {
            os.write_int64(1, self.count)?;
        }
        if self.mean != 0. {
            os.write_double(2, self.mean)?;
        }
        if self.minimum != 0. {
            os.write_double(3, self.minimum)?;
        }
        if self.maximum != 0. {
            os.write_double(4, self.maximum)?;
        }
        if self.sum_of_squared_deviation != 0. {
            os.write_double(5, self.sum_of_squared_deviation)?;
        }
        for v in &self.bucket_counts {
            os.write_int64(6, *v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.bucket_option {
            match v {
                &distribution::Bucket_option::LinearBuckets(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &distribution::Bucket_option::ExponentialBuckets(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &distribution::Bucket_option::ExplicitBuckets(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Distribution {
        Distribution::new()
    }

    fn clear(&mut self) {
        self.count = 0;
        self.mean = 0.;
        self.minimum = 0.;
        self.maximum = 0.;
        self.sum_of_squared_deviation = 0.;
        self.bucket_counts.clear();
        self.bucket_option = ::std::option::Option::None;
        self.bucket_option = ::std::option::Option::None;
        self.bucket_option = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Distribution {
        static instance: Distribution = Distribution {
            count: 0,
            mean: 0.,
            minimum: 0.,
            maximum: 0.,
            sum_of_squared_deviation: 0.,
            bucket_counts: ::std::vec::Vec::new(),
            bucket_option: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Distribution {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Distribution").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Distribution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Distribution`
pub mod distribution {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.api.servicecontrol.v1.Distribution.bucket_option)
    pub enum Bucket_option {
        // @@protoc_insertion_point(oneof_field:google.api.servicecontrol.v1.Distribution.linear_buckets)
        LinearBuckets(LinearBuckets),
        // @@protoc_insertion_point(oneof_field:google.api.servicecontrol.v1.Distribution.exponential_buckets)
        ExponentialBuckets(ExponentialBuckets),
        // @@protoc_insertion_point(oneof_field:google.api.servicecontrol.v1.Distribution.explicit_buckets)
        ExplicitBuckets(ExplicitBuckets),
    }

    impl ::protobuf::Oneof for Bucket_option {
    }

    impl ::protobuf::OneofFull for Bucket_option {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Distribution as ::protobuf::MessageFull>::descriptor().oneof_by_name("bucket_option").unwrap()).clone()
        }
    }

    impl Bucket_option {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Bucket_option>("bucket_option")
        }
    }
    ///  Describing buckets with constant width.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.api.servicecontrol.v1.Distribution.LinearBuckets)
    pub struct LinearBuckets {
        // message fields
        ///  The number of finite buckets. With the underflow and overflow buckets,
        ///  the total number of buckets is `num_finite_buckets` + 2.
        ///  See comments on `bucket_options` for details.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.LinearBuckets.num_finite_buckets)
        pub num_finite_buckets: i32,
        ///  The i'th linear bucket covers the interval
        ///    [offset + (i-1) * width, offset + i * width)
        ///  where i ranges from 1 to num_finite_buckets, inclusive.
        ///  Must be strictly positive.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.LinearBuckets.width)
        pub width: f64,
        ///  The i'th linear bucket covers the interval
        ///    [offset + (i-1) * width, offset + i * width)
        ///  where i ranges from 1 to num_finite_buckets, inclusive.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.LinearBuckets.offset)
        pub offset: f64,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.Distribution.LinearBuckets.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LinearBuckets {
        fn default() -> &'a LinearBuckets {
            <LinearBuckets as ::protobuf::Message>::default_instance()
        }
    }

    impl LinearBuckets {
        pub fn new() -> LinearBuckets {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "num_finite_buckets",
                |m: &LinearBuckets| { &m.num_finite_buckets },
                |m: &mut LinearBuckets| { &mut m.num_finite_buckets },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "width",
                |m: &LinearBuckets| { &m.width },
                |m: &mut LinearBuckets| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "offset",
                |m: &LinearBuckets| { &m.offset },
                |m: &mut LinearBuckets| { &mut m.offset },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LinearBuckets>(
                "Distribution.LinearBuckets",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LinearBuckets {
        const NAME: &'static str = "LinearBuckets";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.num_finite_buckets = is.read_int32()?;
                    },
                    17 => {
                        self.width = is.read_double()?;
                    },
                    25 => {
                        self.offset = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.num_finite_buckets != 0 {
                my_size += ::protobuf::rt::int32_size(1, self.num_finite_buckets);
            }
            if self.width != 0. {
                my_size += 1 + 8;
            }
            if self.offset != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.num_finite_buckets != 0 {
                os.write_int32(1, self.num_finite_buckets)?;
            }
            if self.width != 0. {
                os.write_double(2, self.width)?;
            }
            if self.offset != 0. {
                os.write_double(3, self.offset)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LinearBuckets {
            LinearBuckets::new()
        }

        fn clear(&mut self) {
            self.num_finite_buckets = 0;
            self.width = 0.;
            self.offset = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LinearBuckets {
            static instance: LinearBuckets = LinearBuckets {
                num_finite_buckets: 0,
                width: 0.,
                offset: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LinearBuckets {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Distribution.LinearBuckets").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LinearBuckets {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LinearBuckets {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  Describing buckets with exponentially growing width.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
    pub struct ExponentialBuckets {
        // message fields
        ///  The number of finite buckets. With the underflow and overflow buckets,
        ///  the total number of buckets is `num_finite_buckets` + 2.
        ///  See comments on `bucket_options` for details.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.ExponentialBuckets.num_finite_buckets)
        pub num_finite_buckets: i32,
        ///  The i'th exponential bucket covers the interval
        ///    [scale * growth_factor^(i-1), scale * growth_factor^i)
        ///  where i ranges from 1 to num_finite_buckets inclusive.
        ///  Must be larger than 1.0.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.ExponentialBuckets.growth_factor)
        pub growth_factor: f64,
        ///  The i'th exponential bucket covers the interval
        ///    [scale * growth_factor^(i-1), scale * growth_factor^i)
        ///  where i ranges from 1 to num_finite_buckets inclusive.
        ///  Must be > 0.
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.ExponentialBuckets.scale)
        pub scale: f64,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.Distribution.ExponentialBuckets.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ExponentialBuckets {
        fn default() -> &'a ExponentialBuckets {
            <ExponentialBuckets as ::protobuf::Message>::default_instance()
        }
    }

    impl ExponentialBuckets {
        pub fn new() -> ExponentialBuckets {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "num_finite_buckets",
                |m: &ExponentialBuckets| { &m.num_finite_buckets },
                |m: &mut ExponentialBuckets| { &mut m.num_finite_buckets },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "growth_factor",
                |m: &ExponentialBuckets| { &m.growth_factor },
                |m: &mut ExponentialBuckets| { &mut m.growth_factor },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "scale",
                |m: &ExponentialBuckets| { &m.scale },
                |m: &mut ExponentialBuckets| { &mut m.scale },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExponentialBuckets>(
                "Distribution.ExponentialBuckets",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ExponentialBuckets {
        const NAME: &'static str = "ExponentialBuckets";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.num_finite_buckets = is.read_int32()?;
                    },
                    17 => {
                        self.growth_factor = is.read_double()?;
                    },
                    25 => {
                        self.scale = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.num_finite_buckets != 0 {
                my_size += ::protobuf::rt::int32_size(1, self.num_finite_buckets);
            }
            if self.growth_factor != 0. {
                my_size += 1 + 8;
            }
            if self.scale != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.num_finite_buckets != 0 {
                os.write_int32(1, self.num_finite_buckets)?;
            }
            if self.growth_factor != 0. {
                os.write_double(2, self.growth_factor)?;
            }
            if self.scale != 0. {
                os.write_double(3, self.scale)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ExponentialBuckets {
            ExponentialBuckets::new()
        }

        fn clear(&mut self) {
            self.num_finite_buckets = 0;
            self.growth_factor = 0.;
            self.scale = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ExponentialBuckets {
            static instance: ExponentialBuckets = ExponentialBuckets {
                num_finite_buckets: 0,
                growth_factor: 0.,
                scale: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ExponentialBuckets {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Distribution.ExponentialBuckets").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ExponentialBuckets {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ExponentialBuckets {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  Describing buckets with arbitrary user-provided width.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
    pub struct ExplicitBuckets {
        // message fields
        ///  'bound' is a list of strictly increasing boundaries between
        ///  buckets. Note that a list of length N-1 defines N buckets because
        ///  of fenceposting. See comments on `bucket_options` for details.
        ///
        ///  The i'th finite bucket covers the interval
        ///    [bound[i-1], bound[i])
        ///  where i ranges from 1 to bound_size() - 1. Note that there are no
        ///  finite buckets at all if 'bound' only contains a single element; in
        ///  that special case the single bound defines the boundary between the
        ///  underflow and overflow buckets.
        ///
        ///  bucket number                   lower bound    upper bound
        ///   i == 0 (underflow)              -inf           bound[i]
        ///   0 < i < bound_size()            bound[i-1]     bound[i]
        ///   i == bound_size() (overflow)    bound[i-1]     +inf
        // @@protoc_insertion_point(field:google.api.servicecontrol.v1.Distribution.ExplicitBuckets.bounds)
        pub bounds: ::std::vec::Vec<f64>,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.Distribution.ExplicitBuckets.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ExplicitBuckets {
        fn default() -> &'a ExplicitBuckets {
            <ExplicitBuckets as ::protobuf::Message>::default_instance()
        }
    }

    impl ExplicitBuckets {
        pub fn new() -> ExplicitBuckets {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "bounds",
                |m: &ExplicitBuckets| { &m.bounds },
                |m: &mut ExplicitBuckets| { &mut m.bounds },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExplicitBuckets>(
                "Distribution.ExplicitBuckets",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ExplicitBuckets {
        const NAME: &'static str = "ExplicitBuckets";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        is.read_repeated_packed_double_into(&mut self.bounds)?;
                    },
                    9 => {
                        self.bounds.push(is.read_double()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += 9 * self.bounds.len() as u64;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.bounds {
                os.write_double(1, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ExplicitBuckets {
            ExplicitBuckets::new()
        }

        fn clear(&mut self) {
            self.bounds.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ExplicitBuckets {
            static instance: ExplicitBuckets = ExplicitBuckets {
                bounds: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ExplicitBuckets {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Distribution.ExplicitBuckets").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ExplicitBuckets {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ExplicitBuckets {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/google/api/servicecontrol/v1/distribution.proto\x12\x1cgoogle.api.ser\
    vicecontrol.v1\"\xb0\x06\n\x0cDistribution\x12\x14\n\x05count\x18\x01\
    \x20\x01(\x03R\x05count\x12\x12\n\x04mean\x18\x02\x20\x01(\x01R\x04mean\
    \x12\x18\n\x07minimum\x18\x03\x20\x01(\x01R\x07minimum\x12\x18\n\x07maxi\
    mum\x18\x04\x20\x01(\x01R\x07maximum\x127\n\x18sum_of_squared_deviation\
    \x18\x05\x20\x01(\x01R\x15sumOfSquaredDeviation\x12#\n\rbucket_counts\
    \x18\x06\x20\x03(\x03R\x0cbucketCounts\x12a\n\x0elinear_buckets\x18\x07\
    \x20\x01(\x0b28.google.api.servicecontrol.v1.Distribution.LinearBucketsH\
    \0R\rlinearBuckets\x12p\n\x13exponential_buckets\x18\x08\x20\x01(\x0b2=.\
    google.api.servicecontrol.v1.Distribution.ExponentialBucketsH\0R\x12expo\
    nentialBuckets\x12g\n\x10explicit_buckets\x18\t\x20\x01(\x0b2:.google.ap\
    i.servicecontrol.v1.Distribution.ExplicitBucketsH\0R\x0fexplicitBuckets\
    \x1ak\n\rLinearBuckets\x12,\n\x12num_finite_buckets\x18\x01\x20\x01(\x05\
    R\x10numFiniteBuckets\x12\x14\n\x05width\x18\x02\x20\x01(\x01R\x05width\
    \x12\x16\n\x06offset\x18\x03\x20\x01(\x01R\x06offset\x1a}\n\x12Exponenti\
    alBuckets\x12,\n\x12num_finite_buckets\x18\x01\x20\x01(\x05R\x10numFinit\
    eBuckets\x12#\n\rgrowth_factor\x18\x02\x20\x01(\x01R\x0cgrowthFactor\x12\
    \x14\n\x05scale\x18\x03\x20\x01(\x01R\x05scale\x1a)\n\x0fExplicitBuckets\
    \x12\x16\n\x06bounds\x18\x01\x20\x03(\x01R\x06boundsB\x0f\n\rbucket_opti\
    onB\x86\x01\n\x20com.google.api.servicecontrol.v1B\x11DistributionProtoP\
    \x01ZJgoogle.golang.org/genproto/googleapis/api/servicecontrol/v1;servic\
    econtrol\xf8\x01\x01J\xf02\n\x07\x12\x05\x0e\0\x9d\x01\x01\n\xbd\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20Google\x20In\
    c.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0%\n\x08\n\x01\x08\x12\x03\
    \x12\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x12\0\x1f\n\x08\n\x01\x08\x12\x03\
    \x13\0a\n\t\n\x02\x08\x0b\x12\x03\x13\0a\n\x08\n\x01\x08\x12\x03\x14\0\"\
    \n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\02\n\t\n\
    \x02\x08\x08\x12\x03\x15\02\n\x08\n\x01\x08\x12\x03\x16\09\n\t\n\x02\x08\
    \x01\x12\x03\x16\09\n\x91\x03\n\x02\x04\0\x12\x05\x20\0\x9d\x01\x01\x1a\
    \x83\x03\x20Distribution\x20represents\x20a\x20frequency\x20distribution\
    \x20of\x20double-valued\x20sample\n\x20points.\x20It\x20contains\x20the\
    \x20size\x20of\x20the\x20population\x20of\x20sample\x20points\x20plus\n\
    \x20additional\x20optional\x20information:\n\n\x20\x20\x20-\x20the\x20ar\
    ithmetic\x20mean\x20of\x20the\x20samples\n\x20\x20\x20-\x20the\x20minimu\
    m\x20and\x20maximum\x20of\x20the\x20samples\n\x20\x20\x20-\x20the\x20sum\
    -squared-deviation\x20of\x20the\x20samples,\x20used\x20to\x20compute\x20\
    variance\n\x20\x20\x20-\x20a\x20histogram\x20of\x20the\x20values\x20of\
    \x20the\x20sample\x20points\n\n\n\n\x03\x04\0\x01\x12\x03\x20\x08\x14\n7\
    \n\x04\x04\0\x03\0\x12\x04\"\x022\x03\x1a)\x20Describing\x20buckets\x20w\
    ith\x20constant\x20width.\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\"\n\x17\
    \n\xc1\x01\n\x06\x04\0\x03\0\x02\0\x12\x03&\x04!\x1a\xb1\x01\x20The\x20n\
    umber\x20of\x20finite\x20buckets.\x20With\x20the\x20underflow\x20and\x20\
    overflow\x20buckets,\n\x20the\x20total\x20number\x20of\x20buckets\x20is\
    \x20`num_finite_buckets`\x20+\x202.\n\x20See\x20comments\x20on\x20`bucke\
    t_options`\x20for\x20details.\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\
    \x03&\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03&\n\x1c\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x03\x12\x03&\x1f\x20\n\xc1\x01\n\x06\x04\0\x03\0\x02\
    \x01\x12\x03,\x04\x15\x1a\xb1\x01\x20The\x20i'th\x20linear\x20bucket\x20\
    covers\x20the\x20interval\n\x20\x20\x20[offset\x20+\x20(i-1)\x20*\x20wid\
    th,\x20offset\x20+\x20i\x20*\x20width)\n\x20where\x20i\x20ranges\x20from\
    \x201\x20to\x20num_finite_buckets,\x20inclusive.\n\x20Must\x20be\x20stri\
    ctly\x20positive.\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03,\x04\n\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03,\x0b\x10\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x03\x12\x03,\x13\x14\n\xa5\x01\n\x06\x04\0\x03\0\x02\x02\
    \x12\x031\x04\x16\x1a\x95\x01\x20The\x20i'th\x20linear\x20bucket\x20cove\
    rs\x20the\x20interval\n\x20\x20\x20[offset\x20+\x20(i-1)\x20*\x20width,\
    \x20offset\x20+\x20i\x20*\x20width)\n\x20where\x20i\x20ranges\x20from\
    \x201\x20to\x20num_finite_buckets,\x20inclusive.\n\n\x0e\n\x07\x04\0\x03\
    \0\x02\x02\x05\x12\x031\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\
    \x031\x0b\x11\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\x12\x031\x14\x15\nD\n\
    \x04\x04\0\x03\x01\x12\x045\x02F\x03\x1a6\x20Describing\x20buckets\x20wi\
    th\x20exponentially\x20growing\x20width.\n\n\x0c\n\x05\x04\0\x03\x01\x01\
    \x12\x035\n\x1c\n\xc1\x01\n\x06\x04\0\x03\x01\x02\0\x12\x039\x04!\x1a\
    \xb1\x01\x20The\x20number\x20of\x20finite\x20buckets.\x20With\x20the\x20\
    underflow\x20and\x20overflow\x20buckets,\n\x20the\x20total\x20number\x20\
    of\x20buckets\x20is\x20`num_finite_buckets`\x20+\x202.\n\x20See\x20comme\
    nts\x20on\x20`bucket_options`\x20for\x20details.\n\n\x0e\n\x07\x04\0\x03\
    \x01\x02\0\x05\x12\x039\x04\t\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\
    \x039\n\x1c\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x039\x1f\x20\n\xcd\
    \x01\n\x06\x04\0\x03\x01\x02\x01\x12\x03?\x04\x1d\x1a\xbd\x01\x20The\x20\
    i'th\x20exponential\x20bucket\x20covers\x20the\x20interval\n\x20\x20\x20\
    [scale\x20*\x20growth_factor^(i-1),\x20scale\x20*\x20growth_factor^i)\n\
    \x20where\x20i\x20ranges\x20from\x201\x20to\x20num_finite_buckets\x20inc\
    lusive.\n\x20Must\x20be\x20larger\x20than\x201.0.\n\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x01\x05\x12\x03?\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\x01\
    \x01\x12\x03?\x0b\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03?\x1b\
    \x1c\n\xc1\x01\n\x06\x04\0\x03\x01\x02\x02\x12\x03E\x04\x15\x1a\xb1\x01\
    \x20The\x20i'th\x20exponential\x20bucket\x20covers\x20the\x20interval\n\
    \x20\x20\x20[scale\x20*\x20growth_factor^(i-1),\x20scale\x20*\x20growth_\
    factor^i)\n\x20where\x20i\x20ranges\x20from\x201\x20to\x20num_finite_buc\
    kets\x20inclusive.\n\x20Must\x20be\x20>\x200.\n\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x02\x05\x12\x03E\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x01\
    \x12\x03E\x0b\x10\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x03\x12\x03E\x13\x14\
    \nF\n\x04\x04\0\x03\x02\x12\x04I\x02Z\x03\x1a8\x20Describing\x20buckets\
    \x20with\x20arbitrary\x20user-provided\x20width.\n\n\x0c\n\x05\x04\0\x03\
    \x02\x01\x12\x03I\n\x19\n\xec\x05\n\x06\x04\0\x03\x02\x02\0\x12\x03Y\x04\
    \x1f\x1a\xdc\x05\x20'bound'\x20is\x20a\x20list\x20of\x20strictly\x20incr\
    easing\x20boundaries\x20between\n\x20buckets.\x20Note\x20that\x20a\x20li\
    st\x20of\x20length\x20N-1\x20defines\x20N\x20buckets\x20because\n\x20of\
    \x20fenceposting.\x20See\x20comments\x20on\x20`bucket_options`\x20for\
    \x20details.\n\n\x20The\x20i'th\x20finite\x20bucket\x20covers\x20the\x20\
    interval\n\x20\x20\x20[bound[i-1],\x20bound[i])\n\x20where\x20i\x20range\
    s\x20from\x201\x20to\x20bound_size()\x20-\x201.\x20Note\x20that\x20there\
    \x20are\x20no\n\x20finite\x20buckets\x20at\x20all\x20if\x20'bound'\x20on\
    ly\x20contains\x20a\x20single\x20element;\x20in\n\x20that\x20special\x20\
    case\x20the\x20single\x20bound\x20defines\x20the\x20boundary\x20between\
    \x20the\n\x20underflow\x20and\x20overflow\x20buckets.\n\n\x20bucket\x20n\
    umber\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20lower\x20bound\x20\x20\x20\x20upper\x20bound\n\x20\x20i\x20=\
    =\x200\x20(underflow)\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20-inf\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bound[i]\n\x20\
    \x200\x20<\x20i\x20<\x20bound_size()\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20bound[i-1]\x20\x20\x20\x20\x20bound[i]\n\x20\x20i\x20==\x20b\
    ound_size()\x20(overflow)\x20\x20\x20\x20bound[i-1]\x20\x20\x20\x20\x20+\
    inf\n\n\x0e\n\x07\x04\0\x03\x02\x02\0\x04\x12\x03Y\x04\x0c\n\x0e\n\x07\
    \x04\0\x03\x02\x02\0\x05\x12\x03Y\r\x13\n\x0e\n\x07\x04\0\x03\x02\x02\0\
    \x01\x12\x03Y\x14\x1a\n\x0e\n\x07\x04\0\x03\x02\x02\0\x03\x12\x03Y\x1d\
    \x1e\nM\n\x04\x04\0\x02\0\x12\x03]\x02\x12\x1a@\x20The\x20total\x20numbe\
    r\x20of\x20samples\x20in\x20the\x20distribution.\x20Must\x20be\x20>=\x20\
    0.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03]\x02\x07\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03]\x08\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03]\x10\x11\nx\n\
    \x04\x04\0\x02\x01\x12\x03a\x02\x12\x1ak\x20The\x20arithmetic\x20mean\
    \x20of\x20the\x20samples\x20in\x20the\x20distribution.\x20If\x20`count`\
    \x20is\n\x20zero\x20then\x20this\x20field\x20must\x20be\x20zero.\n\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03a\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03a\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03a\x10\x11\nS\n\x04\
    \x04\0\x02\x02\x12\x03d\x02\x15\x1aF\x20The\x20minimum\x20of\x20the\x20p\
    opulation\x20of\x20values.\x20Ignored\x20if\x20`count`\x20is\x20zero.\n\
    \n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03d\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03d\t\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03d\x13\x14\n\
    S\n\x04\x04\0\x02\x03\x12\x03g\x02\x15\x1aF\x20The\x20maximum\x20of\x20t\
    he\x20population\x20of\x20values.\x20Ignored\x20if\x20`count`\x20is\x20z\
    ero.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03g\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03g\t\x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03g\x13\
    \x14\n\xe0\x01\n\x04\x04\0\x02\x04\x12\x03m\x02&\x1a\xd2\x01\x20The\x20s\
    um\x20of\x20squared\x20deviations\x20from\x20the\x20mean:\n\x20\x20\x20S\
    um[i=1..count]((x_i\x20-\x20mean)^2)\n\x20where\x20each\x20x_i\x20is\x20\
    a\x20sample\x20values.\x20If\x20`count`\x20is\x20zero\x20then\x20this\
    \x20field\n\x20must\x20be\x20zero,\x20otherwise\x20validation\x20of\x20t\
    he\x20request\x20fails.\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03m\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03m\t!\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03m$%\n\xb8\x04\n\x04\x04\0\x02\x05\x12\x03z\x02#\x1a\xaa\x04\x20T\
    he\x20number\x20of\x20samples\x20in\x20each\x20histogram\x20bucket.\x20`\
    bucket_counts`\x20are\n\x20optional.\x20If\x20present,\x20they\x20must\
    \x20sum\x20to\x20the\x20`count`\x20value.\n\n\x20The\x20buckets\x20are\
    \x20defined\x20below\x20in\x20`bucket_option`.\x20There\x20are\x20N\x20b\
    uckets.\n\x20`bucket_counts[0]`\x20is\x20the\x20number\x20of\x20samples\
    \x20in\x20the\x20underflow\x20bucket.\n\x20`bucket_counts[1]`\x20to\x20`\
    bucket_counts[N-1]`\x20are\x20the\x20numbers\x20of\x20samples\n\x20in\
    \x20each\x20of\x20the\x20finite\x20buckets.\x20And\x20`bucket_counts[N]\
    \x20is\x20the\x20number\n\x20of\x20samples\x20in\x20the\x20overflow\x20b\
    ucket.\x20See\x20the\x20comments\x20of\x20`bucket_option`\n\x20below\x20\
    for\x20more\x20details.\n\n\x20Any\x20suffix\x20of\x20trailing\x20zeros\
    \x20may\x20be\x20omitted.\n\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03z\x02\n\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03z\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03z\x11\x1e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03z!\"\n\
    \xf2\x08\n\x04\x04\0\x08\0\x12\x06\x93\x01\x02\x9c\x01\x03\x1a\xe1\x08\
    \x20Defines\x20the\x20buckets\x20in\x20the\x20histogram.\x20`bucket_opti\
    on`\x20and\x20`bucket_counts`\n\x20must\x20be\x20both\x20set,\x20or\x20b\
    oth\x20unset.\n\n\x20Buckets\x20are\x20numbered\x20in\x20the\x20range\
    \x20of\x20[0,\x20N],\x20with\x20a\x20total\x20of\x20N+1\x20buckets.\n\
    \x20There\x20must\x20be\x20at\x20least\x20two\x20buckets\x20(a\x20single\
    -bucket\x20histogram\x20gives\n\x20no\x20information\x20that\x20isn't\
    \x20already\x20provided\x20by\x20`count`).\n\n\x20The\x20first\x20bucket\
    \x20is\x20the\x20underflow\x20bucket\x20which\x20has\x20a\x20lower\x20bo\
    und\n\x20of\x20-inf.\x20The\x20last\x20bucket\x20is\x20the\x20overflow\
    \x20bucket\x20which\x20has\x20an\n\x20upper\x20bound\x20of\x20+inf.\x20A\
    ll\x20other\x20buckets\x20(if\x20any)\x20are\x20called\x20\"finite\"\n\
    \x20buckets\x20because\x20they\x20have\x20finite\x20lower\x20and\x20uppe\
    r\x20bounds.\x20As\x20described\n\x20below,\x20there\x20are\x20three\x20\
    ways\x20to\x20define\x20the\x20finite\x20buckets.\n\n\x20\x20\x20(1)\x20\
    Buckets\x20with\x20constant\x20width.\n\x20\x20\x20(2)\x20Buckets\x20wit\
    h\x20exponentially\x20growing\x20widths.\n\x20\x20\x20(3)\x20Buckets\x20\
    with\x20arbitrary\x20user-provided\x20widths.\n\n\x20In\x20all\x20cases,\
    \x20the\x20buckets\x20cover\x20the\x20entire\x20real\x20number\x20line\
    \x20(-inf,\n\x20+inf).\x20Bucket\x20upper\x20bounds\x20are\x20exclusive\
    \x20and\x20lower\x20bounds\x20are\n\x20inclusive.\x20The\x20upper\x20bou\
    nd\x20of\x20the\x20underflow\x20bucket\x20is\x20equal\x20to\x20the\n\x20\
    lower\x20bound\x20of\x20the\x20smallest\x20finite\x20bucket;\x20the\x20l\
    ower\x20bound\x20of\x20the\n\x20overflow\x20bucket\x20is\x20equal\x20to\
    \x20the\x20upper\x20bound\x20of\x20the\x20largest\x20finite\n\x20bucket.\
    \n\n\r\n\x05\x04\0\x08\0\x01\x12\x04\x93\x01\x08\x15\n,\n\x04\x04\0\x02\
    \x06\x12\x04\x95\x01\x04%\x1a\x1e\x20Buckets\x20with\x20constant\x20widt\
    h.\n\n\r\n\x05\x04\0\x02\x06\x06\x12\x04\x95\x01\x04\x11\n\r\n\x05\x04\0\
    \x02\x06\x01\x12\x04\x95\x01\x12\x20\n\r\n\x05\x04\0\x02\x06\x03\x12\x04\
    \x95\x01#$\n9\n\x04\x04\0\x02\x07\x12\x04\x98\x01\x04/\x1a+\x20Buckets\
    \x20with\x20exponentially\x20growing\x20width.\n\n\r\n\x05\x04\0\x02\x07\
    \x06\x12\x04\x98\x01\x04\x16\n\r\n\x05\x04\0\x02\x07\x01\x12\x04\x98\x01\
    \x17*\n\r\n\x05\x04\0\x02\x07\x03\x12\x04\x98\x01-.\n;\n\x04\x04\0\x02\
    \x08\x12\x04\x9b\x01\x04)\x1a-\x20Buckets\x20with\x20arbitrary\x20user-p\
    rovided\x20width.\n\n\r\n\x05\x04\0\x02\x08\x06\x12\x04\x9b\x01\x04\x13\
    \n\r\n\x05\x04\0\x02\x08\x01\x12\x04\x9b\x01\x14$\n\r\n\x05\x04\0\x02\
    \x08\x03\x12\x04\x9b\x01'(b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Distribution::generated_message_descriptor_data());
            messages.push(distribution::LinearBuckets::generated_message_descriptor_data());
            messages.push(distribution::ExponentialBuckets::generated_message_descriptor_data());
            messages.push(distribution::ExplicitBuckets::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
