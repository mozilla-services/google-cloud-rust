// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/servicecontrol/v1/check_error.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Defines the errors to be returned in
///  [google.api.servicecontrol.v1.CheckResponse.check_errors][google.api.servicecontrol.v1.CheckResponse.check_errors].
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.servicecontrol.v1.CheckError)
pub struct CheckError {
    // message fields
    ///  The error code.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckError.code)
    pub code: ::protobuf::EnumOrUnknown<check_error::Code>,
    ///  Free-form text providing details on the error cause of the error.
    // @@protoc_insertion_point(field:google.api.servicecontrol.v1.CheckError.detail)
    pub detail: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.servicecontrol.v1.CheckError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckError {
    fn default() -> &'a CheckError {
        <CheckError as ::protobuf::Message>::default_instance()
    }
}

impl CheckError {
    pub fn new() -> CheckError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &CheckError| { &m.code },
            |m: &mut CheckError| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "detail",
            |m: &CheckError| { &m.detail },
            |m: &mut CheckError| { &mut m.detail },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckError>(
            "CheckError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckError {
    const NAME: &'static str = "CheckError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.detail = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != ::protobuf::EnumOrUnknown::new(check_error::Code::ERROR_CODE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.code.value());
        }
        if !self.detail.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.detail);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != ::protobuf::EnumOrUnknown::new(check_error::Code::ERROR_CODE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.code))?;
        }
        if !self.detail.is_empty() {
            os.write_string(2, &self.detail)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckError {
        CheckError::new()
    }

    fn clear(&mut self) {
        self.code = ::protobuf::EnumOrUnknown::new(check_error::Code::ERROR_CODE_UNSPECIFIED);
        self.detail.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckError {
        static instance: CheckError = CheckError {
            code: ::protobuf::EnumOrUnknown::from_i32(0),
            detail: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CheckError`
pub mod check_error {
    ///  Error codes for Check responses.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.api.servicecontrol.v1.CheckError.Code)
    pub enum Code {
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.ERROR_CODE_UNSPECIFIED)
        ERROR_CODE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.NOT_FOUND)
        NOT_FOUND = 5,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.PERMISSION_DENIED)
        PERMISSION_DENIED = 7,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.RESOURCE_EXHAUSTED)
        RESOURCE_EXHAUSTED = 8,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.ABUSER_DETECTED)
        ABUSER_DETECTED = 103,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.SERVICE_NOT_ACTIVATED)
        SERVICE_NOT_ACTIVATED = 104,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.BILLING_DISABLED)
        BILLING_DISABLED = 107,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.PROJECT_DELETED)
        PROJECT_DELETED = 108,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.PROJECT_INVALID)
        PROJECT_INVALID = 114,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.IP_ADDRESS_BLOCKED)
        IP_ADDRESS_BLOCKED = 109,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.REFERER_BLOCKED)
        REFERER_BLOCKED = 110,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.CLIENT_APP_BLOCKED)
        CLIENT_APP_BLOCKED = 111,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.API_TARGET_BLOCKED)
        API_TARGET_BLOCKED = 122,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.API_KEY_INVALID)
        API_KEY_INVALID = 105,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.API_KEY_EXPIRED)
        API_KEY_EXPIRED = 112,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.API_KEY_NOT_FOUND)
        API_KEY_NOT_FOUND = 113,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.SECURITY_POLICY_VIOLATED)
        SECURITY_POLICY_VIOLATED = 121,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.INVALID_CREDENTIAL)
        INVALID_CREDENTIAL = 123,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.LOCATION_POLICY_VIOLATED)
        LOCATION_POLICY_VIOLATED = 124,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.CONSUMER_INVALID)
        CONSUMER_INVALID = 125,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.NAMESPACE_LOOKUP_UNAVAILABLE)
        NAMESPACE_LOOKUP_UNAVAILABLE = 300,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.SERVICE_STATUS_UNAVAILABLE)
        SERVICE_STATUS_UNAVAILABLE = 301,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.BILLING_STATUS_UNAVAILABLE)
        BILLING_STATUS_UNAVAILABLE = 302,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.QUOTA_CHECK_UNAVAILABLE)
        QUOTA_CHECK_UNAVAILABLE = 303,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE)
        CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 305,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.SECURITY_POLICY_BACKEND_UNAVAILABLE)
        SECURITY_POLICY_BACKEND_UNAVAILABLE = 306,
        // @@protoc_insertion_point(enum_value:google.api.servicecontrol.v1.CheckError.Code.LOCATION_POLICY_BACKEND_UNAVAILABLE)
        LOCATION_POLICY_BACKEND_UNAVAILABLE = 307,
    }

    impl ::protobuf::Enum for Code {
        const NAME: &'static str = "Code";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Code> {
            match value {
                0 => ::std::option::Option::Some(Code::ERROR_CODE_UNSPECIFIED),
                5 => ::std::option::Option::Some(Code::NOT_FOUND),
                7 => ::std::option::Option::Some(Code::PERMISSION_DENIED),
                8 => ::std::option::Option::Some(Code::RESOURCE_EXHAUSTED),
                103 => ::std::option::Option::Some(Code::ABUSER_DETECTED),
                104 => ::std::option::Option::Some(Code::SERVICE_NOT_ACTIVATED),
                107 => ::std::option::Option::Some(Code::BILLING_DISABLED),
                108 => ::std::option::Option::Some(Code::PROJECT_DELETED),
                114 => ::std::option::Option::Some(Code::PROJECT_INVALID),
                109 => ::std::option::Option::Some(Code::IP_ADDRESS_BLOCKED),
                110 => ::std::option::Option::Some(Code::REFERER_BLOCKED),
                111 => ::std::option::Option::Some(Code::CLIENT_APP_BLOCKED),
                122 => ::std::option::Option::Some(Code::API_TARGET_BLOCKED),
                105 => ::std::option::Option::Some(Code::API_KEY_INVALID),
                112 => ::std::option::Option::Some(Code::API_KEY_EXPIRED),
                113 => ::std::option::Option::Some(Code::API_KEY_NOT_FOUND),
                121 => ::std::option::Option::Some(Code::SECURITY_POLICY_VIOLATED),
                123 => ::std::option::Option::Some(Code::INVALID_CREDENTIAL),
                124 => ::std::option::Option::Some(Code::LOCATION_POLICY_VIOLATED),
                125 => ::std::option::Option::Some(Code::CONSUMER_INVALID),
                300 => ::std::option::Option::Some(Code::NAMESPACE_LOOKUP_UNAVAILABLE),
                301 => ::std::option::Option::Some(Code::SERVICE_STATUS_UNAVAILABLE),
                302 => ::std::option::Option::Some(Code::BILLING_STATUS_UNAVAILABLE),
                303 => ::std::option::Option::Some(Code::QUOTA_CHECK_UNAVAILABLE),
                305 => ::std::option::Option::Some(Code::CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE),
                306 => ::std::option::Option::Some(Code::SECURITY_POLICY_BACKEND_UNAVAILABLE),
                307 => ::std::option::Option::Some(Code::LOCATION_POLICY_BACKEND_UNAVAILABLE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Code] = &[
            Code::ERROR_CODE_UNSPECIFIED,
            Code::NOT_FOUND,
            Code::PERMISSION_DENIED,
            Code::RESOURCE_EXHAUSTED,
            Code::ABUSER_DETECTED,
            Code::SERVICE_NOT_ACTIVATED,
            Code::BILLING_DISABLED,
            Code::PROJECT_DELETED,
            Code::PROJECT_INVALID,
            Code::IP_ADDRESS_BLOCKED,
            Code::REFERER_BLOCKED,
            Code::CLIENT_APP_BLOCKED,
            Code::API_TARGET_BLOCKED,
            Code::API_KEY_INVALID,
            Code::API_KEY_EXPIRED,
            Code::API_KEY_NOT_FOUND,
            Code::SECURITY_POLICY_VIOLATED,
            Code::INVALID_CREDENTIAL,
            Code::LOCATION_POLICY_VIOLATED,
            Code::CONSUMER_INVALID,
            Code::NAMESPACE_LOOKUP_UNAVAILABLE,
            Code::SERVICE_STATUS_UNAVAILABLE,
            Code::BILLING_STATUS_UNAVAILABLE,
            Code::QUOTA_CHECK_UNAVAILABLE,
            Code::CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE,
            Code::SECURITY_POLICY_BACKEND_UNAVAILABLE,
            Code::LOCATION_POLICY_BACKEND_UNAVAILABLE,
        ];
    }

    impl ::protobuf::EnumFull for Code {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CheckError.Code").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Code::ERROR_CODE_UNSPECIFIED => 0,
                Code::NOT_FOUND => 1,
                Code::PERMISSION_DENIED => 2,
                Code::RESOURCE_EXHAUSTED => 3,
                Code::ABUSER_DETECTED => 4,
                Code::SERVICE_NOT_ACTIVATED => 5,
                Code::BILLING_DISABLED => 6,
                Code::PROJECT_DELETED => 7,
                Code::PROJECT_INVALID => 8,
                Code::IP_ADDRESS_BLOCKED => 9,
                Code::REFERER_BLOCKED => 10,
                Code::CLIENT_APP_BLOCKED => 11,
                Code::API_TARGET_BLOCKED => 12,
                Code::API_KEY_INVALID => 13,
                Code::API_KEY_EXPIRED => 14,
                Code::API_KEY_NOT_FOUND => 15,
                Code::SECURITY_POLICY_VIOLATED => 16,
                Code::INVALID_CREDENTIAL => 17,
                Code::LOCATION_POLICY_VIOLATED => 18,
                Code::CONSUMER_INVALID => 19,
                Code::NAMESPACE_LOOKUP_UNAVAILABLE => 20,
                Code::SERVICE_STATUS_UNAVAILABLE => 21,
                Code::BILLING_STATUS_UNAVAILABLE => 22,
                Code::QUOTA_CHECK_UNAVAILABLE => 23,
                Code::CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE => 24,
                Code::SECURITY_POLICY_BACKEND_UNAVAILABLE => 25,
                Code::LOCATION_POLICY_BACKEND_UNAVAILABLE => 26,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Code {
        fn default() -> Self {
            Code::ERROR_CODE_UNSPECIFIED
        }
    }

    impl Code {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Code>("CheckError.Code")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.google/api/servicecontrol/v1/check_error.proto\x12\x1cgoogle.api.serv\
    icecontrol.v1\x1a\x1cgoogle/api/annotations.proto\"\xca\x06\n\nCheckErro\
    r\x12A\n\x04code\x18\x01\x20\x01(\x0e2-.google.api.servicecontrol.v1.Che\
    ckError.CodeR\x04code\x12\x16\n\x06detail\x18\x02\x20\x01(\tR\x06detail\
    \"\xe0\x05\n\x04Code\x12\x1a\n\x16ERROR_CODE_UNSPECIFIED\x10\0\x12\r\n\t\
    NOT_FOUND\x10\x05\x12\x15\n\x11PERMISSION_DENIED\x10\x07\x12\x16\n\x12RE\
    SOURCE_EXHAUSTED\x10\x08\x12\x13\n\x0fABUSER_DETECTED\x10g\x12\x19\n\x15\
    SERVICE_NOT_ACTIVATED\x10h\x12\x14\n\x10BILLING_DISABLED\x10k\x12\x13\n\
    \x0fPROJECT_DELETED\x10l\x12\x13\n\x0fPROJECT_INVALID\x10r\x12\x16\n\x12\
    IP_ADDRESS_BLOCKED\x10m\x12\x13\n\x0fREFERER_BLOCKED\x10n\x12\x16\n\x12C\
    LIENT_APP_BLOCKED\x10o\x12\x16\n\x12API_TARGET_BLOCKED\x10z\x12\x13\n\
    \x0fAPI_KEY_INVALID\x10i\x12\x13\n\x0fAPI_KEY_EXPIRED\x10p\x12\x15\n\x11\
    API_KEY_NOT_FOUND\x10q\x12\x1c\n\x18SECURITY_POLICY_VIOLATED\x10y\x12\
    \x16\n\x12INVALID_CREDENTIAL\x10{\x12\x1c\n\x18LOCATION_POLICY_VIOLATED\
    \x10|\x12\x14\n\x10CONSUMER_INVALID\x10}\x12!\n\x1cNAMESPACE_LOOKUP_UNAV\
    AILABLE\x10\xac\x02\x12\x1f\n\x1aSERVICE_STATUS_UNAVAILABLE\x10\xad\x02\
    \x12\x1f\n\x1aBILLING_STATUS_UNAVAILABLE\x10\xae\x02\x12\x1c\n\x17QUOTA_\
    CHECK_UNAVAILABLE\x10\xaf\x02\x12/\n*CLOUD_RESOURCE_MANAGER_BACKEND_UNAV\
    AILABLE\x10\xb1\x02\x12(\n#SECURITY_POLICY_BACKEND_UNAVAILABLE\x10\xb2\
    \x02\x12(\n#LOCATION_POLICY_BACKEND_UNAVAILABLE\x10\xb3\x02B\x84\x01\n\
    \x20com.google.api.servicecontrol.v1B\x0fCheckErrorProtoP\x01ZJgoogle.go\
    lang.org/genproto/googleapis/api/servicecontrol/v1;servicecontrol\xf8\
    \x01\x01J\xfc#\n\x07\x12\x05\x0e\0\x84\x01\x01\n\xbd\x04\n\x01\x0c\x12\
    \x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20Google\x20Inc.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x08\n\x01\x02\x12\x03\x10\0%\n\t\n\x02\x03\0\x12\x03\x12\0&\n\x08\n\
    \x01\x08\x12\x03\x14\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x14\0\x1f\n\x08\n\
    \x01\x08\x12\x03\x15\0a\n\t\n\x02\x08\x0b\x12\x03\x15\0a\n\x08\n\x01\x08\
    \x12\x03\x16\0\"\n\t\n\x02\x08\n\x12\x03\x16\0\"\n\x08\n\x01\x08\x12\x03\
    \x17\00\n\t\n\x02\x08\x08\x12\x03\x17\00\n\x08\n\x01\x08\x12\x03\x18\09\
    \n\t\n\x02\x08\x01\x12\x03\x18\09\n\xa9\x01\n\x02\x04\0\x12\x05\x1c\0\
    \x84\x01\x01\x1a\x9b\x01\x20Defines\x20the\x20errors\x20to\x20be\x20retu\
    rned\x20in\n\x20[google.api.servicecontrol.v1.CheckResponse.check_errors\
    ][google.api.servicecontrol.v1.CheckResponse.check_errors].\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x1c\x08\x12\n0\n\x04\x04\0\x04\0\x12\x04\x1e\x02}\x03\
    \x1a\"\x20Error\x20codes\x20for\x20Check\x20responses.\n\n\x0c\n\x05\x04\
    \0\x04\0\x01\x12\x03\x1e\x07\x0b\n7\n\x06\x04\0\x04\0\x02\0\x12\x03\x20\
    \x04\x1f\x1a(\x20This\x20is\x20never\x20used\x20in\x20`CheckResponse`.\n\
    \n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x20\x04\x1a\n\x0e\n\x07\x04\0\
    \x04\0\x02\0\x02\x12\x03\x20\x1d\x1e\n\x8b\x01\n\x06\x04\0\x04\0\x02\x01\
    \x12\x03$\x04\x12\x1a|\x20The\x20consumer's\x20project\x20id,\x20network\
    \x20container,\x20or\x20resource\x20container\x20was\n\x20not\x20found.\
    \x20Same\x20as\x20[google.rpc.Code.NOT_FOUND][].\n\n\x0e\n\x07\x04\0\x04\
    \0\x02\x01\x01\x12\x03$\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\
    \x03$\x10\x11\n|\n\x06\x04\0\x04\0\x02\x02\x12\x03(\x04\x1a\x1am\x20The\
    \x20consumer\x20doesn't\x20have\x20access\x20to\x20the\x20specified\x20r\
    esource.\n\x20Same\x20as\x20[google.rpc.Code.PERMISSION_DENIED][].\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03(\x04\x15\n\x0e\n\x07\x04\0\
    \x04\0\x02\x02\x02\x12\x03(\x18\x19\nT\n\x06\x04\0\x04\0\x02\x03\x12\x03\
    +\x04\x1b\x1aE\x20Quota\x20check\x20failed.\x20Same\x20as\x20[google.rpc\
    .Code.RESOURCE_EXHAUSTED][].\n\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\
    \x03+\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03+\x19\x1a\n<\n\
    \x06\x04\0\x04\0\x02\x04\x12\x03.\x04\x1a\x1a-\x20The\x20consumer\x20has\
    \x20been\x20flagged\x20as\x20an\x20abuser.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x04\x01\x12\x03.\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x04\x02\x12\x03.\
    \x16\x19\n;\n\x06\x04\0\x04\0\x02\x05\x12\x031\x04\x20\x1a,\x20The\x20co\
    nsumer\x20hasn't\x20activated\x20the\x20service.\n\n\x0e\n\x07\x04\0\x04\
    \0\x02\x05\x01\x12\x031\x04\x19\n\x0e\n\x07\x04\0\x04\0\x02\x05\x02\x12\
    \x031\x1c\x1f\nT\n\x06\x04\0\x04\0\x02\x06\x12\x034\x04\x1b\x1aE\x20The\
    \x20consumer\x20cannot\x20access\x20the\x20service\x20because\x20billing\
    \x20is\x20disabled.\n\n\x0e\n\x07\x04\0\x04\0\x02\x06\x01\x12\x034\x04\
    \x14\n\x0e\n\x07\x04\0\x04\0\x02\x06\x02\x12\x034\x17\x1a\nS\n\x06\x04\0\
    \x04\0\x02\x07\x12\x037\x04\x1a\x1aD\x20The\x20consumer's\x20project\x20\
    has\x20been\x20marked\x20as\x20deleted\x20(soft\x20deletion).\n\n\x0e\n\
    \x07\x04\0\x04\0\x02\x07\x01\x12\x037\x04\x13\n\x0e\n\x07\x04\0\x04\0\
    \x02\x07\x02\x12\x037\x16\x19\nX\n\x06\x04\0\x04\0\x02\x08\x12\x03:\x04\
    \x1a\x1aI\x20The\x20consumer's\x20project\x20number\x20or\x20id\x20does\
    \x20not\x20represent\x20a\x20valid\x20project.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x08\x01\x12\x03:\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x08\x02\x12\
    \x03:\x16\x19\n^\n\x06\x04\0\x04\0\x02\t\x12\x03>\x04\x1d\x1aO\x20The\
    \x20IP\x20address\x20of\x20the\x20consumer\x20is\x20invalid\x20for\x20th\
    e\x20specific\x20consumer\n\x20project.\n\n\x0e\n\x07\x04\0\x04\0\x02\t\
    \x01\x12\x03>\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\t\x02\x12\x03>\x19\x1c\
    \nk\n\x06\x04\0\x04\0\x02\n\x12\x03B\x04\x1a\x1a\\\x20The\x20referer\x20\
    address\x20of\x20the\x20consumer\x20request\x20is\x20invalid\x20for\x20t\
    he\x20specific\n\x20consumer\x20project.\n\n\x0e\n\x07\x04\0\x04\0\x02\n\
    \x01\x12\x03B\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\n\x02\x12\x03B\x16\x19\
    \nn\n\x06\x04\0\x04\0\x02\x0b\x12\x03F\x04\x1d\x1a_\x20The\x20client\x20\
    application\x20of\x20the\x20consumer\x20request\x20is\x20invalid\x20for\
    \x20the\n\x20specific\x20consumer\x20project.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x0b\x01\x12\x03F\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\x0b\x02\x12\
    \x03F\x19\x1c\na\n\x06\x04\0\x04\0\x02\x0c\x12\x03J\x04\x1d\x1aR\x20The\
    \x20API\x20targeted\x20by\x20this\x20request\x20is\x20invalid\x20for\x20\
    the\x20specified\x20consumer\n\x20project.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x0c\x01\x12\x03J\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\x0c\x02\x12\x03J\
    \x19\x1c\n3\n\x06\x04\0\x04\0\x02\r\x12\x03M\x04\x1a\x1a$\x20The\x20cons\
    umer's\x20API\x20key\x20is\x20invalid.\n\n\x0e\n\x07\x04\0\x04\0\x02\r\
    \x01\x12\x03M\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\r\x02\x12\x03M\x16\x19\
    \n4\n\x06\x04\0\x04\0\x02\x0e\x12\x03P\x04\x1a\x1a%\x20The\x20consumer's\
    \x20API\x20Key\x20has\x20expired.\n\n\x0e\n\x07\x04\0\x04\0\x02\x0e\x01\
    \x12\x03P\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x0e\x02\x12\x03P\x16\x19\n\
    G\n\x06\x04\0\x04\0\x02\x0f\x12\x03S\x04\x1c\x1a8\x20The\x20consumer's\
    \x20API\x20Key\x20was\x20not\x20found\x20in\x20config\x20record.\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x0f\x01\x12\x03S\x04\x15\n\x0e\n\x07\x04\0\x04\0\
    \x02\x0f\x02\x12\x03S\x18\x1b\nW\n\x06\x04\0\x04\0\x02\x10\x12\x03V\x04#\
    \x1aH\x20Request\x20is\x20not\x20allowed\x20as\x20per\x20security\x20pol\
    icies\x20defined\x20in\x20Org\x20Policy.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x10\x01\x12\x03V\x04\x1c\n\x0e\n\x07\x04\0\x04\0\x02\x10\x02\x12\x03V\
    \x1f\"\nC\n\x06\x04\0\x04\0\x02\x11\x12\x03Y\x04\x1d\x1a4\x20The\x20cred\
    ential\x20in\x20the\x20request\x20can\x20not\x20be\x20verified.\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x11\x01\x12\x03Y\x04\x16\n\x0e\n\x07\x04\0\x04\0\
    \x02\x11\x02\x12\x03Y\x19\x1c\nW\n\x06\x04\0\x04\0\x02\x12\x12\x03\\\x04\
    #\x1aH\x20Request\x20is\x20not\x20allowed\x20as\x20per\x20location\x20po\
    licies\x20defined\x20in\x20Org\x20Policy.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x12\x01\x12\x03\\\x04\x1c\n\x0e\n\x07\x04\0\x04\0\x02\x12\x02\x12\x03\\\
    \x1f\"\ne\n\x06\x04\0\x04\0\x02\x13\x12\x03`\x04\x1b\x1aV\x20The\x20inpu\
    t\x20consumer\x20info\x20does\x20not\x20represent\x20a\x20valid\x20consu\
    mer\x20folder\x20or\n\x20organization.\n\n\x0e\n\x07\x04\0\x04\0\x02\x13\
    \x01\x12\x03`\x04\x14\n\x0e\n\x07\x04\0\x04\0\x02\x13\x02\x12\x03`\x17\
    \x1a\n\xe6\x02\n\x06\x04\0\x04\0\x02\x14\x12\x03j\x04'\x1aE\x20The\x20ba\
    ckend\x20server\x20for\x20looking\x20up\x20project\x20id/number\x20is\
    \x20unavailable.\n2Z\x20NOTE:\x20By\x20convention,\x20all\x20*_UNAVAILAB\
    LE\x20codes\x20are\x20required\x20to\x20be\x20in\x20the\n\x20300\x20-\
    \x20399\x20range.\n2\xb3\x01\x20NOTE:\x20Unless\x20there\x20are\x20very\
    \x20special\x20business\x20requirements,\x20service\n\x20producer\x20sho\
    uld\x20ignore\x20the\x20following\x20errors.\x20These\x20errors\x20shoul\
    d\x20not\n\x20cause\x20the\x20rejection\x20of\x20client\x20requests.\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\x14\x01\x12\x03j\x04\x20\n\x0e\n\x07\x04\0\
    \x04\0\x02\x14\x02\x12\x03j#&\nO\n\x06\x04\0\x04\0\x02\x15\x12\x03m\x04%\
    \x1a@\x20The\x20backend\x20server\x20for\x20checking\x20service\x20statu\
    s\x20is\x20unavailable.\n\n\x0e\n\x07\x04\0\x04\0\x02\x15\x01\x12\x03m\
    \x04\x1e\n\x0e\n\x07\x04\0\x04\0\x02\x15\x02\x12\x03m!$\nO\n\x06\x04\0\
    \x04\0\x02\x16\x12\x03p\x04%\x1a@\x20The\x20backend\x20server\x20for\x20\
    checking\x20billing\x20status\x20is\x20unavailable.\n\n\x0e\n\x07\x04\0\
    \x04\0\x02\x16\x01\x12\x03p\x04\x1e\n\x0e\n\x07\x04\0\x04\0\x02\x16\x02\
    \x12\x03p!$\nM\n\x06\x04\0\x04\0\x02\x17\x12\x03s\x04\"\x1a>\x20The\x20b\
    ackend\x20server\x20for\x20checking\x20quota\x20limits\x20is\x20unavaila\
    ble.\n\n\x0e\n\x07\x04\0\x04\0\x02\x17\x01\x12\x03s\x04\x1b\n\x0e\n\x07\
    \x04\0\x04\0\x02\x17\x02\x12\x03s\x1e!\nF\n\x06\x04\0\x04\0\x02\x18\x12\
    \x03v\x045\x1a7\x20Cloud\x20Resource\x20Manager\x20backend\x20server\x20\
    is\x20unavailable.\n\n\x0e\n\x07\x04\0\x04\0\x02\x18\x01\x12\x03v\x04.\n\
    \x0e\n\x07\x04\0\x04\0\x02\x18\x02\x12\x03v14\nN\n\x06\x04\0\x04\0\x02\
    \x19\x12\x03y\x04.\x1a?\x20Backend\x20server\x20for\x20evaluating\x20sec\
    urity\x20policy\x20is\x20unavailable.\n\n\x0e\n\x07\x04\0\x04\0\x02\x19\
    \x01\x12\x03y\x04'\n\x0e\n\x07\x04\0\x04\0\x02\x19\x02\x12\x03y*-\nN\n\
    \x06\x04\0\x04\0\x02\x1a\x12\x03|\x04.\x1a?\x20Backend\x20server\x20for\
    \x20evaluating\x20location\x20policy\x20is\x20unavailable.\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x1a\x01\x12\x03|\x04'\n\x0e\n\x07\x04\0\x04\0\x02\x1a\
    \x02\x12\x03|*-\n\x1f\n\x04\x04\0\x02\0\x12\x04\x80\x01\x02\x10\x1a\x11\
    \x20The\x20error\x20code.\n\n\r\n\x05\x04\0\x02\0\x06\x12\x04\x80\x01\
    \x02\x06\n\r\n\x05\x04\0\x02\0\x01\x12\x04\x80\x01\x07\x0b\n\r\n\x05\x04\
    \0\x02\0\x03\x12\x04\x80\x01\x0e\x0f\nQ\n\x04\x04\0\x02\x01\x12\x04\x83\
    \x01\x02\x14\x1aC\x20Free-form\x20text\x20providing\x20details\x20on\x20\
    the\x20error\x20cause\x20of\x20the\x20error.\n\n\r\n\x05\x04\0\x02\x01\
    \x05\x12\x04\x83\x01\x02\x08\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\x83\x01\
    \t\x0f\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\x83\x01\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::annotations::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(CheckError::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(check_error::Code::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
