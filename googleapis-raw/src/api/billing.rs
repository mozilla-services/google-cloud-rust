// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/billing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.Billing)
pub struct Billing {
    // message fields
    ///  Billing configurations for sending metrics to the consumer project.
    ///  There can be multiple consumer destinations per service, each one must have
    ///  a different monitored resource type. A metric can be used in at most
    ///  one consumer destination.
    // @@protoc_insertion_point(field:google.api.Billing.consumer_destinations)
    pub consumer_destinations: ::std::vec::Vec<billing::BillingDestination>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Billing.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Billing {
    fn default() -> &'a Billing {
        <Billing as ::protobuf::Message>::default_instance()
    }
}

impl Billing {
    pub fn new() -> Billing {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "consumer_destinations",
            |m: &Billing| { &m.consumer_destinations },
            |m: &mut Billing| { &mut m.consumer_destinations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Billing>(
            "Billing",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Billing {
    const NAME: &'static str = "Billing";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                66 => {
                    self.consumer_destinations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.consumer_destinations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.consumer_destinations {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Billing {
        Billing::new()
    }

    fn clear(&mut self) {
        self.consumer_destinations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Billing {
        static instance: Billing = Billing {
            consumer_destinations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Billing {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Billing").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Billing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Billing {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Billing`
pub mod billing {
    ///  Configuration of a specific billing destination (Currently only support
    ///  bill against consumer project).
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.api.Billing.BillingDestination)
    pub struct BillingDestination {
        // message fields
        ///  The monitored resource type. The type must be defined in
        ///  [Service.monitored_resources][google.api.Service.monitored_resources] section.
        // @@protoc_insertion_point(field:google.api.Billing.BillingDestination.monitored_resource)
        pub monitored_resource: ::std::string::String,
        ///  Names of the metrics to report to this billing destination.
        ///  Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
        // @@protoc_insertion_point(field:google.api.Billing.BillingDestination.metrics)
        pub metrics: ::std::vec::Vec<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:google.api.Billing.BillingDestination.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a BillingDestination {
        fn default() -> &'a BillingDestination {
            <BillingDestination as ::protobuf::Message>::default_instance()
        }
    }

    impl BillingDestination {
        pub fn new() -> BillingDestination {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "monitored_resource",
                |m: &BillingDestination| { &m.monitored_resource },
                |m: &mut BillingDestination| { &mut m.monitored_resource },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "metrics",
                |m: &BillingDestination| { &m.metrics },
                |m: &mut BillingDestination| { &mut m.metrics },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BillingDestination>(
                "Billing.BillingDestination",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for BillingDestination {
        const NAME: &'static str = "BillingDestination";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.monitored_resource = is.read_string()?;
                    },
                    18 => {
                        self.metrics.push(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.monitored_resource.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.monitored_resource);
            }
            for value in &self.metrics {
                my_size += ::protobuf::rt::string_size(2, &value);
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.monitored_resource.is_empty() {
                os.write_string(1, &self.monitored_resource)?;
            }
            for v in &self.metrics {
                os.write_string(2, &v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> BillingDestination {
            BillingDestination::new()
        }

        fn clear(&mut self) {
            self.monitored_resource.clear();
            self.metrics.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static BillingDestination {
            static instance: BillingDestination = BillingDestination {
                monitored_resource: ::std::string::String::new(),
                metrics: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for BillingDestination {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Billing.BillingDestination").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for BillingDestination {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for BillingDestination {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/billing.proto\x12\ngoogle.api\x1a\x17google/api/metric.\
    proto\"\xc5\x01\n\x07Billing\x12[\n\x15consumer_destinations\x18\x08\x20\
    \x03(\x0b2&.google.api.Billing.BillingDestinationR\x14consumerDestinatio\
    ns\x1a]\n\x12BillingDestination\x12-\n\x12monitored_resource\x18\x01\x20\
    \x01(\tR\x11monitoredResource\x12\x18\n\x07metrics\x18\x02\x20\x03(\tR\
    \x07metricsBn\n\x0ecom.google.apiB\x0cBillingProtoP\x01ZEgoogle.golang.o\
    rg/genproto/googleapis/api/serviceconfig;serviceconfig\xa2\x02\x04GAPIJ\
    \xff\x11\n\x06\x12\x04\x0f\0B\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\
    \xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\
    \x01\x02\x12\x03\x11\0\x13\n\t\n\x02\x03\0\x12\x03\x13\0!\n\x08\n\x01\
    \x08\x12\x03\x15\0\\\n\t\n\x02\x08\x0b\x12\x03\x15\0\\\n\x08\n\x01\x08\
    \x12\x03\x16\0\"\n\t\n\x02\x08\n\x12\x03\x16\0\"\n\x08\n\x01\x08\x12\x03\
    \x17\0-\n\t\n\x02\x08\x08\x12\x03\x17\0-\n\x08\n\x01\x08\x12\x03\x18\0'\
    \n\t\n\x02\x08\x01\x12\x03\x18\0'\n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\
    \x02\x08$\x12\x03\x19\0\"\n\xb3\x05\n\x02\x04\0\x12\x040\0B\x01\x1a\xa6\
    \x05\x20Billing\x20related\x20configuration\x20of\x20the\x20service.\n\n\
    \x20The\x20following\x20example\x20shows\x20how\x20to\x20configure\x20mo\
    nitored\x20resources\x20and\x20metrics\n\x20for\x20billing:\n\n\x20\x20\
    \x20\x20\x20monitored_resources:\n\x20\x20\x20\x20\x20-\x20type:\x20libr\
    ary.googleapis.com/branch\n\x20\x20\x20\x20\x20\x20\x20labels:\n\x20\x20\
    \x20\x20\x20\x20\x20-\x20key:\x20/city\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20description:\x20The\x20city\x20where\x20the\x20library\x20branch\x20\
    is\x20located\x20in.\n\x20\x20\x20\x20\x20\x20\x20-\x20key:\x20/name\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20description:\x20The\x20name\x20of\
    \x20the\x20branch.\n\x20\x20\x20\x20\x20metrics:\n\x20\x20\x20\x20\x20-\
    \x20name:\x20library.googleapis.com/book/borrowed_count\n\x20\x20\x20\
    \x20\x20\x20\x20metric_kind:\x20DELTA\n\x20\x20\x20\x20\x20\x20\x20value\
    _type:\x20INT64\n\x20\x20\x20\x20\x20billing:\n\x20\x20\x20\x20\x20\x20\
    \x20consumer_destinations:\n\x20\x20\x20\x20\x20\x20\x20-\x20monitored_r\
    esource:\x20library.googleapis.com/branch\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20metrics:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20library.googl\
    eapis.com/book/borrowed_count\n\n\n\n\x03\x04\0\x01\x12\x030\x08\x0f\nx\
    \n\x04\x04\0\x03\0\x12\x043\x02;\x03\x1aj\x20Configuration\x20of\x20a\
    \x20specific\x20billing\x20destination\x20(Currently\x20only\x20support\
    \n\x20bill\x20against\x20consumer\x20project).\n\n\x0c\n\x05\x04\0\x03\0\
    \x01\x12\x033\n\x1c\n\x9a\x01\n\x06\x04\0\x03\0\x02\0\x12\x036\x04\"\x1a\
    \x8a\x01\x20The\x20monitored\x20resource\x20type.\x20The\x20type\x20must\
    \x20be\x20defined\x20in\n\x20[Service.monitored_resources][google.api.Se\
    rvice.monitored_resources]\x20section.\n\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x05\x12\x036\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x036\x0b\x1d\n\
    \x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x036\x20!\n\xa2\x01\n\x06\x04\0\x03\
    \0\x02\x01\x12\x03:\x04\x20\x1a\x92\x01\x20Names\x20of\x20the\x20metrics\
    \x20to\x20report\x20to\x20this\x20billing\x20destination.\n\x20Each\x20n\
    ame\x20must\x20be\x20defined\x20in\x20[Service.metrics][google.api.Servi\
    ce.metrics]\x20section.\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03:\
    \x04\x0c\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03:\r\x13\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x01\x12\x03:\x14\x1b\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x03\x12\x03:\x1e\x1f\n\x81\x02\n\x04\x04\0\x02\0\x12\x03A\x028\x1a\
    \xf3\x01\x20Billing\x20configurations\x20for\x20sending\x20metrics\x20to\
    \x20the\x20consumer\x20project.\n\x20There\x20can\x20be\x20multiple\x20c\
    onsumer\x20destinations\x20per\x20service,\x20each\x20one\x20must\x20hav\
    e\n\x20a\x20different\x20monitored\x20resource\x20type.\x20A\x20metric\
    \x20can\x20be\x20used\x20in\x20at\x20most\n\x20one\x20consumer\x20destin\
    ation.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03A\x02\n\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03A\x0b\x1d\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03A\x1e3\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03A67b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::metric::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Billing::generated_message_descriptor_data());
            messages.push(billing::BillingDestination::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
