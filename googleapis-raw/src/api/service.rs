// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.Service)
pub struct Service {
    // message fields
    ///  The semantic version of the service configuration. The config version
    ///  affects the interpretation of the service configuration. For example,
    ///  certain features are enabled by default for certain config versions.
    ///  The latest config version is `3`.
    // @@protoc_insertion_point(field:google.api.Service.config_version)
    pub config_version: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::UInt32Value>,
    ///  The service name, which is a DNS-like logical identifier for the
    ///  service, such as `calendar.googleapis.com`. The service name
    ///  typically goes through DNS verification to make sure the owner
    ///  of the service also owns the DNS name.
    // @@protoc_insertion_point(field:google.api.Service.name)
    pub name: ::std::string::String,
    ///  A unique ID for a specific instance of this message, typically assigned
    ///  by the client for tracking purpose. If empty, the server may choose to
    ///  generate one instead. Must be no longer than 60 characters.
    // @@protoc_insertion_point(field:google.api.Service.id)
    pub id: ::std::string::String,
    ///  The product title for this service.
    // @@protoc_insertion_point(field:google.api.Service.title)
    pub title: ::std::string::String,
    ///  The Google project that owns this service.
    // @@protoc_insertion_point(field:google.api.Service.producer_project_id)
    pub producer_project_id: ::std::string::String,
    ///  A list of API interfaces exported by this service. Only the `name` field
    ///  of the [google.protobuf.Api][google.protobuf.Api] needs to be provided by the configuration
    ///  author, as the remaining fields will be derived from the IDL during the
    ///  normalization process. It is an error to specify an API interface here
    ///  which cannot be resolved against the associated IDL files.
    // @@protoc_insertion_point(field:google.api.Service.apis)
    pub apis: ::std::vec::Vec<::protobuf::well_known_types::api::Api>,
    // @@protoc_insertion_point(field:google.api.Service.types)
    pub types: ::std::vec::Vec<::protobuf::well_known_types::type_::Type>,
    // @@protoc_insertion_point(field:google.api.Service.enums)
    pub enums: ::std::vec::Vec<::protobuf::well_known_types::type_::Enum>,
    ///  Additional API documentation.
    // @@protoc_insertion_point(field:google.api.Service.documentation)
    pub documentation: ::protobuf::MessageField<super::documentation::Documentation>,
    ///  API backend configuration.
    // @@protoc_insertion_point(field:google.api.Service.backend)
    pub backend: ::protobuf::MessageField<super::backend::Backend>,
    ///  HTTP configuration.
    // @@protoc_insertion_point(field:google.api.Service.http)
    pub http: ::protobuf::MessageField<super::http::Http>,
    ///  Quota configuration.
    // @@protoc_insertion_point(field:google.api.Service.quota)
    pub quota: ::protobuf::MessageField<super::quota::Quota>,
    ///  Auth configuration.
    // @@protoc_insertion_point(field:google.api.Service.authentication)
    pub authentication: ::protobuf::MessageField<super::auth::Authentication>,
    ///  Context configuration.
    // @@protoc_insertion_point(field:google.api.Service.context)
    pub context: ::protobuf::MessageField<super::context::Context>,
    ///  Configuration controlling usage of this service.
    // @@protoc_insertion_point(field:google.api.Service.usage)
    pub usage: ::protobuf::MessageField<super::usage::Usage>,
    ///  Configuration for network endpoints.  If this is empty, then an endpoint
    ///  with the same name as the service is automatically generated to service all
    ///  defined APIs.
    // @@protoc_insertion_point(field:google.api.Service.endpoints)
    pub endpoints: ::std::vec::Vec<super::endpoint::Endpoint>,
    ///  Configuration for the service control plane.
    // @@protoc_insertion_point(field:google.api.Service.control)
    pub control: ::protobuf::MessageField<super::control::Control>,
    ///  Defines the logs used by this service.
    // @@protoc_insertion_point(field:google.api.Service.logs)
    pub logs: ::std::vec::Vec<super::log::LogDescriptor>,
    ///  Defines the metrics used by this service.
    // @@protoc_insertion_point(field:google.api.Service.metrics)
    pub metrics: ::std::vec::Vec<super::metric::MetricDescriptor>,
    ///  Defines the monitored resources used by this service. This is required
    ///  by the [Service.monitoring][google.api.Service.monitoring] and [Service.logging][google.api.Service.logging] configurations.
    // @@protoc_insertion_point(field:google.api.Service.monitored_resources)
    pub monitored_resources: ::std::vec::Vec<super::monitored_resource::MonitoredResourceDescriptor>,
    ///  Billing configuration.
    // @@protoc_insertion_point(field:google.api.Service.billing)
    pub billing: ::protobuf::MessageField<super::billing::Billing>,
    ///  Logging configuration.
    // @@protoc_insertion_point(field:google.api.Service.logging)
    pub logging: ::protobuf::MessageField<super::logging::Logging>,
    ///  Monitoring configuration.
    // @@protoc_insertion_point(field:google.api.Service.monitoring)
    pub monitoring: ::protobuf::MessageField<super::monitoring::Monitoring>,
    ///  System parameter configuration.
    // @@protoc_insertion_point(field:google.api.Service.system_parameters)
    pub system_parameters: ::protobuf::MessageField<super::system_parameter::SystemParameters>,
    ///  Output only. The source information for this configuration if available.
    // @@protoc_insertion_point(field:google.api.Service.source_info)
    pub source_info: ::protobuf::MessageField<super::source_info::SourceInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Service.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Service {
    fn default() -> &'a Service {
        <Service as ::protobuf::Message>::default_instance()
    }
}

impl Service {
    pub fn new() -> Service {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(25);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::UInt32Value>(
            "config_version",
            |m: &Service| { &m.config_version },
            |m: &mut Service| { &mut m.config_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Service| { &m.name },
            |m: &mut Service| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Service| { &m.id },
            |m: &mut Service| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &Service| { &m.title },
            |m: &mut Service| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "producer_project_id",
            |m: &Service| { &m.producer_project_id },
            |m: &mut Service| { &mut m.producer_project_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "apis",
            |m: &Service| { &m.apis },
            |m: &mut Service| { &mut m.apis },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "types",
            |m: &Service| { &m.types },
            |m: &mut Service| { &mut m.types },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "enums",
            |m: &Service| { &m.enums },
            |m: &mut Service| { &mut m.enums },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::documentation::Documentation>(
            "documentation",
            |m: &Service| { &m.documentation },
            |m: &mut Service| { &mut m.documentation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::backend::Backend>(
            "backend",
            |m: &Service| { &m.backend },
            |m: &mut Service| { &mut m.backend },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::http::Http>(
            "http",
            |m: &Service| { &m.http },
            |m: &mut Service| { &mut m.http },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::quota::Quota>(
            "quota",
            |m: &Service| { &m.quota },
            |m: &mut Service| { &mut m.quota },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::auth::Authentication>(
            "authentication",
            |m: &Service| { &m.authentication },
            |m: &mut Service| { &mut m.authentication },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::context::Context>(
            "context",
            |m: &Service| { &m.context },
            |m: &mut Service| { &mut m.context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::usage::Usage>(
            "usage",
            |m: &Service| { &m.usage },
            |m: &mut Service| { &mut m.usage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "endpoints",
            |m: &Service| { &m.endpoints },
            |m: &mut Service| { &mut m.endpoints },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::control::Control>(
            "control",
            |m: &Service| { &m.control },
            |m: &mut Service| { &mut m.control },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "logs",
            |m: &Service| { &m.logs },
            |m: &mut Service| { &mut m.logs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metrics",
            |m: &Service| { &m.metrics },
            |m: &mut Service| { &mut m.metrics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "monitored_resources",
            |m: &Service| { &m.monitored_resources },
            |m: &mut Service| { &mut m.monitored_resources },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::billing::Billing>(
            "billing",
            |m: &Service| { &m.billing },
            |m: &mut Service| { &mut m.billing },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::logging::Logging>(
            "logging",
            |m: &Service| { &m.logging },
            |m: &mut Service| { &mut m.logging },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::monitoring::Monitoring>(
            "monitoring",
            |m: &Service| { &m.monitoring },
            |m: &mut Service| { &mut m.monitoring },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::system_parameter::SystemParameters>(
            "system_parameters",
            |m: &Service| { &m.system_parameters },
            |m: &mut Service| { &mut m.system_parameters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::source_info::SourceInfo>(
            "source_info",
            |m: &Service| { &m.source_info },
            |m: &mut Service| { &mut m.source_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Service>(
            "Service",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Service {
    const NAME: &'static str = "Service";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.config_version)?;
                },
                10 => {
                    self.name = is.read_string()?;
                },
                266 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                178 => {
                    self.producer_project_id = is.read_string()?;
                },
                26 => {
                    self.apis.push(is.read_message()?);
                },
                34 => {
                    self.types.push(is.read_message()?);
                },
                42 => {
                    self.enums.push(is.read_message()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.documentation)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.backend)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.http)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.quota)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.authentication)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.context)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.usage)?;
                },
                146 => {
                    self.endpoints.push(is.read_message()?);
                },
                170 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.control)?;
                },
                186 => {
                    self.logs.push(is.read_message()?);
                },
                194 => {
                    self.metrics.push(is.read_message()?);
                },
                202 => {
                    self.monitored_resources.push(is.read_message()?);
                },
                210 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.billing)?;
                },
                218 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.logging)?;
                },
                226 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.monitoring)?;
                },
                234 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.system_parameters)?;
                },
                298 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.source_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.config_version.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(33, &self.id);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.producer_project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.producer_project_id);
        }
        for value in &self.apis {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.types {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.enums {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.documentation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.backend.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.http.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.quota.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.authentication.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.usage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.endpoints {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.control.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.metrics {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.monitored_resources {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.billing.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.logging.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.monitoring.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.system_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.source_info.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.config_version.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        }
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.id.is_empty() {
            os.write_string(33, &self.id)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.producer_project_id.is_empty() {
            os.write_string(22, &self.producer_project_id)?;
        }
        for v in &self.apis {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.types {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.enums {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.documentation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.backend.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.http.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.quota.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.authentication.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.context.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.usage.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        for v in &self.endpoints {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        };
        if let Some(v) = self.control.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        }
        for v in &self.logs {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        for v in &self.metrics {
            ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        };
        for v in &self.monitored_resources {
            ::protobuf::rt::write_message_field_with_cached_size(25, v, os)?;
        };
        if let Some(v) = self.billing.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        }
        if let Some(v) = self.logging.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(27, v, os)?;
        }
        if let Some(v) = self.monitoring.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(28, v, os)?;
        }
        if let Some(v) = self.system_parameters.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(29, v, os)?;
        }
        if let Some(v) = self.source_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(37, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Service {
        Service::new()
    }

    fn clear(&mut self) {
        self.config_version.clear();
        self.name.clear();
        self.id.clear();
        self.title.clear();
        self.producer_project_id.clear();
        self.apis.clear();
        self.types.clear();
        self.enums.clear();
        self.documentation.clear();
        self.backend.clear();
        self.http.clear();
        self.quota.clear();
        self.authentication.clear();
        self.context.clear();
        self.usage.clear();
        self.endpoints.clear();
        self.control.clear();
        self.logs.clear();
        self.metrics.clear();
        self.monitored_resources.clear();
        self.billing.clear();
        self.logging.clear();
        self.monitoring.clear();
        self.system_parameters.clear();
        self.source_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Service {
        static instance: Service = Service {
            config_version: ::protobuf::MessageField::none(),
            name: ::std::string::String::new(),
            id: ::std::string::String::new(),
            title: ::std::string::String::new(),
            producer_project_id: ::std::string::String::new(),
            apis: ::std::vec::Vec::new(),
            types: ::std::vec::Vec::new(),
            enums: ::std::vec::Vec::new(),
            documentation: ::protobuf::MessageField::none(),
            backend: ::protobuf::MessageField::none(),
            http: ::protobuf::MessageField::none(),
            quota: ::protobuf::MessageField::none(),
            authentication: ::protobuf::MessageField::none(),
            context: ::protobuf::MessageField::none(),
            usage: ::protobuf::MessageField::none(),
            endpoints: ::std::vec::Vec::new(),
            control: ::protobuf::MessageField::none(),
            logs: ::std::vec::Vec::new(),
            metrics: ::std::vec::Vec::new(),
            monitored_resources: ::std::vec::Vec::new(),
            billing: ::protobuf::MessageField::none(),
            logging: ::protobuf::MessageField::none(),
            monitoring: ::protobuf::MessageField::none(),
            system_parameters: ::protobuf::MessageField::none(),
            source_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Service {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Service").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Service {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Service {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/service.proto\x12\ngoogle.api\x1a\x15google/api/auth.pr\
    oto\x1a\x18google/api/backend.proto\x1a\x18google/api/billing.proto\x1a\
    \x18google/api/context.proto\x1a\x18google/api/control.proto\x1a\x1egoog\
    le/api/documentation.proto\x1a\x19google/api/endpoint.proto\x1a\x15googl\
    e/api/http.proto\x1a\x16google/api/label.proto\x1a\x14google/api/log.pro\
    to\x1a\x18google/api/logging.proto\x1a\x17google/api/metric.proto\x1a#go\
    ogle/api/monitored_resource.proto\x1a\x1bgoogle/api/monitoring.proto\x1a\
    \x16google/api/quota.proto\x1a\x19google/api/resource.proto\x1a\x1cgoogl\
    e/api/source_info.proto\x1a!google/api/system_parameter.proto\x1a\x16goo\
    gle/api/usage.proto\x1a\x19google/protobuf/any.proto\x1a\x19google/proto\
    buf/api.proto\x1a\x1agoogle/protobuf/type.proto\x1a\x1egoogle/protobuf/w\
    rappers.proto\"\xd5\t\n\x07Service\x12C\n\x0econfig_version\x18\x14\x20\
    \x01(\x0b2\x1c.google.protobuf.UInt32ValueR\rconfigVersion\x12\x12\n\x04\
    name\x18\x01\x20\x01(\tR\x04name\x12\x0e\n\x02id\x18!\x20\x01(\tR\x02id\
    \x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05title\x12.\n\x13producer_proj\
    ect_id\x18\x16\x20\x01(\tR\x11producerProjectId\x12(\n\x04apis\x18\x03\
    \x20\x03(\x0b2\x14.google.protobuf.ApiR\x04apis\x12+\n\x05types\x18\x04\
    \x20\x03(\x0b2\x15.google.protobuf.TypeR\x05types\x12+\n\x05enums\x18\
    \x05\x20\x03(\x0b2\x15.google.protobuf.EnumR\x05enums\x12?\n\rdocumentat\
    ion\x18\x06\x20\x01(\x0b2\x19.google.api.DocumentationR\rdocumentation\
    \x12-\n\x07backend\x18\x08\x20\x01(\x0b2\x13.google.api.BackendR\x07back\
    end\x12$\n\x04http\x18\t\x20\x01(\x0b2\x10.google.api.HttpR\x04http\x12'\
    \n\x05quota\x18\n\x20\x01(\x0b2\x11.google.api.QuotaR\x05quota\x12B\n\
    \x0eauthentication\x18\x0b\x20\x01(\x0b2\x1a.google.api.AuthenticationR\
    \x0eauthentication\x12-\n\x07context\x18\x0c\x20\x01(\x0b2\x13.google.ap\
    i.ContextR\x07context\x12'\n\x05usage\x18\x0f\x20\x01(\x0b2\x11.google.a\
    pi.UsageR\x05usage\x122\n\tendpoints\x18\x12\x20\x03(\x0b2\x14.google.ap\
    i.EndpointR\tendpoints\x12-\n\x07control\x18\x15\x20\x01(\x0b2\x13.googl\
    e.api.ControlR\x07control\x12-\n\x04logs\x18\x17\x20\x03(\x0b2\x19.googl\
    e.api.LogDescriptorR\x04logs\x126\n\x07metrics\x18\x18\x20\x03(\x0b2\x1c\
    .google.api.MetricDescriptorR\x07metrics\x12X\n\x13monitored_resources\
    \x18\x19\x20\x03(\x0b2'.google.api.MonitoredResourceDescriptorR\x12monit\
    oredResources\x12-\n\x07billing\x18\x1a\x20\x01(\x0b2\x13.google.api.Bil\
    lingR\x07billing\x12-\n\x07logging\x18\x1b\x20\x01(\x0b2\x13.google.api.\
    LoggingR\x07logging\x126\n\nmonitoring\x18\x1c\x20\x01(\x0b2\x16.google.\
    api.MonitoringR\nmonitoring\x12I\n\x11system_parameters\x18\x1d\x20\x01(\
    \x0b2\x1c.google.api.SystemParametersR\x10systemParameters\x127\n\x0bsou\
    rce_info\x18%\x20\x01(\x0b2\x16.google.api.SourceInfoR\nsourceInfoBn\n\
    \x0ecom.google.apiB\x0cServiceProtoP\x01ZEgoogle.golang.org/genproto/goo\
    gleapis/api/serviceconfig;serviceconfig\xa2\x02\x04GAPIJ\xba/\n\x07\x12\
    \x05\x0f\0\xaf\x01\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\
    \x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\
    \x12\x03\x11\0\x13\n\t\n\x02\x03\0\x12\x03\x13\0\x1f\n\t\n\x02\x03\x01\
    \x12\x03\x14\0\"\n\t\n\x02\x03\x02\x12\x03\x15\0\"\n\t\n\x02\x03\x03\x12\
    \x03\x16\0\"\n\t\n\x02\x03\x04\x12\x03\x17\0\"\n\t\n\x02\x03\x05\x12\x03\
    \x18\0(\n\t\n\x02\x03\x06\x12\x03\x19\0#\n\t\n\x02\x03\x07\x12\x03\x1a\0\
    \x1f\n\t\n\x02\x03\x08\x12\x03\x1b\0\x20\n\t\n\x02\x03\t\x12\x03\x1c\0\
    \x1e\n\t\n\x02\x03\n\x12\x03\x1d\0\"\n\t\n\x02\x03\x0b\x12\x03\x1e\0!\n\
    \t\n\x02\x03\x0c\x12\x03\x1f\0-\n\t\n\x02\x03\r\x12\x03\x20\0%\n\t\n\x02\
    \x03\x0e\x12\x03!\0\x20\n\t\n\x02\x03\x0f\x12\x03\"\0#\n\t\n\x02\x03\x10\
    \x12\x03#\0&\n\t\n\x02\x03\x11\x12\x03$\0+\n\t\n\x02\x03\x12\x12\x03%\0\
    \x20\n\t\n\x02\x03\x13\x12\x03&\0#\n\t\n\x02\x03\x14\x12\x03'\0#\n\t\n\
    \x02\x03\x15\x12\x03(\0$\n\t\n\x02\x03\x16\x12\x03)\0(\n\x08\n\x01\x08\
    \x12\x03+\0\\\n\t\n\x02\x08\x0b\x12\x03+\0\\\n\x08\n\x01\x08\x12\x03,\0\
    \"\n\t\n\x02\x08\n\x12\x03,\0\"\n\x08\n\x01\x08\x12\x03-\0-\n\t\n\x02\
    \x08\x08\x12\x03-\0-\n\x08\n\x01\x08\x12\x03.\0'\n\t\n\x02\x08\x01\x12\
    \x03.\0'\n\x08\n\x01\x08\x12\x03/\0\"\n\t\n\x02\x08$\x12\x03/\0\"\n\xd4\
    \x06\n\x02\x04\0\x12\x05H\0\xaf\x01\x01\x1a\xc6\x06\x20`Service`\x20is\
    \x20the\x20root\x20object\x20of\x20Google\x20service\x20configuration\
    \x20schema.\x20It\n\x20describes\x20basic\x20information\x20about\x20a\
    \x20service,\x20such\x20as\x20the\x20name\x20and\x20the\n\x20title,\x20a\
    nd\x20delegates\x20other\x20aspects\x20to\x20sub-sections.\x20Each\x20su\
    b-section\x20is\n\x20either\x20a\x20proto\x20message\x20or\x20a\x20repea\
    ted\x20proto\x20message\x20that\x20configures\x20a\n\x20specific\x20aspe\
    ct,\x20such\x20as\x20auth.\x20See\x20each\x20proto\x20message\x20definit\
    ion\x20for\x20details.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20type:\x20g\
    oogle.api.Service\n\x20\x20\x20\x20\x20config_version:\x203\n\x20\x20\
    \x20\x20\x20name:\x20calendar.googleapis.com\n\x20\x20\x20\x20\x20title:\
    \x20Google\x20Calendar\x20API\n\x20\x20\x20\x20\x20apis:\n\x20\x20\x20\
    \x20\x20-\x20name:\x20google.calendar.v3.Calendar\n\x20\x20\x20\x20\x20a\
    uthentication:\n\x20\x20\x20\x20\x20\x20\x20providers:\n\x20\x20\x20\x20\
    \x20\x20\x20-\x20id:\x20google_calendar_auth\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20jwks_uri:\x20https://www.googleapis.com/oauth2/v1/certs\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20issuer:\x20https://securetoken.googl\
    e.com\n\x20\x20\x20\x20\x20\x20\x20rules:\n\x20\x20\x20\x20\x20\x20\x20-\
    \x20selector:\x20\"*\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20requirements\
    :\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20provider_id:\x20google_ca\
    lendar_auth\n\n\n\n\x03\x04\0\x01\x12\x03H\x08\x0f\n\x85\x02\n\x04\x04\0\
    \x02\0\x12\x03M\x022\x1a\xf7\x01\x20The\x20semantic\x20version\x20of\x20\
    the\x20service\x20configuration.\x20The\x20config\x20version\n\x20affect\
    s\x20the\x20interpretation\x20of\x20the\x20service\x20configuration.\x20\
    For\x20example,\n\x20certain\x20features\x20are\x20enabled\x20by\x20defa\
    ult\x20for\x20certain\x20config\x20versions.\n\x20The\x20latest\x20confi\
    g\x20version\x20is\x20`3`.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03M\x02\
    \x1d\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03M\x1e,\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03M/1\n\xf6\x01\n\x04\x04\0\x02\x01\x12\x03S\x02\x12\x1a\xe8\
    \x01\x20The\x20service\x20name,\x20which\x20is\x20a\x20DNS-like\x20logic\
    al\x20identifier\x20for\x20the\n\x20service,\x20such\x20as\x20`calendar.\
    googleapis.com`.\x20The\x20service\x20name\n\x20typically\x20goes\x20thr\
    ough\x20DNS\x20verification\x20to\x20make\x20sure\x20the\x20owner\n\x20o\
    f\x20the\x20service\x20also\x20owns\x20the\x20DNS\x20name.\n\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03S\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03S\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03S\x10\x11\n\xdc\x01\n\x04\
    \x04\0\x02\x02\x12\x03X\x02\x11\x1a\xce\x01\x20A\x20unique\x20ID\x20for\
    \x20a\x20specific\x20instance\x20of\x20this\x20message,\x20typically\x20\
    assigned\n\x20by\x20the\x20client\x20for\x20tracking\x20purpose.\x20If\
    \x20empty,\x20the\x20server\x20may\x20choose\x20to\n\x20generate\x20one\
    \x20instead.\x20Must\x20be\x20no\x20longer\x20than\x2060\x20characters.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03X\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03X\t\x0b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03X\x0e\x10\n\
    2\n\x04\x04\0\x02\x03\x12\x03[\x02\x13\x1a%\x20The\x20product\x20title\
    \x20for\x20this\x20service.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03[\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03[\t\x0e\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03[\x11\x12\n9\n\x04\x04\0\x02\x04\x12\x03^\x02\"\x1a,\x20\
    The\x20Google\x20project\x20that\x20owns\x20this\x20service.\n\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03^\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03^\t\x1c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03^\x1f!\n\x82\x03\n\
    \x04\x04\0\x02\x05\x12\x03e\x02(\x1a\xf4\x02\x20A\x20list\x20of\x20API\
    \x20interfaces\x20exported\x20by\x20this\x20service.\x20Only\x20the\x20`\
    name`\x20field\n\x20of\x20the\x20[google.protobuf.Api][google.protobuf.A\
    pi]\x20needs\x20to\x20be\x20provided\x20by\x20the\x20configuration\n\x20\
    author,\x20as\x20the\x20remaining\x20fields\x20will\x20be\x20derived\x20\
    from\x20the\x20IDL\x20during\x20the\n\x20normalization\x20process.\x20It\
    \x20is\x20an\x20error\x20to\x20specify\x20an\x20API\x20interface\x20here\
    \n\x20which\x20cannot\x20be\x20resolved\x20against\x20the\x20associated\
    \x20IDL\x20files.\n\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03e\x02\n\n\x0c\n\
    \x05\x04\0\x02\x05\x06\x12\x03e\x0b\x1e\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03e\x1f#\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03e&'\n\xed\x02\n\x04\
    \x04\0\x02\x06\x12\x03o\x02*\x1a\xdf\x02\x20A\x20list\x20of\x20all\x20pr\
    oto\x20message\x20types\x20included\x20in\x20this\x20API\x20service.\n\
    \x20Types\x20referenced\x20directly\x20or\x20indirectly\x20by\x20the\x20\
    `apis`\x20are\n\x20automatically\x20included.\x20\x20Messages\x20which\
    \x20are\x20not\x20referenced\x20but\n\x20shall\x20be\x20included,\x20suc\
    h\x20as\x20types\x20used\x20by\x20the\x20`google.protobuf.Any`\x20type,\
    \n\x20should\x20be\x20listed\x20here\x20by\x20name.\x20Example:\n\n\x20\
    \x20\x20\x20\x20types:\n\x20\x20\x20\x20\x20-\x20name:\x20google.protobu\
    f.Int32\n\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03o\x02\n\n\x0c\n\x05\x04\0\
    \x02\x06\x06\x12\x03o\x0b\x1f\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03o\x20\
    %\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03o()\n\xaf\x02\n\x04\x04\0\x02\x07\
    \x12\x03x\x02*\x1a\xa1\x02\x20A\x20list\x20of\x20all\x20enum\x20types\
    \x20included\x20in\x20this\x20API\x20service.\x20\x20Enums\n\x20referenc\
    ed\x20directly\x20or\x20indirectly\x20by\x20the\x20`apis`\x20are\x20auto\
    matically\n\x20included.\x20\x20Enums\x20which\x20are\x20not\x20referenc\
    ed\x20but\x20shall\x20be\x20included\n\x20should\x20be\x20listed\x20here\
    \x20by\x20name.\x20Example:\n\n\x20\x20\x20\x20\x20enums:\n\x20\x20\x20\
    \x20\x20-\x20name:\x20google.someapi.v1.SomeEnum\n\n\x0c\n\x05\x04\0\x02\
    \x07\x04\x12\x03x\x02\n\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03x\x0b\x1f\n\
    \x0c\n\x05\x04\0\x02\x07\x01\x12\x03x\x20%\n\x0c\n\x05\x04\0\x02\x07\x03\
    \x12\x03x()\n,\n\x04\x04\0\x02\x08\x12\x03{\x02\"\x1a\x1f\x20Additional\
    \x20API\x20documentation.\n\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03{\x02\
    \x0f\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03{\x10\x1d\n\x0c\n\x05\x04\0\
    \x02\x08\x03\x12\x03{\x20!\n)\n\x04\x04\0\x02\t\x12\x03~\x02\x16\x1a\x1c\
    \x20API\x20backend\x20configuration.\n\n\x0c\n\x05\x04\0\x02\t\x06\x12\
    \x03~\x02\t\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03~\n\x11\n\x0c\n\x05\x04\0\
    \x02\t\x03\x12\x03~\x14\x15\n#\n\x04\x04\0\x02\n\x12\x04\x81\x01\x02\x10\
    \x1a\x15\x20HTTP\x20configuration.\n\n\r\n\x05\x04\0\x02\n\x06\x12\x04\
    \x81\x01\x02\x06\n\r\n\x05\x04\0\x02\n\x01\x12\x04\x81\x01\x07\x0b\n\r\n\
    \x05\x04\0\x02\n\x03\x12\x04\x81\x01\x0e\x0f\n$\n\x04\x04\0\x02\x0b\x12\
    \x04\x84\x01\x02\x13\x1a\x16\x20Quota\x20configuration.\n\n\r\n\x05\x04\
    \0\x02\x0b\x06\x12\x04\x84\x01\x02\x07\n\r\n\x05\x04\0\x02\x0b\x01\x12\
    \x04\x84\x01\x08\r\n\r\n\x05\x04\0\x02\x0b\x03\x12\x04\x84\x01\x10\x12\n\
    #\n\x04\x04\0\x02\x0c\x12\x04\x87\x01\x02%\x1a\x15\x20Auth\x20configurat\
    ion.\n\n\r\n\x05\x04\0\x02\x0c\x06\x12\x04\x87\x01\x02\x10\n\r\n\x05\x04\
    \0\x02\x0c\x01\x12\x04\x87\x01\x11\x1f\n\r\n\x05\x04\0\x02\x0c\x03\x12\
    \x04\x87\x01\"$\n&\n\x04\x04\0\x02\r\x12\x04\x8a\x01\x02\x17\x1a\x18\x20\
    Context\x20configuration.\n\n\r\n\x05\x04\0\x02\r\x06\x12\x04\x8a\x01\
    \x02\t\n\r\n\x05\x04\0\x02\r\x01\x12\x04\x8a\x01\n\x11\n\r\n\x05\x04\0\
    \x02\r\x03\x12\x04\x8a\x01\x14\x16\n@\n\x04\x04\0\x02\x0e\x12\x04\x8d\
    \x01\x02\x13\x1a2\x20Configuration\x20controlling\x20usage\x20of\x20this\
    \x20service.\n\n\r\n\x05\x04\0\x02\x0e\x06\x12\x04\x8d\x01\x02\x07\n\r\n\
    \x05\x04\0\x02\x0e\x01\x12\x04\x8d\x01\x08\r\n\r\n\x05\x04\0\x02\x0e\x03\
    \x12\x04\x8d\x01\x10\x12\n\xb5\x01\n\x04\x04\0\x02\x0f\x12\x04\x92\x01\
    \x02#\x1a\xa6\x01\x20Configuration\x20for\x20network\x20endpoints.\x20\
    \x20If\x20this\x20is\x20empty,\x20then\x20an\x20endpoint\n\x20with\x20th\
    e\x20same\x20name\x20as\x20the\x20service\x20is\x20automatically\x20gene\
    rated\x20to\x20service\x20all\n\x20defined\x20APIs.\n\n\r\n\x05\x04\0\
    \x02\x0f\x04\x12\x04\x92\x01\x02\n\n\r\n\x05\x04\0\x02\x0f\x06\x12\x04\
    \x92\x01\x0b\x13\n\r\n\x05\x04\0\x02\x0f\x01\x12\x04\x92\x01\x14\x1d\n\r\
    \n\x05\x04\0\x02\x0f\x03\x12\x04\x92\x01\x20\"\n<\n\x04\x04\0\x02\x10\
    \x12\x04\x95\x01\x02\x17\x1a.\x20Configuration\x20for\x20the\x20service\
    \x20control\x20plane.\n\n\r\n\x05\x04\0\x02\x10\x06\x12\x04\x95\x01\x02\
    \t\n\r\n\x05\x04\0\x02\x10\x01\x12\x04\x95\x01\n\x11\n\r\n\x05\x04\0\x02\
    \x10\x03\x12\x04\x95\x01\x14\x16\n6\n\x04\x04\0\x02\x11\x12\x04\x98\x01\
    \x02#\x1a(\x20Defines\x20the\x20logs\x20used\x20by\x20this\x20service.\n\
    \n\r\n\x05\x04\0\x02\x11\x04\x12\x04\x98\x01\x02\n\n\r\n\x05\x04\0\x02\
    \x11\x06\x12\x04\x98\x01\x0b\x18\n\r\n\x05\x04\0\x02\x11\x01\x12\x04\x98\
    \x01\x19\x1d\n\r\n\x05\x04\0\x02\x11\x03\x12\x04\x98\x01\x20\"\n9\n\x04\
    \x04\0\x02\x12\x12\x04\x9b\x01\x02)\x1a+\x20Defines\x20the\x20metrics\
    \x20used\x20by\x20this\x20service.\n\n\r\n\x05\x04\0\x02\x12\x04\x12\x04\
    \x9b\x01\x02\n\n\r\n\x05\x04\0\x02\x12\x06\x12\x04\x9b\x01\x0b\x1b\n\r\n\
    \x05\x04\0\x02\x12\x01\x12\x04\x9b\x01\x1c#\n\r\n\x05\x04\0\x02\x12\x03\
    \x12\x04\x9b\x01&(\n\xd5\x01\n\x04\x04\0\x02\x13\x12\x04\x9f\x01\x02@\
    \x1a\xc6\x01\x20Defines\x20the\x20monitored\x20resources\x20used\x20by\
    \x20this\x20service.\x20This\x20is\x20required\n\x20by\x20the\x20[Servic\
    e.monitoring][google.api.Service.monitoring]\x20and\x20[Service.logging]\
    [google.api.Service.logging]\x20configurations.\n\n\r\n\x05\x04\0\x02\
    \x13\x04\x12\x04\x9f\x01\x02\n\n\r\n\x05\x04\0\x02\x13\x06\x12\x04\x9f\
    \x01\x0b&\n\r\n\x05\x04\0\x02\x13\x01\x12\x04\x9f\x01':\n\r\n\x05\x04\0\
    \x02\x13\x03\x12\x04\x9f\x01=?\n&\n\x04\x04\0\x02\x14\x12\x04\xa2\x01\
    \x02\x17\x1a\x18\x20Billing\x20configuration.\n\n\r\n\x05\x04\0\x02\x14\
    \x06\x12\x04\xa2\x01\x02\t\n\r\n\x05\x04\0\x02\x14\x01\x12\x04\xa2\x01\n\
    \x11\n\r\n\x05\x04\0\x02\x14\x03\x12\x04\xa2\x01\x14\x16\n&\n\x04\x04\0\
    \x02\x15\x12\x04\xa5\x01\x02\x17\x1a\x18\x20Logging\x20configuration.\n\
    \n\r\n\x05\x04\0\x02\x15\x06\x12\x04\xa5\x01\x02\t\n\r\n\x05\x04\0\x02\
    \x15\x01\x12\x04\xa5\x01\n\x11\n\r\n\x05\x04\0\x02\x15\x03\x12\x04\xa5\
    \x01\x14\x16\n)\n\x04\x04\0\x02\x16\x12\x04\xa8\x01\x02\x1d\x1a\x1b\x20M\
    onitoring\x20configuration.\n\n\r\n\x05\x04\0\x02\x16\x06\x12\x04\xa8\
    \x01\x02\x0c\n\r\n\x05\x04\0\x02\x16\x01\x12\x04\xa8\x01\r\x17\n\r\n\x05\
    \x04\0\x02\x16\x03\x12\x04\xa8\x01\x1a\x1c\n/\n\x04\x04\0\x02\x17\x12\
    \x04\xab\x01\x02*\x1a!\x20System\x20parameter\x20configuration.\n\n\r\n\
    \x05\x04\0\x02\x17\x06\x12\x04\xab\x01\x02\x12\n\r\n\x05\x04\0\x02\x17\
    \x01\x12\x04\xab\x01\x13$\n\r\n\x05\x04\0\x02\x17\x03\x12\x04\xab\x01')\
    \nX\n\x04\x04\0\x02\x18\x12\x04\xae\x01\x02\x1e\x1aJ\x20Output\x20only.\
    \x20The\x20source\x20information\x20for\x20this\x20configuration\x20if\
    \x20available.\n\n\r\n\x05\x04\0\x02\x18\x06\x12\x04\xae\x01\x02\x0c\n\r\
    \n\x05\x04\0\x02\x18\x01\x12\x04\xae\x01\r\x18\n\r\n\x05\x04\0\x02\x18\
    \x03\x12\x04\xae\x01\x1b\x1db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(23);
            deps.push(super::auth::file_descriptor().clone());
            deps.push(super::backend::file_descriptor().clone());
            deps.push(super::billing::file_descriptor().clone());
            deps.push(super::context::file_descriptor().clone());
            deps.push(super::control::file_descriptor().clone());
            deps.push(super::documentation::file_descriptor().clone());
            deps.push(super::endpoint::file_descriptor().clone());
            deps.push(super::http::file_descriptor().clone());
            deps.push(super::label::file_descriptor().clone());
            deps.push(super::log::file_descriptor().clone());
            deps.push(super::logging::file_descriptor().clone());
            deps.push(super::metric::file_descriptor().clone());
            deps.push(super::monitored_resource::file_descriptor().clone());
            deps.push(super::monitoring::file_descriptor().clone());
            deps.push(super::quota::file_descriptor().clone());
            deps.push(super::resource::file_descriptor().clone());
            deps.push(super::source_info::file_descriptor().clone());
            deps.push(super::system_parameter::file_descriptor().clone());
            deps.push(super::usage::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::api::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::type_::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Service::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
