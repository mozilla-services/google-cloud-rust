// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/resource.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.ResourceDescriptor)
pub struct ResourceDescriptor {
    // message fields
    ///  The resource type. It must be in the format of
    ///  {service_name}/{resource_type_kind}. The `resource_type_kind` must be
    ///  singular and must not include version numbers.
    ///
    ///  Example: `storage.googleapis.com/Bucket`
    ///
    ///  The value of the resource_type_kind must follow the regular expression
    ///  /[A-Za-z][a-zA-Z0-9]+/. It should start with an upper case character and
    ///  should use PascalCase (UpperCamelCase). The maximum number of
    ///  characters allowed for the `resource_type_kind` is 100.
    // @@protoc_insertion_point(field:google.api.ResourceDescriptor.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:google.api.ResourceDescriptor.pattern)
    pub pattern: ::std::vec::Vec<::std::string::String>,
    ///  Optional. The field on the resource that designates the resource name
    ///  field. If omitted, this is assumed to be "name".
    // @@protoc_insertion_point(field:google.api.ResourceDescriptor.name_field)
    pub name_field: ::std::string::String,
    // @@protoc_insertion_point(field:google.api.ResourceDescriptor.history)
    pub history: ::protobuf::EnumOrUnknown<resource_descriptor::History>,
    ///  The plural name used in the resource name, such as 'projects' for
    ///  the name of 'projects/{project}'. It is the same concept of the `plural`
    ///  field in k8s CRD spec
    ///  https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
    // @@protoc_insertion_point(field:google.api.ResourceDescriptor.plural)
    pub plural: ::std::string::String,
    ///  The same concept of the `singular` field in k8s CRD spec
    ///  https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
    ///  Such as "project" for the `resourcemanager.googleapis.com/Project` type.
    // @@protoc_insertion_point(field:google.api.ResourceDescriptor.singular)
    pub singular: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.ResourceDescriptor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResourceDescriptor {
    fn default() -> &'a ResourceDescriptor {
        <ResourceDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl ResourceDescriptor {
    pub fn new() -> ResourceDescriptor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ResourceDescriptor| { &m.type_ },
            |m: &mut ResourceDescriptor| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pattern",
            |m: &ResourceDescriptor| { &m.pattern },
            |m: &mut ResourceDescriptor| { &mut m.pattern },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name_field",
            |m: &ResourceDescriptor| { &m.name_field },
            |m: &mut ResourceDescriptor| { &mut m.name_field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "history",
            |m: &ResourceDescriptor| { &m.history },
            |m: &mut ResourceDescriptor| { &mut m.history },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plural",
            |m: &ResourceDescriptor| { &m.plural },
            |m: &mut ResourceDescriptor| { &mut m.plural },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "singular",
            |m: &ResourceDescriptor| { &m.singular },
            |m: &mut ResourceDescriptor| { &mut m.singular },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResourceDescriptor>(
            "ResourceDescriptor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResourceDescriptor {
    const NAME: &'static str = "ResourceDescriptor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    self.pattern.push(is.read_string()?);
                },
                26 => {
                    self.name_field = is.read_string()?;
                },
                32 => {
                    self.history = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.plural = is.read_string()?;
                },
                50 => {
                    self.singular = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        for value in &self.pattern {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.name_field.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name_field);
        }
        if self.history != ::protobuf::EnumOrUnknown::new(resource_descriptor::History::HISTORY_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.history.value());
        }
        if !self.plural.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.plural);
        }
        if !self.singular.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.singular);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        for v in &self.pattern {
            os.write_string(2, &v)?;
        };
        if !self.name_field.is_empty() {
            os.write_string(3, &self.name_field)?;
        }
        if self.history != ::protobuf::EnumOrUnknown::new(resource_descriptor::History::HISTORY_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.history))?;
        }
        if !self.plural.is_empty() {
            os.write_string(5, &self.plural)?;
        }
        if !self.singular.is_empty() {
            os.write_string(6, &self.singular)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResourceDescriptor {
        ResourceDescriptor::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.pattern.clear();
        self.name_field.clear();
        self.history = ::protobuf::EnumOrUnknown::new(resource_descriptor::History::HISTORY_UNSPECIFIED);
        self.plural.clear();
        self.singular.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResourceDescriptor {
        static instance: ResourceDescriptor = ResourceDescriptor {
            type_: ::std::string::String::new(),
            pattern: ::std::vec::Vec::new(),
            name_field: ::std::string::String::new(),
            history: ::protobuf::EnumOrUnknown::from_i32(0),
            plural: ::std::string::String::new(),
            singular: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResourceDescriptor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResourceDescriptor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResourceDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceDescriptor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ResourceDescriptor`
pub mod resource_descriptor {
    ///  A description of the historical or future-looking state of the
    ///  resource pattern.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.api.ResourceDescriptor.History)
    pub enum History {
        // @@protoc_insertion_point(enum_value:google.api.ResourceDescriptor.History.HISTORY_UNSPECIFIED)
        HISTORY_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.api.ResourceDescriptor.History.ORIGINALLY_SINGLE_PATTERN)
        ORIGINALLY_SINGLE_PATTERN = 1,
        // @@protoc_insertion_point(enum_value:google.api.ResourceDescriptor.History.FUTURE_MULTI_PATTERN)
        FUTURE_MULTI_PATTERN = 2,
    }

    impl ::protobuf::Enum for History {
        const NAME: &'static str = "History";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<History> {
            match value {
                0 => ::std::option::Option::Some(History::HISTORY_UNSPECIFIED),
                1 => ::std::option::Option::Some(History::ORIGINALLY_SINGLE_PATTERN),
                2 => ::std::option::Option::Some(History::FUTURE_MULTI_PATTERN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [History] = &[
            History::HISTORY_UNSPECIFIED,
            History::ORIGINALLY_SINGLE_PATTERN,
            History::FUTURE_MULTI_PATTERN,
        ];
    }

    impl ::protobuf::EnumFull for History {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ResourceDescriptor.History").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for History {
        fn default() -> Self {
            History::HISTORY_UNSPECIFIED
        }
    }

    impl History {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<History>("ResourceDescriptor.History")
        }
    }
}

///  Defines a proto annotation that describes a string field that refers to
///  an API resource.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.api.ResourceReference)
pub struct ResourceReference {
    // message fields
    // @@protoc_insertion_point(field:google.api.ResourceReference.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:google.api.ResourceReference.child_type)
    pub child_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.ResourceReference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResourceReference {
    fn default() -> &'a ResourceReference {
        <ResourceReference as ::protobuf::Message>::default_instance()
    }
}

impl ResourceReference {
    pub fn new() -> ResourceReference {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ResourceReference| { &m.type_ },
            |m: &mut ResourceReference| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "child_type",
            |m: &ResourceReference| { &m.child_type },
            |m: &mut ResourceReference| { &mut m.child_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResourceReference>(
            "ResourceReference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResourceReference {
    const NAME: &'static str = "ResourceReference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    self.child_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        if !self.child_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.child_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        if !self.child_type.is_empty() {
            os.write_string(2, &self.child_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResourceReference {
        ResourceReference::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.child_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResourceReference {
        static instance: ResourceReference = ResourceReference {
            type_: ::std::string::String::new(),
            child_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResourceReference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResourceReference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResourceReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceReference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Extension fields
pub mod exts {

    pub const resource_reference: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::ResourceReference> = ::protobuf::ext::ExtFieldOptional::new(1055, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const resource_definition: ::protobuf::ext::ExtFieldRepeated<::protobuf::descriptor::FileOptions, super::ResourceDescriptor> = ::protobuf::ext::ExtFieldRepeated::new(1053, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const resource: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, super::ResourceDescriptor> = ::protobuf::ext::ExtFieldOptional::new(1053, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/api/resource.proto\x12\ngoogle.api\x1a\x20google/protobuf/d\
    escriptor.proto\"\xb4\x02\n\x12ResourceDescriptor\x12\x12\n\x04type\x18\
    \x01\x20\x01(\tR\x04type\x12\x18\n\x07pattern\x18\x02\x20\x03(\tR\x07pat\
    tern\x12\x1d\n\nname_field\x18\x03\x20\x01(\tR\tnameField\x12@\n\x07hist\
    ory\x18\x04\x20\x01(\x0e2&.google.api.ResourceDescriptor.HistoryR\x07his\
    tory\x12\x16\n\x06plural\x18\x05\x20\x01(\tR\x06plural\x12\x1a\n\x08sing\
    ular\x18\x06\x20\x01(\tR\x08singular\"[\n\x07History\x12\x17\n\x13HISTOR\
    Y_UNSPECIFIED\x10\0\x12\x1d\n\x19ORIGINALLY_SINGLE_PATTERN\x10\x01\x12\
    \x18\n\x14FUTURE_MULTI_PATTERN\x10\x02\"F\n\x11ResourceReference\x12\x12\
    \n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x1d\n\nchild_type\x18\x02\x20\
    \x01(\tR\tchildType:l\n\x12resource_reference\x18\x9f\x08\x20\x01(\x0b2\
    \x1d.google.api.ResourceReference\x12\x1d.google.protobuf.FieldOptionsR\
    \x11resourceReference:n\n\x13resource_definition\x18\x9d\x08\x20\x03(\
    \x0b2\x1e.google.api.ResourceDescriptor\x12\x1c.google.protobuf.FileOpti\
    onsR\x12resourceDefinition:\\\n\x08resource\x18\x9d\x08\x20\x01(\x0b2\
    \x1e.google.api.ResourceDescriptor\x12\x1f.google.protobuf.MessageOption\
    sR\x08resourceBn\n\x0ecom.google.apiB\rResourceProtoP\x01ZAgoogle.golang\
    .org/genproto/googleapis/api/annotations;annotations\xf8\x01\x01\xa2\x02\
    \x04GAPIJ\xbaJ\n\x07\x12\x05\x0f\0\x87\x02\x01\n\xbe\x04\n\x01\x0c\x12\
    \x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\t\n\x02\x03\0\x12\x03\x13\0*\n\
    \x08\n\x01\x08\x12\x03\x15\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x15\0\x1f\n\
    \x08\n\x01\x08\x12\x03\x16\0X\n\t\n\x02\x08\x0b\x12\x03\x16\0X\n\x08\n\
    \x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\
    \x12\x03\x18\0.\n\t\n\x02\x08\x08\x12\x03\x18\0.\n\x08\n\x01\x08\x12\x03\
    \x19\0'\n\t\n\x02\x08\x01\x12\x03\x19\0'\n\x08\n\x01\x08\x12\x03\x1a\0\"\
    \n\t\n\x02\x08$\x12\x03\x1a\0\"\n\t\n\x01\x07\x12\x04\x1c\0\x20\x01\n[\n\
    \x02\x07\0\x12\x03\x1f\x029\x1aP\x20An\x20annotation\x20that\x20describe\
    s\x20a\x20resource\x20reference,\x20see\n\x20[ResourceReference][].\n\n\
    \n\n\x03\x07\0\x02\x12\x03\x1c\x07#\n\n\n\x03\x07\0\x06\x12\x03\x1f\x02\
    \x1e\n\n\n\x03\x07\0\x01\x12\x03\x1f\x1f1\n\n\n\x03\x07\0\x03\x12\x03\
    \x1f48\n\t\n\x01\x07\x12\x04\"\0&\x01\n}\n\x02\x07\x01\x12\x03%\x02D\x1a\
    r\x20An\x20annotation\x20that\x20describes\x20a\x20resource\x20definitio\
    n\x20without\x20a\x20corresponding\n\x20message;\x20see\x20[ResourceDesc\
    riptor][].\n\n\n\n\x03\x07\x01\x02\x12\x03\"\x07\"\n\n\n\x03\x07\x01\x04\
    \x12\x03%\x02\n\n\n\n\x03\x07\x01\x06\x12\x03%\x0b(\n\n\n\x03\x07\x01\
    \x01\x12\x03%)<\n\n\n\x03\x07\x01\x03\x12\x03%?C\n\t\n\x01\x07\x12\x04(\
    \0,\x01\n]\n\x02\x07\x02\x12\x03+\x020\x1aR\x20An\x20annotation\x20that\
    \x20describes\x20a\x20resource\x20definition,\x20see\n\x20[ResourceDescr\
    iptor][].\n\n\n\n\x03\x07\x02\x02\x12\x03(\x07%\n\n\n\x03\x07\x02\x06\
    \x12\x03+\x02\x1f\n\n\n\x03\x07\x02\x01\x12\x03+\x20(\n\n\n\x03\x07\x02\
    \x03\x12\x03++/\n\x8c\x20\n\x02\x04\0\x12\x06\x9a\x01\0\xeb\x01\x01\x1a\
    \xfd\x1f\x20A\x20simple\x20descriptor\x20of\x20a\x20resource\x20type.\n\
    \n\x20ResourceDescriptor\x20annotates\x20a\x20resource\x20message\x20(ei\
    ther\x20by\x20means\x20of\x20a\n\x20protobuf\x20annotation\x20or\x20use\
    \x20in\x20the\x20service\x20config),\x20and\x20associates\x20the\n\x20re\
    source's\x20schema,\x20the\x20resource\x20type,\x20and\x20the\x20pattern\
    \x20of\x20the\x20resource\x20name.\n\n\x20Example:\n\n\x20\x20\x20\x20\
    \x20message\x20Topic\x20{\n\x20\x20\x20\x20\x20\x20\x20//\x20Indicates\
    \x20this\x20message\x20defines\x20a\x20resource\x20schema.\n\x20\x20\x20\
    \x20\x20\x20\x20//\x20Declares\x20the\x20resource\x20type\x20in\x20the\
    \x20format\x20of\x20{service}/{kind}.\n\x20\x20\x20\x20\x20\x20\x20//\
    \x20For\x20Kubernetes\x20resources,\x20the\x20format\x20is\x20{api\x20gr\
    oup}/{kind}.\n\x20\x20\x20\x20\x20\x20\x20option\x20(google.api.resource\
    )\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20type:\x20\"pubsub.googl\
    eapis.com/Topic\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20name_descriptor:\
    \x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pattern:\x20\"project\
    s/{project}/topics/{topic}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20parent_type:\x20\"cloudresourcemanager.googleapis.com/Project\"\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name_extractor:\x20\"\
    projects/{project}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\
    \x20\x20\x20\x20\x20};\n\x20\x20\x20\x20\x20}\n\n\x20The\x20ResourceDesc\
    riptor\x20Yaml\x20config\x20will\x20look\x20like:\n\n\x20\x20\x20\x20res\
    ources:\n\x20\x20\x20\x20-\x20type:\x20\"pubsub.googleapis.com/Topic\"\n\
    \x20\x20\x20\x20\x20\x20name_descriptor:\n\x20\x20\x20\x20\x20\x20\x20\
    \x20-\x20pattern:\x20\"projects/{project}/topics/{topic}\"\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googl\
    eapis.com/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name\
    _extractor:\x20\"projects/{project}\"\n\n\x20Sometimes,\x20resources\x20\
    have\x20multiple\x20patterns,\x20typically\x20because\x20they\x20can\n\
    \x20live\x20under\x20multiple\x20parents.\n\n\x20Example:\n\n\x20\x20\
    \x20\x20\x20message\x20LogEntry\x20{\n\x20\x20\x20\x20\x20\x20\x20option\
    \x20(google.api.resource)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20type:\x20\"logging.googleapis.com/LogEntry\"\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20pattern:\x20\"projects/{project}/logs/{log}\"\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.g\
    oogleapis.com/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20par\
    ent_name_extractor:\x20\"projects/{project}\"\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20name_descriptor:\x20{\
    \n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pattern:\x20\"folders/{fol\
    der}/logs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_ty\
    pe:\x20\"cloudresourcemanager.googleapis.com/Folder\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_name_extractor:\x20\"folders/{folder}\
    \"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20pattern:\x20\"organizations/{organization}/logs/{log}\"\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanag\
    er.googleapis.com/Organization\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20parent_name_extractor:\x20\"organizations/{organization}\"\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20n\
    ame_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20patter\
    n:\x20\"billingAccounts/{billing_account}/logs/{log}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"billing.googleapis.com/Bil\
    lingAccount\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name_e\
    xtractor:\x20\"billingAccounts/{billing_account}\"\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20};\n\x20\x20\x20\x20\x20}\
    \n\n\x20The\x20ResourceDescriptor\x20Yaml\x20config\x20will\x20look\x20l\
    ike:\n\n\x20\x20\x20\x20\x20resources:\n\x20\x20\x20\x20\x20-\x20type:\
    \x20'logging.googleapis.com/LogEntry'\n\x20\x20\x20\x20\x20\x20\x20name_\
    descriptor:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20pattern:\x20\"proj\
    ects/{project}/logs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20parent_type:\x20\"cloudresourcemanager.googleapis.com/Project\"\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name_extractor:\x20\"\
    projects/{project}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20pattern:\
    \x20\"folders/{folder}/logs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20parent_type:\x20\"cloudresourcemanager.googleapis.com/Folder\
    \"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name_extractor:\
    \x20\"folders/{folder}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20patte\
    rn:\x20\"organizations/{organization}/logs/{log}\"\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googleapi\
    s.com/Organization\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent\
    _name_extractor:\x20\"organizations/{organization}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20-\x20pattern:\x20\"billingAccounts/{billing_account}\
    /logs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_type:\
    \x20\"billing.googleapis.com/BillingAccount\"\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20parent_name_extractor:\x20\"billingAccounts/{billing\
    _account}\"\n\n\x20For\x20flexible\x20resources,\x20the\x20resource\x20n\
    ame\x20doesn't\x20contain\x20parent\x20names,\x20but\n\x20the\x20resourc\
    e\x20itself\x20has\x20parents\x20for\x20policy\x20evaluation.\n\n\x20Exa\
    mple:\n\n\x20\x20\x20\x20\x20message\x20Shelf\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20option\x20(google.api.resource)\x20=\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20type:\x20\"library.googleapis.com/Shelf\"\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20pattern:\x20\"shelves/{shelf}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googl\
    eapis.com/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20pattern:\x20\"shelves/{shelf}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googl\
    eapis.com/Folder\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\
    \x20\x20\x20\x20};\n\x20\x20\x20\x20\x20}\n\n\x20The\x20ResourceDescript\
    or\x20Yaml\x20config\x20will\x20look\x20like:\n\n\x20\x20\x20\x20\x20res\
    ources:\n\x20\x20\x20\x20\x20-\x20type:\x20'library.googleapis.com/Shelf\
    '\n\x20\x20\x20\x20\x20\x20\x20name_descriptor:\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20-\x20pattern:\x20\"shelves/{shelf}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googl\
    eapis.com/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20pattern:\
    \x20\"shelves/{shelf}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20par\
    ent_type:\x20\"cloudresourcemanager.googleapis.com/Folder\"\n\n\x0b\n\
    \x03\x04\0\x01\x12\x04\x9a\x01\x08\x1a\nc\n\x04\x04\0\x04\0\x12\x06\x9d\
    \x01\x02\xa9\x01\x03\x1aS\x20A\x20description\x20of\x20the\x20historical\
    \x20or\x20future-looking\x20state\x20of\x20the\n\x20resource\x20pattern.\
    \n\n\r\n\x05\x04\0\x04\0\x01\x12\x04\x9d\x01\x07\x0e\n$\n\x06\x04\0\x04\
    \0\x02\0\x12\x04\x9f\x01\x04\x1c\x1a\x14\x20The\x20\"unset\"\x20value.\n\
    \n\x0f\n\x07\x04\0\x04\0\x02\0\x01\x12\x04\x9f\x01\x04\x17\n\x0f\n\x07\
    \x04\0\x04\0\x02\0\x02\x12\x04\x9f\x01\x1a\x1b\nz\n\x06\x04\0\x04\0\x02\
    \x01\x12\x04\xa3\x01\x04\"\x1aj\x20The\x20resource\x20originally\x20had\
    \x20one\x20pattern\x20and\x20launched\x20as\x20such,\x20and\n\x20additio\
    nal\x20patterns\x20were\x20added\x20later.\n\n\x0f\n\x07\x04\0\x04\0\x02\
    \x01\x01\x12\x04\xa3\x01\x04\x1d\n\x0f\n\x07\x04\0\x04\0\x02\x01\x02\x12\
    \x04\xa3\x01\x20!\n\xdc\x01\n\x06\x04\0\x04\0\x02\x02\x12\x04\xa8\x01\
    \x04\x1d\x1a\xcb\x01\x20The\x20resource\x20has\x20one\x20pattern,\x20but\
    \x20the\x20API\x20owner\x20expects\x20to\x20add\x20more\n\x20later.\x20(\
    This\x20is\x20the\x20inverse\x20of\x20ORIGINALLY_SINGLE_PATTERN,\x20and\
    \x20prevents\n\x20that\x20from\x20being\x20necessary\x20once\x20there\
    \x20are\x20multiple\x20patterns.)\n\n\x0f\n\x07\x04\0\x04\0\x02\x02\x01\
    \x12\x04\xa8\x01\x04\x18\n\x0f\n\x07\x04\0\x04\0\x02\x02\x02\x12\x04\xa8\
    \x01\x1b\x1c\n\xec\x03\n\x04\x04\0\x02\0\x12\x04\xb5\x01\x02\x12\x1a\xdd\
    \x03\x20The\x20resource\x20type.\x20It\x20must\x20be\x20in\x20the\x20for\
    mat\x20of\n\x20{service_name}/{resource_type_kind}.\x20The\x20`resource_\
    type_kind`\x20must\x20be\n\x20singular\x20and\x20must\x20not\x20include\
    \x20version\x20numbers.\n\n\x20Example:\x20`storage.googleapis.com/Bucke\
    t`\n\n\x20The\x20value\x20of\x20the\x20resource_type_kind\x20must\x20fol\
    low\x20the\x20regular\x20expression\n\x20/[A-Za-z][a-zA-Z0-9]+/.\x20It\
    \x20should\x20start\x20with\x20an\x20upper\x20case\x20character\x20and\n\
    \x20should\x20use\x20PascalCase\x20(UpperCamelCase).\x20The\x20maximum\
    \x20number\x20of\n\x20characters\x20allowed\x20for\x20the\x20`resource_t\
    ype_kind`\x20is\x20100.\n\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xb5\x01\x02\
    \x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\xb5\x01\t\r\n\r\n\x05\x04\0\x02\0\
    \x03\x12\x04\xb5\x01\x10\x11\n\xc5\x05\n\x04\x04\0\x02\x01\x12\x04\xca\
    \x01\x02\x1e\x1a\xb6\x05\x20Optional.\x20The\x20relative\x20resource\x20\
    name\x20pattern\x20associated\x20with\x20this\x20resource\n\x20type.\x20\
    The\x20DNS\x20prefix\x20of\x20the\x20full\x20resource\x20name\x20shouldn\
    't\x20be\x20specified\x20here.\n\n\x20The\x20path\x20pattern\x20must\x20\
    follow\x20the\x20syntax,\x20which\x20aligns\x20with\x20HTTP\x20binding\n\
    \x20syntax:\n\n\x20\x20\x20\x20\x20Template\x20=\x20Segment\x20{\x20\"/\
    \"\x20Segment\x20}\x20;\n\x20\x20\x20\x20\x20Segment\x20=\x20LITERAL\x20\
    |\x20Variable\x20;\n\x20\x20\x20\x20\x20Variable\x20=\x20\"{\"\x20LITERA\
    L\x20\"}\"\x20;\n\n\x20Examples:\n\n\x20\x20\x20\x20\x20-\x20\"projects/\
    {project}/topics/{topic}\"\n\x20\x20\x20\x20\x20-\x20\"projects/{project\
    }/knowledgeBases/{knowledge_base}\"\n\n\x20The\x20components\x20in\x20br\
    aces\x20correspond\x20to\x20the\x20IDs\x20for\x20each\x20resource\x20in\
    \x20the\n\x20hierarchy.\x20It\x20is\x20expected\x20that,\x20if\x20multip\
    le\x20patterns\x20are\x20provided,\n\x20the\x20same\x20component\x20name\
    \x20(e.g.\x20\"project\")\x20refers\x20to\x20IDs\x20of\x20the\x20same\n\
    \x20type\x20of\x20resource.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\xca\
    \x01\x02\n\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\xca\x01\x0b\x11\n\r\n\x05\
    \x04\0\x02\x01\x01\x12\x04\xca\x01\x12\x19\n\r\n\x05\x04\0\x02\x01\x03\
    \x12\x04\xca\x01\x1c\x1d\n\x87\x01\n\x04\x04\0\x02\x02\x12\x04\xce\x01\
    \x02\x18\x1ay\x20Optional.\x20The\x20field\x20on\x20the\x20resource\x20t\
    hat\x20designates\x20the\x20resource\x20name\n\x20field.\x20If\x20omitte\
    d,\x20this\x20is\x20assumed\x20to\x20be\x20\"name\".\n\n\r\n\x05\x04\0\
    \x02\x02\x05\x12\x04\xce\x01\x02\x08\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\
    \xce\x01\t\x13\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\xce\x01\x16\x17\n\xcc\
    \x04\n\x04\x04\0\x02\x03\x12\x04\xdf\x01\x02\x16\x1a\xbd\x04\x20Optional\
    .\x20The\x20historical\x20or\x20future-looking\x20state\x20of\x20the\x20\
    resource\x20pattern.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20//\x20The\
    \x20InspectTemplate\x20message\x20originally\x20only\x20supported\x20res\
    ource\n\x20\x20\x20\x20\x20//\x20names\x20with\x20organization,\x20and\
    \x20project\x20was\x20added\x20later.\n\x20\x20\x20\x20\x20message\x20In\
    spectTemplate\x20{\n\x20\x20\x20\x20\x20\x20\x20option\x20(google.api.re\
    source)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20type:\x20\"dlp.go\
    ogleapis.com/InspectTemplate\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20patt\
    ern:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\"organizations/{organization}\
    /inspectTemplates/{inspect_template}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20pattern:\x20\"projects/{project}/inspectTemplates/{inspect_template}\
    \"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20history:\x20ORIGINALLY_SINGLE_PA\
    TTERN\n\x20\x20\x20\x20\x20\x20\x20};\n\x20\x20\x20\x20\x20}\n\n\r\n\x05\
    \x04\0\x02\x03\x06\x12\x04\xdf\x01\x02\t\n\r\n\x05\x04\0\x02\x03\x01\x12\
    \x04\xdf\x01\n\x11\n\r\n\x05\x04\0\x02\x03\x03\x12\x04\xdf\x01\x14\x15\n\
    \x99\x02\n\x04\x04\0\x02\x04\x12\x04\xe5\x01\x02\x14\x1a\x8a\x02\x20The\
    \x20plural\x20name\x20used\x20in\x20the\x20resource\x20name,\x20such\x20\
    as\x20'projects'\x20for\n\x20the\x20name\x20of\x20'projects/{project}'.\
    \x20It\x20is\x20the\x20same\x20concept\x20of\x20the\x20`plural`\n\x20fie\
    ld\x20in\x20k8s\x20CRD\x20spec\n\x20https://kubernetes.io/docs/tasks/acc\
    ess-kubernetes-api/custom-resources/custom-resource-definitions/\n\n\r\n\
    \x05\x04\0\x02\x04\x05\x12\x04\xe5\x01\x02\x08\n\r\n\x05\x04\0\x02\x04\
    \x01\x12\x04\xe5\x01\t\x0f\n\r\n\x05\x04\0\x02\x04\x03\x12\x04\xe5\x01\
    \x12\x13\n\xf9\x01\n\x04\x04\0\x02\x05\x12\x04\xea\x01\x02\x16\x1a\xea\
    \x01\x20The\x20same\x20concept\x20of\x20the\x20`singular`\x20field\x20in\
    \x20k8s\x20CRD\x20spec\n\x20https://kubernetes.io/docs/tasks/access-kube\
    rnetes-api/custom-resources/custom-resource-definitions/\n\x20Such\x20as\
    \x20\"project\"\x20for\x20the\x20`resourcemanager.googleapis.com/Project\
    `\x20type.\n\n\r\n\x05\x04\0\x02\x05\x05\x12\x04\xea\x01\x02\x08\n\r\n\
    \x05\x04\0\x02\x05\x01\x12\x04\xea\x01\t\x11\n\r\n\x05\x04\0\x02\x05\x03\
    \x12\x04\xea\x01\x14\x15\ni\n\x02\x04\x01\x12\x06\xef\x01\0\x87\x02\x01\
    \x1a[\x20Defines\x20a\x20proto\x20annotation\x20that\x20describes\x20a\
    \x20string\x20field\x20that\x20refers\x20to\n\x20an\x20API\x20resource.\
    \n\n\x0b\n\x03\x04\x01\x01\x12\x04\xef\x01\x08\x19\n\xeb\x01\n\x04\x04\
    \x01\x02\0\x12\x04\xf9\x01\x02\x12\x1a\xdc\x01\x20The\x20resource\x20typ\
    e\x20that\x20the\x20annotated\x20field\x20references.\n\n\x20Example:\n\
    \n\x20\x20\x20\x20\x20message\x20Subscription\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20string\x20topic\x20=\x202\x20[(google.api.resource_reference)\
    \x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20type:\x20\"pubsub.google\
    apis.com/Topic\"\n\x20\x20\x20\x20\x20\x20\x20}];\n\x20\x20\x20\x20\x20}\
    \n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xf9\x01\x02\x08\n\r\n\x05\x04\x01\
    \x02\0\x01\x12\x04\xf9\x01\t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xf9\
    \x01\x10\x11\n\xe6\x02\n\x04\x04\x01\x02\x01\x12\x04\x86\x02\x02\x18\x1a\
    \xd7\x02\x20The\x20resource\x20type\x20of\x20a\x20child\x20collection\
    \x20that\x20the\x20annotated\x20field\n\x20references.\x20This\x20is\x20\
    useful\x20for\x20annotating\x20the\x20`parent`\x20field\x20that\n\x20doe\
    sn't\x20have\x20a\x20fixed\x20resource\x20type.\n\n\x20Example:\n\n\x20\
    \x20\x20message\x20ListLogEntriesRequest\x20{\n\x20\x20\x20\x20\x20strin\
    g\x20parent\x20=\x201\x20[(google.api.resource_reference)\x20=\x20{\n\
    \x20\x20\x20\x20\x20\x20\x20child_type:\x20\"logging.googleapis.com/LogE\
    ntry\"\n\x20\x20\x20\x20\x20};\n\x20\x20\x20}\n\n\r\n\x05\x04\x01\x02\
    \x01\x05\x12\x04\x86\x02\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\
    \x86\x02\t\x13\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\x86\x02\x16\x17b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ResourceDescriptor::generated_message_descriptor_data());
            messages.push(ResourceReference::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(resource_descriptor::History::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
