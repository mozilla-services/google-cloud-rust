// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/monitored_resource.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  An object that describes the schema of a [MonitoredResource][google.api.MonitoredResource] object using a
///  type name and a set of labels.  For example, the monitored resource
///  descriptor for Google Compute Engine VM instances has a type of
///  `"gce_instance"` and specifies the use of the labels `"instance_id"` and
///  `"zone"` to identify particular VM instances.
///
///  Different APIs can support different monitored resource types. APIs generally
///  provide a `list` method that returns the monitored resource descriptors used
///  by the API.
// @@protoc_insertion_point(message:google.api.MonitoredResourceDescriptor)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MonitoredResourceDescriptor {
    // message fields
    ///  Optional. The resource name of the monitored resource descriptor:
    ///  `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
    ///  {type} is the value of the `type` field in this object and
    ///  {project_id} is a project ID that provides API-specific context for
    ///  accessing the type.  APIs that do not use project information can use the
    ///  resource name format `"monitoredResourceDescriptors/{type}"`.
    // @@protoc_insertion_point(field:google.api.MonitoredResourceDescriptor.name)
    pub name: ::std::string::String,
    ///  Required. The monitored resource type. For example, the type
    ///  `"cloudsql_database"` represents databases in Google Cloud SQL.
    ///  The maximum length of this value is 256 characters.
    // @@protoc_insertion_point(field:google.api.MonitoredResourceDescriptor.type)
    pub type_: ::std::string::String,
    ///  Optional. A concise name for the monitored resource type that might be
    ///  displayed in user interfaces. It should be a Title Cased Noun Phrase,
    ///  without any article or other determiners. For example,
    ///  `"Google Cloud SQL Database"`.
    // @@protoc_insertion_point(field:google.api.MonitoredResourceDescriptor.display_name)
    pub display_name: ::std::string::String,
    ///  Optional. A detailed description of the monitored resource type that might
    ///  be used in documentation.
    // @@protoc_insertion_point(field:google.api.MonitoredResourceDescriptor.description)
    pub description: ::std::string::String,
    ///  Required. A set of labels used to describe instances of this monitored
    ///  resource type. For example, an individual Google Cloud SQL database is
    ///  identified by values for the labels `"database_id"` and `"zone"`.
    // @@protoc_insertion_point(field:google.api.MonitoredResourceDescriptor.labels)
    pub labels: ::std::vec::Vec<super::label::LabelDescriptor>,
    ///  Optional. The launch stage of the monitored resource definition.
    // @@protoc_insertion_point(field:google.api.MonitoredResourceDescriptor.launch_stage)
    pub launch_stage: ::protobuf::EnumOrUnknown<super::launch_stage::LaunchStage>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.MonitoredResourceDescriptor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MonitoredResourceDescriptor {
    fn default() -> &'a MonitoredResourceDescriptor {
        <MonitoredResourceDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl MonitoredResourceDescriptor {
    pub fn new() -> MonitoredResourceDescriptor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &MonitoredResourceDescriptor| { &m.name },
            |m: &mut MonitoredResourceDescriptor| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MonitoredResourceDescriptor| { &m.type_ },
            |m: &mut MonitoredResourceDescriptor| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &MonitoredResourceDescriptor| { &m.display_name },
            |m: &mut MonitoredResourceDescriptor| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &MonitoredResourceDescriptor| { &m.description },
            |m: &mut MonitoredResourceDescriptor| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "labels",
            |m: &MonitoredResourceDescriptor| { &m.labels },
            |m: &mut MonitoredResourceDescriptor| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "launch_stage",
            |m: &MonitoredResourceDescriptor| { &m.launch_stage },
            |m: &mut MonitoredResourceDescriptor| { &mut m.launch_stage },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MonitoredResourceDescriptor>(
            "MonitoredResourceDescriptor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MonitoredResourceDescriptor {
    const NAME: &'static str = "MonitoredResourceDescriptor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                42 => {
                    self.name = is.read_string()?;
                },
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    self.display_name = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.labels.push(is.read_message()?);
                },
                56 => {
                    self.launch_stage = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.launch_stage != ::protobuf::EnumOrUnknown::new(super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(7, self.launch_stage.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        for v in &self.labels {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.launch_stage != ::protobuf::EnumOrUnknown::new(super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.launch_stage))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MonitoredResourceDescriptor {
        MonitoredResourceDescriptor::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.type_.clear();
        self.display_name.clear();
        self.description.clear();
        self.labels.clear();
        self.launch_stage = ::protobuf::EnumOrUnknown::new(super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MonitoredResourceDescriptor {
        static instance: MonitoredResourceDescriptor = MonitoredResourceDescriptor {
            name: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            display_name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            labels: ::std::vec::Vec::new(),
            launch_stage: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MonitoredResourceDescriptor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MonitoredResourceDescriptor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MonitoredResourceDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonitoredResourceDescriptor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:google.api.MonitoredResource)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MonitoredResource {
    // message fields
    ///  Required. The monitored resource type. This field must match
    ///  the `type` field of a [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] object. For
    ///  example, the type of a Compute Engine VM instance is `gce_instance`.
    // @@protoc_insertion_point(field:google.api.MonitoredResource.type)
    pub type_: ::std::string::String,
    ///  Required. Values for all of the labels listed in the associated monitored
    ///  resource descriptor. For example, Compute Engine VM instances use the
    ///  labels `"project_id"`, `"instance_id"`, and `"zone"`.
    // @@protoc_insertion_point(field:google.api.MonitoredResource.labels)
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.MonitoredResource.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MonitoredResource {
    fn default() -> &'a MonitoredResource {
        <MonitoredResource as ::protobuf::Message>::default_instance()
    }
}

impl MonitoredResource {
    pub fn new() -> MonitoredResource {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MonitoredResource| { &m.type_ },
            |m: &mut MonitoredResource| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "labels",
            |m: &MonitoredResource| { &m.labels },
            |m: &mut MonitoredResource| { &mut m.labels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MonitoredResource>(
            "MonitoredResource",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MonitoredResource {
    const NAME: &'static str = "MonitoredResource";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.labels.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.type_);
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.type_.is_empty() {
            os.write_string(1, &self.type_)?;
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MonitoredResource {
        MonitoredResource::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.labels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MonitoredResource {
        static instance: ::protobuf::rt::Lazy<MonitoredResource> = ::protobuf::rt::Lazy::new();
        instance.get(MonitoredResource::new)
    }
}

impl ::protobuf::MessageFull for MonitoredResource {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MonitoredResource").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MonitoredResource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonitoredResource {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Auxiliary metadata for a [MonitoredResource][google.api.MonitoredResource] object.
///  [MonitoredResource][google.api.MonitoredResource] objects contain the minimum set of information to
///  uniquely identify a monitored resource instance. There is some other useful
///  auxiliary metadata. Monitoring and Logging use an ingestion
///  pipeline to extract metadata for cloud resources of all types, and store
///  the metadata in this message.
// @@protoc_insertion_point(message:google.api.MonitoredResourceMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MonitoredResourceMetadata {
    // message fields
    // @@protoc_insertion_point(field:google.api.MonitoredResourceMetadata.system_labels)
    pub system_labels: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    ///  Output only. A map of user-defined metadata labels.
    // @@protoc_insertion_point(field:google.api.MonitoredResourceMetadata.user_labels)
    pub user_labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.MonitoredResourceMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MonitoredResourceMetadata {
    fn default() -> &'a MonitoredResourceMetadata {
        <MonitoredResourceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl MonitoredResourceMetadata {
    pub fn new() -> MonitoredResourceMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "system_labels",
            |m: &MonitoredResourceMetadata| { &m.system_labels },
            |m: &mut MonitoredResourceMetadata| { &mut m.system_labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "user_labels",
            |m: &MonitoredResourceMetadata| { &m.user_labels },
            |m: &mut MonitoredResourceMetadata| { &mut m.user_labels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MonitoredResourceMetadata>(
            "MonitoredResourceMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MonitoredResourceMetadata {
    const NAME: &'static str = "MonitoredResourceMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.system_labels)?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.user_labels.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.system_labels.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.user_labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.system_labels.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for (k, v) in &self.user_labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MonitoredResourceMetadata {
        MonitoredResourceMetadata::new()
    }

    fn clear(&mut self) {
        self.system_labels.clear();
        self.user_labels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MonitoredResourceMetadata {
        static instance: ::protobuf::rt::Lazy<MonitoredResourceMetadata> = ::protobuf::rt::Lazy::new();
        instance.get(MonitoredResourceMetadata::new)
    }
}

impl ::protobuf::MessageFull for MonitoredResourceMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MonitoredResourceMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MonitoredResourceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonitoredResourceMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#google/api/monitored_resource.proto\x12\ngoogle.api\x1a\x16google/api\
    /label.proto\x1a\x1dgoogle/api/launch_stage.proto\x1a\x1cgoogle/protobuf\
    /struct.proto\"\xfb\x01\n\x1bMonitoredResourceDescriptor\x12\x12\n\x04na\
    me\x18\x05\x20\x01(\tR\x04name\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04\
    type\x12!\n\x0cdisplay_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12\x20\n\
    \x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x123\n\x06labels\x18\
    \x04\x20\x03(\x0b2\x1b.google.api.LabelDescriptorR\x06labels\x12:\n\x0cl\
    aunch_stage\x18\x07\x20\x01(\x0e2\x17.google.api.LaunchStageR\x0blaunchS\
    tage\"\xa5\x01\n\x11MonitoredResource\x12\x12\n\x04type\x18\x01\x20\x01(\
    \tR\x04type\x12A\n\x06labels\x18\x02\x20\x03(\x0b2).google.api.Monitored\
    Resource.LabelsEntryR\x06labels\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01\"\xf0\x01\n\x19MonitoredResourceMetadata\x12<\n\rsystem_la\
    bels\x18\x01\x20\x01(\x0b2\x17.google.protobuf.StructR\x0csystemLabels\
    \x12V\n\x0buser_labels\x18\x02\x20\x03(\x0b25.google.api.MonitoredResour\
    ceMetadata.UserLabelsEntryR\nuserLabels\x1a=\n\x0fUserLabelsEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\tR\x05value:\x028\x01By\n\x0ecom.google.apiB\x16MonitoredResourceP\
    rotoP\x01ZCgoogle.golang.org/genproto/googleapis/api/monitoredres;monito\
    redres\xf8\x01\x01\xa2\x02\x04GAPIJ\xc3)\n\x06\x12\x04\x0f\0v\x01\n\xbe\
    \x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\
    \x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Versio\
    n\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\t\n\x02\x03\
    \0\x12\x03\x13\0\x20\n\t\n\x02\x03\x01\x12\x03\x14\0'\n\t\n\x02\x03\x02\
    \x12\x03\x15\0&\n\x08\n\x01\x08\x12\x03\x17\0\x1f\n\t\n\x02\x08\x1f\x12\
    \x03\x17\0\x1f\n\x08\n\x01\x08\x12\x03\x18\0Z\n\t\n\x02\x08\x0b\x12\x03\
    \x18\0Z\n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08\n\x12\x03\x19\0\"\
    \n\x08\n\x01\x08\x12\x03\x1a\07\n\t\n\x02\x08\x08\x12\x03\x1a\07\n\x08\n\
    \x01\x08\x12\x03\x1b\0'\n\t\n\x02\x08\x01\x12\x03\x1b\0'\n\x08\n\x01\x08\
    \x12\x03\x1c\0\"\n\t\n\x02\x08$\x12\x03\x1c\0\"\n\xa2\x04\n\x02\x04\0\
    \x12\x04'\0F\x01\x1a\x95\x04\x20An\x20object\x20that\x20describes\x20the\
    \x20schema\x20of\x20a\x20[MonitoredResource][google.api.MonitoredResourc\
    e]\x20object\x20using\x20a\n\x20type\x20name\x20and\x20a\x20set\x20of\
    \x20labels.\x20\x20For\x20example,\x20the\x20monitored\x20resource\n\x20\
    descriptor\x20for\x20Google\x20Compute\x20Engine\x20VM\x20instances\x20h\
    as\x20a\x20type\x20of\n\x20`\"gce_instance\"`\x20and\x20specifies\x20the\
    \x20use\x20of\x20the\x20labels\x20`\"instance_id\"`\x20and\n\x20`\"zone\
    \"`\x20to\x20identify\x20particular\x20VM\x20instances.\n\n\x20Different\
    \x20APIs\x20can\x20support\x20different\x20monitored\x20resource\x20type\
    s.\x20APIs\x20generally\n\x20provide\x20a\x20`list`\x20method\x20that\
    \x20returns\x20the\x20monitored\x20resource\x20descriptors\x20used\n\x20\
    by\x20the\x20API.\n\n\n\n\x03\x04\0\x01\x12\x03'\x08#\n\xa1\x03\n\x04\
    \x04\0\x02\0\x12\x03.\x02\x12\x1a\x93\x03\x20Optional.\x20The\x20resourc\
    e\x20name\x20of\x20the\x20monitored\x20resource\x20descriptor:\n\x20`\"p\
    rojects/{project_id}/monitoredResourceDescriptors/{type}\"`\x20where\n\
    \x20{type}\x20is\x20the\x20value\x20of\x20the\x20`type`\x20field\x20in\
    \x20this\x20object\x20and\n\x20{project_id}\x20is\x20a\x20project\x20ID\
    \x20that\x20provides\x20API-specific\x20context\x20for\n\x20accessing\
    \x20the\x20type.\x20\x20APIs\x20that\x20do\x20not\x20use\x20project\x20i\
    nformation\x20can\x20use\x20the\n\x20resource\x20name\x20format\x20`\"mo\
    nitoredResourceDescriptors/{type}\"`.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03.\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03.\t\r\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03.\x10\x11\n\xc2\x01\n\x04\x04\0\x02\x01\x12\x033\x02\
    \x12\x1a\xb4\x01\x20Required.\x20The\x20monitored\x20resource\x20type.\
    \x20For\x20example,\x20the\x20type\n\x20`\"cloudsql_database\"`\x20repre\
    sents\x20databases\x20in\x20Google\x20Cloud\x20SQL.\n\x20The\x20maximum\
    \x20length\x20of\x20this\x20value\x20is\x20256\x20characters.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x033\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x033\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x033\x10\x11\n\xf5\x01\n\
    \x04\x04\0\x02\x02\x12\x039\x02\x1a\x1a\xe7\x01\x20Optional.\x20A\x20con\
    cise\x20name\x20for\x20the\x20monitored\x20resource\x20type\x20that\x20m\
    ight\x20be\n\x20displayed\x20in\x20user\x20interfaces.\x20It\x20should\
    \x20be\x20a\x20Title\x20Cased\x20Noun\x20Phrase,\n\x20without\x20any\x20\
    article\x20or\x20other\x20determiners.\x20For\x20example,\n\x20`\"Google\
    \x20Cloud\x20SQL\x20Database\"`.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\
    9\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x039\t\x15\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x039\x18\x19\nt\n\x04\x04\0\x02\x03\x12\x03=\x02\x19\
    \x1ag\x20Optional.\x20A\x20detailed\x20description\x20of\x20the\x20monit\
    ored\x20resource\x20type\x20that\x20might\n\x20be\x20used\x20in\x20docum\
    entation.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03=\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03=\t\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03=\
    \x17\x18\n\xe1\x01\n\x04\x04\0\x02\x04\x12\x03B\x02&\x1a\xd3\x01\x20Requ\
    ired.\x20A\x20set\x20of\x20labels\x20used\x20to\x20describe\x20instances\
    \x20of\x20this\x20monitored\n\x20resource\x20type.\x20For\x20example,\
    \x20an\x20individual\x20Google\x20Cloud\x20SQL\x20database\x20is\n\x20id\
    entified\x20by\x20values\x20for\x20the\x20labels\x20`\"database_id\"`\
    \x20and\x20`\"zone\"`.\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03B\x02\n\n\
    \x0c\n\x05\x04\0\x02\x04\x06\x12\x03B\x0b\x1a\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03B\x1b!\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03B$%\nO\n\x04\x04\
    \0\x02\x05\x12\x03E\x02\x1f\x1aB\x20Optional.\x20The\x20launch\x20stage\
    \x20of\x20the\x20monitored\x20resource\x20definition.\n\n\x0c\n\x05\x04\
    \0\x02\x05\x06\x12\x03E\x02\r\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03E\x0e\
    \x1a\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03E\x1d\x1e\n\xcb\x06\n\x02\x04\
    \x01\x12\x04U\0_\x01\x1a\xbe\x06\x20An\x20object\x20representing\x20a\
    \x20resource\x20that\x20can\x20be\x20used\x20for\x20monitoring,\x20loggi\
    ng,\n\x20billing,\x20or\x20other\x20purposes.\x20Examples\x20include\x20\
    virtual\x20machine\x20instances,\n\x20databases,\x20and\x20storage\x20de\
    vices\x20such\x20as\x20disks.\x20The\x20`type`\x20field\x20identifies\
    \x20a\n\x20[MonitoredResourceDescriptor][google.api.MonitoredResourceDes\
    criptor]\x20object\x20that\x20describes\x20the\x20resource's\n\x20schema\
    .\x20Information\x20in\x20the\x20`labels`\x20field\x20identifies\x20the\
    \x20actual\x20resource\x20and\n\x20its\x20attributes\x20according\x20to\
    \x20the\x20schema.\x20For\x20example,\x20a\x20particular\x20Compute\n\
    \x20Engine\x20VM\x20instance\x20could\x20be\x20represented\x20by\x20the\
    \x20following\x20object,\x20because\x20the\n\x20[MonitoredResourceDescri\
    ptor][google.api.MonitoredResourceDescriptor]\x20for\x20`\"gce_instance\
    \"`\x20has\x20labels\n\x20`\"instance_id\"`\x20and\x20`\"zone\"`:\n\n\
    \x20\x20\x20\x20\x20{\x20\"type\":\x20\"gce_instance\",\n\x20\x20\x20\
    \x20\x20\x20\x20\"labels\":\x20{\x20\"instance_id\":\x20\"12345678901234\
    \",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\"zone\":\x20\"us-central1-a\"\x20}}\n\n\n\n\x03\x04\x01\x01\
    \x12\x03U\x08\x19\n\xfb\x01\n\x04\x04\x01\x02\0\x12\x03Y\x02\x12\x1a\xed\
    \x01\x20Required.\x20The\x20monitored\x20resource\x20type.\x20This\x20fi\
    eld\x20must\x20match\n\x20the\x20`type`\x20field\x20of\x20a\x20[Monitore\
    dResourceDescriptor][google.api.MonitoredResourceDescriptor]\x20object.\
    \x20For\n\x20example,\x20the\x20type\x20of\x20a\x20Compute\x20Engine\x20\
    VM\x20instance\x20is\x20`gce_instance`.\n\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03Y\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03Y\t\r\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03Y\x10\x11\n\xd7\x01\n\x04\x04\x01\x02\x01\x12\
    \x03^\x02!\x1a\xc9\x01\x20Required.\x20Values\x20for\x20all\x20of\x20the\
    \x20labels\x20listed\x20in\x20the\x20associated\x20monitored\n\x20resour\
    ce\x20descriptor.\x20For\x20example,\x20Compute\x20Engine\x20VM\x20insta\
    nces\x20use\x20the\n\x20labels\x20`\"project_id\"`,\x20`\"instance_id\"`\
    ,\x20and\x20`\"zone\"`.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03^\x02\
    \x15\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03^\x16\x1c\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03^\x1f\x20\n\xb9\x03\n\x02\x04\x02\x12\x04g\0v\
    \x01\x1a\xac\x03\x20Auxiliary\x20metadata\x20for\x20a\x20[MonitoredResou\
    rce][google.api.MonitoredResource]\x20object.\n\x20[MonitoredResource][g\
    oogle.api.MonitoredResource]\x20objects\x20contain\x20the\x20minimum\x20\
    set\x20of\x20information\x20to\n\x20uniquely\x20identify\x20a\x20monitor\
    ed\x20resource\x20instance.\x20There\x20is\x20some\x20other\x20useful\n\
    \x20auxiliary\x20metadata.\x20Monitoring\x20and\x20Logging\x20use\x20an\
    \x20ingestion\n\x20pipeline\x20to\x20extract\x20metadata\x20for\x20cloud\
    \x20resources\x20of\x20all\x20types,\x20and\x20store\n\x20the\x20metadat\
    a\x20in\x20this\x20message.\n\n\n\n\x03\x04\x02\x01\x12\x03g\x08!\n\xa1\
    \x03\n\x04\x04\x02\x02\0\x12\x03r\x02+\x1a\x93\x03\x20Output\x20only.\
    \x20Values\x20for\x20predefined\x20system\x20metadata\x20labels.\n\x20Sy\
    stem\x20labels\x20are\x20a\x20kind\x20of\x20metadata\x20extracted\x20by\
    \x20Google,\x20including\n\x20\"machine_image\",\x20\"vpc\",\x20\"subnet\
    _id\",\n\x20\"security_group\",\x20\"name\",\x20etc.\n\x20System\x20labe\
    l\x20values\x20can\x20be\x20only\x20strings,\x20Boolean\x20values,\x20or\
    \x20a\x20list\x20of\n\x20strings.\x20For\x20example:\n\n\x20\x20\x20\x20\
    \x20{\x20\"name\":\x20\"my-test-instance\",\n\x20\x20\x20\x20\x20\x20\
    \x20\"security_group\":\x20[\"a\",\x20\"b\",\x20\"c\"],\n\x20\x20\x20\
    \x20\x20\x20\x20\"spot_instance\":\x20false\x20}\n\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03r\x02\x18\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03r\x19&\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03r)*\nB\n\x04\x04\x02\x02\x01\x12\
    \x03u\x02&\x1a5\x20Output\x20only.\x20A\x20map\x20of\x20user-defined\x20\
    metadata\x20labels.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03u\x02\x15\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03u\x16!\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03u$%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::label::file_descriptor().clone());
            deps.push(super::launch_stage::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(MonitoredResourceDescriptor::generated_message_descriptor_data());
            messages.push(MonitoredResource::generated_message_descriptor_data());
            messages.push(MonitoredResourceMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
