// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/field_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct FieldInfo {
    // message fields
    pub format: FieldInfo_Format,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldInfo {
    fn default() -> &'a FieldInfo {
        <FieldInfo as ::protobuf::Message>::default_instance()
    }
}

impl FieldInfo {
    pub fn new() -> FieldInfo {
        ::std::default::Default::default()
    }

    // .google.api.FieldInfo.Format format = 1;


    pub fn get_format(&self) -> FieldInfo_Format {
        self.format
    }
    pub fn clear_format(&mut self) {
        self.format = FieldInfo_Format::FORMAT_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_format(&mut self, v: FieldInfo_Format) {
        self.format = v;
    }
}

impl ::protobuf::Message for FieldInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.format, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.format != FieldInfo_Format::FORMAT_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.format);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.format != FieldInfo_Format::FORMAT_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.format))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldInfo {
        FieldInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldInfo_Format>>(
                "format",
                |m: &FieldInfo| { &m.format },
                |m: &mut FieldInfo| { &mut m.format },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldInfo>(
                "FieldInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldInfo {
        static instance: ::protobuf::rt::LazyV2<FieldInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldInfo::new)
    }
}

impl ::protobuf::Clear for FieldInfo {
    fn clear(&mut self) {
        self.format = FieldInfo_Format::FORMAT_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FieldInfo_Format {
    FORMAT_UNSPECIFIED = 0,
    UUID4 = 1,
    IPV4 = 2,
    IPV6 = 3,
    IPV4_OR_IPV6 = 4,
}

impl ::protobuf::ProtobufEnum for FieldInfo_Format {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FieldInfo_Format> {
        match value {
            0 => ::std::option::Option::Some(FieldInfo_Format::FORMAT_UNSPECIFIED),
            1 => ::std::option::Option::Some(FieldInfo_Format::UUID4),
            2 => ::std::option::Option::Some(FieldInfo_Format::IPV4),
            3 => ::std::option::Option::Some(FieldInfo_Format::IPV6),
            4 => ::std::option::Option::Some(FieldInfo_Format::IPV4_OR_IPV6),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FieldInfo_Format] = &[
            FieldInfo_Format::FORMAT_UNSPECIFIED,
            FieldInfo_Format::UUID4,
            FieldInfo_Format::IPV4,
            FieldInfo_Format::IPV6,
            FieldInfo_Format::IPV4_OR_IPV6,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FieldInfo_Format>("FieldInfo.Format", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FieldInfo_Format {
}

impl ::std::default::Default for FieldInfo_Format {
    fn default() -> Self {
        FieldInfo_Format::FORMAT_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldInfo_Format {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

/// Extension fields
pub mod exts {

    pub const field_info: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeMessage<super::FieldInfo>> = ::protobuf::ext::ExtFieldOptional { field_number: 291403980, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bgoogle/api/field_info.proto\x12\ngoogle.api\x1a\x20google/protobuf\
    /descriptor.proto\"\x94\x01\n\tFieldInfo\x124\n\x06format\x18\x01\x20\
    \x01(\x0e2\x1c.google.api.FieldInfo.FormatR\x06format\"Q\n\x06Format\x12\
    \x16\n\x12FORMAT_UNSPECIFIED\x10\0\x12\t\n\x05UUID4\x10\x01\x12\x08\n\
    \x04IPV4\x10\x02\x12\x08\n\x04IPV6\x10\x03\x12\x10\n\x0cIPV4_OR_IPV6\x10\
    \x04:W\n\nfield_info\x18\xcc\xf1\xf9\x8a\x01\x20\x01(\x0b2\x15.google.ap\
    i.FieldInfo\x12\x1d.google.protobuf.FieldOptionsR\tfieldInfoBl\n\x0ecom.\
    google.apiB\x0eFieldInfoProtoP\x01ZAgoogle.golang.org/genproto/googleapi\
    s/api/annotations;annotations\xa2\x02\x04GAPIJ\xe7\x16\n\x06\x12\x04\x0e\
    \0N\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202\
    023\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20Licens\
    e,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20\
    use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Lice\
    nse.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20a\
    t\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\t\n\
    \x02\x03\0\x12\x03\x12\0*\n\x08\n\x01\x08\x12\x03\x14\0X\n\t\n\x02\x08\
    \x0b\x12\x03\x14\0X\n\x08\n\x01\x08\x12\x03\x15\0\"\n\t\n\x02\x08\n\x12\
    \x03\x15\0\"\n\x08\n\x01\x08\x12\x03\x16\0/\n\t\n\x02\x08\x08\x12\x03\
    \x16\0/\n\x08\n\x01\x08\x12\x03\x17\0'\n\t\n\x02\x08\x01\x12\x03\x17\0'\
    \n\x08\n\x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08$\x12\x03\x18\0\"\n\t\n\
    \x01\x07\x12\x04\x1a\0&\x01\n\x86\x03\n\x02\x07\0\x12\x03%\x02.\x1a\xfa\
    \x02\x20Rich\x20semantic\x20descriptor\x20of\x20an\x20API\x20field\x20be\
    yond\x20the\x20basic\x20typing.\n\n\x20Examples:\n\n\x20\x20\x20string\
    \x20request_id\x20=\x201\x20[(google.api.field_info).format\x20=\x20UUID\
    4];\n\x20\x20\x20string\x20old_ip_address\x20=\x202\x20[(google.api.fiel\
    d_info).format\x20=\x20IPV4];\n\x20\x20\x20string\x20new_ip_address\x20=\
    \x203\x20[(google.api.field_info).format\x20=\x20IPV6];\n\x20\x20\x20str\
    ing\x20actual_ip_address\x20=\x204\x20[\n\x20\x20\x20\x20\x20(google.api\
    .field_info).format\x20=\x20IPV4_OR_IPV6\n\x20\x20\x20];\n\n\n\n\x03\x07\
    \0\x02\x12\x03\x1a\x07#\n\n\n\x03\x07\0\x06\x12\x03%\x02\x16\n\n\n\x03\
    \x07\0\x01\x12\x03%\x17!\n\n\n\x03\x07\0\x03\x12\x03%$-\nL\n\x02\x04\0\
    \x12\x04)\0N\x01\x1a@\x20Rich\x20semantic\x20information\x20of\x20an\x20\
    API\x20field\x20beyond\x20basic\x20typing.\n\n\n\n\x03\x04\0\x01\x12\x03\
    )\x08\x11\n\x9a\x01\n\x04\x04\0\x04\0\x12\x04,\x02H\x03\x1a\x8b\x01\x20T\
    he\x20standard\x20format\x20of\x20a\x20field\x20value.\x20The\x20support\
    ed\x20formats\x20are\x20all\x20backed\n\x20by\x20either\x20an\x20RFC\x20\
    defined\x20by\x20the\x20IETF\x20or\x20a\x20Google-defined\x20AIP.\n\n\
    \x0c\n\x05\x04\0\x04\0\x01\x12\x03,\x07\r\n,\n\x06\x04\0\x04\0\x02\0\x12\
    \x03.\x04\x1b\x1a\x1d\x20Default,\x20unspecified\x20value.\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\0\x01\x12\x03.\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\0\
    \x02\x12\x03.\x19\x1a\n\xba\x02\n\x06\x04\0\x04\0\x02\x01\x12\x035\x04\
    \x0e\x1a\xaa\x02\x20Universally\x20Unique\x20Identifier,\x20version\x204\
    ,\x20value\x20as\x20defined\x20by\n\x20https://datatracker.ietf.org/doc/\
    html/rfc4122.\x20The\x20value\x20may\x20be\n\x20normalized\x20to\x20enti\
    rely\x20lowercase\x20letters.\x20For\x20example,\x20the\x20value\n\x20`F\
    47AC10B-58CC-0372-8567-0E02B2C3D479`\x20would\x20be\x20normalized\x20to\
    \n\x20`f47ac10b-58cc-0372-8567-0e02b2c3d479`.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x01\x12\x035\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x035\
    \x0c\r\n\x81\x02\n\x06\x04\0\x04\0\x02\x02\x12\x03;\x04\r\x1a\xf1\x01\
    \x20Internet\x20Protocol\x20v4\x20value\x20as\x20defined\x20by\x20[RFC\n\
    \x20791](https://datatracker.ietf.org/doc/html/rfc791).\x20The\x20value\
    \x20may\x20be\n\x20condensed,\x20with\x20leading\x20zeros\x20in\x20each\
    \x20octet\x20stripped.\x20For\x20example,\n\x20`001.022.233.040`\x20woul\
    d\x20be\x20condensed\x20to\x20`1.22.233.40`.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x02\x01\x12\x03;\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\
    \x03;\x0b\x0c\n\xaa\x02\n\x06\x04\0\x04\0\x02\x03\x12\x03B\x04\r\x1a\x9a\
    \x02\x20Internet\x20Protocol\x20v6\x20value\x20as\x20defined\x20by\x20[R\
    FC\n\x202460](https://datatracker.ietf.org/doc/html/rfc2460).\x20The\x20\
    value\x20may\x20be\n\x20normalized\x20to\x20entirely\x20lowercase\x20let\
    ters,\x20and\x20zero-padded\x20partial\x20and\n\x20empty\x20octets.\x20F\
    or\x20example,\x20the\x20value\x20`2001:DB8::`\x20would\x20be\x20normali\
    zed\x20to\n\x20`2001:0db8:0:0`.\n\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\
    \x12\x03B\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03B\x0b\x0c\n\
    \xc1\x01\n\x06\x04\0\x04\0\x02\x04\x12\x03G\x04\x15\x1a\xb1\x01\x20An\
    \x20IP\x20address\x20in\x20either\x20v4\x20or\x20v6\x20format\x20as\x20d\
    escribed\x20by\x20the\x20individual\n\x20values\x20defined\x20herein.\
    \x20See\x20the\x20comments\x20on\x20the\x20IPV4\x20and\x20IPV6\x20types\
    \x20for\n\x20allowed\x20normalizations\x20of\x20each.\n\n\x0e\n\x07\x04\
    \0\x04\0\x02\x04\x01\x12\x03G\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\x04\
    \x02\x12\x03G\x13\x14\n\xac\x01\n\x04\x04\0\x02\0\x12\x03M\x02\x14\x1a\
    \x9e\x01\x20The\x20standard\x20format\x20of\x20a\x20field\x20value.\x20T\
    his\x20does\x20not\x20explicitly\x20configure\n\x20any\x20API\x20consume\
    r,\x20just\x20documents\x20the\x20API's\x20format\x20for\x20the\x20field\
    \x20it\x20is\n\x20applied\x20to.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03M\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03M\t\x0f\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03M\x12\x13b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
