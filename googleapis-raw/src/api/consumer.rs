// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/api/consumer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:google.api.ProjectProperties)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProjectProperties {
    // message fields
    ///  List of per consumer project-specific properties.
    // @@protoc_insertion_point(field:google.api.ProjectProperties.properties)
    pub properties: ::std::vec::Vec<Property>,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.ProjectProperties.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProjectProperties {
    fn default() -> &'a ProjectProperties {
        <ProjectProperties as ::protobuf::Message>::default_instance()
    }
}

impl ProjectProperties {
    pub fn new() -> ProjectProperties {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "properties",
            |m: &ProjectProperties| { &m.properties },
            |m: &mut ProjectProperties| { &mut m.properties },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProjectProperties>(
            "ProjectProperties",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProjectProperties {
    const NAME: &'static str = "ProjectProperties";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.properties.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.properties {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProjectProperties {
        ProjectProperties::new()
    }

    fn clear(&mut self) {
        self.properties.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProjectProperties {
        static instance: ProjectProperties = ProjectProperties {
            properties: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProjectProperties {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProjectProperties").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProjectProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProjectProperties {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Defines project properties.
///
///  API services can define properties that can be assigned to consumer projects
///  so that backends can perform response customization without having to make
///  additional calls or maintain additional storage. For example, Maps API
///  defines properties that controls map tile cache period, or whether to embed a
///  watermark in a result.
///
///  These values can be set via API producer console. Only API providers can
///  define and set these properties.
// @@protoc_insertion_point(message:google.api.Property)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Property {
    // message fields
    ///  The name of the property (a.k.a key).
    // @@protoc_insertion_point(field:google.api.Property.name)
    pub name: ::std::string::String,
    ///  The type of this property.
    // @@protoc_insertion_point(field:google.api.Property.type)
    pub type_: ::protobuf::EnumOrUnknown<property::PropertyType>,
    ///  The description of the property
    // @@protoc_insertion_point(field:google.api.Property.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.api.Property.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Property {
    fn default() -> &'a Property {
        <Property as ::protobuf::Message>::default_instance()
    }
}

impl Property {
    pub fn new() -> Property {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Property| { &m.name },
            |m: &mut Property| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Property| { &m.type_ },
            |m: &mut Property| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Property| { &m.description },
            |m: &mut Property| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Property>(
            "Property",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Property {
    const NAME: &'static str = "Property";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(property::PropertyType::UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(property::PropertyType::UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Property {
        Property::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(property::PropertyType::UNSPECIFIED);
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Property {
        static instance: Property = Property {
            name: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Property {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Property").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Property {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Property {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Property`
pub mod property {
    ///  Supported data type of the property values
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.api.Property.PropertyType)
    pub enum PropertyType {
        // @@protoc_insertion_point(enum_value:google.api.Property.PropertyType.UNSPECIFIED)
        UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.api.Property.PropertyType.INT64)
        INT64 = 1,
        // @@protoc_insertion_point(enum_value:google.api.Property.PropertyType.BOOL)
        BOOL = 2,
        // @@protoc_insertion_point(enum_value:google.api.Property.PropertyType.STRING)
        STRING = 3,
        // @@protoc_insertion_point(enum_value:google.api.Property.PropertyType.DOUBLE)
        DOUBLE = 4,
    }

    impl ::protobuf::Enum for PropertyType {
        const NAME: &'static str = "PropertyType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<PropertyType> {
            match value {
                0 => ::std::option::Option::Some(PropertyType::UNSPECIFIED),
                1 => ::std::option::Option::Some(PropertyType::INT64),
                2 => ::std::option::Option::Some(PropertyType::BOOL),
                3 => ::std::option::Option::Some(PropertyType::STRING),
                4 => ::std::option::Option::Some(PropertyType::DOUBLE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<PropertyType> {
            match str {
                "UNSPECIFIED" => ::std::option::Option::Some(PropertyType::UNSPECIFIED),
                "INT64" => ::std::option::Option::Some(PropertyType::INT64),
                "BOOL" => ::std::option::Option::Some(PropertyType::BOOL),
                "STRING" => ::std::option::Option::Some(PropertyType::STRING),
                "DOUBLE" => ::std::option::Option::Some(PropertyType::DOUBLE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [PropertyType] = &[
            PropertyType::UNSPECIFIED,
            PropertyType::INT64,
            PropertyType::BOOL,
            PropertyType::STRING,
            PropertyType::DOUBLE,
        ];
    }

    impl ::protobuf::EnumFull for PropertyType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Property.PropertyType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for PropertyType {
        fn default() -> Self {
            PropertyType::UNSPECIFIED
        }
    }

    impl PropertyType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PropertyType>("Property.PropertyType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/api/consumer.proto\x12\ngoogle.api\"I\n\x11ProjectPropertie\
    s\x124\n\nproperties\x18\x01\x20\x03(\x0b2\x14.google.api.PropertyR\npro\
    perties\"\xc5\x01\n\x08Property\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x125\n\x04type\x18\x02\x20\x01(\x0e2!.google.api.Property.Prope\
    rtyTypeR\x04type\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescrip\
    tion\"L\n\x0cPropertyType\x12\x0f\n\x0bUNSPECIFIED\x10\0\x12\t\n\x05INT6\
    4\x10\x01\x12\x08\n\x04BOOL\x10\x02\x12\n\n\x06STRING\x10\x03\x12\n\n\
    \x06DOUBLE\x10\x04Bh\n\x0ecom.google.apiB\rConsumerProtoP\x01ZEgoogle.go\
    lang.org/genproto/googleapis/api/serviceconfig;serviceconfigJ\xbc\x15\n\
    \x06\x12\x04\x0e\0Q\x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb2\x04\
    \x20Copyright\x202016\x20Google\x20Inc.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\
    \x12\x03\x10\0\x13\n\x08\n\x01\x08\x12\x03\x12\0\\\n\t\n\x02\x08\x0b\x12\
    \x03\x12\0\\\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\
    \0\"\n\x08\n\x01\x08\x12\x03\x14\0.\n\t\n\x02\x08\x08\x12\x03\x14\0.\n\
    \x08\n\x01\x08\x12\x03\x15\0'\n\t\n\x02\x08\x01\x12\x03\x15\0'\n\xbf\x05\
    \n\x02\x04\0\x12\x04'\0*\x01\x1a\xb2\x05\x20A\x20descriptor\x20for\x20de\
    fining\x20project\x20properties\x20for\x20a\x20service.\x20One\x20servic\
    e\x20may\n\x20have\x20many\x20consumer\x20projects,\x20and\x20the\x20ser\
    vice\x20may\x20want\x20to\x20behave\x20differently\n\x20depending\x20on\
    \x20some\x20properties\x20on\x20the\x20project.\x20For\x20example,\x20a\
    \x20project\x20may\x20be\n\x20associated\x20with\x20a\x20school,\x20or\
    \x20a\x20business,\x20or\x20a\x20government\x20agency,\x20a\x20business\
    \n\x20type\x20property\x20on\x20the\x20project\x20may\x20affect\x20how\
    \x20a\x20service\x20responds\x20to\x20the\x20client.\n\x20This\x20descri\
    ptor\x20defines\x20which\x20properties\x20are\x20allowed\x20to\x20be\x20\
    set\x20on\x20a\x20project.\n\n\x20Example:\n\n\x20\x20\x20\x20project_pr\
    operties:\n\x20\x20\x20\x20\x20\x20properties:\n\x20\x20\x20\x20\x20\x20\
    -\x20name:\x20NO_WATERMARK\n\x20\x20\x20\x20\x20\x20\x20\x20type:\x20BOO\
    L\n\x20\x20\x20\x20\x20\x20\x20\x20description:\x20Allows\x20usage\x20of\
    \x20the\x20API\x20without\x20watermarks.\n\x20\x20\x20\x20\x20\x20-\x20n\
    ame:\x20EXTENDED_TILE_CACHE_PERIOD\n\x20\x20\x20\x20\x20\x20\x20\x20type\
    :\x20INT64\n\n\n\n\x03\x04\0\x01\x12\x03'\x08\x19\n@\n\x04\x04\0\x02\0\
    \x12\x03)\x02#\x1a3\x20List\x20of\x20per\x20consumer\x20project-specific\
    \x20properties.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03)\x02\n\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03)\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03)\
    \x14\x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03)!\"\n\xe1\x03\n\x02\x04\x01\
    \x12\x046\0Q\x01\x1a\xd4\x03\x20Defines\x20project\x20properties.\n\n\
    \x20API\x20services\x20can\x20define\x20properties\x20that\x20can\x20be\
    \x20assigned\x20to\x20consumer\x20projects\n\x20so\x20that\x20backends\
    \x20can\x20perform\x20response\x20customization\x20without\x20having\x20\
    to\x20make\n\x20additional\x20calls\x20or\x20maintain\x20additional\x20s\
    torage.\x20For\x20example,\x20Maps\x20API\n\x20defines\x20properties\x20\
    that\x20controls\x20map\x20tile\x20cache\x20period,\x20or\x20whether\x20\
    to\x20embed\x20a\n\x20watermark\x20in\x20a\x20result.\n\n\x20These\x20va\
    lues\x20can\x20be\x20set\x20via\x20API\x20producer\x20console.\x20Only\
    \x20API\x20providers\x20can\n\x20define\x20and\x20set\x20these\x20proper\
    ties.\n\n\n\n\x03\x04\x01\x01\x12\x036\x08\x10\n:\n\x04\x04\x01\x04\0\
    \x12\x048\x02G\x03\x1a,\x20Supported\x20data\x20type\x20of\x20the\x20pro\
    perty\x20values\n\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x038\x07\x13\nF\n\
    \x06\x04\x01\x04\0\x02\0\x12\x03:\x04\x14\x1a7\x20The\x20type\x20is\x20u\
    nspecified,\x20and\x20will\x20result\x20in\x20an\x20error.\n\n\x0e\n\x07\
    \x04\x01\x04\0\x02\0\x01\x12\x03:\x04\x0f\n\x0e\n\x07\x04\x01\x04\0\x02\
    \0\x02\x12\x03:\x12\x13\n%\n\x06\x04\x01\x04\0\x02\x01\x12\x03=\x04\x0e\
    \x1a\x16\x20The\x20type\x20is\x20`int64`.\n\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x01\x01\x12\x03=\x04\t\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\
    \x03=\x0c\r\n$\n\x06\x04\x01\x04\0\x02\x02\x12\x03@\x04\r\x1a\x15\x20The\
    \x20type\x20is\x20`bool`.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\
    \x03@\x04\x08\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x03@\x0b\x0c\n&\
    \n\x06\x04\x01\x04\0\x02\x03\x12\x03C\x04\x0f\x1a\x17\x20The\x20type\x20\
    is\x20`string`.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x01\x12\x03C\x04\n\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x03\x02\x12\x03C\r\x0e\n&\n\x06\x04\x01\x04\
    \0\x02\x04\x12\x03F\x04\x0f\x1a\x17\x20The\x20type\x20is\x20'double'.\n\
    \n\x0e\n\x07\x04\x01\x04\0\x02\x04\x01\x12\x03F\x04\n\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x04\x02\x12\x03F\r\x0e\n4\n\x04\x04\x01\x02\0\x12\x03J\
    \x02\x12\x1a'\x20The\x20name\x20of\x20the\x20property\x20(a.k.a\x20key).\
    \n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03J\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03J\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03J\x10\x11\n\
    )\n\x04\x04\x01\x02\x01\x12\x03M\x02\x18\x1a\x1c\x20The\x20type\x20of\
    \x20this\x20property.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03M\x02\x0e\
    \n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03M\x0f\x13\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03M\x16\x17\n.\n\x04\x04\x01\x02\x02\x12\x03P\x02\x19\
    \x1a!\x20The\x20description\x20of\x20the\x20property\n\n\x0c\n\x05\x04\
    \x01\x02\x02\x05\x12\x03P\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03P\t\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03P\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ProjectProperties::generated_message_descriptor_data());
            messages.push(Property::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(property::PropertyType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
