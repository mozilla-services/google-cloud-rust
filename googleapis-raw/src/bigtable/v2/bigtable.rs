// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/bigtable/v2/bigtable.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Request message for Bigtable.ReadRows.
// @@protoc_insertion_point(message:google.bigtable.v2.ReadRowsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadRowsRequest {
    // message fields
    ///  Required. The unique name of the table from which to read.
    ///  Values are of the form
    ///  `projects/<project>/instances/<instance>/tables/<table>`.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsRequest.table_name)
    pub table_name: ::std::string::String,
    ///  This value specifies routing for replication. If not specified, the
    ///  "default" application profile will be used.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsRequest.app_profile_id)
    pub app_profile_id: ::std::string::String,
    ///  The row keys and/or ranges to read. If not specified, reads from all rows.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsRequest.rows)
    pub rows: ::protobuf::MessageField<super::data::RowSet>,
    ///  The filter to apply to the contents of the specified row(s). If unset,
    ///  reads the entirety of each row.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsRequest.filter)
    pub filter: ::protobuf::MessageField<super::data::RowFilter>,
    ///  The read will terminate after committing to N rows' worth of results. The
    ///  default (zero) is to return all results.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsRequest.rows_limit)
    pub rows_limit: i64,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.ReadRowsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadRowsRequest {
    fn default() -> &'a ReadRowsRequest {
        <ReadRowsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRowsRequest {
    pub fn new() -> ReadRowsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &ReadRowsRequest| { &m.table_name },
            |m: &mut ReadRowsRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_profile_id",
            |m: &ReadRowsRequest| { &m.app_profile_id },
            |m: &mut ReadRowsRequest| { &mut m.app_profile_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data::RowSet>(
            "rows",
            |m: &ReadRowsRequest| { &m.rows },
            |m: &mut ReadRowsRequest| { &mut m.rows },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data::RowFilter>(
            "filter",
            |m: &ReadRowsRequest| { &m.filter },
            |m: &mut ReadRowsRequest| { &mut m.filter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rows_limit",
            |m: &ReadRowsRequest| { &m.rows_limit },
            |m: &mut ReadRowsRequest| { &mut m.rows_limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadRowsRequest>(
            "ReadRowsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadRowsRequest {
    const NAME: &'static str = "ReadRowsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.table_name = is.read_string()?;
                },
                42 => {
                    self.app_profile_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rows)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.filter)?;
                },
                32 => {
                    self.rows_limit = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.app_profile_id);
        }
        if let Some(v) = self.rows.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.rows_limit != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.rows_limit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(5, &self.app_profile_id)?;
        }
        if let Some(v) = self.rows.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.filter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.rows_limit != 0 {
            os.write_int64(4, self.rows_limit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadRowsRequest {
        ReadRowsRequest::new()
    }

    fn clear(&mut self) {
        self.table_name.clear();
        self.app_profile_id.clear();
        self.rows.clear();
        self.filter.clear();
        self.rows_limit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadRowsRequest {
        static instance: ReadRowsRequest = ReadRowsRequest {
            table_name: ::std::string::String::new(),
            app_profile_id: ::std::string::String::new(),
            rows: ::protobuf::MessageField::none(),
            filter: ::protobuf::MessageField::none(),
            rows_limit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadRowsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadRowsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadRowsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRowsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response message for Bigtable.ReadRows.
// @@protoc_insertion_point(message:google.bigtable.v2.ReadRowsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadRowsResponse {
    // message fields
    ///  A collection of a row's contents as part of the read request.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.chunks)
    pub chunks: ::std::vec::Vec<read_rows_response::CellChunk>,
    ///  Optionally the server might return the row key of the last row it
    ///  has scanned.  The client can use this to construct a more
    ///  efficient retry request if needed: any row keys or portions of
    ///  ranges less than this row key can be dropped from the request.
    ///  This is primarily useful for cases where the server has read a
    ///  lot of data that was filtered out since the last committed row
    ///  key, allowing the client to skip that work on a retry.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
    pub last_scanned_row_key: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.ReadRowsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadRowsResponse {
    fn default() -> &'a ReadRowsResponse {
        <ReadRowsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadRowsResponse {
    pub fn new() -> ReadRowsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chunks",
            |m: &ReadRowsResponse| { &m.chunks },
            |m: &mut ReadRowsResponse| { &mut m.chunks },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_scanned_row_key",
            |m: &ReadRowsResponse| { &m.last_scanned_row_key },
            |m: &mut ReadRowsResponse| { &mut m.last_scanned_row_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadRowsResponse>(
            "ReadRowsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadRowsResponse {
    const NAME: &'static str = "ReadRowsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunks.push(is.read_message()?);
                },
                18 => {
                    self.last_scanned_row_key = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.last_scanned_row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.last_scanned_row_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.chunks {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.last_scanned_row_key.is_empty() {
            os.write_bytes(2, &self.last_scanned_row_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadRowsResponse {
        ReadRowsResponse::new()
    }

    fn clear(&mut self) {
        self.chunks.clear();
        self.last_scanned_row_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadRowsResponse {
        static instance: ReadRowsResponse = ReadRowsResponse {
            chunks: ::std::vec::Vec::new(),
            last_scanned_row_key: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadRowsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadRowsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadRowsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRowsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ReadRowsResponse`
pub mod read_rows_response {
    ///  Specifies a piece of a row's contents returned as part of the read
    ///  response stream.
    // @@protoc_insertion_point(message:google.bigtable.v2.ReadRowsResponse.CellChunk)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CellChunk {
        // message fields
        ///  The row key for this chunk of data.  If the row key is empty,
        ///  this CellChunk is a continuation of the same row as the previous
        ///  CellChunk in the response stream, even if that CellChunk was in a
        ///  previous ReadRowsResponse message.
        ///
        ///  Classified as IDENTIFYING_ID to provide context around data accesses for
        ///  auditing systems.
        // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
        pub row_key: ::std::vec::Vec<u8>,
        ///  The column family name for this chunk of data.  If this message
        ///  is not present this CellChunk is a continuation of the same column
        ///  family as the previous CellChunk.  The empty string can occur as a
        ///  column family name in a response so clients must check
        ///  explicitly for the presence of this message, not just for
        ///  `family_name.value` being non-empty.
        // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
        pub family_name: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::StringValue>,
        ///  The column qualifier for this chunk of data.  If this message
        ///  is not present, this CellChunk is a continuation of the same column
        ///  as the previous CellChunk.  Column qualifiers may be empty so
        ///  clients must check for the presence of this message, not just
        ///  for `qualifier.value` being non-empty.
        // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
        pub qualifier: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BytesValue>,
        ///  The cell's stored timestamp, which also uniquely identifies it
        ///  within its column.  Values are always expressed in
        ///  microseconds, but individual tables may set a coarser
        ///  granularity to further restrict the allowed values. For
        ///  example, a table which specifies millisecond granularity will
        ///  only allow values of `timestamp_micros` which are multiples of
        ///  1000.  Timestamps are only set in the first CellChunk per cell
        ///  (for cells split into multiple chunks).
        // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
        pub timestamp_micros: i64,
        ///  Labels applied to the cell by a
        ///  [RowFilter][google.bigtable.v2.RowFilter].  Labels are only set
        ///  on the first CellChunk per cell.
        // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
        pub labels: ::std::vec::Vec<::std::string::String>,
        ///  The value stored in the cell.  Cell values can be split across
        ///  multiple CellChunks.  In that case only the value field will be
        ///  set in CellChunks after the first: the timestamp and labels
        ///  will only be present in the first CellChunk, even if the first
        ///  CellChunk came in a previous ReadRowsResponse.
        // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
        pub value: ::std::vec::Vec<u8>,
        ///  If this CellChunk is part of a chunked cell value and this is
        ///  not the final chunk of that cell, value_size will be set to the
        ///  total length of the cell value.  The client can use this size
        ///  to pre-allocate memory to hold the full cell value.
        // @@protoc_insertion_point(field:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
        pub value_size: i32,
        // message oneof groups
        pub row_status: ::std::option::Option<cell_chunk::Row_status>,
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.v2.ReadRowsResponse.CellChunk.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CellChunk {
        fn default() -> &'a CellChunk {
            <CellChunk as ::protobuf::Message>::default_instance()
        }
    }

    impl CellChunk {
        pub fn new() -> CellChunk {
            ::std::default::Default::default()
        }

        // bool reset_row = 8;

        pub fn reset_row(&self) -> bool {
            match self.row_status {
                ::std::option::Option::Some(cell_chunk::Row_status::ResetRow(v)) => v,
                _ => false,
            }
        }

        pub fn clear_reset_row(&mut self) {
            self.row_status = ::std::option::Option::None;
        }

        pub fn has_reset_row(&self) -> bool {
            match self.row_status {
                ::std::option::Option::Some(cell_chunk::Row_status::ResetRow(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_reset_row(&mut self, v: bool) {
            self.row_status = ::std::option::Option::Some(cell_chunk::Row_status::ResetRow(v))
        }

        // bool commit_row = 9;

        pub fn commit_row(&self) -> bool {
            match self.row_status {
                ::std::option::Option::Some(cell_chunk::Row_status::CommitRow(v)) => v,
                _ => false,
            }
        }

        pub fn clear_commit_row(&mut self) {
            self.row_status = ::std::option::Option::None;
        }

        pub fn has_commit_row(&self) -> bool {
            match self.row_status {
                ::std::option::Option::Some(cell_chunk::Row_status::CommitRow(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_commit_row(&mut self, v: bool) {
            self.row_status = ::std::option::Option::Some(cell_chunk::Row_status::CommitRow(v))
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(9);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "row_key",
                |m: &CellChunk| { &m.row_key },
                |m: &mut CellChunk| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::StringValue>(
                "family_name",
                |m: &CellChunk| { &m.family_name },
                |m: &mut CellChunk| { &mut m.family_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BytesValue>(
                "qualifier",
                |m: &CellChunk| { &m.qualifier },
                |m: &mut CellChunk| { &mut m.qualifier },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "timestamp_micros",
                |m: &CellChunk| { &m.timestamp_micros },
                |m: &mut CellChunk| { &mut m.timestamp_micros },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "labels",
                |m: &CellChunk| { &m.labels },
                |m: &mut CellChunk| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &CellChunk| { &m.value },
                |m: &mut CellChunk| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value_size",
                |m: &CellChunk| { &m.value_size },
                |m: &mut CellChunk| { &mut m.value_size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "reset_row",
                CellChunk::has_reset_row,
                CellChunk::reset_row,
                CellChunk::set_reset_row,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "commit_row",
                CellChunk::has_commit_row,
                CellChunk::commit_row,
                CellChunk::set_commit_row,
            ));
            oneofs.push(cell_chunk::Row_status::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CellChunk>(
                "ReadRowsResponse.CellChunk",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CellChunk {
        const NAME: &'static str = "CellChunk";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.row_key = is.read_bytes()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.family_name)?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.qualifier)?;
                    },
                    32 => {
                        self.timestamp_micros = is.read_int64()?;
                    },
                    42 => {
                        self.labels.push(is.read_string()?);
                    },
                    50 => {
                        self.value = is.read_bytes()?;
                    },
                    56 => {
                        self.value_size = is.read_int32()?;
                    },
                    64 => {
                        self.row_status = ::std::option::Option::Some(cell_chunk::Row_status::ResetRow(is.read_bool()?));
                    },
                    72 => {
                        self.row_status = ::std::option::Option::Some(cell_chunk::Row_status::CommitRow(is.read_bool()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.row_key.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.row_key);
            }
            if let Some(v) = self.family_name.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.qualifier.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.timestamp_micros != 0 {
                my_size += ::protobuf::rt::int64_size(4, self.timestamp_micros);
            }
            for value in &self.labels {
                my_size += ::protobuf::rt::string_size(5, &value);
            };
            if !self.value.is_empty() {
                my_size += ::protobuf::rt::bytes_size(6, &self.value);
            }
            if self.value_size != 0 {
                my_size += ::protobuf::rt::int32_size(7, self.value_size);
            }
            if let ::std::option::Option::Some(ref v) = self.row_status {
                match v {
                    &cell_chunk::Row_status::ResetRow(v) => {
                        my_size += 1 + 1;
                    },
                    &cell_chunk::Row_status::CommitRow(v) => {
                        my_size += 1 + 1;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.row_key.is_empty() {
                os.write_bytes(1, &self.row_key)?;
            }
            if let Some(v) = self.family_name.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.qualifier.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if self.timestamp_micros != 0 {
                os.write_int64(4, self.timestamp_micros)?;
            }
            for v in &self.labels {
                os.write_string(5, &v)?;
            };
            if !self.value.is_empty() {
                os.write_bytes(6, &self.value)?;
            }
            if self.value_size != 0 {
                os.write_int32(7, self.value_size)?;
            }
            if let ::std::option::Option::Some(ref v) = self.row_status {
                match v {
                    &cell_chunk::Row_status::ResetRow(v) => {
                        os.write_bool(8, v)?;
                    },
                    &cell_chunk::Row_status::CommitRow(v) => {
                        os.write_bool(9, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CellChunk {
            CellChunk::new()
        }

        fn clear(&mut self) {
            self.row_key.clear();
            self.family_name.clear();
            self.qualifier.clear();
            self.timestamp_micros = 0;
            self.labels.clear();
            self.value.clear();
            self.value_size = 0;
            self.row_status = ::std::option::Option::None;
            self.row_status = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CellChunk {
            static instance: CellChunk = CellChunk {
                row_key: ::std::vec::Vec::new(),
                family_name: ::protobuf::MessageField::none(),
                qualifier: ::protobuf::MessageField::none(),
                timestamp_micros: 0,
                labels: ::std::vec::Vec::new(),
                value: ::std::vec::Vec::new(),
                value_size: 0,
                row_status: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CellChunk {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ReadRowsResponse.CellChunk").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CellChunk {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CellChunk {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `CellChunk`
    pub mod cell_chunk {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:google.bigtable.v2.ReadRowsResponse.CellChunk.row_status)
        pub enum Row_status {
            // @@protoc_insertion_point(oneof_field:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
            ResetRow(bool),
            // @@protoc_insertion_point(oneof_field:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
            CommitRow(bool),
        }

        impl ::protobuf::Oneof for Row_status {
        }

        impl ::protobuf::OneofFull for Row_status {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::CellChunk as ::protobuf::MessageFull>::descriptor().oneof_by_name("row_status").unwrap()).clone()
            }
        }

        impl Row_status {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Row_status>("row_status")
            }
        }
    }
}

///  Request message for Bigtable.SampleRowKeys.
// @@protoc_insertion_point(message:google.bigtable.v2.SampleRowKeysRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SampleRowKeysRequest {
    // message fields
    ///  Required. The unique name of the table from which to sample row keys.
    ///  Values are of the form
    ///  `projects/<project>/instances/<instance>/tables/<table>`.
    // @@protoc_insertion_point(field:google.bigtable.v2.SampleRowKeysRequest.table_name)
    pub table_name: ::std::string::String,
    ///  This value specifies routing for replication. If not specified, the
    ///  "default" application profile will be used.
    // @@protoc_insertion_point(field:google.bigtable.v2.SampleRowKeysRequest.app_profile_id)
    pub app_profile_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.SampleRowKeysRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SampleRowKeysRequest {
    fn default() -> &'a SampleRowKeysRequest {
        <SampleRowKeysRequest as ::protobuf::Message>::default_instance()
    }
}

impl SampleRowKeysRequest {
    pub fn new() -> SampleRowKeysRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &SampleRowKeysRequest| { &m.table_name },
            |m: &mut SampleRowKeysRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_profile_id",
            |m: &SampleRowKeysRequest| { &m.app_profile_id },
            |m: &mut SampleRowKeysRequest| { &mut m.app_profile_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SampleRowKeysRequest>(
            "SampleRowKeysRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SampleRowKeysRequest {
    const NAME: &'static str = "SampleRowKeysRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.table_name = is.read_string()?;
                },
                18 => {
                    self.app_profile_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.app_profile_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(2, &self.app_profile_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SampleRowKeysRequest {
        SampleRowKeysRequest::new()
    }

    fn clear(&mut self) {
        self.table_name.clear();
        self.app_profile_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SampleRowKeysRequest {
        static instance: SampleRowKeysRequest = SampleRowKeysRequest {
            table_name: ::std::string::String::new(),
            app_profile_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SampleRowKeysRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SampleRowKeysRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SampleRowKeysRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SampleRowKeysRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response message for Bigtable.SampleRowKeys.
// @@protoc_insertion_point(message:google.bigtable.v2.SampleRowKeysResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SampleRowKeysResponse {
    // message fields
    ///  Sorted streamed sequence of sample row keys in the table. The table might
    ///  have contents before the first row key in the list and after the last one,
    ///  but a key containing the empty string indicates "end of table" and will be
    ///  the last response given, if present.
    ///  Note that row keys in this list may not have ever been written to or read
    ///  from, and users should therefore not make any assumptions about the row key
    ///  structure that are specific to their use case.
    ///
    ///  Classified as IDENTIFYING_ID to provide context around data accesses for
    ///  auditing systems.
    // @@protoc_insertion_point(field:google.bigtable.v2.SampleRowKeysResponse.row_key)
    pub row_key: ::std::vec::Vec<u8>,
    ///  Approximate total storage space used by all rows in the table which precede
    ///  `row_key`. Buffering the contents of all rows between two subsequent
    ///  samples would require space roughly equal to the difference in their
    ///  `offset_bytes` fields.
    // @@protoc_insertion_point(field:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
    pub offset_bytes: i64,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.SampleRowKeysResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SampleRowKeysResponse {
    fn default() -> &'a SampleRowKeysResponse {
        <SampleRowKeysResponse as ::protobuf::Message>::default_instance()
    }
}

impl SampleRowKeysResponse {
    pub fn new() -> SampleRowKeysResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row_key",
            |m: &SampleRowKeysResponse| { &m.row_key },
            |m: &mut SampleRowKeysResponse| { &mut m.row_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset_bytes",
            |m: &SampleRowKeysResponse| { &m.offset_bytes },
            |m: &mut SampleRowKeysResponse| { &mut m.offset_bytes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SampleRowKeysResponse>(
            "SampleRowKeysResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SampleRowKeysResponse {
    const NAME: &'static str = "SampleRowKeysResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.row_key = is.read_bytes()?;
                },
                16 => {
                    self.offset_bytes = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.row_key);
        }
        if self.offset_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.offset_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.row_key.is_empty() {
            os.write_bytes(1, &self.row_key)?;
        }
        if self.offset_bytes != 0 {
            os.write_int64(2, self.offset_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SampleRowKeysResponse {
        SampleRowKeysResponse::new()
    }

    fn clear(&mut self) {
        self.row_key.clear();
        self.offset_bytes = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SampleRowKeysResponse {
        static instance: SampleRowKeysResponse = SampleRowKeysResponse {
            row_key: ::std::vec::Vec::new(),
            offset_bytes: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SampleRowKeysResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SampleRowKeysResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SampleRowKeysResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SampleRowKeysResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Request message for Bigtable.MutateRow.
// @@protoc_insertion_point(message:google.bigtable.v2.MutateRowRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MutateRowRequest {
    // message fields
    ///  Required. The unique name of the table to which the mutation should be applied.
    ///  Values are of the form
    ///  `projects/<project>/instances/<instance>/tables/<table>`.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowRequest.table_name)
    pub table_name: ::std::string::String,
    ///  This value specifies routing for replication. If not specified, the
    ///  "default" application profile will be used.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowRequest.app_profile_id)
    pub app_profile_id: ::std::string::String,
    ///  Required. The key of the row to which the mutation should be applied.
    ///
    ///  Classified as IDENTIFYING_ID to provide context around data accesses for
    ///  auditing systems.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowRequest.row_key)
    pub row_key: ::std::vec::Vec<u8>,
    ///  Required. Changes to be atomically applied to the specified row. Entries are applied
    ///  in order, meaning that earlier mutations can be masked by later ones.
    ///  Must contain at least one entry and at most 100000.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowRequest.mutations)
    pub mutations: ::std::vec::Vec<super::data::Mutation>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.MutateRowRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MutateRowRequest {
    fn default() -> &'a MutateRowRequest {
        <MutateRowRequest as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowRequest {
    pub fn new() -> MutateRowRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &MutateRowRequest| { &m.table_name },
            |m: &mut MutateRowRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_profile_id",
            |m: &MutateRowRequest| { &m.app_profile_id },
            |m: &mut MutateRowRequest| { &mut m.app_profile_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row_key",
            |m: &MutateRowRequest| { &m.row_key },
            |m: &mut MutateRowRequest| { &mut m.row_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mutations",
            |m: &MutateRowRequest| { &m.mutations },
            |m: &mut MutateRowRequest| { &mut m.mutations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MutateRowRequest>(
            "MutateRowRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MutateRowRequest {
    const NAME: &'static str = "MutateRowRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.table_name = is.read_string()?;
                },
                34 => {
                    self.app_profile_id = is.read_string()?;
                },
                18 => {
                    self.row_key = is.read_bytes()?;
                },
                26 => {
                    self.mutations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.app_profile_id);
        }
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.row_key);
        }
        for value in &self.mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(4, &self.app_profile_id)?;
        }
        if !self.row_key.is_empty() {
            os.write_bytes(2, &self.row_key)?;
        }
        for v in &self.mutations {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MutateRowRequest {
        MutateRowRequest::new()
    }

    fn clear(&mut self) {
        self.table_name.clear();
        self.app_profile_id.clear();
        self.row_key.clear();
        self.mutations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MutateRowRequest {
        static instance: MutateRowRequest = MutateRowRequest {
            table_name: ::std::string::String::new(),
            app_profile_id: ::std::string::String::new(),
            row_key: ::std::vec::Vec::new(),
            mutations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MutateRowRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MutateRowRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MutateRowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response message for Bigtable.MutateRow.
// @@protoc_insertion_point(message:google.bigtable.v2.MutateRowResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MutateRowResponse {
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.MutateRowResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MutateRowResponse {
    fn default() -> &'a MutateRowResponse {
        <MutateRowResponse as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowResponse {
    pub fn new() -> MutateRowResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MutateRowResponse>(
            "MutateRowResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MutateRowResponse {
    const NAME: &'static str = "MutateRowResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MutateRowResponse {
        MutateRowResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MutateRowResponse {
        static instance: MutateRowResponse = MutateRowResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MutateRowResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MutateRowResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MutateRowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Request message for BigtableService.MutateRows.
// @@protoc_insertion_point(message:google.bigtable.v2.MutateRowsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MutateRowsRequest {
    // message fields
    ///  Required. The unique name of the table to which the mutations should be applied.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsRequest.table_name)
    pub table_name: ::std::string::String,
    ///  This value specifies routing for replication. If not specified, the
    ///  "default" application profile will be used.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsRequest.app_profile_id)
    pub app_profile_id: ::std::string::String,
    ///  Required. The row keys and corresponding mutations to be applied in bulk.
    ///  Each entry is applied as an atomic mutation, but the entries may be
    ///  applied in arbitrary order (even between entries for the same row).
    ///  At least one entry must be specified, and in total the entries can
    ///  contain at most 100000 mutations.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsRequest.entries)
    pub entries: ::std::vec::Vec<mutate_rows_request::Entry>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.MutateRowsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MutateRowsRequest {
    fn default() -> &'a MutateRowsRequest {
        <MutateRowsRequest as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowsRequest {
    pub fn new() -> MutateRowsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &MutateRowsRequest| { &m.table_name },
            |m: &mut MutateRowsRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_profile_id",
            |m: &MutateRowsRequest| { &m.app_profile_id },
            |m: &mut MutateRowsRequest| { &mut m.app_profile_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &MutateRowsRequest| { &m.entries },
            |m: &mut MutateRowsRequest| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MutateRowsRequest>(
            "MutateRowsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MutateRowsRequest {
    const NAME: &'static str = "MutateRowsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.table_name = is.read_string()?;
                },
                26 => {
                    self.app_profile_id = is.read_string()?;
                },
                18 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.app_profile_id);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(3, &self.app_profile_id)?;
        }
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MutateRowsRequest {
        MutateRowsRequest::new()
    }

    fn clear(&mut self) {
        self.table_name.clear();
        self.app_profile_id.clear();
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MutateRowsRequest {
        static instance: MutateRowsRequest = MutateRowsRequest {
            table_name: ::std::string::String::new(),
            app_profile_id: ::std::string::String::new(),
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MutateRowsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MutateRowsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MutateRowsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MutateRowsRequest`
pub mod mutate_rows_request {
    ///  A mutation for a given row.
    // @@protoc_insertion_point(message:google.bigtable.v2.MutateRowsRequest.Entry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Entry {
        // message fields
        ///  The key of the row to which the `mutations` should be applied.
        ///
        ///  Classified as IDENTIFYING_ID to provide context around data accesses for
        ///  auditing systems.
        // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
        pub row_key: ::std::vec::Vec<u8>,
        ///  Required. Changes to be atomically applied to the specified row. Mutations are
        ///  applied in order, meaning that earlier mutations can be masked by
        ///  later ones.
        ///  You must specify at least one mutation.
        // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
        pub mutations: ::std::vec::Vec<super::super::data::Mutation>,
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.v2.MutateRowsRequest.Entry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entry {
        fn default() -> &'a Entry {
            <Entry as ::protobuf::Message>::default_instance()
        }
    }

    impl Entry {
        pub fn new() -> Entry {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "row_key",
                |m: &Entry| { &m.row_key },
                |m: &mut Entry| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "mutations",
                |m: &Entry| { &m.mutations },
                |m: &mut Entry| { &mut m.mutations },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entry>(
                "MutateRowsRequest.Entry",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Entry {
        const NAME: &'static str = "Entry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.row_key = is.read_bytes()?;
                    },
                    18 => {
                        self.mutations.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.row_key.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.row_key);
            }
            for value in &self.mutations {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.row_key.is_empty() {
                os.write_bytes(1, &self.row_key)?;
            }
            for v in &self.mutations {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entry {
            Entry::new()
        }

        fn clear(&mut self) {
            self.row_key.clear();
            self.mutations.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entry {
            static instance: Entry = Entry {
                row_key: ::std::vec::Vec::new(),
                mutations: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Entry {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MutateRowsRequest.Entry").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Entry {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Entry {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Response message for BigtableService.MutateRows.
// @@protoc_insertion_point(message:google.bigtable.v2.MutateRowsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MutateRowsResponse {
    // message fields
    ///  One or more results for Entries from the batch request.
    // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsResponse.entries)
    pub entries: ::std::vec::Vec<mutate_rows_response::Entry>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.MutateRowsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MutateRowsResponse {
    fn default() -> &'a MutateRowsResponse {
        <MutateRowsResponse as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowsResponse {
    pub fn new() -> MutateRowsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &MutateRowsResponse| { &m.entries },
            |m: &mut MutateRowsResponse| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MutateRowsResponse>(
            "MutateRowsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MutateRowsResponse {
    const NAME: &'static str = "MutateRowsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MutateRowsResponse {
        MutateRowsResponse::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MutateRowsResponse {
        static instance: MutateRowsResponse = MutateRowsResponse {
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MutateRowsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MutateRowsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MutateRowsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MutateRowsResponse`
pub mod mutate_rows_response {
    ///  The result of applying a passed mutation in the original request.
    // @@protoc_insertion_point(message:google.bigtable.v2.MutateRowsResponse.Entry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Entry {
        // message fields
        ///  The index into the original request's `entries` list of the Entry
        ///  for which a result is being reported.
        // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsResponse.Entry.index)
        pub index: i64,
        ///  The result of the request Entry identified by `index`.
        ///  Depending on how requests are batched during execution, it is possible
        ///  for one Entry to fail due to an error with another Entry. In the event
        ///  that this occurs, the same error will be reported for both entries.
        // @@protoc_insertion_point(field:google.bigtable.v2.MutateRowsResponse.Entry.status)
        pub status: ::protobuf::MessageField<super::super::status::Status>,
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.v2.MutateRowsResponse.Entry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entry {
        fn default() -> &'a Entry {
            <Entry as ::protobuf::Message>::default_instance()
        }
    }

    impl Entry {
        pub fn new() -> Entry {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "index",
                |m: &Entry| { &m.index },
                |m: &mut Entry| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::status::Status>(
                "status",
                |m: &Entry| { &m.status },
                |m: &mut Entry| { &mut m.status },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entry>(
                "MutateRowsResponse.Entry",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Entry {
        const NAME: &'static str = "Entry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.index = is.read_int64()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.index != 0 {
                my_size += ::protobuf::rt::int64_size(1, self.index);
            }
            if let Some(v) = self.status.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.index != 0 {
                os.write_int64(1, self.index)?;
            }
            if let Some(v) = self.status.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entry {
            Entry::new()
        }

        fn clear(&mut self) {
            self.index = 0;
            self.status.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entry {
            static instance: Entry = Entry {
                index: 0,
                status: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Entry {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MutateRowsResponse.Entry").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Entry {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Entry {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Request message for Bigtable.CheckAndMutateRow.
// @@protoc_insertion_point(message:google.bigtable.v2.CheckAndMutateRowRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CheckAndMutateRowRequest {
    // message fields
    ///  Required. The unique name of the table to which the conditional mutation should be
    ///  applied.
    ///  Values are of the form
    ///  `projects/<project>/instances/<instance>/tables/<table>`.
    // @@protoc_insertion_point(field:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
    pub table_name: ::std::string::String,
    ///  This value specifies routing for replication. If not specified, the
    ///  "default" application profile will be used.
    // @@protoc_insertion_point(field:google.bigtable.v2.CheckAndMutateRowRequest.app_profile_id)
    pub app_profile_id: ::std::string::String,
    ///  Required. The key of the row to which the conditional mutation should be applied.
    ///
    ///  Classified as IDENTIFYING_ID to provide context around data accesses for
    ///  auditing systems.
    // @@protoc_insertion_point(field:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
    pub row_key: ::std::vec::Vec<u8>,
    ///  The filter to be applied to the contents of the specified row. Depending
    ///  on whether or not any results are yielded, either `true_mutations` or
    ///  `false_mutations` will be executed. If unset, checks that the row contains
    ///  any values at all.
    // @@protoc_insertion_point(field:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
    pub predicate_filter: ::protobuf::MessageField<super::data::RowFilter>,
    ///  Changes to be atomically applied to the specified row if `predicate_filter`
    ///  yields at least one cell when applied to `row_key`. Entries are applied in
    ///  order, meaning that earlier mutations can be masked by later ones.
    ///  Must contain at least one entry if `false_mutations` is empty, and at most
    ///  100000.
    // @@protoc_insertion_point(field:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
    pub true_mutations: ::std::vec::Vec<super::data::Mutation>,
    ///  Changes to be atomically applied to the specified row if `predicate_filter`
    ///  does not yield any cells when applied to `row_key`. Entries are applied in
    ///  order, meaning that earlier mutations can be masked by later ones.
    ///  Must contain at least one entry if `true_mutations` is empty, and at most
    ///  100000.
    // @@protoc_insertion_point(field:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
    pub false_mutations: ::std::vec::Vec<super::data::Mutation>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.CheckAndMutateRowRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckAndMutateRowRequest {
    fn default() -> &'a CheckAndMutateRowRequest {
        <CheckAndMutateRowRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckAndMutateRowRequest {
    pub fn new() -> CheckAndMutateRowRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &CheckAndMutateRowRequest| { &m.table_name },
            |m: &mut CheckAndMutateRowRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_profile_id",
            |m: &CheckAndMutateRowRequest| { &m.app_profile_id },
            |m: &mut CheckAndMutateRowRequest| { &mut m.app_profile_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row_key",
            |m: &CheckAndMutateRowRequest| { &m.row_key },
            |m: &mut CheckAndMutateRowRequest| { &mut m.row_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data::RowFilter>(
            "predicate_filter",
            |m: &CheckAndMutateRowRequest| { &m.predicate_filter },
            |m: &mut CheckAndMutateRowRequest| { &mut m.predicate_filter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "true_mutations",
            |m: &CheckAndMutateRowRequest| { &m.true_mutations },
            |m: &mut CheckAndMutateRowRequest| { &mut m.true_mutations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "false_mutations",
            |m: &CheckAndMutateRowRequest| { &m.false_mutations },
            |m: &mut CheckAndMutateRowRequest| { &mut m.false_mutations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckAndMutateRowRequest>(
            "CheckAndMutateRowRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckAndMutateRowRequest {
    const NAME: &'static str = "CheckAndMutateRowRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.table_name = is.read_string()?;
                },
                58 => {
                    self.app_profile_id = is.read_string()?;
                },
                18 => {
                    self.row_key = is.read_bytes()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.predicate_filter)?;
                },
                34 => {
                    self.true_mutations.push(is.read_message()?);
                },
                42 => {
                    self.false_mutations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.app_profile_id);
        }
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.row_key);
        }
        if let Some(v) = self.predicate_filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.true_mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.false_mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(7, &self.app_profile_id)?;
        }
        if !self.row_key.is_empty() {
            os.write_bytes(2, &self.row_key)?;
        }
        if let Some(v) = self.predicate_filter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.true_mutations {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.false_mutations {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckAndMutateRowRequest {
        CheckAndMutateRowRequest::new()
    }

    fn clear(&mut self) {
        self.table_name.clear();
        self.app_profile_id.clear();
        self.row_key.clear();
        self.predicate_filter.clear();
        self.true_mutations.clear();
        self.false_mutations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckAndMutateRowRequest {
        static instance: CheckAndMutateRowRequest = CheckAndMutateRowRequest {
            table_name: ::std::string::String::new(),
            app_profile_id: ::std::string::String::new(),
            row_key: ::std::vec::Vec::new(),
            predicate_filter: ::protobuf::MessageField::none(),
            true_mutations: ::std::vec::Vec::new(),
            false_mutations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckAndMutateRowRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckAndMutateRowRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckAndMutateRowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAndMutateRowRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response message for Bigtable.CheckAndMutateRow.
// @@protoc_insertion_point(message:google.bigtable.v2.CheckAndMutateRowResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CheckAndMutateRowResponse {
    // message fields
    ///  Whether or not the request's `predicate_filter` yielded any results for
    ///  the specified row.
    // @@protoc_insertion_point(field:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
    pub predicate_matched: bool,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.CheckAndMutateRowResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckAndMutateRowResponse {
    fn default() -> &'a CheckAndMutateRowResponse {
        <CheckAndMutateRowResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckAndMutateRowResponse {
    pub fn new() -> CheckAndMutateRowResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "predicate_matched",
            |m: &CheckAndMutateRowResponse| { &m.predicate_matched },
            |m: &mut CheckAndMutateRowResponse| { &mut m.predicate_matched },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckAndMutateRowResponse>(
            "CheckAndMutateRowResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckAndMutateRowResponse {
    const NAME: &'static str = "CheckAndMutateRowResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.predicate_matched = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.predicate_matched != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.predicate_matched != false {
            os.write_bool(1, self.predicate_matched)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckAndMutateRowResponse {
        CheckAndMutateRowResponse::new()
    }

    fn clear(&mut self) {
        self.predicate_matched = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckAndMutateRowResponse {
        static instance: CheckAndMutateRowResponse = CheckAndMutateRowResponse {
            predicate_matched: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckAndMutateRowResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckAndMutateRowResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckAndMutateRowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAndMutateRowResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Request message for Bigtable.ReadModifyWriteRow.
// @@protoc_insertion_point(message:google.bigtable.v2.ReadModifyWriteRowRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadModifyWriteRowRequest {
    // message fields
    ///  Required. The unique name of the table to which the read/modify/write rules should be
    ///  applied.
    ///  Values are of the form
    ///  `projects/<project>/instances/<instance>/tables/<table>`.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
    pub table_name: ::std::string::String,
    ///  This value specifies routing for replication. If not specified, the
    ///  "default" application profile will be used.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadModifyWriteRowRequest.app_profile_id)
    pub app_profile_id: ::std::string::String,
    ///  Required. The key of the row to which the read/modify/write rules should be applied.
    ///
    ///  Classified as IDENTIFYING_ID to provide context around data accesses for
    ///  auditing systems.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
    pub row_key: ::std::vec::Vec<u8>,
    ///  Required. Rules specifying how the specified row's contents are to be transformed
    ///  into writes. Entries are applied in order, meaning that earlier rules will
    ///  affect the results of later ones.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
    pub rules: ::std::vec::Vec<super::data::ReadModifyWriteRule>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.ReadModifyWriteRowRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadModifyWriteRowRequest {
    fn default() -> &'a ReadModifyWriteRowRequest {
        <ReadModifyWriteRowRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadModifyWriteRowRequest {
    pub fn new() -> ReadModifyWriteRowRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_name",
            |m: &ReadModifyWriteRowRequest| { &m.table_name },
            |m: &mut ReadModifyWriteRowRequest| { &mut m.table_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_profile_id",
            |m: &ReadModifyWriteRowRequest| { &m.app_profile_id },
            |m: &mut ReadModifyWriteRowRequest| { &mut m.app_profile_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row_key",
            |m: &ReadModifyWriteRowRequest| { &m.row_key },
            |m: &mut ReadModifyWriteRowRequest| { &mut m.row_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &ReadModifyWriteRowRequest| { &m.rules },
            |m: &mut ReadModifyWriteRowRequest| { &mut m.rules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadModifyWriteRowRequest>(
            "ReadModifyWriteRowRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadModifyWriteRowRequest {
    const NAME: &'static str = "ReadModifyWriteRowRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.table_name = is.read_string()?;
                },
                34 => {
                    self.app_profile_id = is.read_string()?;
                },
                18 => {
                    self.row_key = is.read_bytes()?;
                },
                26 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.app_profile_id);
        }
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.row_key);
        }
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(4, &self.app_profile_id)?;
        }
        if !self.row_key.is_empty() {
            os.write_bytes(2, &self.row_key)?;
        }
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadModifyWriteRowRequest {
        ReadModifyWriteRowRequest::new()
    }

    fn clear(&mut self) {
        self.table_name.clear();
        self.app_profile_id.clear();
        self.row_key.clear();
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadModifyWriteRowRequest {
        static instance: ReadModifyWriteRowRequest = ReadModifyWriteRowRequest {
            table_name: ::std::string::String::new(),
            app_profile_id: ::std::string::String::new(),
            row_key: ::std::vec::Vec::new(),
            rules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadModifyWriteRowRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadModifyWriteRowRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadModifyWriteRowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadModifyWriteRowRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Response message for Bigtable.ReadModifyWriteRow.
// @@protoc_insertion_point(message:google.bigtable.v2.ReadModifyWriteRowResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadModifyWriteRowResponse {
    // message fields
    ///  A Row containing the new contents of all cells modified by the request.
    // @@protoc_insertion_point(field:google.bigtable.v2.ReadModifyWriteRowResponse.row)
    pub row: ::protobuf::MessageField<super::data::Row>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.v2.ReadModifyWriteRowResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadModifyWriteRowResponse {
    fn default() -> &'a ReadModifyWriteRowResponse {
        <ReadModifyWriteRowResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadModifyWriteRowResponse {
    pub fn new() -> ReadModifyWriteRowResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data::Row>(
            "row",
            |m: &ReadModifyWriteRowResponse| { &m.row },
            |m: &mut ReadModifyWriteRowResponse| { &mut m.row },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadModifyWriteRowResponse>(
            "ReadModifyWriteRowResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadModifyWriteRowResponse {
    const NAME: &'static str = "ReadModifyWriteRowResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.row)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.row.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.row.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadModifyWriteRowResponse {
        ReadModifyWriteRowResponse::new()
    }

    fn clear(&mut self) {
        self.row.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadModifyWriteRowResponse {
        static instance: ReadModifyWriteRowResponse = ReadModifyWriteRowResponse {
            row: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadModifyWriteRowResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadModifyWriteRowResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadModifyWriteRowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadModifyWriteRowResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!google/bigtable/v2/bigtable.proto\x12\x12google.bigtable.v2\x1a\x1cgo\
    ogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/\
    api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\x1dgoogle/\
    bigtable/v2/data.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x17goog\
    le/rpc/status.proto\"\x83\x02\n\x0fReadRowsRequest\x12D\n\ntable_name\
    \x18\x01\x20\x01(\tR\ttableNameB%\xfaA\x1f\n\x1dbigtable.googleapis.com/\
    Table\xe0A\x02\x12$\n\x0eapp_profile_id\x18\x05\x20\x01(\tR\x0cappProfil\
    eId\x12.\n\x04rows\x18\x02\x20\x01(\x0b2\x1a.google.bigtable.v2.RowSetR\
    \x04rows\x125\n\x06filter\x18\x03\x20\x01(\x0b2\x1d.google.bigtable.v2.R\
    owFilterR\x06filter\x12\x1d\n\nrows_limit\x18\x04\x20\x01(\x03R\trowsLim\
    it\"\xf2\x03\n\x10ReadRowsResponse\x12F\n\x06chunks\x18\x01\x20\x03(\x0b\
    2..google.bigtable.v2.ReadRowsResponse.CellChunkR\x06chunks\x12/\n\x14la\
    st_scanned_row_key\x18\x02\x20\x01(\x0cR\x11lastScannedRowKey\x1a\xe4\
    \x02\n\tCellChunk\x12\x17\n\x07row_key\x18\x01\x20\x01(\x0cR\x06rowKey\
    \x12=\n\x0bfamily_name\x18\x02\x20\x01(\x0b2\x1c.google.protobuf.StringV\
    alueR\nfamilyName\x129\n\tqualifier\x18\x03\x20\x01(\x0b2\x1b.google.pro\
    tobuf.BytesValueR\tqualifier\x12)\n\x10timestamp_micros\x18\x04\x20\x01(\
    \x03R\x0ftimestampMicros\x12\x16\n\x06labels\x18\x05\x20\x03(\tR\x06labe\
    ls\x12\x14\n\x05value\x18\x06\x20\x01(\x0cR\x05value\x12\x1d\n\nvalue_si\
    ze\x18\x07\x20\x01(\x05R\tvalueSize\x12\x1d\n\treset_row\x18\x08\x20\x01\
    (\x08H\0R\x08resetRow\x12\x1f\n\ncommit_row\x18\t\x20\x01(\x08H\0R\tcomm\
    itRowB\x0c\n\nrow_status\"\x82\x01\n\x14SampleRowKeysRequest\x12D\n\ntab\
    le_name\x18\x01\x20\x01(\tR\ttableNameB%\xfaA\x1f\n\x1dbigtable.googleap\
    is.com/Table\xe0A\x02\x12$\n\x0eapp_profile_id\x18\x02\x20\x01(\tR\x0cap\
    pProfileId\"S\n\x15SampleRowKeysResponse\x12\x17\n\x07row_key\x18\x01\
    \x20\x01(\x0cR\x06rowKey\x12!\n\x0coffset_bytes\x18\x02\x20\x01(\x03R\
    \x0boffsetBytes\"\xdd\x01\n\x10MutateRowRequest\x12D\n\ntable_name\x18\
    \x01\x20\x01(\tR\ttableNameB%\xfaA\x1f\n\x1dbigtable.googleapis.com/Tabl\
    e\xe0A\x02\x12$\n\x0eapp_profile_id\x18\x04\x20\x01(\tR\x0cappProfileId\
    \x12\x1c\n\x07row_key\x18\x02\x20\x01(\x0cR\x06rowKeyB\x03\xe0A\x02\x12?\
    \n\tmutations\x18\x03\x20\x03(\x0b2\x1c.google.bigtable.v2.MutationR\tmu\
    tationsB\x03\xe0A\x02\"\x13\n\x11MutateRowResponse\"\xae\x02\n\x11Mutate\
    RowsRequest\x12D\n\ntable_name\x18\x01\x20\x01(\tR\ttableNameB%\xfaA\x1f\
    \n\x1dbigtable.googleapis.com/Table\xe0A\x02\x12$\n\x0eapp_profile_id\
    \x18\x03\x20\x01(\tR\x0cappProfileId\x12J\n\x07entries\x18\x02\x20\x03(\
    \x0b2+.google.bigtable.v2.MutateRowsRequest.EntryR\x07entriesB\x03\xe0A\
    \x02\x1aa\n\x05Entry\x12\x17\n\x07row_key\x18\x01\x20\x01(\x0cR\x06rowKe\
    y\x12?\n\tmutations\x18\x02\x20\x03(\x0b2\x1c.google.bigtable.v2.Mutatio\
    nR\tmutationsB\x03\xe0A\x02\"\xa7\x01\n\x12MutateRowsResponse\x12F\n\x07\
    entries\x18\x01\x20\x03(\x0b2,.google.bigtable.v2.MutateRowsResponse.Ent\
    ryR\x07entries\x1aI\n\x05Entry\x12\x14\n\x05index\x18\x01\x20\x01(\x03R\
    \x05index\x12*\n\x06status\x18\x02\x20\x01(\x0b2\x12.google.rpc.StatusR\
    \x06status\"\xfa\x02\n\x18CheckAndMutateRowRequest\x12D\n\ntable_name\
    \x18\x01\x20\x01(\tR\ttableNameB%\xfaA\x1f\n\x1dbigtable.googleapis.com/\
    Table\xe0A\x02\x12$\n\x0eapp_profile_id\x18\x07\x20\x01(\tR\x0cappProfil\
    eId\x12\x1c\n\x07row_key\x18\x02\x20\x01(\x0cR\x06rowKeyB\x03\xe0A\x02\
    \x12H\n\x10predicate_filter\x18\x06\x20\x01(\x0b2\x1d.google.bigtable.v2\
    .RowFilterR\x0fpredicateFilter\x12C\n\x0etrue_mutations\x18\x04\x20\x03(\
    \x0b2\x1c.google.bigtable.v2.MutationR\rtrueMutations\x12E\n\x0ffalse_mu\
    tations\x18\x05\x20\x03(\x0b2\x1c.google.bigtable.v2.MutationR\x0efalseM\
    utations\"H\n\x19CheckAndMutateRowResponse\x12+\n\x11predicate_matched\
    \x18\x01\x20\x01(\x08R\x10predicateMatched\"\xe9\x01\n\x19ReadModifyWrit\
    eRowRequest\x12D\n\ntable_name\x18\x01\x20\x01(\tR\ttableNameB%\xfaA\x1f\
    \n\x1dbigtable.googleapis.com/Table\xe0A\x02\x12$\n\x0eapp_profile_id\
    \x18\x04\x20\x01(\tR\x0cappProfileId\x12\x1c\n\x07row_key\x18\x02\x20\
    \x01(\x0cR\x06rowKeyB\x03\xe0A\x02\x12B\n\x05rules\x18\x03\x20\x03(\x0b2\
    '.google.bigtable.v2.ReadModifyWriteRuleR\x05rulesB\x03\xe0A\x02\"G\n\
    \x1aReadModifyWriteRowResponse\x12)\n\x03row\x18\x01\x20\x01(\x0b2\x17.g\
    oogle.bigtable.v2.RowR\x03row2\xc4\x0e\n\x08Bigtable\x12\xc6\x01\n\x08Re\
    adRows\x12#.google.bigtable.v2.ReadRowsRequest\x1a$.google.bigtable.v2.R\
    eadRowsResponse\"m\x82\xd3\xe4\x93\x02>\"9/v2/{table_name=projects/*/ins\
    tances/*/tables/*}:readRows:\x01*\xdaA\ntable_name\xdaA\x19table_name,ap\
    p_profile_id0\x01\x12\xd7\x01\n\rSampleRowKeys\x12(.google.bigtable.v2.S\
    ampleRowKeysRequest\x1a).google.bigtable.v2.SampleRowKeysResponse\"o\x82\
    \xd3\xe4\x93\x02@\x12>/v2/{table_name=projects/*/instances/*/tables/*}:s\
    ampleRowKeys\xdaA\ntable_name\xdaA\x19table_name,app_profile_id0\x01\x12\
    \xed\x01\n\tMutateRow\x12$.google.bigtable.v2.MutateRowRequest\x1a%.goog\
    le.bigtable.v2.MutateRowResponse\"\x92\x01\x82\xd3\xe4\x93\x02?\":/v2/{t\
    able_name=projects/*/instances/*/tables/*}:mutateRow:\x01*\xdaA\x1ctable\
    _name,row_key,mutations\xdaA+table_name,row_key,mutations,app_profile_id\
    \x12\xde\x01\n\nMutateRows\x12%.google.bigtable.v2.MutateRowsRequest\x1a\
    &.google.bigtable.v2.MutateRowsResponse\"\x7f\x82\xd3\xe4\x93\x02@\";/v2\
    /{table_name=projects/*/instances/*/tables/*}:mutateRows:\x01*\xdaA\x12t\
    able_name,entries\xdaA!table_name,entries,app_profile_id0\x01\x12\xd9\
    \x02\n\x11CheckAndMutateRow\x12,.google.bigtable.v2.CheckAndMutateRowReq\
    uest\x1a-.google.bigtable.v2.CheckAndMutateRowResponse\"\xe6\x01\x82\xd3\
    \xe4\x93\x02G\"B/v2/{table_name=projects/*/instances/*/tables/*}:checkAn\
    dMutateRow:\x01*\xdaABtable_name,row_key,predicate_filter,true_mutations\
    ,false_mutations\xdaAQtable_name,row_key,predicate_filter,true_mutations\
    ,false_mutations,app_profile_id\x12\x89\x02\n\x12ReadModifyWriteRow\x12-\
    .google.bigtable.v2.ReadModifyWriteRowRequest\x1a..google.bigtable.v2.Re\
    adModifyWriteRowResponse\"\x93\x01\x82\xd3\xe4\x93\x02H\"C/v2/{table_nam\
    e=projects/*/instances/*/tables/*}:readModifyWriteRow:\x01*\xdaA\x18tabl\
    e_name,row_key,rules\xdaA'table_name,row_key,rules,app_profile_id\x1a\
    \xdb\x02\xd2A\xbd\x02https://www.googleapis.com/auth/bigtable.data,https\
    ://www.googleapis.com/auth/bigtable.data.readonly,https://www.googleapis\
    .com/auth/cloud-bigtable.data,https://www.googleapis.com/auth/cloud-bigt\
    able.data.readonly,https://www.googleapis.com/auth/cloud-platform,https:\
    //www.googleapis.com/auth/cloud-platform.read-only\xcaA\x17bigtable.goog\
    leapis.comB\xf5\x01\n\x16com.google.bigtable.v2B\rBigtableProtoP\x01Z:go\
    ogle.golang.org/genproto/googleapis/bigtable/v2;bigtable\xaa\x02\x18Goog\
    le.Cloud.Bigtable.V2\xca\x02\x18Google\\Cloud\\Bigtable\\V2\xeaAW\n\x1db\
    igtable.googleapis.com/Table\x126projects/{project}/instances/{instance}\
    /tables/{table}J\xd2\x81\x01\n\x07\x12\x05\x0e\0\xbb\x03\x01\n\xbd\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202019\x20Google\x20LL\
    C.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x1b\n\t\n\x02\x03\0\x12\
    \x03\x12\0&\n\t\n\x02\x03\x01\x12\x03\x13\0!\n\t\n\x02\x03\x02\x12\x03\
    \x14\0)\n\t\n\x02\x03\x03\x12\x03\x15\0#\n\t\n\x02\x03\x04\x12\x03\x16\0\
    '\n\t\n\x02\x03\x05\x12\x03\x17\0(\n\t\n\x02\x03\x06\x12\x03\x18\0!\n\
    \x08\n\x01\x08\x12\x03\x1a\05\n\t\n\x02\x08%\x12\x03\x1a\05\n\x08\n\x01\
    \x08\x12\x03\x1b\0Q\n\t\n\x02\x08\x0b\x12\x03\x1b\0Q\n\x08\n\x01\x08\x12\
    \x03\x1c\0\"\n\t\n\x02\x08\n\x12\x03\x1c\0\"\n\x08\n\x01\x08\x12\x03\x1d\
    \0.\n\t\n\x02\x08\x08\x12\x03\x1d\0.\n\x08\n\x01\x08\x12\x03\x1e\0/\n\t\
    \n\x02\x08\x01\x12\x03\x1e\0/\n\x08\n\x01\x08\x12\x03\x1f\05\n\t\n\x02\
    \x08)\x12\x03\x1f\05\n\t\n\x01\x08\x12\x04\x20\0#\x02\n\x0c\n\x04\x08\
    \x9d\x08\0\x12\x04\x20\0#\x02\nO\n\x02\x06\0\x12\x04&\0x\x01\x1aC\x20Ser\
    vice\x20for\x20reading\x20from\x20and\x20writing\x20to\x20existing\x20Bi\
    gtable\x20tables.\n\n\n\n\x03\x06\0\x01\x12\x03&\x08\x10\n\n\n\x03\x06\0\
    \x03\x12\x03'\x02?\n\x0c\n\x05\x06\0\x03\x99\x08\x12\x03'\x02?\n\x0b\n\
    \x03\x06\0\x03\x12\x04(\x02.A\n\r\n\x05\x06\0\x03\x9a\x08\x12\x04(\x02.A\
    \n\xc1\x02\n\x04\x06\0\x02\0\x12\x045\x02<\x03\x1a\xb2\x02\x20Streams\
    \x20back\x20the\x20contents\x20of\x20all\x20requested\x20rows\x20in\x20k\
    ey\x20order,\x20optionally\n\x20applying\x20the\x20same\x20Reader\x20fil\
    ter\x20to\x20each.\x20Depending\x20on\x20their\x20size,\n\x20rows\x20and\
    \x20cells\x20may\x20be\x20broken\x20up\x20across\x20multiple\x20response\
    s,\x20but\n\x20atomicity\x20of\x20each\x20row\x20will\x20still\x20be\x20\
    preserved.\x20See\x20the\n\x20ReadRowsResponse\x20documentation\x20for\
    \x20details.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x035\x06\x0e\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x035\x0f\x1e\n\x0c\n\x05\x06\0\x02\0\x06\x12\x035)/\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x0350@\n\r\n\x05\x06\0\x02\0\x04\x12\
    \x046\x049\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x046\x049\x06\
    \n\x0c\n\x05\x06\0\x02\0\x04\x12\x03:\x048\n\x0f\n\x08\x06\0\x02\0\x04\
    \x9b\x08\0\x12\x03:\x048\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03;\x04G\n\x0f\
    \n\x08\x06\0\x02\0\x04\x9b\x08\x01\x12\x03;\x04G\n\xed\x01\n\x04\x06\0\
    \x02\x01\x12\x04B\x02H\x03\x1a\xde\x01\x20Returns\x20a\x20sample\x20of\
    \x20row\x20keys\x20in\x20the\x20table.\x20The\x20returned\x20row\x20keys\
    \x20will\n\x20delimit\x20contiguous\x20sections\x20of\x20the\x20table\
    \x20of\x20approximately\x20equal\x20size,\n\x20which\x20can\x20be\x20use\
    d\x20to\x20break\x20up\x20the\x20data\x20for\x20distributed\x20tasks\x20\
    like\n\x20mapreduces.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03B\x06\x13\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x03B\x14(\n\x0c\n\x05\x06\0\x02\x01\x06\
    \x12\x03B39\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03B:O\n\r\n\x05\x06\0\x02\
    \x01\x04\x12\x04C\x04E\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\
    \x04C\x04E\x06\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03F\x048\n\x0f\n\x08\
    \x06\0\x02\x01\x04\x9b\x08\0\x12\x03F\x048\n\x0c\n\x05\x06\0\x02\x01\x04\
    \x12\x03G\x04G\n\x0f\n\x08\x06\0\x02\x01\x04\x9b\x08\x01\x12\x03G\x04G\n\
    \x87\x01\n\x04\x06\0\x02\x02\x12\x04L\x02S\x03\x1ay\x20Mutates\x20a\x20r\
    ow\x20atomically.\x20Cells\x20already\x20present\x20in\x20the\x20row\x20\
    are\x20left\n\x20unchanged\x20unless\x20explicitly\x20changed\x20by\x20`\
    mutation`.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03L\x06\x0f\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03L\x10\x20\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03L+<\n\r\n\x05\x06\0\x02\x02\x04\x12\x04M\x04P\x06\n\x11\n\t\x06\0\
    \x02\x02\x04\xb0\xca\xbc\"\x12\x04M\x04P\x06\n\x0c\n\x05\x06\0\x02\x02\
    \x04\x12\x03Q\x04J\n\x0f\n\x08\x06\0\x02\x02\x04\x9b\x08\0\x12\x03Q\x04J\
    \n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03R\x04Y\n\x0f\n\x08\x06\0\x02\x02\
    \x04\x9b\x08\x01\x12\x03R\x04Y\n\xa0\x01\n\x04\x06\0\x02\x03\x12\x04X\
    \x02_\x03\x1a\x91\x01\x20Mutates\x20multiple\x20rows\x20in\x20a\x20batch\
    .\x20Each\x20individual\x20row\x20is\x20mutated\n\x20atomically\x20as\
    \x20in\x20MutateRow,\x20but\x20the\x20entire\x20batch\x20is\x20not\x20ex\
    ecuted\n\x20atomically.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03X\x06\x10\
    \n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03X\x11\"\n\x0c\n\x05\x06\0\x02\x03\
    \x06\x12\x03X-3\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03X4F\n\r\n\x05\x06\0\
    \x02\x03\x04\x12\x04Y\x04\\\x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\
    \"\x12\x04Y\x04\\\x06\n\x0c\n\x05\x06\0\x02\x03\x04\x12\x03]\x04@\n\x0f\
    \n\x08\x06\0\x02\x03\x04\x9b\x08\0\x12\x03]\x04@\n\x0c\n\x05\x06\0\x02\
    \x03\x04\x12\x03^\x04O\n\x0f\n\x08\x06\0\x02\x03\x04\x9b\x08\x01\x12\x03\
    ^\x04O\nZ\n\x04\x06\0\x02\x04\x12\x04b\x02i\x03\x1aL\x20Mutates\x20a\x20\
    row\x20atomically\x20based\x20on\x20the\x20output\x20of\x20a\x20predicat\
    e\x20Reader\x20filter.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03b\x06\x17\
    \n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03b\x180\n\x0c\n\x05\x06\0\x02\x04\
    \x03\x12\x03b;T\n\r\n\x05\x06\0\x02\x04\x04\x12\x04c\x04f\x06\n\x11\n\t\
    \x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04c\x04f\x06\n\x0c\n\x05\x06\0\x02\
    \x04\x04\x12\x03g\x04p\n\x0f\n\x08\x06\0\x02\x04\x04\x9b\x08\0\x12\x03g\
    \x04p\n\x0c\n\x05\x06\0\x02\x04\x04\x12\x03h\x04\x7f\n\x0f\n\x08\x06\0\
    \x02\x04\x04\x9b\x08\x01\x12\x03h\x04\x7f\n\xf6\x02\n\x04\x06\0\x02\x05\
    \x12\x04p\x02w\x03\x1a\xe7\x02\x20Modifies\x20a\x20row\x20atomically\x20\
    on\x20the\x20server.\x20The\x20method\x20reads\x20the\x20latest\n\x20exi\
    sting\x20timestamp\x20and\x20value\x20from\x20the\x20specified\x20column\
    s\x20and\x20writes\x20a\x20new\n\x20entry\x20based\x20on\x20pre-defined\
    \x20read/modify/write\x20rules.\x20The\x20new\x20value\x20for\x20the\n\
    \x20timestamp\x20is\x20the\x20greater\x20of\x20the\x20existing\x20timest\
    amp\x20or\x20the\x20current\x20server\n\x20time.\x20The\x20method\x20ret\
    urns\x20the\x20new\x20contents\x20of\x20all\x20modified\x20cells.\n\n\
    \x0c\n\x05\x06\0\x02\x05\x01\x12\x03p\x06\x18\n\x0c\n\x05\x06\0\x02\x05\
    \x02\x12\x03p\x192\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03p=W\n\r\n\x05\
    \x06\0\x02\x05\x04\x12\x04q\x04t\x06\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\
    \xbc\"\x12\x04q\x04t\x06\n\x0c\n\x05\x06\0\x02\x05\x04\x12\x03u\x04F\n\
    \x0f\n\x08\x06\0\x02\x05\x04\x9b\x08\0\x12\x03u\x04F\n\x0c\n\x05\x06\0\
    \x02\x05\x04\x12\x03v\x04U\n\x0f\n\x08\x06\0\x02\x05\x04\x9b\x08\x01\x12\
    \x03v\x04U\n5\n\x02\x04\0\x12\x05{\0\x94\x01\x01\x1a(\x20Request\x20mess\
    age\x20for\x20Bigtable.ReadRows.\n\n\n\n\x03\x04\0\x01\x12\x03{\x08\x17\
    \n\x9f\x01\n\x04\x04\0\x02\0\x12\x05\x7f\x02\x84\x01\x04\x1a\x8f\x01\x20\
    Required.\x20The\x20unique\x20name\x20of\x20the\x20table\x20from\x20whic\
    h\x20to\x20read.\n\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/\
    <project>/instances/<instance>/tables/<table>`.\n\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x7f\t\x13\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x7f\x16\x17\n\x0e\n\x05\x04\0\x02\0\
    \x08\x12\x05\x7f\x18\x84\x01\x03\n\x10\n\x08\x04\0\x02\0\x08\x9c\x08\0\
    \x12\x04\x80\x01\x04*\n\x11\n\x07\x04\0\x02\0\x08\x9f\x08\x12\x06\x81\
    \x01\x04\x83\x01\x05\n\x80\x01\n\x04\x04\0\x02\x01\x12\x04\x88\x01\x02\
    \x1c\x1ar\x20This\x20value\x20specifies\x20routing\x20for\x20replication\
    .\x20If\x20not\x20specified,\x20the\n\x20\"default\"\x20application\x20p\
    rofile\x20will\x20be\x20used.\n\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\x88\
    \x01\x02\x08\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\x88\x01\t\x17\n\r\n\x05\
    \x04\0\x02\x01\x03\x12\x04\x88\x01\x1a\x1b\nZ\n\x04\x04\0\x02\x02\x12\
    \x04\x8b\x01\x02\x12\x1aL\x20The\x20row\x20keys\x20and/or\x20ranges\x20t\
    o\x20read.\x20If\x20not\x20specified,\x20reads\x20from\x20all\x20rows.\n\
    \n\r\n\x05\x04\0\x02\x02\x06\x12\x04\x8b\x01\x02\x08\n\r\n\x05\x04\0\x02\
    \x02\x01\x12\x04\x8b\x01\t\r\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\x8b\x01\
    \x10\x11\nw\n\x04\x04\0\x02\x03\x12\x04\x8f\x01\x02\x17\x1ai\x20The\x20f\
    ilter\x20to\x20apply\x20to\x20the\x20contents\x20of\x20the\x20specified\
    \x20row(s).\x20If\x20unset,\n\x20reads\x20the\x20entirety\x20of\x20each\
    \x20row.\n\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\x8f\x01\x02\x0b\n\r\n\x05\
    \x04\0\x02\x03\x01\x12\x04\x8f\x01\x0c\x12\n\r\n\x05\x04\0\x02\x03\x03\
    \x12\x04\x8f\x01\x15\x16\n\x83\x01\n\x04\x04\0\x02\x04\x12\x04\x93\x01\
    \x02\x17\x1au\x20The\x20read\x20will\x20terminate\x20after\x20committing\
    \x20to\x20N\x20rows'\x20worth\x20of\x20results.\x20The\n\x20default\x20(\
    zero)\x20is\x20to\x20return\x20all\x20results.\n\n\r\n\x05\x04\0\x02\x04\
    \x05\x12\x04\x93\x01\x02\x07\n\r\n\x05\x04\0\x02\x04\x01\x12\x04\x93\x01\
    \x08\x12\n\r\n\x05\x04\0\x02\x04\x03\x12\x04\x93\x01\x15\x16\n7\n\x02\
    \x04\x01\x12\x06\x97\x01\0\xe6\x01\x01\x1a)\x20Response\x20message\x20fo\
    r\x20Bigtable.ReadRows.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\x97\x01\x08\
    \x18\nf\n\x04\x04\x01\x03\0\x12\x06\x9a\x01\x02\xd9\x01\x03\x1aV\x20Spec\
    ifies\x20a\x20piece\x20of\x20a\x20row's\x20contents\x20returned\x20as\
    \x20part\x20of\x20the\x20read\n\x20response\x20stream.\n\n\r\n\x05\x04\
    \x01\x03\0\x01\x12\x04\x9a\x01\n\x13\n\xd7\x02\n\x06\x04\x01\x03\0\x02\0\
    \x12\x04\xa2\x01\x04\x16\x1a\xc6\x02\x20The\x20row\x20key\x20for\x20this\
    \x20chunk\x20of\x20data.\x20\x20If\x20the\x20row\x20key\x20is\x20empty,\
    \n\x20this\x20CellChunk\x20is\x20a\x20continuation\x20of\x20the\x20same\
    \x20row\x20as\x20the\x20previous\n\x20CellChunk\x20in\x20the\x20response\
    \x20stream,\x20even\x20if\x20that\x20CellChunk\x20was\x20in\x20a\n\x20pr\
    evious\x20ReadRowsResponse\x20message.\n\n\x20Classified\x20as\x20IDENTI\
    FYING_ID\x20to\x20provide\x20context\x20around\x20data\x20accesses\x20fo\
    r\n\x20auditing\x20systems.\n\n\x0f\n\x07\x04\x01\x03\0\x02\0\x05\x12\
    \x04\xa2\x01\x04\t\n\x0f\n\x07\x04\x01\x03\0\x02\0\x01\x12\x04\xa2\x01\n\
    \x11\n\x0f\n\x07\x04\x01\x03\0\x02\0\x03\x12\x04\xa2\x01\x14\x15\n\xf3\
    \x02\n\x06\x04\x01\x03\0\x02\x01\x12\x04\xaa\x01\x040\x1a\xe2\x02\x20The\
    \x20column\x20family\x20name\x20for\x20this\x20chunk\x20of\x20data.\x20\
    \x20If\x20this\x20message\n\x20is\x20not\x20present\x20this\x20CellChunk\
    \x20is\x20a\x20continuation\x20of\x20the\x20same\x20column\n\x20family\
    \x20as\x20the\x20previous\x20CellChunk.\x20\x20The\x20empty\x20string\
    \x20can\x20occur\x20as\x20a\n\x20column\x20family\x20name\x20in\x20a\x20\
    response\x20so\x20clients\x20must\x20check\n\x20explicitly\x20for\x20the\
    \x20presence\x20of\x20this\x20message,\x20not\x20just\x20for\n\x20`famil\
    y_name.value`\x20being\x20non-empty.\n\n\x0f\n\x07\x04\x01\x03\0\x02\x01\
    \x06\x12\x04\xaa\x01\x04\x1f\n\x0f\n\x07\x04\x01\x03\0\x02\x01\x01\x12\
    \x04\xaa\x01\x20+\n\x0f\n\x07\x04\x01\x03\0\x02\x01\x03\x12\x04\xaa\x01.\
    /\n\xbb\x02\n\x06\x04\x01\x03\0\x02\x02\x12\x04\xb1\x01\x04-\x1a\xaa\x02\
    \x20The\x20column\x20qualifier\x20for\x20this\x20chunk\x20of\x20data.\
    \x20\x20If\x20this\x20message\n\x20is\x20not\x20present,\x20this\x20Cell\
    Chunk\x20is\x20a\x20continuation\x20of\x20the\x20same\x20column\n\x20as\
    \x20the\x20previous\x20CellChunk.\x20\x20Column\x20qualifiers\x20may\x20\
    be\x20empty\x20so\n\x20clients\x20must\x20check\x20for\x20the\x20presenc\
    e\x20of\x20this\x20message,\x20not\x20just\n\x20for\x20`qualifier.value`\
    \x20being\x20non-empty.\n\n\x0f\n\x07\x04\x01\x03\0\x02\x02\x06\x12\x04\
    \xb1\x01\x04\x1e\n\x0f\n\x07\x04\x01\x03\0\x02\x02\x01\x12\x04\xb1\x01\
    \x1f(\n\x0f\n\x07\x04\x01\x03\0\x02\x02\x03\x12\x04\xb1\x01+,\n\xdd\x03\
    \n\x06\x04\x01\x03\0\x02\x03\x12\x04\xbb\x01\x04\x1f\x1a\xcc\x03\x20The\
    \x20cell's\x20stored\x20timestamp,\x20which\x20also\x20uniquely\x20ident\
    ifies\x20it\n\x20within\x20its\x20column.\x20\x20Values\x20are\x20always\
    \x20expressed\x20in\n\x20microseconds,\x20but\x20individual\x20tables\
    \x20may\x20set\x20a\x20coarser\n\x20granularity\x20to\x20further\x20rest\
    rict\x20the\x20allowed\x20values.\x20For\n\x20example,\x20a\x20table\x20\
    which\x20specifies\x20millisecond\x20granularity\x20will\n\x20only\x20al\
    low\x20values\x20of\x20`timestamp_micros`\x20which\x20are\x20multiples\
    \x20of\n\x201000.\x20\x20Timestamps\x20are\x20only\x20set\x20in\x20the\
    \x20first\x20CellChunk\x20per\x20cell\n\x20(for\x20cells\x20split\x20int\
    o\x20multiple\x20chunks).\n\n\x0f\n\x07\x04\x01\x03\0\x02\x03\x05\x12\
    \x04\xbb\x01\x04\t\n\x0f\n\x07\x04\x01\x03\0\x02\x03\x01\x12\x04\xbb\x01\
    \n\x1a\n\x0f\n\x07\x04\x01\x03\0\x02\x03\x03\x12\x04\xbb\x01\x1d\x1e\n\
    \x95\x01\n\x06\x04\x01\x03\0\x02\x04\x12\x04\xc0\x01\x04\x1f\x1a\x84\x01\
    \x20Labels\x20applied\x20to\x20the\x20cell\x20by\x20a\n\x20[RowFilter][g\
    oogle.bigtable.v2.RowFilter].\x20\x20Labels\x20are\x20only\x20set\n\x20o\
    n\x20the\x20first\x20CellChunk\x20per\x20cell.\n\n\x0f\n\x07\x04\x01\x03\
    \0\x02\x04\x04\x12\x04\xc0\x01\x04\x0c\n\x0f\n\x07\x04\x01\x03\0\x02\x04\
    \x05\x12\x04\xc0\x01\r\x13\n\x0f\n\x07\x04\x01\x03\0\x02\x04\x01\x12\x04\
    \xc0\x01\x14\x1a\n\x0f\n\x07\x04\x01\x03\0\x02\x04\x03\x12\x04\xc0\x01\
    \x1d\x1e\n\xbf\x02\n\x06\x04\x01\x03\0\x02\x05\x12\x04\xc7\x01\x04\x14\
    \x1a\xae\x02\x20The\x20value\x20stored\x20in\x20the\x20cell.\x20\x20Cell\
    \x20values\x20can\x20be\x20split\x20across\n\x20multiple\x20CellChunks.\
    \x20\x20In\x20that\x20case\x20only\x20the\x20value\x20field\x20will\x20b\
    e\n\x20set\x20in\x20CellChunks\x20after\x20the\x20first:\x20the\x20times\
    tamp\x20and\x20labels\n\x20will\x20only\x20be\x20present\x20in\x20the\
    \x20first\x20CellChunk,\x20even\x20if\x20the\x20first\n\x20CellChunk\x20\
    came\x20in\x20a\x20previous\x20ReadRowsResponse.\n\n\x0f\n\x07\x04\x01\
    \x03\0\x02\x05\x05\x12\x04\xc7\x01\x04\t\n\x0f\n\x07\x04\x01\x03\0\x02\
    \x05\x01\x12\x04\xc7\x01\n\x0f\n\x0f\n\x07\x04\x01\x03\0\x02\x05\x03\x12\
    \x04\xc7\x01\x12\x13\n\x85\x02\n\x06\x04\x01\x03\0\x02\x06\x12\x04\xcd\
    \x01\x04\x19\x1a\xf4\x01\x20If\x20this\x20CellChunk\x20is\x20part\x20of\
    \x20a\x20chunked\x20cell\x20value\x20and\x20this\x20is\n\x20not\x20the\
    \x20final\x20chunk\x20of\x20that\x20cell,\x20value_size\x20will\x20be\
    \x20set\x20to\x20the\n\x20total\x20length\x20of\x20the\x20cell\x20value.\
    \x20\x20The\x20client\x20can\x20use\x20this\x20size\n\x20to\x20pre-alloc\
    ate\x20memory\x20to\x20hold\x20the\x20full\x20cell\x20value.\n\n\x0f\n\
    \x07\x04\x01\x03\0\x02\x06\x05\x12\x04\xcd\x01\x04\t\n\x0f\n\x07\x04\x01\
    \x03\0\x02\x06\x01\x12\x04\xcd\x01\n\x14\n\x0f\n\x07\x04\x01\x03\0\x02\
    \x06\x03\x12\x04\xcd\x01\x17\x18\nR\n\x06\x04\x01\x03\0\x08\0\x12\x06\
    \xd0\x01\x04\xd8\x01\x05\x1a@\x20Signals\x20to\x20the\x20client\x20conce\
    rning\x20previous\x20CellChunks\x20received.\n\n\x0f\n\x07\x04\x01\x03\0\
    \x08\0\x01\x12\x04\xd0\x01\n\x14\n\x85\x01\n\x06\x04\x01\x03\0\x02\x07\
    \x12\x04\xd3\x01\x06\x19\x1au\x20Indicates\x20that\x20the\x20client\x20s\
    hould\x20drop\x20all\x20previous\x20chunks\x20for\n\x20`row_key`,\x20as\
    \x20it\x20will\x20be\x20re-read\x20from\x20the\x20beginning.\n\n\x0f\n\
    \x07\x04\x01\x03\0\x02\x07\x05\x12\x04\xd3\x01\x06\n\n\x0f\n\x07\x04\x01\
    \x03\0\x02\x07\x01\x12\x04\xd3\x01\x0b\x14\n\x0f\n\x07\x04\x01\x03\0\x02\
    \x07\x03\x12\x04\xd3\x01\x17\x18\n\x83\x01\n\x06\x04\x01\x03\0\x02\x08\
    \x12\x04\xd7\x01\x06\x1a\x1as\x20Indicates\x20that\x20the\x20client\x20c\
    an\x20safely\x20process\x20all\x20previous\x20chunks\x20for\n\x20`row_ke\
    y`,\x20as\x20its\x20data\x20has\x20been\x20fully\x20read.\n\n\x0f\n\x07\
    \x04\x01\x03\0\x02\x08\x05\x12\x04\xd7\x01\x06\n\n\x0f\n\x07\x04\x01\x03\
    \0\x02\x08\x01\x12\x04\xd7\x01\x0b\x15\n\x0f\n\x07\x04\x01\x03\0\x02\x08\
    \x03\x12\x04\xd7\x01\x18\x19\nM\n\x04\x04\x01\x02\0\x12\x04\xdc\x01\x02\
    \x20\x1a?\x20A\x20collection\x20of\x20a\x20row's\x20contents\x20as\x20pa\
    rt\x20of\x20the\x20read\x20request.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\
    \x04\xdc\x01\x02\n\n\r\n\x05\x04\x01\x02\0\x06\x12\x04\xdc\x01\x0b\x14\n\
    \r\n\x05\x04\x01\x02\0\x01\x12\x04\xdc\x01\x15\x1b\n\r\n\x05\x04\x01\x02\
    \0\x03\x12\x04\xdc\x01\x1e\x1f\n\xc5\x03\n\x04\x04\x01\x02\x01\x12\x04\
    \xe5\x01\x02!\x1a\xb6\x03\x20Optionally\x20the\x20server\x20might\x20ret\
    urn\x20the\x20row\x20key\x20of\x20the\x20last\x20row\x20it\n\x20has\x20s\
    canned.\x20\x20The\x20client\x20can\x20use\x20this\x20to\x20construct\
    \x20a\x20more\n\x20efficient\x20retry\x20request\x20if\x20needed:\x20any\
    \x20row\x20keys\x20or\x20portions\x20of\n\x20ranges\x20less\x20than\x20t\
    his\x20row\x20key\x20can\x20be\x20dropped\x20from\x20the\x20request.\n\
    \x20This\x20is\x20primarily\x20useful\x20for\x20cases\x20where\x20the\
    \x20server\x20has\x20read\x20a\n\x20lot\x20of\x20data\x20that\x20was\x20\
    filtered\x20out\x20since\x20the\x20last\x20committed\x20row\n\x20key,\
    \x20allowing\x20the\x20client\x20to\x20skip\x20that\x20work\x20on\x20a\
    \x20retry.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xe5\x01\x02\x07\n\r\n\
    \x05\x04\x01\x02\x01\x01\x12\x04\xe5\x01\x08\x1c\n\r\n\x05\x04\x01\x02\
    \x01\x03\x12\x04\xe5\x01\x1f\x20\n;\n\x02\x04\x02\x12\x06\xe9\x01\0\xf7\
    \x01\x01\x1a-\x20Request\x20message\x20for\x20Bigtable.SampleRowKeys.\n\
    \n\x0b\n\x03\x04\x02\x01\x12\x04\xe9\x01\x08\x1c\n\xab\x01\n\x04\x04\x02\
    \x02\0\x12\x06\xed\x01\x02\xf2\x01\x04\x1a\x9a\x01\x20Required.\x20The\
    \x20unique\x20name\x20of\x20the\x20table\x20from\x20which\x20to\x20sampl\
    e\x20row\x20keys.\n\x20Values\x20are\x20of\x20the\x20form\n\x20`projects\
    /<project>/instances/<instance>/tables/<table>`.\n\n\r\n\x05\x04\x02\x02\
    \0\x05\x12\x04\xed\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xed\
    \x01\t\x13\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xed\x01\x16\x17\n\x0f\n\
    \x05\x04\x02\x02\0\x08\x12\x06\xed\x01\x18\xf2\x01\x03\n\x10\n\x08\x04\
    \x02\x02\0\x08\x9c\x08\0\x12\x04\xee\x01\x04*\n\x11\n\x07\x04\x02\x02\0\
    \x08\x9f\x08\x12\x06\xef\x01\x04\xf1\x01\x05\n\x80\x01\n\x04\x04\x02\x02\
    \x01\x12\x04\xf6\x01\x02\x1c\x1ar\x20This\x20value\x20specifies\x20routi\
    ng\x20for\x20replication.\x20If\x20not\x20specified,\x20the\n\x20\"defau\
    lt\"\x20application\x20profile\x20will\x20be\x20used.\n\n\r\n\x05\x04\
    \x02\x02\x01\x05\x12\x04\xf6\x01\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\
    \x12\x04\xf6\x01\t\x17\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xf6\x01\x1a\
    \x1b\n<\n\x02\x04\x03\x12\x06\xfa\x01\0\x8c\x02\x01\x1a.\x20Response\x20\
    message\x20for\x20Bigtable.SampleRowKeys.\n\n\x0b\n\x03\x04\x03\x01\x12\
    \x04\xfa\x01\x08\x1d\n\xbe\x04\n\x04\x04\x03\x02\0\x12\x04\x85\x02\x02\
    \x14\x1a\xaf\x04\x20Sorted\x20streamed\x20sequence\x20of\x20sample\x20ro\
    w\x20keys\x20in\x20the\x20table.\x20The\x20table\x20might\n\x20have\x20c\
    ontents\x20before\x20the\x20first\x20row\x20key\x20in\x20the\x20list\x20\
    and\x20after\x20the\x20last\x20one,\n\x20but\x20a\x20key\x20containing\
    \x20the\x20empty\x20string\x20indicates\x20\"end\x20of\x20table\"\x20and\
    \x20will\x20be\n\x20the\x20last\x20response\x20given,\x20if\x20present.\
    \n\x20Note\x20that\x20row\x20keys\x20in\x20this\x20list\x20may\x20not\
    \x20have\x20ever\x20been\x20written\x20to\x20or\x20read\n\x20from,\x20an\
    d\x20users\x20should\x20therefore\x20not\x20make\x20any\x20assumptions\
    \x20about\x20the\x20row\x20key\n\x20structure\x20that\x20are\x20specific\
    \x20to\x20their\x20use\x20case.\n\n\x20Classified\x20as\x20IDENTIFYING_I\
    D\x20to\x20provide\x20context\x20around\x20data\x20accesses\x20for\n\x20\
    auditing\x20systems.\n\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\x85\x02\x02\
    \x07\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x85\x02\x08\x0f\n\r\n\x05\x04\
    \x03\x02\0\x03\x12\x04\x85\x02\x12\x13\n\x80\x02\n\x04\x04\x03\x02\x01\
    \x12\x04\x8b\x02\x02\x19\x1a\xf1\x01\x20Approximate\x20total\x20storage\
    \x20space\x20used\x20by\x20all\x20rows\x20in\x20the\x20table\x20which\
    \x20precede\n\x20`row_key`.\x20Buffering\x20the\x20contents\x20of\x20all\
    \x20rows\x20between\x20two\x20subsequent\n\x20samples\x20would\x20requir\
    e\x20space\x20roughly\x20equal\x20to\x20the\x20difference\x20in\x20their\
    \n\x20`offset_bytes`\x20fields.\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\
    \x8b\x02\x02\x07\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x8b\x02\x08\x14\n\
    \r\n\x05\x04\x03\x02\x01\x03\x12\x04\x8b\x02\x17\x18\n7\n\x02\x04\x04\
    \x12\x06\x8f\x02\0\xa8\x02\x01\x1a)\x20Request\x20message\x20for\x20Bigt\
    able.MutateRow.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x8f\x02\x08\x18\n\xb5\
    \x01\n\x04\x04\x04\x02\0\x12\x06\x93\x02\x02\x98\x02\x04\x1a\xa4\x01\x20\
    Required.\x20The\x20unique\x20name\x20of\x20the\x20table\x20to\x20which\
    \x20the\x20mutation\x20should\x20be\x20applied.\n\x20Values\x20are\x20of\
    \x20the\x20form\n\x20`projects/<project>/instances/<instance>/tables/<ta\
    ble>`.\n\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\x93\x02\x02\x08\n\r\n\x05\
    \x04\x04\x02\0\x01\x12\x04\x93\x02\t\x13\n\r\n\x05\x04\x04\x02\0\x03\x12\
    \x04\x93\x02\x16\x17\n\x0f\n\x05\x04\x04\x02\0\x08\x12\x06\x93\x02\x18\
    \x98\x02\x03\n\x10\n\x08\x04\x04\x02\0\x08\x9c\x08\0\x12\x04\x94\x02\x04\
    *\n\x11\n\x07\x04\x04\x02\0\x08\x9f\x08\x12\x06\x95\x02\x04\x97\x02\x05\
    \n\x80\x01\n\x04\x04\x04\x02\x01\x12\x04\x9c\x02\x02\x1c\x1ar\x20This\
    \x20value\x20specifies\x20routing\x20for\x20replication.\x20If\x20not\
    \x20specified,\x20the\n\x20\"default\"\x20application\x20profile\x20will\
    \x20be\x20used.\n\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\x9c\x02\x02\x08\
    \n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\x9c\x02\t\x17\n\r\n\x05\x04\x04\
    \x02\x01\x03\x12\x04\x9c\x02\x1a\x1b\n\xb4\x01\n\x04\x04\x04\x02\x02\x12\
    \x04\xa2\x02\x02=\x1a\xa5\x01\x20Required.\x20The\x20key\x20of\x20the\
    \x20row\x20to\x20which\x20the\x20mutation\x20should\x20be\x20applied.\n\
    \n\x20Classified\x20as\x20IDENTIFYING_ID\x20to\x20provide\x20context\x20\
    around\x20data\x20accesses\x20for\n\x20auditing\x20systems.\n\n\r\n\x05\
    \x04\x04\x02\x02\x05\x12\x04\xa2\x02\x02\x07\n\r\n\x05\x04\x04\x02\x02\
    \x01\x12\x04\xa2\x02\x08\x0f\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xa2\
    \x02\x12\x13\n\r\n\x05\x04\x04\x02\x02\x08\x12\x04\xa2\x02\x14<\n\x10\n\
    \x08\x04\x04\x02\x02\x08\x9c\x08\0\x12\x04\xa2\x02\x15;\n\xe1\x01\n\x04\
    \x04\x04\x02\x03\x12\x04\xa7\x02\x02K\x1a\xd2\x01\x20Required.\x20Change\
    s\x20to\x20be\x20atomically\x20applied\x20to\x20the\x20specified\x20row.\
    \x20Entries\x20are\x20applied\n\x20in\x20order,\x20meaning\x20that\x20ea\
    rlier\x20mutations\x20can\x20be\x20masked\x20by\x20later\x20ones.\n\x20M\
    ust\x20contain\x20at\x20least\x20one\x20entry\x20and\x20at\x20most\x2010\
    0000.\n\n\r\n\x05\x04\x04\x02\x03\x04\x12\x04\xa7\x02\x02\n\n\r\n\x05\
    \x04\x04\x02\x03\x06\x12\x04\xa7\x02\x0b\x13\n\r\n\x05\x04\x04\x02\x03\
    \x01\x12\x04\xa7\x02\x14\x1d\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\xa7\
    \x02\x20!\n\r\n\x05\x04\x04\x02\x03\x08\x12\x04\xa7\x02\"J\n\x10\n\x08\
    \x04\x04\x02\x03\x08\x9c\x08\0\x12\x04\xa7\x02#I\n8\n\x02\x04\x05\x12\
    \x06\xab\x02\0\xad\x02\x01\x1a*\x20Response\x20message\x20for\x20Bigtabl\
    e.MutateRow.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xab\x02\x08\x19\n?\n\x02\
    \x04\x06\x12\x06\xb0\x02\0\xd2\x02\x01\x1a1\x20Request\x20message\x20for\
    \x20BigtableService.MutateRows.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xb0\
    \x02\x08\x19\n-\n\x04\x04\x06\x03\0\x12\x06\xb2\x02\x02\xbe\x02\x03\x1a\
    \x1d\x20A\x20mutation\x20for\x20a\x20given\x20row.\n\n\r\n\x05\x04\x06\
    \x03\0\x01\x12\x04\xb2\x02\n\x0f\n\xaf\x01\n\x06\x04\x06\x03\0\x02\0\x12\
    \x04\xb7\x02\x04\x16\x1a\x9e\x01\x20The\x20key\x20of\x20the\x20row\x20to\
    \x20which\x20the\x20`mutations`\x20should\x20be\x20applied.\n\n\x20Class\
    ified\x20as\x20IDENTIFYING_ID\x20to\x20provide\x20context\x20around\x20d\
    ata\x20accesses\x20for\n\x20auditing\x20systems.\n\n\x0f\n\x07\x04\x06\
    \x03\0\x02\0\x05\x12\x04\xb7\x02\x04\t\n\x0f\n\x07\x04\x06\x03\0\x02\0\
    \x01\x12\x04\xb7\x02\n\x11\n\x0f\n\x07\x04\x06\x03\0\x02\0\x03\x12\x04\
    \xb7\x02\x14\x15\n\xda\x01\n\x06\x04\x06\x03\0\x02\x01\x12\x04\xbd\x02\
    \x04M\x1a\xc9\x01\x20Required.\x20Changes\x20to\x20be\x20atomically\x20a\
    pplied\x20to\x20the\x20specified\x20row.\x20Mutations\x20are\n\x20applie\
    d\x20in\x20order,\x20meaning\x20that\x20earlier\x20mutations\x20can\x20b\
    e\x20masked\x20by\n\x20later\x20ones.\n\x20You\x20must\x20specify\x20at\
    \x20least\x20one\x20mutation.\n\n\x0f\n\x07\x04\x06\x03\0\x02\x01\x04\
    \x12\x04\xbd\x02\x04\x0c\n\x0f\n\x07\x04\x06\x03\0\x02\x01\x06\x12\x04\
    \xbd\x02\r\x15\n\x0f\n\x07\x04\x06\x03\0\x02\x01\x01\x12\x04\xbd\x02\x16\
    \x1f\n\x0f\n\x07\x04\x06\x03\0\x02\x01\x03\x12\x04\xbd\x02\"#\n\x0f\n\
    \x07\x04\x06\x03\0\x02\x01\x08\x12\x04\xbd\x02$L\n\x12\n\n\x04\x06\x03\0\
    \x02\x01\x08\x9c\x08\0\x12\x04\xbd\x02%K\nb\n\x04\x04\x06\x02\0\x12\x06\
    \xc1\x02\x02\xc6\x02\x04\x1aR\x20Required.\x20The\x20unique\x20name\x20o\
    f\x20the\x20table\x20to\x20which\x20the\x20mutations\x20should\x20be\x20\
    applied.\n\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xc1\x02\x02\x08\n\r\n\x05\
    \x04\x06\x02\0\x01\x12\x04\xc1\x02\t\x13\n\r\n\x05\x04\x06\x02\0\x03\x12\
    \x04\xc1\x02\x16\x17\n\x0f\n\x05\x04\x06\x02\0\x08\x12\x06\xc1\x02\x18\
    \xc6\x02\x03\n\x10\n\x08\x04\x06\x02\0\x08\x9c\x08\0\x12\x04\xc2\x02\x04\
    *\n\x11\n\x07\x04\x06\x02\0\x08\x9f\x08\x12\x06\xc3\x02\x04\xc5\x02\x05\
    \n\x80\x01\n\x04\x04\x06\x02\x01\x12\x04\xca\x02\x02\x1c\x1ar\x20This\
    \x20value\x20specifies\x20routing\x20for\x20replication.\x20If\x20not\
    \x20specified,\x20the\n\x20\"default\"\x20application\x20profile\x20will\
    \x20be\x20used.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xca\x02\x02\x08\
    \n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xca\x02\t\x17\n\r\n\x05\x04\x06\
    \x02\x01\x03\x12\x04\xca\x02\x1a\x1b\n\xcb\x02\n\x04\x04\x06\x02\x02\x12\
    \x04\xd1\x02\x02F\x1a\xbc\x02\x20Required.\x20The\x20row\x20keys\x20and\
    \x20corresponding\x20mutations\x20to\x20be\x20applied\x20in\x20bulk.\n\
    \x20Each\x20entry\x20is\x20applied\x20as\x20an\x20atomic\x20mutation,\
    \x20but\x20the\x20entries\x20may\x20be\n\x20applied\x20in\x20arbitrary\
    \x20order\x20(even\x20between\x20entries\x20for\x20the\x20same\x20row).\
    \n\x20At\x20least\x20one\x20entry\x20must\x20be\x20specified,\x20and\x20\
    in\x20total\x20the\x20entries\x20can\n\x20contain\x20at\x20most\x2010000\
    0\x20mutations.\n\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04\xd1\x02\x02\n\n\
    \r\n\x05\x04\x06\x02\x02\x06\x12\x04\xd1\x02\x0b\x10\n\r\n\x05\x04\x06\
    \x02\x02\x01\x12\x04\xd1\x02\x11\x18\n\r\n\x05\x04\x06\x02\x02\x03\x12\
    \x04\xd1\x02\x1b\x1c\n\r\n\x05\x04\x06\x02\x02\x08\x12\x04\xd1\x02\x1dE\
    \n\x10\n\x08\x04\x06\x02\x02\x08\x9c\x08\0\x12\x04\xd1\x02\x1eD\n@\n\x02\
    \x04\x07\x12\x06\xd5\x02\0\xe5\x02\x01\x1a2\x20Response\x20message\x20fo\
    r\x20BigtableService.MutateRows.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xd5\
    \x02\x08\x1a\nS\n\x04\x04\x07\x03\0\x12\x06\xd7\x02\x02\xe1\x02\x03\x1aC\
    \x20The\x20result\x20of\x20applying\x20a\x20passed\x20mutation\x20in\x20\
    the\x20original\x20request.\n\n\r\n\x05\x04\x07\x03\0\x01\x12\x04\xd7\
    \x02\n\x0f\nz\n\x06\x04\x07\x03\0\x02\0\x12\x04\xda\x02\x04\x14\x1aj\x20\
    The\x20index\x20into\x20the\x20original\x20request's\x20`entries`\x20lis\
    t\x20of\x20the\x20Entry\n\x20for\x20which\x20a\x20result\x20is\x20being\
    \x20reported.\n\n\x0f\n\x07\x04\x07\x03\0\x02\0\x05\x12\x04\xda\x02\x04\
    \t\n\x0f\n\x07\x04\x07\x03\0\x02\0\x01\x12\x04\xda\x02\n\x0f\n\x0f\n\x07\
    \x04\x07\x03\0\x02\0\x03\x12\x04\xda\x02\x12\x13\n\x9e\x02\n\x06\x04\x07\
    \x03\0\x02\x01\x12\x04\xe0\x02\x04!\x1a\x8d\x02\x20The\x20result\x20of\
    \x20the\x20request\x20Entry\x20identified\x20by\x20`index`.\n\x20Dependi\
    ng\x20on\x20how\x20requests\x20are\x20batched\x20during\x20execution,\
    \x20it\x20is\x20possible\n\x20for\x20one\x20Entry\x20to\x20fail\x20due\
    \x20to\x20an\x20error\x20with\x20another\x20Entry.\x20In\x20the\x20event\
    \n\x20that\x20this\x20occurs,\x20the\x20same\x20error\x20will\x20be\x20r\
    eported\x20for\x20both\x20entries.\n\n\x0f\n\x07\x04\x07\x03\0\x02\x01\
    \x06\x12\x04\xe0\x02\x04\x15\n\x0f\n\x07\x04\x07\x03\0\x02\x01\x01\x12\
    \x04\xe0\x02\x16\x1c\n\x0f\n\x07\x04\x07\x03\0\x02\x01\x03\x12\x04\xe0\
    \x02\x1f\x20\nG\n\x04\x04\x07\x02\0\x12\x04\xe4\x02\x02\x1d\x1a9\x20One\
    \x20or\x20more\x20results\x20for\x20Entries\x20from\x20the\x20batch\x20r\
    equest.\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x04\xe4\x02\x02\n\n\r\n\x05\
    \x04\x07\x02\0\x06\x12\x04\xe4\x02\x0b\x10\n\r\n\x05\x04\x07\x02\0\x01\
    \x12\x04\xe4\x02\x11\x18\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xe4\x02\x1b\
    \x1c\n?\n\x02\x04\x08\x12\x06\xe8\x02\0\x91\x03\x01\x1a1\x20Request\x20m\
    essage\x20for\x20Bigtable.CheckAndMutateRow.\n\n\x0b\n\x03\x04\x08\x01\
    \x12\x04\xe8\x02\x08\x20\n\xc2\x01\n\x04\x04\x08\x02\0\x12\x06\xed\x02\
    \x02\xf2\x02\x04\x1a\xb1\x01\x20Required.\x20The\x20unique\x20name\x20of\
    \x20the\x20table\x20to\x20which\x20the\x20conditional\x20mutation\x20sho\
    uld\x20be\n\x20applied.\n\x20Values\x20are\x20of\x20the\x20form\n\x20`pr\
    ojects/<project>/instances/<instance>/tables/<table>`.\n\n\r\n\x05\x04\
    \x08\x02\0\x05\x12\x04\xed\x02\x02\x08\n\r\n\x05\x04\x08\x02\0\x01\x12\
    \x04\xed\x02\t\x13\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xed\x02\x16\x17\n\
    \x0f\n\x05\x04\x08\x02\0\x08\x12\x06\xed\x02\x18\xf2\x02\x03\n\x10\n\x08\
    \x04\x08\x02\0\x08\x9c\x08\0\x12\x04\xee\x02\x04*\n\x11\n\x07\x04\x08\
    \x02\0\x08\x9f\x08\x12\x06\xef\x02\x04\xf1\x02\x05\n\x80\x01\n\x04\x04\
    \x08\x02\x01\x12\x04\xf6\x02\x02\x1c\x1ar\x20This\x20value\x20specifies\
    \x20routing\x20for\x20replication.\x20If\x20not\x20specified,\x20the\n\
    \x20\"default\"\x20application\x20profile\x20will\x20be\x20used.\n\n\r\n\
    \x05\x04\x08\x02\x01\x05\x12\x04\xf6\x02\x02\x08\n\r\n\x05\x04\x08\x02\
    \x01\x01\x12\x04\xf6\x02\t\x17\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xf6\
    \x02\x1a\x1b\n\xc0\x01\n\x04\x04\x08\x02\x02\x12\x04\xfc\x02\x02=\x1a\
    \xb1\x01\x20Required.\x20The\x20key\x20of\x20the\x20row\x20to\x20which\
    \x20the\x20conditional\x20mutation\x20should\x20be\x20applied.\n\n\x20Cl\
    assified\x20as\x20IDENTIFYING_ID\x20to\x20provide\x20context\x20around\
    \x20data\x20accesses\x20for\n\x20auditing\x20systems.\n\n\r\n\x05\x04\
    \x08\x02\x02\x05\x12\x04\xfc\x02\x02\x07\n\r\n\x05\x04\x08\x02\x02\x01\
    \x12\x04\xfc\x02\x08\x0f\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\xfc\x02\
    \x12\x13\n\r\n\x05\x04\x08\x02\x02\x08\x12\x04\xfc\x02\x14<\n\x10\n\x08\
    \x04\x08\x02\x02\x08\x9c\x08\0\x12\x04\xfc\x02\x15;\n\x80\x02\n\x04\x04\
    \x08\x02\x03\x12\x04\x82\x03\x02!\x1a\xf1\x01\x20The\x20filter\x20to\x20\
    be\x20applied\x20to\x20the\x20contents\x20of\x20the\x20specified\x20row.\
    \x20Depending\n\x20on\x20whether\x20or\x20not\x20any\x20results\x20are\
    \x20yielded,\x20either\x20`true_mutations`\x20or\n\x20`false_mutations`\
    \x20will\x20be\x20executed.\x20If\x20unset,\x20checks\x20that\x20the\x20\
    row\x20contains\n\x20any\x20values\x20at\x20all.\n\n\r\n\x05\x04\x08\x02\
    \x03\x06\x12\x04\x82\x03\x02\x0b\n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\
    \x82\x03\x0c\x1c\n\r\n\x05\x04\x08\x02\x03\x03\x12\x04\x82\x03\x1f\x20\n\
    \xc1\x02\n\x04\x04\x08\x02\x04\x12\x04\x89\x03\x02'\x1a\xb2\x02\x20Chang\
    es\x20to\x20be\x20atomically\x20applied\x20to\x20the\x20specified\x20row\
    \x20if\x20`predicate_filter`\n\x20yields\x20at\x20least\x20one\x20cell\
    \x20when\x20applied\x20to\x20`row_key`.\x20Entries\x20are\x20applied\x20\
    in\n\x20order,\x20meaning\x20that\x20earlier\x20mutations\x20can\x20be\
    \x20masked\x20by\x20later\x20ones.\n\x20Must\x20contain\x20at\x20least\
    \x20one\x20entry\x20if\x20`false_mutations`\x20is\x20empty,\x20and\x20at\
    \x20most\n\x20100000.\n\n\r\n\x05\x04\x08\x02\x04\x04\x12\x04\x89\x03\
    \x02\n\n\r\n\x05\x04\x08\x02\x04\x06\x12\x04\x89\x03\x0b\x13\n\r\n\x05\
    \x04\x08\x02\x04\x01\x12\x04\x89\x03\x14\"\n\r\n\x05\x04\x08\x02\x04\x03\
    \x12\x04\x89\x03%&\n\xc0\x02\n\x04\x04\x08\x02\x05\x12\x04\x90\x03\x02(\
    \x1a\xb1\x02\x20Changes\x20to\x20be\x20atomically\x20applied\x20to\x20th\
    e\x20specified\x20row\x20if\x20`predicate_filter`\n\x20does\x20not\x20yi\
    eld\x20any\x20cells\x20when\x20applied\x20to\x20`row_key`.\x20Entries\
    \x20are\x20applied\x20in\n\x20order,\x20meaning\x20that\x20earlier\x20mu\
    tations\x20can\x20be\x20masked\x20by\x20later\x20ones.\n\x20Must\x20cont\
    ain\x20at\x20least\x20one\x20entry\x20if\x20`true_mutations`\x20is\x20em\
    pty,\x20and\x20at\x20most\n\x20100000.\n\n\r\n\x05\x04\x08\x02\x05\x04\
    \x12\x04\x90\x03\x02\n\n\r\n\x05\x04\x08\x02\x05\x06\x12\x04\x90\x03\x0b\
    \x13\n\r\n\x05\x04\x08\x02\x05\x01\x12\x04\x90\x03\x14#\n\r\n\x05\x04\
    \x08\x02\x05\x03\x12\x04\x90\x03&'\n@\n\x02\x04\t\x12\x06\x94\x03\0\x98\
    \x03\x01\x1a2\x20Response\x20message\x20for\x20Bigtable.CheckAndMutateRo\
    w.\n\n\x0b\n\x03\x04\t\x01\x12\x04\x94\x03\x08!\nk\n\x04\x04\t\x02\0\x12\
    \x04\x97\x03\x02\x1d\x1a]\x20Whether\x20or\x20not\x20the\x20request's\
    \x20`predicate_filter`\x20yielded\x20any\x20results\x20for\n\x20the\x20s\
    pecified\x20row.\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\x97\x03\x02\x06\n\r\
    \n\x05\x04\t\x02\0\x01\x12\x04\x97\x03\x07\x18\n\r\n\x05\x04\t\x02\0\x03\
    \x12\x04\x97\x03\x1b\x1c\n@\n\x02\x04\n\x12\x06\x9b\x03\0\xb5\x03\x01\
    \x1a2\x20Request\x20message\x20for\x20Bigtable.ReadModifyWriteRow.\n\n\
    \x0b\n\x03\x04\n\x01\x12\x04\x9b\x03\x08!\n\xc5\x01\n\x04\x04\n\x02\0\
    \x12\x06\xa0\x03\x02\xa5\x03\x04\x1a\xb4\x01\x20Required.\x20The\x20uniq\
    ue\x20name\x20of\x20the\x20table\x20to\x20which\x20the\x20read/modify/wr\
    ite\x20rules\x20should\x20be\n\x20applied.\n\x20Values\x20are\x20of\x20t\
    he\x20form\n\x20`projects/<project>/instances/<instance>/tables/<table>`\
    .\n\n\r\n\x05\x04\n\x02\0\x05\x12\x04\xa0\x03\x02\x08\n\r\n\x05\x04\n\
    \x02\0\x01\x12\x04\xa0\x03\t\x13\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xa0\
    \x03\x16\x17\n\x0f\n\x05\x04\n\x02\0\x08\x12\x06\xa0\x03\x18\xa5\x03\x03\
    \n\x10\n\x08\x04\n\x02\0\x08\x9c\x08\0\x12\x04\xa1\x03\x04*\n\x11\n\x07\
    \x04\n\x02\0\x08\x9f\x08\x12\x06\xa2\x03\x04\xa4\x03\x05\n\x80\x01\n\x04\
    \x04\n\x02\x01\x12\x04\xa9\x03\x02\x1c\x1ar\x20This\x20value\x20specifie\
    s\x20routing\x20for\x20replication.\x20If\x20not\x20specified,\x20the\n\
    \x20\"default\"\x20application\x20profile\x20will\x20be\x20used.\n\n\r\n\
    \x05\x04\n\x02\x01\x05\x12\x04\xa9\x03\x02\x08\n\r\n\x05\x04\n\x02\x01\
    \x01\x12\x04\xa9\x03\t\x17\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xa9\x03\
    \x1a\x1b\n\xc3\x01\n\x04\x04\n\x02\x02\x12\x04\xaf\x03\x02=\x1a\xb4\x01\
    \x20Required.\x20The\x20key\x20of\x20the\x20row\x20to\x20which\x20the\
    \x20read/modify/write\x20rules\x20should\x20be\x20applied.\n\n\x20Classi\
    fied\x20as\x20IDENTIFYING_ID\x20to\x20provide\x20context\x20around\x20da\
    ta\x20accesses\x20for\n\x20auditing\x20systems.\n\n\r\n\x05\x04\n\x02\
    \x02\x05\x12\x04\xaf\x03\x02\x07\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\xaf\
    \x03\x08\x0f\n\r\n\x05\x04\n\x02\x02\x03\x12\x04\xaf\x03\x12\x13\n\r\n\
    \x05\x04\n\x02\x02\x08\x12\x04\xaf\x03\x14<\n\x10\n\x08\x04\n\x02\x02\
    \x08\x9c\x08\0\x12\x04\xaf\x03\x15;\n\xd1\x01\n\x04\x04\n\x02\x03\x12\
    \x04\xb4\x03\x02R\x1a\xc2\x01\x20Required.\x20Rules\x20specifying\x20how\
    \x20the\x20specified\x20row's\x20contents\x20are\x20to\x20be\x20transfor\
    med\n\x20into\x20writes.\x20Entries\x20are\x20applied\x20in\x20order,\
    \x20meaning\x20that\x20earlier\x20rules\x20will\n\x20affect\x20the\x20re\
    sults\x20of\x20later\x20ones.\n\n\r\n\x05\x04\n\x02\x03\x04\x12\x04\xb4\
    \x03\x02\n\n\r\n\x05\x04\n\x02\x03\x06\x12\x04\xb4\x03\x0b\x1e\n\r\n\x05\
    \x04\n\x02\x03\x01\x12\x04\xb4\x03\x1f$\n\r\n\x05\x04\n\x02\x03\x03\x12\
    \x04\xb4\x03'(\n\r\n\x05\x04\n\x02\x03\x08\x12\x04\xb4\x03)Q\n\x10\n\x08\
    \x04\n\x02\x03\x08\x9c\x08\0\x12\x04\xb4\x03*P\nA\n\x02\x04\x0b\x12\x06\
    \xb8\x03\0\xbb\x03\x01\x1a3\x20Response\x20message\x20for\x20Bigtable.Re\
    adModifyWriteRow.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xb8\x03\x08\"\nW\n\
    \x04\x04\x0b\x02\0\x12\x04\xba\x03\x02\x0e\x1aI\x20A\x20Row\x20containin\
    g\x20the\x20new\x20contents\x20of\x20all\x20cells\x20modified\x20by\x20t\
    he\x20request.\n\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\xba\x03\x02\x05\n\r\
    \n\x05\x04\x0b\x02\0\x01\x12\x04\xba\x03\x06\t\n\r\n\x05\x04\x0b\x02\0\
    \x03\x12\x04\xba\x03\x0c\rb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(7);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::client::file_descriptor().clone());
            deps.push(super::field_behavior::file_descriptor().clone());
            deps.push(super::resource::file_descriptor().clone());
            deps.push(super::data::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            deps.push(super::status::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(15);
            messages.push(ReadRowsRequest::generated_message_descriptor_data());
            messages.push(ReadRowsResponse::generated_message_descriptor_data());
            messages.push(SampleRowKeysRequest::generated_message_descriptor_data());
            messages.push(SampleRowKeysResponse::generated_message_descriptor_data());
            messages.push(MutateRowRequest::generated_message_descriptor_data());
            messages.push(MutateRowResponse::generated_message_descriptor_data());
            messages.push(MutateRowsRequest::generated_message_descriptor_data());
            messages.push(MutateRowsResponse::generated_message_descriptor_data());
            messages.push(CheckAndMutateRowRequest::generated_message_descriptor_data());
            messages.push(CheckAndMutateRowResponse::generated_message_descriptor_data());
            messages.push(ReadModifyWriteRowRequest::generated_message_descriptor_data());
            messages.push(ReadModifyWriteRowResponse::generated_message_descriptor_data());
            messages.push(read_rows_response::CellChunk::generated_message_descriptor_data());
            messages.push(mutate_rows_request::Entry::generated_message_descriptor_data());
            messages.push(mutate_rows_response::Entry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
