// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/v2/request_stats.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReadIterationStats {
    // message fields
    pub rows_seen_count: i64,
    pub rows_returned_count: i64,
    pub cells_seen_count: i64,
    pub cells_returned_count: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadIterationStats {
    fn default() -> &'a ReadIterationStats {
        <ReadIterationStats as ::protobuf::Message>::default_instance()
    }
}

impl ReadIterationStats {
    pub fn new() -> ReadIterationStats {
        ::std::default::Default::default()
    }

    // int64 rows_seen_count = 1;


    pub fn get_rows_seen_count(&self) -> i64 {
        self.rows_seen_count
    }
    pub fn clear_rows_seen_count(&mut self) {
        self.rows_seen_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_rows_seen_count(&mut self, v: i64) {
        self.rows_seen_count = v;
    }

    // int64 rows_returned_count = 2;


    pub fn get_rows_returned_count(&self) -> i64 {
        self.rows_returned_count
    }
    pub fn clear_rows_returned_count(&mut self) {
        self.rows_returned_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_rows_returned_count(&mut self, v: i64) {
        self.rows_returned_count = v;
    }

    // int64 cells_seen_count = 3;


    pub fn get_cells_seen_count(&self) -> i64 {
        self.cells_seen_count
    }
    pub fn clear_cells_seen_count(&mut self) {
        self.cells_seen_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_cells_seen_count(&mut self, v: i64) {
        self.cells_seen_count = v;
    }

    // int64 cells_returned_count = 4;


    pub fn get_cells_returned_count(&self) -> i64 {
        self.cells_returned_count
    }
    pub fn clear_cells_returned_count(&mut self) {
        self.cells_returned_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_cells_returned_count(&mut self, v: i64) {
        self.cells_returned_count = v;
    }
}

impl ::protobuf::Message for ReadIterationStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rows_seen_count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rows_returned_count = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cells_seen_count = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cells_returned_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.rows_seen_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.rows_seen_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rows_returned_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rows_returned_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cells_seen_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cells_seen_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cells_returned_count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.cells_returned_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.rows_seen_count != 0 {
            os.write_int64(1, self.rows_seen_count)?;
        }
        if self.rows_returned_count != 0 {
            os.write_int64(2, self.rows_returned_count)?;
        }
        if self.cells_seen_count != 0 {
            os.write_int64(3, self.cells_seen_count)?;
        }
        if self.cells_returned_count != 0 {
            os.write_int64(4, self.cells_returned_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadIterationStats {
        ReadIterationStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rows_seen_count",
                |m: &ReadIterationStats| { &m.rows_seen_count },
                |m: &mut ReadIterationStats| { &mut m.rows_seen_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rows_returned_count",
                |m: &ReadIterationStats| { &m.rows_returned_count },
                |m: &mut ReadIterationStats| { &mut m.rows_returned_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cells_seen_count",
                |m: &ReadIterationStats| { &m.cells_seen_count },
                |m: &mut ReadIterationStats| { &mut m.cells_seen_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cells_returned_count",
                |m: &ReadIterationStats| { &m.cells_returned_count },
                |m: &mut ReadIterationStats| { &mut m.cells_returned_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadIterationStats>(
                "ReadIterationStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadIterationStats {
        static instance: ::protobuf::rt::LazyV2<ReadIterationStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadIterationStats::new)
    }
}

impl ::protobuf::Clear for ReadIterationStats {
    fn clear(&mut self) {
        self.rows_seen_count = 0;
        self.rows_returned_count = 0;
        self.cells_seen_count = 0;
        self.cells_returned_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadIterationStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadIterationStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestLatencyStats {
    // message fields
    pub frontend_server_latency: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestLatencyStats {
    fn default() -> &'a RequestLatencyStats {
        <RequestLatencyStats as ::protobuf::Message>::default_instance()
    }
}

impl RequestLatencyStats {
    pub fn new() -> RequestLatencyStats {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration frontend_server_latency = 1;


    pub fn get_frontend_server_latency(&self) -> &::protobuf::well_known_types::Duration {
        self.frontend_server_latency.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_frontend_server_latency(&mut self) {
        self.frontend_server_latency.clear();
    }

    pub fn has_frontend_server_latency(&self) -> bool {
        self.frontend_server_latency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frontend_server_latency(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.frontend_server_latency = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frontend_server_latency(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.frontend_server_latency.is_none() {
            self.frontend_server_latency.set_default();
        }
        self.frontend_server_latency.as_mut().unwrap()
    }

    // Take field
    pub fn take_frontend_server_latency(&mut self) -> ::protobuf::well_known_types::Duration {
        self.frontend_server_latency.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for RequestLatencyStats {
    fn is_initialized(&self) -> bool {
        for v in &self.frontend_server_latency {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.frontend_server_latency)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.frontend_server_latency.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.frontend_server_latency.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestLatencyStats {
        RequestLatencyStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "frontend_server_latency",
                |m: &RequestLatencyStats| { &m.frontend_server_latency },
                |m: &mut RequestLatencyStats| { &mut m.frontend_server_latency },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestLatencyStats>(
                "RequestLatencyStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestLatencyStats {
        static instance: ::protobuf::rt::LazyV2<RequestLatencyStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestLatencyStats::new)
    }
}

impl ::protobuf::Clear for RequestLatencyStats {
    fn clear(&mut self) {
        self.frontend_server_latency.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestLatencyStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestLatencyStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FullReadStatsView {
    // message fields
    pub read_iteration_stats: ::protobuf::SingularPtrField<ReadIterationStats>,
    pub request_latency_stats: ::protobuf::SingularPtrField<RequestLatencyStats>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FullReadStatsView {
    fn default() -> &'a FullReadStatsView {
        <FullReadStatsView as ::protobuf::Message>::default_instance()
    }
}

impl FullReadStatsView {
    pub fn new() -> FullReadStatsView {
        ::std::default::Default::default()
    }

    // .google.bigtable.v2.ReadIterationStats read_iteration_stats = 1;


    pub fn get_read_iteration_stats(&self) -> &ReadIterationStats {
        self.read_iteration_stats.as_ref().unwrap_or_else(|| <ReadIterationStats as ::protobuf::Message>::default_instance())
    }
    pub fn clear_read_iteration_stats(&mut self) {
        self.read_iteration_stats.clear();
    }

    pub fn has_read_iteration_stats(&self) -> bool {
        self.read_iteration_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_iteration_stats(&mut self, v: ReadIterationStats) {
        self.read_iteration_stats = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_iteration_stats(&mut self) -> &mut ReadIterationStats {
        if self.read_iteration_stats.is_none() {
            self.read_iteration_stats.set_default();
        }
        self.read_iteration_stats.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_iteration_stats(&mut self) -> ReadIterationStats {
        self.read_iteration_stats.take().unwrap_or_else(|| ReadIterationStats::new())
    }

    // .google.bigtable.v2.RequestLatencyStats request_latency_stats = 2;


    pub fn get_request_latency_stats(&self) -> &RequestLatencyStats {
        self.request_latency_stats.as_ref().unwrap_or_else(|| <RequestLatencyStats as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_latency_stats(&mut self) {
        self.request_latency_stats.clear();
    }

    pub fn has_request_latency_stats(&self) -> bool {
        self.request_latency_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_latency_stats(&mut self, v: RequestLatencyStats) {
        self.request_latency_stats = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_latency_stats(&mut self) -> &mut RequestLatencyStats {
        if self.request_latency_stats.is_none() {
            self.request_latency_stats.set_default();
        }
        self.request_latency_stats.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_latency_stats(&mut self) -> RequestLatencyStats {
        self.request_latency_stats.take().unwrap_or_else(|| RequestLatencyStats::new())
    }
}

impl ::protobuf::Message for FullReadStatsView {
    fn is_initialized(&self) -> bool {
        for v in &self.read_iteration_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_latency_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_iteration_stats)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_latency_stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.read_iteration_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_latency_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.read_iteration_stats.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_latency_stats.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FullReadStatsView {
        FullReadStatsView::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadIterationStats>>(
                "read_iteration_stats",
                |m: &FullReadStatsView| { &m.read_iteration_stats },
                |m: &mut FullReadStatsView| { &mut m.read_iteration_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestLatencyStats>>(
                "request_latency_stats",
                |m: &FullReadStatsView| { &m.request_latency_stats },
                |m: &mut FullReadStatsView| { &mut m.request_latency_stats },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FullReadStatsView>(
                "FullReadStatsView",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FullReadStatsView {
        static instance: ::protobuf::rt::LazyV2<FullReadStatsView> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FullReadStatsView::new)
    }
}

impl ::protobuf::Clear for FullReadStatsView {
    fn clear(&mut self) {
        self.read_iteration_stats.clear();
        self.request_latency_stats.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FullReadStatsView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FullReadStatsView {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestStats {
    // message oneof groups
    pub stats_view: ::std::option::Option<RequestStats_oneof_stats_view>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestStats {
    fn default() -> &'a RequestStats {
        <RequestStats as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RequestStats_oneof_stats_view {
    full_read_stats_view(FullReadStatsView),
}

impl RequestStats {
    pub fn new() -> RequestStats {
        ::std::default::Default::default()
    }

    // .google.bigtable.v2.FullReadStatsView full_read_stats_view = 1;


    pub fn get_full_read_stats_view(&self) -> &FullReadStatsView {
        match self.stats_view {
            ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(ref v)) => v,
            _ => <FullReadStatsView as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_full_read_stats_view(&mut self) {
        self.stats_view = ::std::option::Option::None;
    }

    pub fn has_full_read_stats_view(&self) -> bool {
        match self.stats_view {
            ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_full_read_stats_view(&mut self, v: FullReadStatsView) {
        self.stats_view = ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(v))
    }

    // Mutable pointer to the field.
    pub fn mut_full_read_stats_view(&mut self) -> &mut FullReadStatsView {
        if let ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(_)) = self.stats_view {
        } else {
            self.stats_view = ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(FullReadStatsView::new()));
        }
        match self.stats_view {
            ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_full_read_stats_view(&mut self) -> FullReadStatsView {
        if self.has_full_read_stats_view() {
            match self.stats_view.take() {
                ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(v)) => v,
                _ => panic!(),
            }
        } else {
            FullReadStatsView::new()
        }
    }
}

impl ::protobuf::Message for RequestStats {
    fn is_initialized(&self) -> bool {
        if let Some(RequestStats_oneof_stats_view::full_read_stats_view(ref v)) = self.stats_view {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.stats_view = ::std::option::Option::Some(RequestStats_oneof_stats_view::full_read_stats_view(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.stats_view {
            match v {
                &RequestStats_oneof_stats_view::full_read_stats_view(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.stats_view {
            match v {
                &RequestStats_oneof_stats_view::full_read_stats_view(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestStats {
        RequestStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FullReadStatsView>(
                "full_read_stats_view",
                RequestStats::has_full_read_stats_view,
                RequestStats::get_full_read_stats_view,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestStats>(
                "RequestStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestStats {
        static instance: ::protobuf::rt::LazyV2<RequestStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestStats::new)
    }
}

impl ::protobuf::Clear for RequestStats {
    fn clear(&mut self) {
        self.stats_view = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&google/bigtable/v2/request_stats.proto\x12\x12google.bigtable.v2\x1a\
    \x1egoogle/protobuf/duration.proto\"\xc8\x01\n\x12ReadIterationStats\x12\
    &\n\x0frows_seen_count\x18\x01\x20\x01(\x03R\rrowsSeenCount\x12.\n\x13ro\
    ws_returned_count\x18\x02\x20\x01(\x03R\x11rowsReturnedCount\x12(\n\x10c\
    ells_seen_count\x18\x03\x20\x01(\x03R\x0ecellsSeenCount\x120\n\x14cells_\
    returned_count\x18\x04\x20\x01(\x03R\x12cellsReturnedCount\"h\n\x13Reque\
    stLatencyStats\x12Q\n\x17frontend_server_latency\x18\x01\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x15frontendServerLatency\"\xca\x01\n\x11F\
    ullReadStatsView\x12X\n\x14read_iteration_stats\x18\x01\x20\x01(\x0b2&.g\
    oogle.bigtable.v2.ReadIterationStatsR\x12readIterationStats\x12[\n\x15re\
    quest_latency_stats\x18\x02\x20\x01(\x0b2'.google.bigtable.v2.RequestLat\
    encyStatsR\x13requestLatencyStats\"v\n\x0cRequestStats\x12X\n\x14full_re\
    ad_stats_view\x18\x01\x20\x01(\x0b2%.google.bigtable.v2.FullReadStatsVie\
    wH\0R\x11fullReadStatsViewB\x0c\n\nstats_viewB\xbd\x01\n\x16com.google.b\
    igtable.v2B\x11RequestStatsProtoP\x01Z:google.golang.org/genproto/google\
    apis/bigtable/v2;bigtable\xaa\x02\x18Google.Cloud.Bigtable.V2\xca\x02\
    \x18Google\\Cloud\\Bigtable\\V2\xea\x02\x1bGoogle::Cloud::Bigtable::V2J\
    \x86$\n\x06\x12\x04\x0e\0p\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xb1\x04\x20Copyright\x202022\x20Google\x20LLC\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\0\x1b\n\t\n\x02\x03\0\x12\x03\x12\0(\n\x08\n\x01\x08\
    \x12\x03\x14\05\n\t\n\x02\x08%\x12\x03\x14\05\n\x08\n\x01\x08\x12\x03\
    \x15\0Q\n\t\n\x02\x08\x0b\x12\x03\x15\0Q\n\x08\n\x01\x08\x12\x03\x16\0\"\
    \n\t\n\x02\x08\n\x12\x03\x16\0\"\n\x08\n\x01\x08\x12\x03\x17\02\n\t\n\
    \x02\x08\x08\x12\x03\x17\02\n\x08\n\x01\x08\x12\x03\x18\0/\n\t\n\x02\x08\
    \x01\x12\x03\x18\0/\n\x08\n\x01\x08\x12\x03\x19\05\n\t\n\x02\x08)\x12\
    \x03\x19\05\n\x08\n\x01\x08\x12\x03\x1a\04\n\t\n\x02\x08-\x12\x03\x1a\04\
    \n\x83\x07\n\x02\x04\0\x12\x04-\0;\x01\x1a\xbf\x01\x20ReadIterationStats\
    \x20captures\x20information\x20about\x20the\x20iteration\x20of\x20rows\
    \x20or\x20cells\n\x20over\x20the\x20course\x20of\x20a\x20read,\x20e.g.\
    \x20how\x20many\x20results\x20were\x20scanned\x20in\x20a\x20read\n\x20op\
    eration\x20versus\x20the\x20results\x20returned.\n2\xb4\x05\n\x20Message\
    s\x20related\x20to\x20RequestStats,\x20part\x20of\x20the\x20Query\x20Sta\
    ts\x20feature,\x20that\x20can\n\x20help\x20understand\x20the\x20performa\
    nce\x20of\x20requests.\n\n\x20The\x20layout\x20of\x20requests\x20below\
    \x20is\x20as\x20follows:\n\x20\x20\x20*\x20RequestStats\x20serves\x20as\
    \x20the\x20top-level\x20container\x20for\x20statistics\x20and\n\x20\x20\
    \x20\x20\x20measures\x20related\x20to\x20Bigtable\x20requests.\x20This\
    \x20common\x20object\x20is\x20returned\x20as\n\x20\x20\x20\x20\x20part\
    \x20of\x20methods\x20in\x20the\x20Data\x20API.\n\x20\x20\x20*\x20Request\
    Stats\x20contains\x20multiple\x20*views*\x20of\x20related\x20data,\x20ch\
    osen\x20by\x20an\n\x20\x20\x20\x20\x20option\x20in\x20the\x20source\x20D\
    ata\x20API\x20method.\x20The\x20view\x20that\x20is\x20returned\x20is\n\
    \x20\x20\x20\x20\x20designed\x20to\x20have\x20all\x20submessages\x20(and\
    \x20their\x20submessages,\x20and\x20so\x20on)\n\x20\x20\x20\x20\x20fille\
    d-in,\x20to\x20provide\x20a\x20comprehensive\x20selection\x20of\x20stati\
    stics\x20and\n\x20\x20\x20\x20\x20measures\x20related\x20to\x20the\x20re\
    quested\x20view.\n\n\n\n\x03\x04\0\x01\x12\x03-\x08\x1a\n|\n\x04\x04\0\
    \x02\0\x12\x030\x02\x1c\x1ao\x20The\x20rows\x20seen\x20(scanned)\x20as\
    \x20part\x20of\x20the\x20request.\x20This\x20includes\x20the\x20count\
    \x20of\n\x20rows\x20returned,\x20as\x20captured\x20below.\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x030\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x030\
    \x08\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x030\x1a\x1b\n8\n\x04\x04\0\x02\
    \x01\x12\x033\x02\x20\x1a+\x20The\x20rows\x20returned\x20as\x20part\x20o\
    f\x20the\x20request.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x033\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x033\x08\x1b\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x033\x1e\x1f\n~\n\x04\x04\0\x02\x02\x12\x037\x02\x1d\x1aq\x20Th\
    e\x20cells\x20seen\x20(scanned)\x20as\x20part\x20of\x20the\x20request.\
    \x20This\x20includes\x20the\x20count\x20of\n\x20cells\x20returned,\x20as\
    \x20captured\x20below.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x037\x02\x07\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x037\x08\x18\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x037\x1b\x1c\n9\n\x04\x04\0\x02\x03\x12\x03:\x02!\x1a,\x20T\
    he\x20cells\x20returned\x20as\x20part\x20of\x20the\x20request.\n\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03:\x02\x07\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03:\x08\x1c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03:\x1f\x20\n\xd7\
    \x01\n\x02\x04\x01\x12\x04@\0S\x01\x1a\xca\x01\x20RequestLatencyStats\
    \x20provides\x20a\x20measurement\x20of\x20the\x20latency\x20of\x20the\
    \x20request\x20as\n\x20it\x20interacts\x20with\x20different\x20systems\
    \x20over\x20its\x20lifetime,\x20e.g.\x20how\x20long\x20the\n\x20request\
    \x20took\x20to\x20execute\x20within\x20a\x20frontend\x20server.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03@\x08\x1b\n\xda\x07\n\x04\x04\x01\x02\0\x12\x03R\
    \x027\x1a\xcc\x07\x20The\x20latency\x20measured\x20by\x20the\x20frontend\
    \x20server\x20handling\x20this\x20request,\x20from\n\x20when\x20the\x20r\
    equest\x20was\x20received,\x20to\x20when\x20this\x20value\x20is\x20sent\
    \x20back\x20in\x20the\n\x20response.\x20For\x20more\x20context\x20on\x20\
    the\x20component\x20that\x20is\x20measuring\x20this\x20latency,\n\x20see\
    :\x20https://cloud.google.com/bigtable/docs/overview\n\n\x20Note:\x20Thi\
    s\x20value\x20may\x20be\x20slightly\x20shorter\x20than\x20the\x20value\
    \x20reported\x20into\n\x20aggregate\x20latency\x20metrics\x20in\x20Monit\
    oring\x20for\x20this\x20request\n\x20(https://cloud.google.com/bigtable/\
    docs/monitoring-instance)\x20as\x20this\x20value\n\x20needs\x20to\x20be\
    \x20sent\x20in\x20the\x20response\x20before\x20the\x20latency\x20measure\
    ment\x20including\n\x20that\x20transmission\x20is\x20finalized.\n\n\x20N\
    ote:\x20This\x20value\x20includes\x20the\x20end-to-end\x20latency\x20of\
    \x20contacting\x20nodes\x20in\n\x20the\x20targeted\x20cluster,\x20e.g.\
    \x20measuring\x20from\x20when\x20the\x20first\x20byte\x20arrives\x20at\n\
    \x20the\x20frontend\x20server,\x20to\x20when\x20this\x20value\x20is\x20s\
    ent\x20back\x20as\x20the\x20last\x20value\x20in\n\x20the\x20response,\
    \x20including\x20any\x20latency\x20incurred\x20by\x20contacting\x20nodes\
    ,\x20waiting\n\x20for\x20results\x20from\x20nodes,\x20and\x20finally\x20\
    sending\x20results\x20from\x20nodes\x20back\x20to\x20the\n\x20caller.\n\
    \n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03R\x02\x1a\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03R\x1b2\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03R56\nL\n\x02\
    \x04\x02\x12\x04V\0`\x01\x1a@\x20FullReadStatsView\x20captures\x20all\
    \x20known\x20information\x20about\x20a\x20read.\n\n\n\n\x03\x04\x02\x01\
    \x12\x03V\x08\x19\n\xf4\x01\n\x04\x04\x02\x02\0\x12\x03[\x02.\x1a\xe6\
    \x01\x20Iteration\x20stats\x20describe\x20how\x20efficient\x20the\x20rea\
    d\x20is,\x20e.g.\x20comparing\n\x20rows\x20seen\x20vs.\x20rows\x20return\
    ed\x20or\x20cells\x20seen\x20vs\x20cells\x20returned\x20can\x20provide\
    \x20an\n\x20indication\x20of\x20read\x20efficiency\x20(the\x20higher\x20\
    the\x20ratio\x20of\x20seen\x20to\x20retuned\x20the\n\x20better).\n\n\x0c\
    \n\x05\x04\x02\x02\0\x06\x12\x03[\x02\x14\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03[\x15)\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03[,-\nj\n\x04\x04\x02\
    \x02\x01\x12\x03_\x020\x1a]\x20Request\x20latency\x20stats\x20describe\
    \x20the\x20time\x20taken\x20to\x20complete\x20a\x20request,\x20from\n\
    \x20the\x20server\x20side.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03_\
    \x02\x15\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03_\x16+\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03_./\n\xfc\x01\n\x02\x04\x03\x12\x04f\0p\x01\x1a\
    \xef\x01\x20RequestStats\x20is\x20the\x20container\x20for\x20additional\
    \x20information\x20pertaining\x20to\x20a\n\x20single\x20request,\x20help\
    ful\x20for\x20evaluating\x20the\x20performance\x20of\x20the\x20sent\x20r\
    equest.\n\x20Currently,\x20there\x20are\x20the\x20following\x20supported\
    \x20methods:\n\x20\x20\x20*\x20google.bigtable.v2.ReadRows\n\n\n\n\x03\
    \x04\x03\x01\x12\x03f\x08\x14\n\xa8\x01\n\x04\x04\x03\x08\0\x12\x04k\x02\
    o\x03\x1a\x99\x01\x20Information\x20pertaining\x20to\x20each\x20request\
    \x20type\x20received.\x20The\x20type\x20is\x20chosen\n\x20based\x20on\
    \x20the\x20requested\x20view.\n\n\x20See\x20the\x20messages\x20above\x20\
    for\x20additional\x20context.\n\n\x0c\n\x05\x04\x03\x08\0\x01\x12\x03k\
    \x08\x12\n|\n\x04\x04\x03\x02\0\x12\x03n\x04/\x1ao\x20Available\x20with\
    \x20the\x20ReadRowsRequest.RequestStatsView.REQUEST_STATS_FULL\n\x20view\
    ,\x20see\x20package\x20google.bigtable.v2.\n\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03n\x04\x15\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03n\x16*\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03n-.b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
