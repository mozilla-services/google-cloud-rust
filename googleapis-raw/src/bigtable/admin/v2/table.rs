// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/bigtable/admin/v2/table.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  A collection of user data indexed by row, column, and timestamp.
///  Each table is served using the resources of its parent cluster.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.bigtable.admin.v2.Table)
pub struct Table {
    // message fields
    ///  (`OutputOnly`)
    ///  The unique name of the table. Values are of the form
    ///  `projects/<project>/instances/<instance>/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
    ///  Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Table.name)
    pub name: ::std::string::String,
    ///  (`OutputOnly`)
    ///  Map from cluster ID to per-cluster table state.
    ///  If it could not be determined whether or not the table has data in a
    ///  particular cluster (for example, if its zone is unavailable), then
    ///  there will be an entry for the cluster with UNKNOWN `replication_status`.
    ///  Views: `REPLICATION_VIEW`, `FULL`
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Table.cluster_states)
    pub cluster_states: ::std::collections::HashMap<::std::string::String, table::ClusterState>,
    ///  (`CreationOnly`)
    ///  The column families configured for this table, mapped by column family ID.
    ///  Views: `SCHEMA_VIEW`, `FULL`
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Table.column_families)
    pub column_families: ::std::collections::HashMap<::std::string::String, ColumnFamily>,
    ///  (`CreationOnly`)
    ///  The granularity (i.e. `MILLIS`) at which timestamps are stored in
    ///  this table. Timestamps not matching the granularity will be rejected.
    ///  If unspecified at creation time, the value will be set to `MILLIS`.
    ///  Views: `SCHEMA_VIEW`, `FULL`
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Table.granularity)
    pub granularity: ::protobuf::EnumOrUnknown<table::TimestampGranularity>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.Table.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Table {
    fn default() -> &'a Table {
        <Table as ::protobuf::Message>::default_instance()
    }
}

impl Table {
    pub fn new() -> Table {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Table| { &m.name },
            |m: &mut Table| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "cluster_states",
            |m: &Table| { &m.cluster_states },
            |m: &mut Table| { &mut m.cluster_states },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "column_families",
            |m: &Table| { &m.column_families },
            |m: &mut Table| { &mut m.column_families },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "granularity",
            |m: &Table| { &m.granularity },
            |m: &mut Table| { &mut m.granularity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Table>(
            "Table",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Table {
    const NAME: &'static str = "Table";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.cluster_states.insert(key, value);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.column_families.insert(key, value);
                },
                32 => {
                    self.granularity = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for (k, v) in &self.cluster_states {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.column_families {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.granularity != ::protobuf::EnumOrUnknown::new(table::TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.granularity.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for (k, v) in &self.cluster_states {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.column_families {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.granularity != ::protobuf::EnumOrUnknown::new(table::TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.granularity))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Table {
        Table::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.cluster_states.clear();
        self.column_families.clear();
        self.granularity = ::protobuf::EnumOrUnknown::new(table::TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Table {
        static instance: ::protobuf::rt::Lazy<Table> = ::protobuf::rt::Lazy::new();
        instance.get(Table::new)
    }
}

impl ::protobuf::MessageFull for Table {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Table").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Table {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Table {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Table`
pub mod table {
    ///  The state of a table's data in a particular cluster.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.bigtable.admin.v2.Table.ClusterState)
    pub struct ClusterState {
        // message fields
        ///  (`OutputOnly`)
        ///  The state of replication for the table in this cluster.
        // @@protoc_insertion_point(field:google.bigtable.admin.v2.Table.ClusterState.replication_state)
        pub replication_state: ::protobuf::EnumOrUnknown<cluster_state::ReplicationState>,
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.Table.ClusterState.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ClusterState {
        fn default() -> &'a ClusterState {
            <ClusterState as ::protobuf::Message>::default_instance()
        }
    }

    impl ClusterState {
        pub fn new() -> ClusterState {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "replication_state",
                |m: &ClusterState| { &m.replication_state },
                |m: &mut ClusterState| { &mut m.replication_state },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClusterState>(
                "Table.ClusterState",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ClusterState {
        const NAME: &'static str = "ClusterState";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.replication_state = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.replication_state != ::protobuf::EnumOrUnknown::new(cluster_state::ReplicationState::STATE_NOT_KNOWN) {
                my_size += ::protobuf::rt::int32_size(1, self.replication_state.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.replication_state != ::protobuf::EnumOrUnknown::new(cluster_state::ReplicationState::STATE_NOT_KNOWN) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.replication_state))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ClusterState {
            ClusterState::new()
        }

        fn clear(&mut self) {
            self.replication_state = ::protobuf::EnumOrUnknown::new(cluster_state::ReplicationState::STATE_NOT_KNOWN);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ClusterState {
            static instance: ClusterState = ClusterState {
                replication_state: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ClusterState {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Table.ClusterState").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ClusterState {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ClusterState {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `ClusterState`
    pub mod cluster_state {
        ///  Table replication states.
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:google.bigtable.admin.v2.Table.ClusterState.ReplicationState)
        pub enum ReplicationState {
            // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.ClusterState.ReplicationState.STATE_NOT_KNOWN)
            STATE_NOT_KNOWN = 0,
            // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.ClusterState.ReplicationState.INITIALIZING)
            INITIALIZING = 1,
            // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.ClusterState.ReplicationState.PLANNED_MAINTENANCE)
            PLANNED_MAINTENANCE = 2,
            // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.ClusterState.ReplicationState.UNPLANNED_MAINTENANCE)
            UNPLANNED_MAINTENANCE = 3,
            // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.ClusterState.ReplicationState.READY)
            READY = 4,
        }

        impl ::protobuf::Enum for ReplicationState {
            const NAME: &'static str = "ReplicationState";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<ReplicationState> {
                match value {
                    0 => ::std::option::Option::Some(ReplicationState::STATE_NOT_KNOWN),
                    1 => ::std::option::Option::Some(ReplicationState::INITIALIZING),
                    2 => ::std::option::Option::Some(ReplicationState::PLANNED_MAINTENANCE),
                    3 => ::std::option::Option::Some(ReplicationState::UNPLANNED_MAINTENANCE),
                    4 => ::std::option::Option::Some(ReplicationState::READY),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [ReplicationState] = &[
                ReplicationState::STATE_NOT_KNOWN,
                ReplicationState::INITIALIZING,
                ReplicationState::PLANNED_MAINTENANCE,
                ReplicationState::UNPLANNED_MAINTENANCE,
                ReplicationState::READY,
            ];
        }

        impl ::protobuf::EnumFull for ReplicationState {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("Table.ClusterState.ReplicationState").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for ReplicationState {
            fn default() -> Self {
                ReplicationState::STATE_NOT_KNOWN
            }
        }

        impl ReplicationState {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ReplicationState>("Table.ClusterState.ReplicationState")
            }
        }
    }

    ///  Possible timestamp granularities to use when keeping multiple versions
    ///  of data in a table.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.bigtable.admin.v2.Table.TimestampGranularity)
    pub enum TimestampGranularity {
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.TimestampGranularity.TIMESTAMP_GRANULARITY_UNSPECIFIED)
        TIMESTAMP_GRANULARITY_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.TimestampGranularity.MILLIS)
        MILLIS = 1,
    }

    impl ::protobuf::Enum for TimestampGranularity {
        const NAME: &'static str = "TimestampGranularity";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<TimestampGranularity> {
            match value {
                0 => ::std::option::Option::Some(TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED),
                1 => ::std::option::Option::Some(TimestampGranularity::MILLIS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [TimestampGranularity] = &[
            TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED,
            TimestampGranularity::MILLIS,
        ];
    }

    impl ::protobuf::EnumFull for TimestampGranularity {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Table.TimestampGranularity").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for TimestampGranularity {
        fn default() -> Self {
            TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED
        }
    }

    impl TimestampGranularity {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TimestampGranularity>("Table.TimestampGranularity")
        }
    }

    ///  Defines a view over a table's fields.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.bigtable.admin.v2.Table.View)
    pub enum View {
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.View.VIEW_UNSPECIFIED)
        VIEW_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.View.NAME_ONLY)
        NAME_ONLY = 1,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.View.SCHEMA_VIEW)
        SCHEMA_VIEW = 2,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.View.REPLICATION_VIEW)
        REPLICATION_VIEW = 3,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Table.View.FULL)
        FULL = 4,
    }

    impl ::protobuf::Enum for View {
        const NAME: &'static str = "View";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<View> {
            match value {
                0 => ::std::option::Option::Some(View::VIEW_UNSPECIFIED),
                1 => ::std::option::Option::Some(View::NAME_ONLY),
                2 => ::std::option::Option::Some(View::SCHEMA_VIEW),
                3 => ::std::option::Option::Some(View::REPLICATION_VIEW),
                4 => ::std::option::Option::Some(View::FULL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [View] = &[
            View::VIEW_UNSPECIFIED,
            View::NAME_ONLY,
            View::SCHEMA_VIEW,
            View::REPLICATION_VIEW,
            View::FULL,
        ];
    }

    impl ::protobuf::EnumFull for View {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Table.View").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for View {
        fn default() -> Self {
            View::VIEW_UNSPECIFIED
        }
    }

    impl View {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<View>("Table.View")
        }
    }
}

///  A set of columns within a table which share a common configuration.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.bigtable.admin.v2.ColumnFamily)
pub struct ColumnFamily {
    // message fields
    ///  Garbage collection rule specified as a protobuf.
    ///  Must serialize to at most 500 bytes.
    ///
    ///  NOTE: Garbage collection executes opportunistically in the background, and
    ///  so it's possible for reads to return a cell even if it matches the active
    ///  GC expression for its family.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.ColumnFamily.gc_rule)
    pub gc_rule: ::protobuf::MessageField<GcRule>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.ColumnFamily.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ColumnFamily {
    fn default() -> &'a ColumnFamily {
        <ColumnFamily as ::protobuf::Message>::default_instance()
    }
}

impl ColumnFamily {
    pub fn new() -> ColumnFamily {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, GcRule>(
            "gc_rule",
            |m: &ColumnFamily| { &m.gc_rule },
            |m: &mut ColumnFamily| { &mut m.gc_rule },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ColumnFamily>(
            "ColumnFamily",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ColumnFamily {
    const NAME: &'static str = "ColumnFamily";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gc_rule)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gc_rule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gc_rule.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ColumnFamily {
        ColumnFamily::new()
    }

    fn clear(&mut self) {
        self.gc_rule.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ColumnFamily {
        static instance: ColumnFamily = ColumnFamily {
            gc_rule: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ColumnFamily {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ColumnFamily").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ColumnFamily {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColumnFamily {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Rule for determining which cells to delete during garbage collection.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.bigtable.admin.v2.GcRule)
pub struct GcRule {
    // message oneof groups
    pub rule: ::std::option::Option<gc_rule::Rule>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.GcRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GcRule {
    fn default() -> &'a GcRule {
        <GcRule as ::protobuf::Message>::default_instance()
    }
}

impl GcRule {
    pub fn new() -> GcRule {
        ::std::default::Default::default()
    }

    // int32 max_num_versions = 1;

    pub fn max_num_versions(&self) -> i32 {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::MaxNumVersions(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_max_num_versions(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_max_num_versions(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::MaxNumVersions(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_max_num_versions(&mut self, v: i32) {
        self.rule = ::std::option::Option::Some(gc_rule::Rule::MaxNumVersions(v))
    }

    // .google.protobuf.Duration max_age = 2;

    pub fn max_age(&self) -> &::protobuf::well_known_types::duration::Duration {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::MaxAge(ref v)) => v,
            _ => <::protobuf::well_known_types::duration::Duration as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_max_age(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_max_age(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::MaxAge(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_max_age(&mut self, v: ::protobuf::well_known_types::duration::Duration) {
        self.rule = ::std::option::Option::Some(gc_rule::Rule::MaxAge(v))
    }

    // Mutable pointer to the field.
    pub fn mut_max_age(&mut self) -> &mut ::protobuf::well_known_types::duration::Duration {
        if let ::std::option::Option::Some(gc_rule::Rule::MaxAge(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(gc_rule::Rule::MaxAge(::protobuf::well_known_types::duration::Duration::new()));
        }
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::MaxAge(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_max_age(&mut self) -> ::protobuf::well_known_types::duration::Duration {
        if self.has_max_age() {
            match self.rule.take() {
                ::std::option::Option::Some(gc_rule::Rule::MaxAge(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::duration::Duration::new()
        }
    }

    // .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;

    pub fn intersection(&self) -> &gc_rule::Intersection {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::Intersection(ref v)) => v,
            _ => <gc_rule::Intersection as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_intersection(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_intersection(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::Intersection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_intersection(&mut self, v: gc_rule::Intersection) {
        self.rule = ::std::option::Option::Some(gc_rule::Rule::Intersection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_intersection(&mut self) -> &mut gc_rule::Intersection {
        if let ::std::option::Option::Some(gc_rule::Rule::Intersection(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(gc_rule::Rule::Intersection(gc_rule::Intersection::new()));
        }
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::Intersection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_intersection(&mut self) -> gc_rule::Intersection {
        if self.has_intersection() {
            match self.rule.take() {
                ::std::option::Option::Some(gc_rule::Rule::Intersection(v)) => v,
                _ => panic!(),
            }
        } else {
            gc_rule::Intersection::new()
        }
    }

    // .google.bigtable.admin.v2.GcRule.Union union = 4;

    pub fn union(&self) -> &gc_rule::Union {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::Union(ref v)) => v,
            _ => <gc_rule::Union as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_union(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_union(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::Union(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_union(&mut self, v: gc_rule::Union) {
        self.rule = ::std::option::Option::Some(gc_rule::Rule::Union(v))
    }

    // Mutable pointer to the field.
    pub fn mut_union(&mut self) -> &mut gc_rule::Union {
        if let ::std::option::Option::Some(gc_rule::Rule::Union(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(gc_rule::Rule::Union(gc_rule::Union::new()));
        }
        match self.rule {
            ::std::option::Option::Some(gc_rule::Rule::Union(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_union(&mut self) -> gc_rule::Union {
        if self.has_union() {
            match self.rule.take() {
                ::std::option::Option::Some(gc_rule::Rule::Union(v)) => v,
                _ => panic!(),
            }
        } else {
            gc_rule::Union::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "max_num_versions",
            GcRule::has_max_num_versions,
            GcRule::max_num_versions,
            GcRule::set_max_num_versions,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "max_age",
            GcRule::has_max_age,
            GcRule::max_age,
            GcRule::mut_max_age,
            GcRule::set_max_age,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, gc_rule::Intersection>(
            "intersection",
            GcRule::has_intersection,
            GcRule::intersection,
            GcRule::mut_intersection,
            GcRule::set_intersection,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, gc_rule::Union>(
            "union",
            GcRule::has_union,
            GcRule::union,
            GcRule::mut_union,
            GcRule::set_union,
        ));
        oneofs.push(gc_rule::Rule::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GcRule>(
            "GcRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GcRule {
    const NAME: &'static str = "GcRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.rule = ::std::option::Option::Some(gc_rule::Rule::MaxNumVersions(is.read_int32()?));
                },
                18 => {
                    self.rule = ::std::option::Option::Some(gc_rule::Rule::MaxAge(is.read_message()?));
                },
                26 => {
                    self.rule = ::std::option::Option::Some(gc_rule::Rule::Intersection(is.read_message()?));
                },
                34 => {
                    self.rule = ::std::option::Option::Some(gc_rule::Rule::Union(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &gc_rule::Rule::MaxNumVersions(v) => {
                    my_size += ::protobuf::rt::int32_size(1, v);
                },
                &gc_rule::Rule::MaxAge(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gc_rule::Rule::Intersection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &gc_rule::Rule::Union(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &gc_rule::Rule::MaxNumVersions(v) => {
                    os.write_int32(1, v)?;
                },
                &gc_rule::Rule::MaxAge(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &gc_rule::Rule::Intersection(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &gc_rule::Rule::Union(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GcRule {
        GcRule::new()
    }

    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GcRule {
        static instance: GcRule = GcRule {
            rule: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GcRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GcRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GcRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GcRule`
pub mod gc_rule {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.bigtable.admin.v2.GcRule.rule)
    pub enum Rule {
        // @@protoc_insertion_point(oneof_field:google.bigtable.admin.v2.GcRule.max_num_versions)
        MaxNumVersions(i32),
        // @@protoc_insertion_point(oneof_field:google.bigtable.admin.v2.GcRule.max_age)
        MaxAge(::protobuf::well_known_types::duration::Duration),
        // @@protoc_insertion_point(oneof_field:google.bigtable.admin.v2.GcRule.intersection)
        Intersection(Intersection),
        // @@protoc_insertion_point(oneof_field:google.bigtable.admin.v2.GcRule.union)
        Union(Union),
    }

    impl ::protobuf::Oneof for Rule {
    }

    impl ::protobuf::OneofFull for Rule {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GcRule as ::protobuf::MessageFull>::descriptor().oneof_by_name("rule").unwrap()).clone()
        }
    }

    impl Rule {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Rule>("rule")
        }
    }
    ///  A GcRule which deletes cells matching all of the given rules.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.bigtable.admin.v2.GcRule.Intersection)
    pub struct Intersection {
        // message fields
        ///  Only delete cells which would be deleted by every element of `rules`.
        // @@protoc_insertion_point(field:google.bigtable.admin.v2.GcRule.Intersection.rules)
        pub rules: ::std::vec::Vec<super::GcRule>,
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.GcRule.Intersection.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Intersection {
        fn default() -> &'a Intersection {
            <Intersection as ::protobuf::Message>::default_instance()
        }
    }

    impl Intersection {
        pub fn new() -> Intersection {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "rules",
                |m: &Intersection| { &m.rules },
                |m: &mut Intersection| { &mut m.rules },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Intersection>(
                "GcRule.Intersection",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Intersection {
        const NAME: &'static str = "Intersection";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.rules.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.rules {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.rules {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Intersection {
            Intersection::new()
        }

        fn clear(&mut self) {
            self.rules.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Intersection {
            static instance: Intersection = Intersection {
                rules: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Intersection {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("GcRule.Intersection").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Intersection {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Intersection {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  A GcRule which deletes cells matching any of the given rules.
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:google.bigtable.admin.v2.GcRule.Union)
    pub struct Union {
        // message fields
        ///  Delete cells which would be deleted by any element of `rules`.
        // @@protoc_insertion_point(field:google.bigtable.admin.v2.GcRule.Union.rules)
        pub rules: ::std::vec::Vec<super::GcRule>,
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.GcRule.Union.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Union {
        fn default() -> &'a Union {
            <Union as ::protobuf::Message>::default_instance()
        }
    }

    impl Union {
        pub fn new() -> Union {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "rules",
                |m: &Union| { &m.rules },
                |m: &mut Union| { &mut m.rules },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Union>(
                "GcRule.Union",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Union {
        const NAME: &'static str = "Union";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.rules.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.rules {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.rules {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Union {
            Union::new()
        }

        fn clear(&mut self) {
            self.rules.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Union {
            static instance: Union = Union {
                rules: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Union {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("GcRule.Union").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Union {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Union {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  A snapshot of a table at a particular time. A snapshot can be used as a
///  checkpoint for data restoration or a data source for a new table.
///
///  Note: This is a private alpha release of Cloud Bigtable snapshots. This
///  feature is not currently available to most Cloud Bigtable customers. This
///  feature might be changed in backward-incompatible ways and is not recommended
///  for production use. It is not subject to any SLA or deprecation policy.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:google.bigtable.admin.v2.Snapshot)
pub struct Snapshot {
    // message fields
    ///  (`OutputOnly`)
    ///  The unique name of the snapshot.
    ///  Values are of the form
    ///  `projects/<project>/instances/<instance>/clusters/<cluster>/snapshots/<snapshot>`.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Snapshot.name)
    pub name: ::std::string::String,
    ///  (`OutputOnly`)
    ///  The source table at the time the snapshot was taken.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Snapshot.source_table)
    pub source_table: ::protobuf::MessageField<Table>,
    ///  (`OutputOnly`)
    ///  The size of the data in the source table at the time the snapshot was
    ///  taken. In some cases, this value may be computed asynchronously via a
    ///  background process and a placeholder of 0 will be used in the meantime.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Snapshot.data_size_bytes)
    pub data_size_bytes: i64,
    ///  (`OutputOnly`)
    ///  The time when the snapshot is created.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Snapshot.create_time)
    pub create_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  (`OutputOnly`)
    ///  The time when the snapshot will be deleted. The maximum amount of time a
    ///  snapshot can stay active is 365 days. If 'ttl' is not specified,
    ///  the default maximum of 365 days will be used.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Snapshot.delete_time)
    pub delete_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  (`OutputOnly`)
    ///  The current state of the snapshot.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Snapshot.state)
    pub state: ::protobuf::EnumOrUnknown<snapshot::State>,
    ///  (`OutputOnly`)
    ///  Description of the snapshot.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Snapshot.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.Snapshot.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Snapshot {
    fn default() -> &'a Snapshot {
        <Snapshot as ::protobuf::Message>::default_instance()
    }
}

impl Snapshot {
    pub fn new() -> Snapshot {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Snapshot| { &m.name },
            |m: &mut Snapshot| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Table>(
            "source_table",
            |m: &Snapshot| { &m.source_table },
            |m: &mut Snapshot| { &mut m.source_table },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_size_bytes",
            |m: &Snapshot| { &m.data_size_bytes },
            |m: &mut Snapshot| { &mut m.data_size_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "create_time",
            |m: &Snapshot| { &m.create_time },
            |m: &mut Snapshot| { &mut m.create_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "delete_time",
            |m: &Snapshot| { &m.delete_time },
            |m: &mut Snapshot| { &mut m.delete_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Snapshot| { &m.state },
            |m: &mut Snapshot| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Snapshot| { &m.description },
            |m: &mut Snapshot| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Snapshot>(
            "Snapshot",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Snapshot {
    const NAME: &'static str = "Snapshot";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.source_table)?;
                },
                24 => {
                    self.data_size_bytes = is.read_int64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.create_time)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.delete_time)?;
                },
                48 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                58 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(v) = self.source_table.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.data_size_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.data_size_bytes);
        }
        if let Some(v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.delete_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(snapshot::State::STATE_NOT_KNOWN) {
            my_size += ::protobuf::rt::int32_size(6, self.state.value());
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(v) = self.source_table.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.data_size_bytes != 0 {
            os.write_int64(3, self.data_size_bytes)?;
        }
        if let Some(v) = self.create_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.delete_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(snapshot::State::STATE_NOT_KNOWN) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if !self.description.is_empty() {
            os.write_string(7, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Snapshot {
        Snapshot::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.source_table.clear();
        self.data_size_bytes = 0;
        self.create_time.clear();
        self.delete_time.clear();
        self.state = ::protobuf::EnumOrUnknown::new(snapshot::State::STATE_NOT_KNOWN);
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Snapshot {
        static instance: Snapshot = Snapshot {
            name: ::std::string::String::new(),
            source_table: ::protobuf::MessageField::none(),
            data_size_bytes: 0,
            create_time: ::protobuf::MessageField::none(),
            delete_time: ::protobuf::MessageField::none(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Snapshot {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Snapshot").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Snapshot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Snapshot {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Snapshot`
pub mod snapshot {
    ///  Possible states of a snapshot.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.bigtable.admin.v2.Snapshot.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Snapshot.State.STATE_NOT_KNOWN)
        STATE_NOT_KNOWN = 0,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Snapshot.State.READY)
        READY = 1,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Snapshot.State.CREATING)
        CREATING = 2,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::STATE_NOT_KNOWN),
                1 => ::std::option::Option::Some(State::READY),
                2 => ::std::option::Option::Some(State::CREATING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::STATE_NOT_KNOWN,
            State::READY,
            State::CREATING,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Snapshot.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::STATE_NOT_KNOWN
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("Snapshot.State")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$google/bigtable/admin/v2/table.proto\x12\x18google.bigtable.admin.v2\
    \x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.pro\
    to\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa7\x07\n\x05Table\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12Y\n\x0ecluster_states\x18\x02\
    \x20\x03(\x0b22.google.bigtable.admin.v2.Table.ClusterStatesEntryR\rclus\
    terStates\x12\\\n\x0fcolumn_families\x18\x03\x20\x03(\x0b23.google.bigta\
    ble.admin.v2.Table.ColumnFamiliesEntryR\x0ecolumnFamilies\x12V\n\x0bgran\
    ularity\x18\x04\x20\x01(\x0e24.google.bigtable.admin.v2.Table.TimestampG\
    ranularityR\x0bgranularity\x1a\xf4\x01\n\x0cClusterState\x12j\n\x11repli\
    cation_state\x18\x01\x20\x01(\x0e2=.google.bigtable.admin.v2.Table.Clust\
    erState.ReplicationStateR\x10replicationState\"x\n\x10ReplicationState\
    \x12\x13\n\x0fSTATE_NOT_KNOWN\x10\0\x12\x10\n\x0cINITIALIZING\x10\x01\
    \x12\x17\n\x13PLANNED_MAINTENANCE\x10\x02\x12\x19\n\x15UNPLANNED_MAINTEN\
    ANCE\x10\x03\x12\t\n\x05READY\x10\x04\x1an\n\x12ClusterStatesEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12B\n\x05value\x18\x02\x20\x01\
    (\x0b2,.google.bigtable.admin.v2.Table.ClusterStateR\x05value:\x028\x01\
    \x1ai\n\x13ColumnFamiliesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03k\
    ey\x12<\n\x05value\x18\x02\x20\x01(\x0b2&.google.bigtable.admin.v2.Colum\
    nFamilyR\x05value:\x028\x01\"I\n\x14TimestampGranularity\x12%\n!TIMESTAM\
    P_GRANULARITY_UNSPECIFIED\x10\0\x12\n\n\x06MILLIS\x10\x01\"\\\n\x04View\
    \x12\x14\n\x10VIEW_UNSPECIFIED\x10\0\x12\r\n\tNAME_ONLY\x10\x01\x12\x0f\
    \n\x0bSCHEMA_VIEW\x10\x02\x12\x14\n\x10REPLICATION_VIEW\x10\x03\x12\x08\
    \n\x04FULL\x10\x04\"I\n\x0cColumnFamily\x129\n\x07gc_rule\x18\x01\x20\
    \x01(\x0b2\x20.google.bigtable.admin.v2.GcRuleR\x06gcRule\"\x90\x03\n\
    \x06GcRule\x12*\n\x10max_num_versions\x18\x01\x20\x01(\x05H\0R\x0emaxNum\
    Versions\x124\n\x07max_age\x18\x02\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationH\0R\x06maxAge\x12S\n\x0cintersection\x18\x03\x20\x01(\x0b2-.google\
    .bigtable.admin.v2.GcRule.IntersectionH\0R\x0cintersection\x12>\n\x05uni\
    on\x18\x04\x20\x01(\x0b2&.google.bigtable.admin.v2.GcRule.UnionH\0R\x05u\
    nion\x1aF\n\x0cIntersection\x126\n\x05rules\x18\x01\x20\x03(\x0b2\x20.go\
    ogle.bigtable.admin.v2.GcRuleR\x05rules\x1a?\n\x05Union\x126\n\x05rules\
    \x18\x01\x20\x03(\x0b2\x20.google.bigtable.admin.v2.GcRuleR\x05rulesB\
    \x06\n\x04rule\"\x9d\x03\n\x08Snapshot\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12B\n\x0csource_table\x18\x02\x20\x01(\x0b2\x1f.google.big\
    table.admin.v2.TableR\x0bsourceTable\x12&\n\x0fdata_size_bytes\x18\x03\
    \x20\x01(\x03R\rdataSizeBytes\x12;\n\x0bcreate_time\x18\x04\x20\x01(\x0b\
    2\x1a.google.protobuf.TimestampR\ncreateTime\x12;\n\x0bdelete_time\x18\
    \x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ndeleteTime\x12>\n\x05\
    state\x18\x06\x20\x01(\x0e2(.google.bigtable.admin.v2.Snapshot.StateR\
    \x05state\x12\x20\n\x0bdescription\x18\x07\x20\x01(\tR\x0bdescription\"5\
    \n\x05State\x12\x13\n\x0fSTATE_NOT_KNOWN\x10\0\x12\t\n\x05READY\x10\x01\
    \x12\x0c\n\x08CREATING\x10\x02B\xad\x01\n\x1ccom.google.bigtable.admin.v\
    2B\nTableProtoP\x01Z=google.golang.org/genproto/googleapis/bigtable/admi\
    n/v2;admin\xaa\x02\x1eGoogle.Cloud.Bigtable.Admin.V2\xca\x02\x1eGoogle\\\
    Cloud\\Bigtable\\Admin\\V2J\xe0?\n\x07\x12\x05\x0f\0\xdb\x01\x01\n\xbe\
    \x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202018\x20Google\
    \x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Versio\
    n\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0!\n\t\n\x02\x03\0\
    \x12\x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\0(\n\t\n\x02\x03\x02\x12\
    \x03\x15\0)\n\x08\n\x01\x08\x12\x03\x17\0;\n\t\n\x02\x08%\x12\x03\x17\0;\
    \n\x08\n\x01\x08\x12\x03\x18\0T\n\t\n\x02\x08\x0b\x12\x03\x18\0T\n\x08\n\
    \x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08\n\x12\x03\x19\0\"\n\x08\n\x01\x08\
    \x12\x03\x1a\0+\n\t\n\x02\x08\x08\x12\x03\x1a\0+\n\x08\n\x01\x08\x12\x03\
    \x1b\05\n\t\n\x02\x08\x01\x12\x03\x1b\05\n\x08\n\x01\x08\x12\x03\x1c\0<\
    \n\t\n\x02\x08)\x12\x03\x1c\0<\n\x90\x01\n\x02\x04\0\x12\x04\x20\0w\x01\
    \x1a\x83\x01\x20A\x20collection\x20of\x20user\x20data\x20indexed\x20by\
    \x20row,\x20column,\x20and\x20timestamp.\n\x20Each\x20table\x20is\x20ser\
    ved\x20using\x20the\x20resources\x20of\x20its\x20parent\x20cluster.\n\n\
    \n\n\x03\x04\0\x01\x12\x03\x20\x08\r\nD\n\x04\x04\0\x03\0\x12\x04\"\x02>\
    \x03\x1a6\x20The\x20state\x20of\x20a\x20table's\x20data\x20in\x20a\x20pa\
    rticular\x20cluster.\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\"\n\x16\n+\n\
    \x06\x04\0\x03\0\x04\0\x12\x04$\x049\x05\x1a\x1b\x20Table\x20replication\
    \x20states.\n\n\x0e\n\x07\x04\0\x03\0\x04\0\x01\x12\x03$\t\x19\nQ\n\x08\
    \x04\0\x03\0\x04\0\x02\0\x12\x03&\x06\x1a\x1a@\x20The\x20replication\x20\
    state\x20of\x20the\x20table\x20is\x20unknown\x20in\x20this\x20cluster.\n\
    \n\x10\n\t\x04\0\x03\0\x04\0\x02\0\x01\x12\x03&\x06\x15\n\x10\n\t\x04\0\
    \x03\0\x04\0\x02\0\x02\x12\x03&\x18\x19\n\xda\x01\n\x08\x04\0\x03\0\x04\
    \0\x02\x01\x12\x03+\x06\x17\x1a\xc8\x01\x20The\x20cluster\x20was\x20rece\
    ntly\x20created,\x20and\x20the\x20table\x20must\x20finish\x20copying\n\
    \x20over\x20pre-existing\x20data\x20from\x20other\x20clusters\x20before\
    \x20it\x20can\x20begin\n\x20receiving\x20live\x20replication\x20updates\
    \x20and\x20serving\x20Data\x20API\x20requests.\n\n\x10\n\t\x04\0\x03\0\
    \x04\0\x02\x01\x01\x12\x03+\x06\x12\n\x10\n\t\x04\0\x03\0\x04\0\x02\x01\
    \x02\x12\x03+\x15\x16\n\x85\x01\n\x08\x04\0\x03\0\x04\0\x02\x02\x12\x03/\
    \x06\x1e\x1at\x20The\x20table\x20is\x20temporarily\x20unable\x20to\x20se\
    rve\x20Data\x20API\x20requests\x20from\x20this\n\x20cluster\x20due\x20to\
    \x20planned\x20internal\x20maintenance.\n\n\x10\n\t\x04\0\x03\0\x04\0\
    \x02\x02\x01\x12\x03/\x06\x19\n\x10\n\t\x04\0\x03\0\x04\0\x02\x02\x02\
    \x12\x03/\x1c\x1d\n\x8b\x01\n\x08\x04\0\x03\0\x04\0\x02\x03\x12\x033\x06\
    \x20\x1az\x20The\x20table\x20is\x20temporarily\x20unable\x20to\x20serve\
    \x20Data\x20API\x20requests\x20from\x20this\n\x20cluster\x20due\x20to\
    \x20unplanned\x20or\x20emergency\x20maintenance.\n\n\x10\n\t\x04\0\x03\0\
    \x04\0\x02\x03\x01\x12\x033\x06\x1b\n\x10\n\t\x04\0\x03\0\x04\0\x02\x03\
    \x02\x12\x033\x1e\x1f\n\xba\x01\n\x08\x04\0\x03\0\x04\0\x02\x04\x12\x038\
    \x06\x10\x1a\xa8\x01\x20The\x20table\x20can\x20serve\x20Data\x20API\x20r\
    equests\x20from\x20this\x20cluster.\x20Depending\x20on\n\x20replication\
    \x20delay,\x20reads\x20may\x20not\x20immediately\x20reflect\x20the\x20st\
    ate\x20of\x20the\n\x20table\x20in\x20other\x20clusters.\n\n\x10\n\t\x04\
    \0\x03\0\x04\0\x02\x04\x01\x12\x038\x06\x0b\n\x10\n\t\x04\0\x03\0\x04\0\
    \x02\x04\x02\x12\x038\x0e\x0f\nX\n\x06\x04\0\x03\0\x02\0\x12\x03=\x04+\
    \x1aI\x20(`OutputOnly`)\n\x20The\x20state\x20of\x20replication\x20for\
    \x20the\x20table\x20in\x20this\x20cluster.\n\n\x0e\n\x07\x04\0\x03\0\x02\
    \0\x06\x12\x03=\x04\x14\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03=\x15&\
    \n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03=)*\nk\n\x04\x04\0\x04\0\x12\
    \x04B\x02I\x03\x1a]\x20Possible\x20timestamp\x20granularities\x20to\x20u\
    se\x20when\x20keeping\x20multiple\x20versions\n\x20of\x20data\x20in\x20a\
    \x20table.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03B\x07\x1b\n\x8c\x01\n\
    \x06\x04\0\x04\0\x02\0\x12\x03E\x04*\x1a}\x20The\x20user\x20did\x20not\
    \x20specify\x20a\x20granularity.\x20Should\x20not\x20be\x20returned.\n\
    \x20When\x20specified\x20during\x20table\x20creation,\x20MILLIS\x20will\
    \x20be\x20used.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03E\x04%\n\x0e\
    \n\x07\x04\0\x04\0\x02\0\x02\x12\x03E()\nH\n\x06\x04\0\x04\0\x02\x01\x12\
    \x03H\x04\x0f\x1a9\x20The\x20table\x20keeps\x20data\x20versioned\x20at\
    \x20a\x20granularity\x20of\x201ms.\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\
    \x12\x03H\x04\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03H\r\x0e\n5\n\
    \x04\x04\0\x04\x01\x12\x04L\x02\\\x03\x1a'\x20Defines\x20a\x20view\x20ov\
    er\x20a\x20table's\x20fields.\n\n\x0c\n\x05\x04\0\x04\x01\x01\x12\x03L\
    \x07\x0b\nT\n\x06\x04\0\x04\x01\x02\0\x12\x03N\x04\x19\x1aE\x20Uses\x20t\
    he\x20default\x20view\x20for\x20each\x20method\x20as\x20documented\x20in\
    \x20its\x20request.\n\n\x0e\n\x07\x04\0\x04\x01\x02\0\x01\x12\x03N\x04\
    \x14\n\x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\x03N\x17\x18\n'\n\x06\x04\0\
    \x04\x01\x02\x01\x12\x03Q\x04\x12\x1a\x18\x20Only\x20populates\x20`name`\
    .\n\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x01\x12\x03Q\x04\r\n\x0e\n\x07\x04\
    \0\x04\x01\x02\x01\x02\x12\x03Q\x10\x11\nP\n\x06\x04\0\x04\x01\x02\x02\
    \x12\x03T\x04\x14\x1aA\x20Only\x20populates\x20`name`\x20and\x20fields\
    \x20related\x20to\x20the\x20table's\x20schema.\n\n\x0e\n\x07\x04\0\x04\
    \x01\x02\x02\x01\x12\x03T\x04\x0f\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x02\
    \x12\x03T\x12\x13\n\\\n\x06\x04\0\x04\x01\x02\x03\x12\x03X\x04\x19\x1aM\
    \x20Only\x20populates\x20`name`\x20and\x20fields\x20related\x20to\x20the\
    \x20table's\n\x20replication\x20state.\n\n\x0e\n\x07\x04\0\x04\x01\x02\
    \x03\x01\x12\x03X\x04\x14\n\x0e\n\x07\x04\0\x04\x01\x02\x03\x02\x12\x03X\
    \x17\x18\n&\n\x06\x04\0\x04\x01\x02\x04\x12\x03[\x04\r\x1a\x17\x20Popula\
    tes\x20all\x20fields.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x04\x01\x12\x03[\
    \x04\x08\n\x0e\n\x07\x04\0\x04\x01\x02\x04\x02\x12\x03[\x0b\x0c\n\xe2\
    \x01\n\x04\x04\0\x02\0\x12\x03b\x02\x12\x1a\xd4\x01\x20(`OutputOnly`)\n\
    \x20The\x20unique\x20name\x20of\x20the\x20table.\x20Values\x20are\x20of\
    \x20the\x20form\n\x20`projects/<project>/instances/<instance>/tables/[_a\
    -zA-Z0-9][-_.a-zA-Z0-9]*`.\n\x20Views:\x20`NAME_ONLY`,\x20`SCHEMA_VIEW`,\
    \x20`REPLICATION_VIEW`,\x20`FULL`\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03b\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03b\t\r\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03b\x10\x11\n\xc7\x02\n\x04\x04\0\x02\x01\x12\x03j\x02/\x1a\
    \xb9\x02\x20(`OutputOnly`)\n\x20Map\x20from\x20cluster\x20ID\x20to\x20pe\
    r-cluster\x20table\x20state.\n\x20If\x20it\x20could\x20not\x20be\x20dete\
    rmined\x20whether\x20or\x20not\x20the\x20table\x20has\x20data\x20in\x20a\
    \n\x20particular\x20cluster\x20(for\x20example,\x20if\x20its\x20zone\x20\
    is\x20unavailable),\x20then\n\x20there\x20will\x20be\x20an\x20entry\x20f\
    or\x20the\x20cluster\x20with\x20UNKNOWN\x20`replication_status`.\n\x20Vi\
    ews:\x20`REPLICATION_VIEW`,\x20`FULL`\n\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03j\x02\x1b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03j\x1c*\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03j-.\n\x89\x01\n\x04\x04\0\x02\x02\x12\x03o\
    \x020\x1a|\x20(`CreationOnly`)\n\x20The\x20column\x20families\x20configu\
    red\x20for\x20this\x20table,\x20mapped\x20by\x20column\x20family\x20ID.\
    \n\x20Views:\x20`SCHEMA_VIEW`,\x20`FULL`\n\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03o\x02\x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03o\x1c+\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03o./\n\x8d\x02\n\x04\x04\0\x02\x03\x12\x03v\
    \x02'\x1a\xff\x01\x20(`CreationOnly`)\n\x20The\x20granularity\x20(i.e.\
    \x20`MILLIS`)\x20at\x20which\x20timestamps\x20are\x20stored\x20in\n\x20t\
    his\x20table.\x20Timestamps\x20not\x20matching\x20the\x20granularity\x20\
    will\x20be\x20rejected.\n\x20If\x20unspecified\x20at\x20creation\x20time\
    ,\x20the\x20value\x20will\x20be\x20set\x20to\x20`MILLIS`.\n\x20Views:\
    \x20`SCHEMA_VIEW`,\x20`FULL`\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03v\
    \x02\x16\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03v\x17\"\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03v%&\nR\n\x02\x04\x01\x12\x05z\0\x82\x01\x01\x1aE\x20\
    A\x20set\x20of\x20columns\x20within\x20a\x20table\x20which\x20share\x20a\
    \x20common\x20configuration.\n\n\n\n\x03\x04\x01\x01\x12\x03z\x08\x14\n\
    \x9e\x02\n\x04\x04\x01\x02\0\x12\x04\x81\x01\x02\x15\x1a\x8f\x02\x20Garb\
    age\x20collection\x20rule\x20specified\x20as\x20a\x20protobuf.\n\x20Must\
    \x20serialize\x20to\x20at\x20most\x20500\x20bytes.\n\n\x20NOTE:\x20Garba\
    ge\x20collection\x20executes\x20opportunistically\x20in\x20the\x20backgr\
    ound,\x20and\n\x20so\x20it's\x20possible\x20for\x20reads\x20to\x20return\
    \x20a\x20cell\x20even\x20if\x20it\x20matches\x20the\x20active\n\x20GC\
    \x20expression\x20for\x20its\x20family.\n\n\r\n\x05\x04\x01\x02\0\x06\
    \x12\x04\x81\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x81\x01\t\
    \x10\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x81\x01\x13\x14\nU\n\x02\x04\
    \x02\x12\x06\x85\x01\0\xa2\x01\x01\x1aG\x20Rule\x20for\x20determining\
    \x20which\x20cells\x20to\x20delete\x20during\x20garbage\x20collection.\n\
    \n\x0b\n\x03\x04\x02\x01\x12\x04\x85\x01\x08\x0e\nO\n\x04\x04\x02\x03\0\
    \x12\x06\x87\x01\x02\x8a\x01\x03\x1a?\x20A\x20GcRule\x20which\x20deletes\
    \x20cells\x20matching\x20all\x20of\x20the\x20given\x20rules.\n\n\r\n\x05\
    \x04\x02\x03\0\x01\x12\x04\x87\x01\n\x16\nW\n\x06\x04\x02\x03\0\x02\0\
    \x12\x04\x89\x01\x04\x1e\x1aG\x20Only\x20delete\x20cells\x20which\x20wou\
    ld\x20be\x20deleted\x20by\x20every\x20element\x20of\x20`rules`.\n\n\x0f\
    \n\x07\x04\x02\x03\0\x02\0\x04\x12\x04\x89\x01\x04\x0c\n\x0f\n\x07\x04\
    \x02\x03\0\x02\0\x06\x12\x04\x89\x01\r\x13\n\x0f\n\x07\x04\x02\x03\0\x02\
    \0\x01\x12\x04\x89\x01\x14\x19\n\x0f\n\x07\x04\x02\x03\0\x02\0\x03\x12\
    \x04\x89\x01\x1c\x1d\nO\n\x04\x04\x02\x03\x01\x12\x06\x8d\x01\x02\x90\
    \x01\x03\x1a?\x20A\x20GcRule\x20which\x20deletes\x20cells\x20matching\
    \x20any\x20of\x20the\x20given\x20rules.\n\n\r\n\x05\x04\x02\x03\x01\x01\
    \x12\x04\x8d\x01\n\x0f\nP\n\x06\x04\x02\x03\x01\x02\0\x12\x04\x8f\x01\
    \x04\x1e\x1a@\x20Delete\x20cells\x20which\x20would\x20be\x20deleted\x20b\
    y\x20any\x20element\x20of\x20`rules`.\n\n\x0f\n\x07\x04\x02\x03\x01\x02\
    \0\x04\x12\x04\x8f\x01\x04\x0c\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x06\x12\
    \x04\x8f\x01\r\x13\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x01\x12\x04\x8f\x01\
    \x14\x19\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x03\x12\x04\x8f\x01\x1c\x1d\n\
    +\n\x04\x04\x02\x08\0\x12\x06\x93\x01\x02\xa1\x01\x03\x1a\x1b\x20Garbage\
    \x20collection\x20rules.\n\n\r\n\x05\x04\x02\x08\0\x01\x12\x04\x93\x01\
    \x08\x0c\nF\n\x04\x04\x02\x02\0\x12\x04\x95\x01\x04\x1f\x1a8\x20Delete\
    \x20all\x20cells\x20in\x20a\x20column\x20except\x20the\x20most\x20recent\
    \x20N.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x95\x01\x04\t\n\r\n\x05\x04\
    \x02\x02\0\x01\x12\x04\x95\x01\n\x1a\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\
    \x95\x01\x1d\x1e\n\xa0\x01\n\x04\x04\x02\x02\x01\x12\x04\x9a\x01\x04)\
    \x1a\x91\x01\x20Delete\x20cells\x20in\x20a\x20column\x20older\x20than\
    \x20the\x20given\x20age.\n\x20Values\x20must\x20be\x20at\x20least\x20one\
    \x20millisecond,\x20and\x20will\x20be\x20truncated\x20to\n\x20microsecon\
    d\x20granularity.\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\x9a\x01\x04\
    \x1c\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x9a\x01\x1d$\n\r\n\x05\x04\
    \x02\x02\x01\x03\x12\x04\x9a\x01'(\nH\n\x04\x04\x02\x02\x02\x12\x04\x9d\
    \x01\x04\"\x1a:\x20Delete\x20cells\x20that\x20would\x20be\x20deleted\x20\
    by\x20every\x20nested\x20rule.\n\n\r\n\x05\x04\x02\x02\x02\x06\x12\x04\
    \x9d\x01\x04\x10\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\x9d\x01\x11\x1d\n\
    \r\n\x05\x04\x02\x02\x02\x03\x12\x04\x9d\x01\x20!\nF\n\x04\x04\x02\x02\
    \x03\x12\x04\xa0\x01\x04\x14\x1a8\x20Delete\x20cells\x20that\x20would\
    \x20be\x20deleted\x20by\x20any\x20nested\x20rule.\n\n\r\n\x05\x04\x02\
    \x02\x03\x06\x12\x04\xa0\x01\x04\t\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\
    \xa0\x01\n\x0f\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\xa0\x01\x12\x13\n\
    \xc8\x03\n\x02\x04\x03\x12\x06\xab\x01\0\xdb\x01\x01\x1a\xb9\x03\x20A\
    \x20snapshot\x20of\x20a\x20table\x20at\x20a\x20particular\x20time.\x20A\
    \x20snapshot\x20can\x20be\x20used\x20as\x20a\n\x20checkpoint\x20for\x20d\
    ata\x20restoration\x20or\x20a\x20data\x20source\x20for\x20a\x20new\x20ta\
    ble.\n\n\x20Note:\x20This\x20is\x20a\x20private\x20alpha\x20release\x20o\
    f\x20Cloud\x20Bigtable\x20snapshots.\x20This\n\x20feature\x20is\x20not\
    \x20currently\x20available\x20to\x20most\x20Cloud\x20Bigtable\x20custome\
    rs.\x20This\n\x20feature\x20might\x20be\x20changed\x20in\x20backward-inc\
    ompatible\x20ways\x20and\x20is\x20not\x20recommended\n\x20for\x20product\
    ion\x20use.\x20It\x20is\x20not\x20subject\x20to\x20any\x20SLA\x20or\x20d\
    eprecation\x20policy.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xab\x01\x08\x10\
    \n0\n\x04\x04\x03\x04\0\x12\x06\xad\x01\x02\xb8\x01\x03\x1a\x20\x20Possi\
    ble\x20states\x20of\x20a\x20snapshot.\n\n\r\n\x05\x04\x03\x04\0\x01\x12\
    \x04\xad\x01\x07\x0c\nD\n\x06\x04\x03\x04\0\x02\0\x12\x04\xaf\x01\x04\
    \x18\x1a4\x20The\x20state\x20of\x20the\x20snapshot\x20could\x20not\x20be\
    \x20determined.\n\n\x0f\n\x07\x04\x03\x04\0\x02\0\x01\x12\x04\xaf\x01\
    \x04\x13\n\x0f\n\x07\x04\x03\x04\0\x02\0\x02\x12\x04\xaf\x01\x16\x17\nX\
    \n\x06\x04\x03\x04\0\x02\x01\x12\x04\xb2\x01\x04\x0e\x1aH\x20The\x20snap\
    shot\x20has\x20been\x20successfully\x20created\x20and\x20can\x20serve\
    \x20all\x20requests.\n\n\x0f\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x04\xb2\
    \x01\x04\t\n\x0f\n\x07\x04\x03\x04\0\x02\x01\x02\x12\x04\xb2\x01\x0c\r\n\
    \xc4\x01\n\x06\x04\x03\x04\0\x02\x02\x12\x04\xb7\x01\x04\x11\x1a\xb3\x01\
    \x20The\x20snapshot\x20is\x20currently\x20being\x20created,\x20and\x20ma\
    y\x20be\x20destroyed\x20if\x20the\n\x20creation\x20process\x20encounters\
    \x20an\x20error.\x20A\x20snapshot\x20may\x20not\x20be\x20restored\x20to\
    \x20a\n\x20table\x20while\x20it\x20is\x20being\x20created.\n\n\x0f\n\x07\
    \x04\x03\x04\0\x02\x02\x01\x12\x04\xb7\x01\x04\x0c\n\x0f\n\x07\x04\x03\
    \x04\0\x02\x02\x02\x12\x04\xb7\x01\x0f\x10\n\xad\x01\n\x04\x04\x03\x02\0\
    \x12\x04\xbe\x01\x02\x12\x1a\x9e\x01\x20(`OutputOnly`)\n\x20The\x20uniqu\
    e\x20name\x20of\x20the\x20snapshot.\n\x20Values\x20are\x20of\x20the\x20f\
    orm\n\x20`projects/<project>/instances/<instance>/clusters/<cluster>/sna\
    pshots/<snapshot>`.\n\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\xbe\x01\x02\
    \x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xbe\x01\t\r\n\r\n\x05\x04\x03\
    \x02\0\x03\x12\x04\xbe\x01\x10\x11\nT\n\x04\x04\x03\x02\x01\x12\x04\xc2\
    \x01\x02\x19\x1aF\x20(`OutputOnly`)\n\x20The\x20source\x20table\x20at\
    \x20the\x20time\x20the\x20snapshot\x20was\x20taken.\n\n\r\n\x05\x04\x03\
    \x02\x01\x06\x12\x04\xc2\x01\x02\x07\n\r\n\x05\x04\x03\x02\x01\x01\x12\
    \x04\xc2\x01\x08\x14\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xc2\x01\x17\
    \x18\n\xf6\x01\n\x04\x04\x03\x02\x02\x12\x04\xc8\x01\x02\x1c\x1a\xe7\x01\
    \x20(`OutputOnly`)\n\x20The\x20size\x20of\x20the\x20data\x20in\x20the\
    \x20source\x20table\x20at\x20the\x20time\x20the\x20snapshot\x20was\n\x20\
    taken.\x20In\x20some\x20cases,\x20this\x20value\x20may\x20be\x20computed\
    \x20asynchronously\x20via\x20a\n\x20background\x20process\x20and\x20a\
    \x20placeholder\x20of\x200\x20will\x20be\x20used\x20in\x20the\x20meantim\
    e.\n\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\xc8\x01\x02\x07\n\r\n\x05\x04\
    \x03\x02\x02\x01\x12\x04\xc8\x01\x08\x17\n\r\n\x05\x04\x03\x02\x02\x03\
    \x12\x04\xc8\x01\x1a\x1b\nF\n\x04\x04\x03\x02\x03\x12\x04\xcc\x01\x02,\
    \x1a8\x20(`OutputOnly`)\n\x20The\x20time\x20when\x20the\x20snapshot\x20i\
    s\x20created.\n\n\r\n\x05\x04\x03\x02\x03\x06\x12\x04\xcc\x01\x02\x1b\n\
    \r\n\x05\x04\x03\x02\x03\x01\x12\x04\xcc\x01\x1c'\n\r\n\x05\x04\x03\x02\
    \x03\x03\x12\x04\xcc\x01*+\n\xda\x01\n\x04\x04\x03\x02\x04\x12\x04\xd2\
    \x01\x02,\x1a\xcb\x01\x20(`OutputOnly`)\n\x20The\x20time\x20when\x20the\
    \x20snapshot\x20will\x20be\x20deleted.\x20The\x20maximum\x20amount\x20of\
    \x20time\x20a\n\x20snapshot\x20can\x20stay\x20active\x20is\x20365\x20day\
    s.\x20If\x20'ttl'\x20is\x20not\x20specified,\n\x20the\x20default\x20maxi\
    mum\x20of\x20365\x20days\x20will\x20be\x20used.\n\n\r\n\x05\x04\x03\x02\
    \x04\x06\x12\x04\xd2\x01\x02\x1b\n\r\n\x05\x04\x03\x02\x04\x01\x12\x04\
    \xd2\x01\x1c'\n\r\n\x05\x04\x03\x02\x04\x03\x12\x04\xd2\x01*+\nB\n\x04\
    \x04\x03\x02\x05\x12\x04\xd6\x01\x02\x12\x1a4\x20(`OutputOnly`)\n\x20The\
    \x20current\x20state\x20of\x20the\x20snapshot.\n\n\r\n\x05\x04\x03\x02\
    \x05\x06\x12\x04\xd6\x01\x02\x07\n\r\n\x05\x04\x03\x02\x05\x01\x12\x04\
    \xd6\x01\x08\r\n\r\n\x05\x04\x03\x02\x05\x03\x12\x04\xd6\x01\x10\x11\n<\
    \n\x04\x04\x03\x02\x06\x12\x04\xda\x01\x02\x19\x1a.\x20(`OutputOnly`)\n\
    \x20Description\x20of\x20the\x20snapshot.\n\n\r\n\x05\x04\x03\x02\x06\
    \x05\x12\x04\xda\x01\x02\x08\n\r\n\x05\x04\x03\x02\x06\x01\x12\x04\xda\
    \x01\t\x14\n\r\n\x05\x04\x03\x02\x06\x03\x12\x04\xda\x01\x17\x18b\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Table::generated_message_descriptor_data());
            messages.push(ColumnFamily::generated_message_descriptor_data());
            messages.push(GcRule::generated_message_descriptor_data());
            messages.push(Snapshot::generated_message_descriptor_data());
            messages.push(table::ClusterState::generated_message_descriptor_data());
            messages.push(gc_rule::Intersection::generated_message_descriptor_data());
            messages.push(gc_rule::Union::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(table::TimestampGranularity::generated_enum_descriptor_data());
            enums.push(table::View::generated_enum_descriptor_data());
            enums.push(table::cluster_state::ReplicationState::generated_enum_descriptor_data());
            enums.push(snapshot::State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
