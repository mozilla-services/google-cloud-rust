// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/bigtable/admin/v2/instance.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  A collection of Bigtable [Tables][google.bigtable.admin.v2.Table] and
///  the resources that serve them.
///  All tables in an instance are served from a single
///  [Cluster][google.bigtable.admin.v2.Cluster].
// @@protoc_insertion_point(message:google.bigtable.admin.v2.Instance)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Instance {
    // message fields
    ///  (`OutputOnly`)
    ///  The unique name of the instance. Values are of the form
    ///  `projects/<project>/instances/[a-z][a-z0-9\\-]+[a-z0-9]`.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Instance.name)
    pub name: ::std::string::String,
    ///  The descriptive name for this instance as it appears in UIs.
    ///  Can be changed at any time, but should be kept globally unique
    ///  to avoid confusion.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Instance.display_name)
    pub display_name: ::std::string::String,
    ///  (`OutputOnly`)
    ///  The current state of the instance.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Instance.state)
    pub state: ::protobuf::EnumOrUnknown<instance::State>,
    ///  The type of the instance. Defaults to `PRODUCTION`.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Instance.type)
    pub type_: ::protobuf::EnumOrUnknown<instance::Type>,
    ///  Labels are a flexible and lightweight mechanism for organizing cloud
    ///  resources into groups that reflect a customer's organizational needs and
    ///  deployment strategies. They can be used to filter resources and aggregate
    ///  metrics.
    ///
    ///  * Label keys must be between 1 and 63 characters long and must conform to
    ///    the regular expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`.
    ///  * Label values must be between 0 and 63 characters long and must conform to
    ///    the regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`.
    ///  * No more than 64 labels can be associated with a given resource.
    ///  * Keys and values must both be under 128 bytes.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Instance.labels)
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.Instance.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Instance {
    fn default() -> &'a Instance {
        <Instance as ::protobuf::Message>::default_instance()
    }
}

impl Instance {
    pub fn new() -> Instance {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Instance| { &m.name },
            |m: &mut Instance| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &Instance| { &m.display_name },
            |m: &mut Instance| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Instance| { &m.state },
            |m: &mut Instance| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Instance| { &m.type_ },
            |m: &mut Instance| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "labels",
            |m: &Instance| { &m.labels },
            |m: &mut Instance| { &mut m.labels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Instance>(
            "Instance",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Instance {
    const NAME: &'static str = "Instance";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.display_name = is.read_string()?;
                },
                24 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.labels.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(instance::State::STATE_NOT_KNOWN) {
            my_size += ::protobuf::rt::int32_size(3, self.state.value());
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(instance::Type::TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.type_.value());
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(instance::State::STATE_NOT_KNOWN) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(instance::Type::TYPE_UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Instance {
        Instance::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.state = ::protobuf::EnumOrUnknown::new(instance::State::STATE_NOT_KNOWN);
        self.type_ = ::protobuf::EnumOrUnknown::new(instance::Type::TYPE_UNSPECIFIED);
        self.labels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Instance {
        static instance: ::protobuf::rt::Lazy<Instance> = ::protobuf::rt::Lazy::new();
        instance.get(Instance::new)
    }
}

impl ::protobuf::MessageFull for Instance {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Instance").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Instance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Instance`
pub mod instance {
    ///  Possible states of an instance.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.bigtable.admin.v2.Instance.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Instance.State.STATE_NOT_KNOWN)
        STATE_NOT_KNOWN = 0,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Instance.State.READY)
        READY = 1,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Instance.State.CREATING)
        CREATING = 2,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::STATE_NOT_KNOWN),
                1 => ::std::option::Option::Some(State::READY),
                2 => ::std::option::Option::Some(State::CREATING),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "STATE_NOT_KNOWN" => ::std::option::Option::Some(State::STATE_NOT_KNOWN),
                "READY" => ::std::option::Option::Some(State::READY),
                "CREATING" => ::std::option::Option::Some(State::CREATING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::STATE_NOT_KNOWN,
            State::READY,
            State::CREATING,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Instance.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::STATE_NOT_KNOWN
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("Instance.State")
        }
    }

    ///  The type of the instance.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.bigtable.admin.v2.Instance.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Instance.Type.TYPE_UNSPECIFIED)
        TYPE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Instance.Type.PRODUCTION)
        PRODUCTION = 1,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Instance.Type.DEVELOPMENT)
        DEVELOPMENT = 2,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::TYPE_UNSPECIFIED),
                1 => ::std::option::Option::Some(Type::PRODUCTION),
                2 => ::std::option::Option::Some(Type::DEVELOPMENT),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Type> {
            match str {
                "TYPE_UNSPECIFIED" => ::std::option::Option::Some(Type::TYPE_UNSPECIFIED),
                "PRODUCTION" => ::std::option::Option::Some(Type::PRODUCTION),
                "DEVELOPMENT" => ::std::option::Option::Some(Type::DEVELOPMENT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::TYPE_UNSPECIFIED,
            Type::PRODUCTION,
            Type::DEVELOPMENT,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Instance.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::TYPE_UNSPECIFIED
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("Instance.Type")
        }
    }
}

///  A resizable group of nodes in a particular cloud location, capable
///  of serving all [Tables][google.bigtable.admin.v2.Table] in the parent
///  [Instance][google.bigtable.admin.v2.Instance].
// @@protoc_insertion_point(message:google.bigtable.admin.v2.Cluster)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Cluster {
    // message fields
    ///  (`OutputOnly`)
    ///  The unique name of the cluster. Values are of the form
    ///  `projects/<project>/instances/<instance>/clusters/[a-z][-a-z0-9]*`.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Cluster.name)
    pub name: ::std::string::String,
    ///  (`CreationOnly`)
    ///  The location where this cluster's nodes and storage reside. For best
    ///  performance, clients should be located as close as possible to this
    ///  cluster. Currently only zones are supported, so values should be of the
    ///  form `projects/<project>/locations/<zone>`.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Cluster.location)
    pub location: ::std::string::String,
    ///  (`OutputOnly`)
    ///  The current state of the cluster.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Cluster.state)
    pub state: ::protobuf::EnumOrUnknown<cluster::State>,
    ///  The number of nodes allocated to this cluster. More nodes enable higher
    ///  throughput and more consistent performance.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Cluster.serve_nodes)
    pub serve_nodes: i32,
    ///  (`CreationOnly`)
    ///  The type of storage used by this cluster to serve its
    ///  parent instance's tables, unless explicitly overridden.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.Cluster.default_storage_type)
    pub default_storage_type: ::protobuf::EnumOrUnknown<super::common::StorageType>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.Cluster.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Cluster {
    fn default() -> &'a Cluster {
        <Cluster as ::protobuf::Message>::default_instance()
    }
}

impl Cluster {
    pub fn new() -> Cluster {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Cluster| { &m.name },
            |m: &mut Cluster| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "location",
            |m: &Cluster| { &m.location },
            |m: &mut Cluster| { &mut m.location },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Cluster| { &m.state },
            |m: &mut Cluster| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serve_nodes",
            |m: &Cluster| { &m.serve_nodes },
            |m: &mut Cluster| { &mut m.serve_nodes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_storage_type",
            |m: &Cluster| { &m.default_storage_type },
            |m: &mut Cluster| { &mut m.default_storage_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Cluster>(
            "Cluster",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Cluster {
    const NAME: &'static str = "Cluster";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.location = is.read_string()?;
                },
                24 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.serve_nodes = is.read_int32()?;
                },
                40 => {
                    self.default_storage_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.location);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(cluster::State::STATE_NOT_KNOWN) {
            my_size += ::protobuf::rt::int32_size(3, self.state.value());
        }
        if self.serve_nodes != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.serve_nodes);
        }
        if self.default_storage_type != ::protobuf::EnumOrUnknown::new(super::common::StorageType::STORAGE_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(5, self.default_storage_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.location.is_empty() {
            os.write_string(2, &self.location)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(cluster::State::STATE_NOT_KNOWN) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.serve_nodes != 0 {
            os.write_int32(4, self.serve_nodes)?;
        }
        if self.default_storage_type != ::protobuf::EnumOrUnknown::new(super::common::StorageType::STORAGE_TYPE_UNSPECIFIED) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.default_storage_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Cluster {
        Cluster::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.location.clear();
        self.state = ::protobuf::EnumOrUnknown::new(cluster::State::STATE_NOT_KNOWN);
        self.serve_nodes = 0;
        self.default_storage_type = ::protobuf::EnumOrUnknown::new(super::common::StorageType::STORAGE_TYPE_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Cluster {
        static instance: Cluster = Cluster {
            name: ::std::string::String::new(),
            location: ::std::string::String::new(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            serve_nodes: 0,
            default_storage_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Cluster {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Cluster").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Cluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Cluster`
pub mod cluster {
    ///  Possible states of a cluster.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.bigtable.admin.v2.Cluster.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Cluster.State.STATE_NOT_KNOWN)
        STATE_NOT_KNOWN = 0,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Cluster.State.READY)
        READY = 1,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Cluster.State.CREATING)
        CREATING = 2,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Cluster.State.RESIZING)
        RESIZING = 3,
        // @@protoc_insertion_point(enum_value:google.bigtable.admin.v2.Cluster.State.DISABLED)
        DISABLED = 4,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::STATE_NOT_KNOWN),
                1 => ::std::option::Option::Some(State::READY),
                2 => ::std::option::Option::Some(State::CREATING),
                3 => ::std::option::Option::Some(State::RESIZING),
                4 => ::std::option::Option::Some(State::DISABLED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<State> {
            match str {
                "STATE_NOT_KNOWN" => ::std::option::Option::Some(State::STATE_NOT_KNOWN),
                "READY" => ::std::option::Option::Some(State::READY),
                "CREATING" => ::std::option::Option::Some(State::CREATING),
                "RESIZING" => ::std::option::Option::Some(State::RESIZING),
                "DISABLED" => ::std::option::Option::Some(State::DISABLED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::STATE_NOT_KNOWN,
            State::READY,
            State::CREATING,
            State::RESIZING,
            State::DISABLED,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Cluster.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::STATE_NOT_KNOWN
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("Cluster.State")
        }
    }
}

///  A configuration object describing how Cloud Bigtable should treat traffic
///  from a particular end user application.
// @@protoc_insertion_point(message:google.bigtable.admin.v2.AppProfile)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppProfile {
    // message fields
    ///  (`OutputOnly`)
    ///  The unique name of the app profile. Values are of the form
    ///  `projects/<project>/instances/<instance>/appProfiles/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.AppProfile.name)
    pub name: ::std::string::String,
    ///  Strongly validated etag for optimistic concurrency control. Preserve the
    ///  value returned from `GetAppProfile` when calling `UpdateAppProfile` to
    ///  fail the request if there has been a modification in the mean time. The
    ///  `update_mask` of the request need not include `etag` for this protection
    ///  to apply.
    ///  See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and
    ///  [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more
    ///  details.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.AppProfile.etag)
    pub etag: ::std::string::String,
    ///  Optional long form description of the use case for this AppProfile.
    // @@protoc_insertion_point(field:google.bigtable.admin.v2.AppProfile.description)
    pub description: ::std::string::String,
    // message oneof groups
    pub routing_policy: ::std::option::Option<app_profile::Routing_policy>,
    // special fields
    // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.AppProfile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppProfile {
    fn default() -> &'a AppProfile {
        <AppProfile as ::protobuf::Message>::default_instance()
    }
}

impl AppProfile {
    pub fn new() -> AppProfile {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny multi_cluster_routing_use_any = 5;

    pub fn multi_cluster_routing_use_any(&self) -> &app_profile::MultiClusterRoutingUseAny {
        match self.routing_policy {
            ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(ref v)) => v,
            _ => <app_profile::MultiClusterRoutingUseAny as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_multi_cluster_routing_use_any(&mut self) {
        self.routing_policy = ::std::option::Option::None;
    }

    pub fn has_multi_cluster_routing_use_any(&self) -> bool {
        match self.routing_policy {
            ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multi_cluster_routing_use_any(&mut self, v: app_profile::MultiClusterRoutingUseAny) {
        self.routing_policy = ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multi_cluster_routing_use_any(&mut self) -> &mut app_profile::MultiClusterRoutingUseAny {
        if let ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(_)) = self.routing_policy {
        } else {
            self.routing_policy = ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(app_profile::MultiClusterRoutingUseAny::new()));
        }
        match self.routing_policy {
            ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multi_cluster_routing_use_any(&mut self) -> app_profile::MultiClusterRoutingUseAny {
        if self.has_multi_cluster_routing_use_any() {
            match self.routing_policy.take() {
                ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(v)) => v,
                _ => panic!(),
            }
        } else {
            app_profile::MultiClusterRoutingUseAny::new()
        }
    }

    // .google.bigtable.admin.v2.AppProfile.SingleClusterRouting single_cluster_routing = 6;

    pub fn single_cluster_routing(&self) -> &app_profile::SingleClusterRouting {
        match self.routing_policy {
            ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(ref v)) => v,
            _ => <app_profile::SingleClusterRouting as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_single_cluster_routing(&mut self) {
        self.routing_policy = ::std::option::Option::None;
    }

    pub fn has_single_cluster_routing(&self) -> bool {
        match self.routing_policy {
            ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single_cluster_routing(&mut self, v: app_profile::SingleClusterRouting) {
        self.routing_policy = ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single_cluster_routing(&mut self) -> &mut app_profile::SingleClusterRouting {
        if let ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(_)) = self.routing_policy {
        } else {
            self.routing_policy = ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(app_profile::SingleClusterRouting::new()));
        }
        match self.routing_policy {
            ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single_cluster_routing(&mut self) -> app_profile::SingleClusterRouting {
        if self.has_single_cluster_routing() {
            match self.routing_policy.take() {
                ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(v)) => v,
                _ => panic!(),
            }
        } else {
            app_profile::SingleClusterRouting::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AppProfile| { &m.name },
            |m: &mut AppProfile| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "etag",
            |m: &AppProfile| { &m.etag },
            |m: &mut AppProfile| { &mut m.etag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &AppProfile| { &m.description },
            |m: &mut AppProfile| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, app_profile::MultiClusterRoutingUseAny>(
            "multi_cluster_routing_use_any",
            AppProfile::has_multi_cluster_routing_use_any,
            AppProfile::multi_cluster_routing_use_any,
            AppProfile::mut_multi_cluster_routing_use_any,
            AppProfile::set_multi_cluster_routing_use_any,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, app_profile::SingleClusterRouting>(
            "single_cluster_routing",
            AppProfile::has_single_cluster_routing,
            AppProfile::single_cluster_routing,
            AppProfile::mut_single_cluster_routing,
            AppProfile::set_single_cluster_routing,
        ));
        oneofs.push(app_profile::Routing_policy::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppProfile>(
            "AppProfile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppProfile {
    const NAME: &'static str = "AppProfile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.etag = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                42 => {
                    self.routing_policy = ::std::option::Option::Some(app_profile::Routing_policy::MultiClusterRoutingUseAny(is.read_message()?));
                },
                50 => {
                    self.routing_policy = ::std::option::Option::Some(app_profile::Routing_policy::SingleClusterRouting(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.etag);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if let ::std::option::Option::Some(ref v) = self.routing_policy {
            match v {
                &app_profile::Routing_policy::MultiClusterRoutingUseAny(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &app_profile::Routing_policy::SingleClusterRouting(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.etag.is_empty() {
            os.write_string(2, &self.etag)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if let ::std::option::Option::Some(ref v) = self.routing_policy {
            match v {
                &app_profile::Routing_policy::MultiClusterRoutingUseAny(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &app_profile::Routing_policy::SingleClusterRouting(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppProfile {
        AppProfile::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.etag.clear();
        self.description.clear();
        self.routing_policy = ::std::option::Option::None;
        self.routing_policy = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppProfile {
        static instance: AppProfile = AppProfile {
            name: ::std::string::String::new(),
            etag: ::std::string::String::new(),
            description: ::std::string::String::new(),
            routing_policy: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppProfile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppProfile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppProfile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AppProfile`
pub mod app_profile {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:google.bigtable.admin.v2.AppProfile.routing_policy)
    pub enum Routing_policy {
        // @@protoc_insertion_point(oneof_field:google.bigtable.admin.v2.AppProfile.multi_cluster_routing_use_any)
        MultiClusterRoutingUseAny(MultiClusterRoutingUseAny),
        // @@protoc_insertion_point(oneof_field:google.bigtable.admin.v2.AppProfile.single_cluster_routing)
        SingleClusterRouting(SingleClusterRouting),
    }

    impl ::protobuf::Oneof for Routing_policy {
    }

    impl ::protobuf::OneofFull for Routing_policy {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AppProfile as ::protobuf::MessageFull>::descriptor().oneof_by_name("routing_policy").unwrap()).clone()
        }
    }

    impl Routing_policy {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Routing_policy>("routing_policy")
        }
    }
    ///  Read/write requests may be routed to any cluster in the instance, and will
    ///  fail over to another cluster in the event of transient errors or delays.
    ///  Choosing this option sacrifices read-your-writes consistency to improve
    ///  availability.
    // @@protoc_insertion_point(message:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MultiClusterRoutingUseAny {
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MultiClusterRoutingUseAny {
        fn default() -> &'a MultiClusterRoutingUseAny {
            <MultiClusterRoutingUseAny as ::protobuf::Message>::default_instance()
        }
    }

    impl MultiClusterRoutingUseAny {
        pub fn new() -> MultiClusterRoutingUseAny {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MultiClusterRoutingUseAny>(
                "AppProfile.MultiClusterRoutingUseAny",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MultiClusterRoutingUseAny {
        const NAME: &'static str = "MultiClusterRoutingUseAny";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MultiClusterRoutingUseAny {
            MultiClusterRoutingUseAny::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MultiClusterRoutingUseAny {
            static instance: MultiClusterRoutingUseAny = MultiClusterRoutingUseAny {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MultiClusterRoutingUseAny {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AppProfile.MultiClusterRoutingUseAny").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MultiClusterRoutingUseAny {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MultiClusterRoutingUseAny {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  Unconditionally routes all read/write requests to a specific cluster.
    ///  This option preserves read-your-writes consistency, but does not improve
    ///  availability.
    // @@protoc_insertion_point(message:google.bigtable.admin.v2.AppProfile.SingleClusterRouting)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SingleClusterRouting {
        // message fields
        ///  The cluster to which read/write requests should be routed.
        // @@protoc_insertion_point(field:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.cluster_id)
        pub cluster_id: ::std::string::String,
        ///  Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are
        ///  allowed by this app profile. It is unsafe to send these requests to
        ///  the same table/row/column in multiple clusters.
        // @@protoc_insertion_point(field:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.allow_transactional_writes)
        pub allow_transactional_writes: bool,
        // special fields
        // @@protoc_insertion_point(special_field:google.bigtable.admin.v2.AppProfile.SingleClusterRouting.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SingleClusterRouting {
        fn default() -> &'a SingleClusterRouting {
            <SingleClusterRouting as ::protobuf::Message>::default_instance()
        }
    }

    impl SingleClusterRouting {
        pub fn new() -> SingleClusterRouting {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "cluster_id",
                |m: &SingleClusterRouting| { &m.cluster_id },
                |m: &mut SingleClusterRouting| { &mut m.cluster_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "allow_transactional_writes",
                |m: &SingleClusterRouting| { &m.allow_transactional_writes },
                |m: &mut SingleClusterRouting| { &mut m.allow_transactional_writes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SingleClusterRouting>(
                "AppProfile.SingleClusterRouting",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SingleClusterRouting {
        const NAME: &'static str = "SingleClusterRouting";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.cluster_id = is.read_string()?;
                    },
                    16 => {
                        self.allow_transactional_writes = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.cluster_id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.cluster_id);
            }
            if self.allow_transactional_writes != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.cluster_id.is_empty() {
                os.write_string(1, &self.cluster_id)?;
            }
            if self.allow_transactional_writes != false {
                os.write_bool(2, self.allow_transactional_writes)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SingleClusterRouting {
            SingleClusterRouting::new()
        }

        fn clear(&mut self) {
            self.cluster_id.clear();
            self.allow_transactional_writes = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SingleClusterRouting {
            static instance: SingleClusterRouting = SingleClusterRouting {
                cluster_id: ::std::string::String::new(),
                allow_transactional_writes: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SingleClusterRouting {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AppProfile.SingleClusterRouting").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SingleClusterRouting {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SingleClusterRouting {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'google/bigtable/admin/v2/instance.proto\x12\x18google.bigtable.admin.\
    v2\x1a\x1cgoogle/api/annotations.proto\x1a%google/bigtable/admin/v2/comm\
    on.proto\"\xb7\x03\n\x08Instance\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12!\n\x0cdisplay_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12>\
    \n\x05state\x18\x03\x20\x01(\x0e2(.google.bigtable.admin.v2.Instance.Sta\
    teR\x05state\x12;\n\x04type\x18\x04\x20\x01(\x0e2'.google.bigtable.admin\
    .v2.Instance.TypeR\x04type\x12F\n\x06labels\x18\x05\x20\x03(\x0b2..googl\
    e.bigtable.admin.v2.Instance.LabelsEntryR\x06labels\x1a9\n\x0bLabelsEntr\
    y\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01\"5\n\x05State\x12\x13\n\x0fSTATE_NOT_KNO\
    WN\x10\0\x12\t\n\x05READY\x10\x01\x12\x0c\n\x08CREATING\x10\x02\"=\n\x04\
    Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\0\x12\x0e\n\nPRODUCTION\x10\x01\
    \x12\x0f\n\x0bDEVELOPMENT\x10\x02\"\xc5\x02\n\x07Cluster\x12\x12\n\x04na\
    me\x18\x01\x20\x01(\tR\x04name\x12\x1a\n\x08location\x18\x02\x20\x01(\tR\
    \x08location\x12=\n\x05state\x18\x03\x20\x01(\x0e2'.google.bigtable.admi\
    n.v2.Cluster.StateR\x05state\x12\x1f\n\x0bserve_nodes\x18\x04\x20\x01(\
    \x05R\nserveNodes\x12W\n\x14default_storage_type\x18\x05\x20\x01(\x0e2%.\
    google.bigtable.admin.v2.StorageTypeR\x12defaultStorageType\"Q\n\x05Stat\
    e\x12\x13\n\x0fSTATE_NOT_KNOWN\x10\0\x12\t\n\x05READY\x10\x01\x12\x0c\n\
    \x08CREATING\x10\x02\x12\x0c\n\x08RESIZING\x10\x03\x12\x0c\n\x08DISABLED\
    \x10\x04\"\xf2\x03\n\nAppProfile\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x12\n\x04etag\x18\x02\x20\x01(\tR\x04etag\x12\x20\n\x0bdesc\
    ription\x18\x03\x20\x01(\tR\x0bdescription\x12\x82\x01\n\x1dmulti_cluste\
    r_routing_use_any\x18\x05\x20\x01(\x0b2>.google.bigtable.admin.v2.AppPro\
    file.MultiClusterRoutingUseAnyH\0R\x19multiClusterRoutingUseAny\x12q\n\
    \x16single_cluster_routing\x18\x06\x20\x01(\x0b29.google.bigtable.admin.\
    v2.AppProfile.SingleClusterRoutingH\0R\x14singleClusterRouting\x1a\x1b\n\
    \x19MultiClusterRoutingUseAny\x1as\n\x14SingleClusterRouting\x12\x1d\n\n\
    cluster_id\x18\x01\x20\x01(\tR\tclusterId\x12<\n\x1aallow_transactional_\
    writes\x18\x02\x20\x01(\x08R\x18allowTransactionalWritesB\x10\n\x0erouti\
    ng_policyB\xb0\x01\n\x1ccom.google.bigtable.admin.v2B\rInstanceProtoP\
    \x01Z=google.golang.org/genproto/googleapis/bigtable/admin/v2;admin\xaa\
    \x02\x1eGoogle.Cloud.Bigtable.Admin.V2\xca\x02\x1eGoogle\\Cloud\\Bigtabl\
    e\\Admin\\V2J\xc5?\n\x07\x12\x05\x0f\0\xcc\x01\x01\n\xbe\x04\n\x01\x0c\
    \x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202018\x20Google\x20LLC.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\n\x08\n\x01\x02\x12\x03\x11\0!\n\t\n\x02\x03\0\x12\x03\x13\0&\n\
    \t\n\x02\x03\x01\x12\x03\x14\0/\n\x08\n\x01\x08\x12\x03\x16\0;\n\t\n\x02\
    \x08%\x12\x03\x16\0;\n\x08\n\x01\x08\x12\x03\x17\0T\n\t\n\x02\x08\x0b\
    \x12\x03\x17\0T\n\x08\n\x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\
    \x18\0\"\n\x08\n\x01\x08\x12\x03\x19\0.\n\t\n\x02\x08\x08\x12\x03\x19\0.\
    \n\x08\n\x01\x08\x12\x03\x1a\05\n\t\n\x02\x08\x01\x12\x03\x1a\05\n\x08\n\
    \x01\x08\x12\x03\x1b\0<\n\t\n\x02\x08)\x12\x03\x1b\0<\n\xd6\x01\n\x02\
    \x04\0\x12\x04!\0b\x01\x1a\xc9\x01\x20A\x20collection\x20of\x20Bigtable\
    \x20[Tables][google.bigtable.admin.v2.Table]\x20and\n\x20the\x20resource\
    s\x20that\x20serve\x20them.\n\x20All\x20tables\x20in\x20an\x20instance\
    \x20are\x20served\x20from\x20a\x20single\n\x20[Cluster][google.bigtable.\
    admin.v2.Cluster].\n\n\n\n\x03\x04\0\x01\x12\x03!\x08\x10\n/\n\x04\x04\0\
    \x04\0\x12\x04#\x02.\x03\x1a!\x20Possible\x20states\x20of\x20an\x20insta\
    nce.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03#\x07\x0c\nC\n\x06\x04\0\x04\0\
    \x02\0\x12\x03%\x04\x18\x1a4\x20The\x20state\x20of\x20the\x20instance\
    \x20could\x20not\x20be\x20determined.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\
    \x01\x12\x03%\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03%\x16\x17\
    \nb\n\x06\x04\0\x04\0\x02\x01\x12\x03)\x04\x0e\x1aS\x20The\x20instance\
    \x20has\x20been\x20successfully\x20created\x20and\x20can\x20serve\x20req\
    uests\n\x20to\x20its\x20tables.\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\
    \x12\x03)\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03)\x0c\r\n|\n\
    \x06\x04\0\x04\0\x02\x02\x12\x03-\x04\x11\x1am\x20The\x20instance\x20is\
    \x20currently\x20being\x20created,\x20and\x20may\x20be\x20destroyed\n\
    \x20if\x20the\x20creation\x20process\x20encounters\x20an\x20error.\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03-\x04\x0c\n\x0e\n\x07\x04\0\
    \x04\0\x02\x02\x02\x12\x03-\x0f\x10\n)\n\x04\x04\0\x04\x01\x12\x041\x02C\
    \x03\x1a\x1b\x20The\x20type\x20of\x20the\x20instance.\n\n\x0c\n\x05\x04\
    \0\x04\x01\x01\x12\x031\x07\x0b\n\xca\x01\n\x06\x04\0\x04\x01\x02\0\x12\
    \x035\x04\x19\x1a\xba\x01\x20The\x20type\x20of\x20the\x20instance\x20is\
    \x20unspecified.\x20If\x20set\x20when\x20creating\x20an\n\x20instance,\
    \x20a\x20`PRODUCTION`\x20instance\x20will\x20be\x20created.\x20If\x20set\
    \x20when\x20updating\n\x20an\x20instance,\x20the\x20type\x20will\x20be\
    \x20left\x20unchanged.\n\n\x0e\n\x07\x04\0\x04\x01\x02\0\x01\x12\x035\
    \x04\x14\n\x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\x035\x17\x18\na\n\x06\
    \x04\0\x04\x01\x02\x01\x12\x039\x04\x13\x1aR\x20An\x20instance\x20meant\
    \x20for\x20production\x20use.\x20`serve_nodes`\x20must\x20be\x20set\n\
    \x20on\x20the\x20cluster.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x01\x12\
    \x039\x04\x0e\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x02\x12\x039\x11\x12\n\
    \xb7\x03\n\x06\x04\0\x04\x01\x02\x02\x12\x03B\x04\x14\x1a\xa7\x03\x20The\
    \x20instance\x20is\x20meant\x20for\x20development\x20and\x20testing\x20p\
    urposes\x20only;\x20it\x20has\n\x20no\x20performance\x20or\x20uptime\x20\
    guarantees\x20and\x20is\x20not\x20covered\x20by\x20SLA.\n\x20After\x20a\
    \x20development\x20instance\x20is\x20created,\x20it\x20can\x20be\x20upgr\
    aded\x20by\n\x20updating\x20the\x20instance\x20to\x20type\x20`PRODUCTION\
    `.\x20An\x20instance\x20created\n\x20as\x20a\x20production\x20instance\
    \x20cannot\x20be\x20changed\x20to\x20a\x20development\x20instance.\n\x20\
    When\x20creating\x20a\x20development\x20instance,\x20`serve_nodes`\x20on\
    \x20the\x20cluster\x20must\n\x20not\x20be\x20set.\n\n\x0e\n\x07\x04\0\
    \x04\x01\x02\x02\x01\x12\x03B\x04\x0f\n\x0e\n\x07\x04\0\x04\x01\x02\x02\
    \x02\x12\x03B\x12\x13\n\x92\x01\n\x04\x04\0\x02\0\x12\x03H\x02\x12\x1a\
    \x84\x01\x20(`OutputOnly`)\n\x20The\x20unique\x20name\x20of\x20the\x20in\
    stance.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/<project>/i\
    nstances/[a-z][a-z0-9\\\\-]+[a-z0-9]`.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03H\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03H\t\r\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03H\x10\x11\n\xa1\x01\n\x04\x04\0\x02\x01\x12\x03M\x02\
    \x1a\x1a\x93\x01\x20The\x20descriptive\x20name\x20for\x20this\x20instanc\
    e\x20as\x20it\x20appears\x20in\x20UIs.\n\x20Can\x20be\x20changed\x20at\
    \x20any\x20time,\x20but\x20should\x20be\x20kept\x20globally\x20unique\n\
    \x20to\x20avoid\x20confusion.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03M\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03M\t\x15\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03M\x18\x19\nA\n\x04\x04\0\x02\x02\x12\x03Q\x02\x12\
    \x1a4\x20(`OutputOnly`)\n\x20The\x20current\x20state\x20of\x20the\x20ins\
    tance.\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03Q\x02\x07\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03Q\x08\r\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03Q\x10\
    \x11\nB\n\x04\x04\0\x02\x03\x12\x03T\x02\x10\x1a5\x20The\x20type\x20of\
    \x20the\x20instance.\x20Defaults\x20to\x20`PRODUCTION`.\n\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03T\x02\x06\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03T\x07\x0b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03T\x0e\x0f\n\x82\x05\n\
    \x04\x04\0\x02\x04\x12\x03a\x02!\x1a\xf4\x04\x20Labels\x20are\x20a\x20fl\
    exible\x20and\x20lightweight\x20mechanism\x20for\x20organizing\x20cloud\
    \n\x20resources\x20into\x20groups\x20that\x20reflect\x20a\x20customer's\
    \x20organizational\x20needs\x20and\n\x20deployment\x20strategies.\x20The\
    y\x20can\x20be\x20used\x20to\x20filter\x20resources\x20and\x20aggregate\
    \n\x20metrics.\n\n\x20*\x20Label\x20keys\x20must\x20be\x20between\x201\
    \x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\x20to\n\
    \x20\x20\x20the\x20regular\x20expression:\x20`[\\p{Ll}\\p{Lo}][\\p{Ll}\\\
    p{Lo}\\p{N}_-]{0,62}`.\n\x20*\x20Label\x20values\x20must\x20be\x20betwee\
    n\x200\x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\x20t\
    o\n\x20\x20\x20the\x20regular\x20expression:\x20`[\\p{Ll}\\p{Lo}\\p{N}_-\
    ]{0,63}`.\n\x20*\x20No\x20more\x20than\x2064\x20labels\x20can\x20be\x20a\
    ssociated\x20with\x20a\x20given\x20resource.\n\x20*\x20Keys\x20and\x20va\
    lues\x20must\x20both\x20be\x20under\x20128\x20bytes.\n\n\x0c\n\x05\x04\0\
    \x02\x04\x06\x12\x03a\x02\x15\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03a\x16\
    \x1c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03a\x1f\x20\n\xc9\x01\n\x02\x04\
    \x01\x12\x05g\0\x99\x01\x01\x1a\xbb\x01\x20A\x20resizable\x20group\x20of\
    \x20nodes\x20in\x20a\x20particular\x20cloud\x20location,\x20capable\n\
    \x20of\x20serving\x20all\x20[Tables][google.bigtable.admin.v2.Table]\x20\
    in\x20the\x20parent\n\x20[Instance][google.bigtable.admin.v2.Instance].\
    \n\n\n\n\x03\x04\x01\x01\x12\x03g\x08\x0f\n-\n\x04\x04\x01\x04\0\x12\x04\
    i\x02\x7f\x03\x1a\x1f\x20Possible\x20states\x20of\x20a\x20cluster.\n\n\
    \x0c\n\x05\x04\x01\x04\0\x01\x12\x03i\x07\x0c\nB\n\x06\x04\x01\x04\0\x02\
    \0\x12\x03k\x04\x18\x1a3\x20The\x20state\x20of\x20the\x20cluster\x20coul\
    d\x20not\x20be\x20determined.\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\
    \x03k\x04\x13\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03k\x16\x17\nZ\n\
    \x06\x04\x01\x04\0\x02\x01\x12\x03n\x04\x0e\x1aK\x20The\x20cluster\x20ha\
    s\x20been\x20successfully\x20created\x20and\x20is\x20ready\x20to\x20serv\
    e\x20requests.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03n\x04\t\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x03n\x0c\r\n\xbe\x01\n\x06\x04\
    \x01\x04\0\x02\x02\x12\x03s\x04\x11\x1a\xae\x01\x20The\x20cluster\x20is\
    \x20currently\x20being\x20created,\x20and\x20may\x20be\x20destroyed\n\
    \x20if\x20the\x20creation\x20process\x20encounters\x20an\x20error.\n\x20\
    A\x20cluster\x20may\x20not\x20be\x20able\x20to\x20serve\x20requests\x20w\
    hile\x20being\x20created.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\
    \x03s\x04\x0c\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x03s\x0f\x10\n\
    \xbd\x02\n\x06\x04\x01\x04\0\x02\x03\x12\x03z\x04\x11\x1a\xad\x02\x20The\
    \x20cluster\x20is\x20currently\x20being\x20resized,\x20and\x20may\x20rev\
    ert\x20to\x20its\x20previous\n\x20node\x20count\x20if\x20the\x20process\
    \x20encounters\x20an\x20error.\n\x20A\x20cluster\x20is\x20still\x20capab\
    le\x20of\x20serving\x20requests\x20while\x20being\x20resized,\n\x20but\
    \x20may\x20exhibit\x20performance\x20as\x20if\x20its\x20number\x20of\x20\
    allocated\x20nodes\x20is\n\x20between\x20the\x20starting\x20and\x20reque\
    sted\x20states.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x01\x12\x03z\x04\x0c\
    \n\x0e\n\x07\x04\x01\x04\0\x02\x03\x02\x12\x03z\x0f\x10\n\x85\x01\n\x06\
    \x04\x01\x04\0\x02\x04\x12\x03~\x04\x11\x1av\x20The\x20cluster\x20has\
    \x20no\x20backing\x20nodes.\x20The\x20data\x20(tables)\x20still\n\x20exi\
    st,\x20but\x20no\x20operations\x20can\x20be\x20performed\x20on\x20the\
    \x20cluster.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x04\x01\x12\x03~\x04\x0c\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x04\x02\x12\x03~\x0f\x10\n\x9c\x01\n\x04\
    \x04\x01\x02\0\x12\x04\x84\x01\x02\x12\x1a\x8d\x01\x20(`OutputOnly`)\n\
    \x20The\x20unique\x20name\x20of\x20the\x20cluster.\x20Values\x20are\x20o\
    f\x20the\x20form\n\x20`projects/<project>/instances/<instance>/clusters/\
    [a-z][-a-z0-9]*`.\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\x84\x01\x02\x08\
    \n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x84\x01\t\r\n\r\n\x05\x04\x01\x02\0\
    \x03\x12\x04\x84\x01\x10\x11\n\xa2\x02\n\x04\x04\x01\x02\x01\x12\x04\x8b\
    \x01\x02\x16\x1a\x93\x02\x20(`CreationOnly`)\n\x20The\x20location\x20whe\
    re\x20this\x20cluster's\x20nodes\x20and\x20storage\x20reside.\x20For\x20\
    best\n\x20performance,\x20clients\x20should\x20be\x20located\x20as\x20cl\
    ose\x20as\x20possible\x20to\x20this\n\x20cluster.\x20Currently\x20only\
    \x20zones\x20are\x20supported,\x20so\x20values\x20should\x20be\x20of\x20\
    the\n\x20form\x20`projects/<project>/locations/<zone>`.\n\n\r\n\x05\x04\
    \x01\x02\x01\x05\x12\x04\x8b\x01\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\
    \x12\x04\x8b\x01\t\x11\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\x8b\x01\x14\
    \x15\nA\n\x04\x04\x01\x02\x02\x12\x04\x8f\x01\x02\x12\x1a3\x20(`OutputOn\
    ly`)\n\x20The\x20current\x20state\x20of\x20the\x20cluster.\n\n\r\n\x05\
    \x04\x01\x02\x02\x06\x12\x04\x8f\x01\x02\x07\n\r\n\x05\x04\x01\x02\x02\
    \x01\x12\x04\x8f\x01\x08\r\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\x8f\x01\
    \x10\x11\n\x84\x01\n\x04\x04\x01\x02\x03\x12\x04\x93\x01\x02\x18\x1av\
    \x20The\x20number\x20of\x20nodes\x20allocated\x20to\x20this\x20cluster.\
    \x20More\x20nodes\x20enable\x20higher\n\x20throughput\x20and\x20more\x20\
    consistent\x20performance.\n\n\r\n\x05\x04\x01\x02\x03\x05\x12\x04\x93\
    \x01\x02\x07\n\r\n\x05\x04\x01\x02\x03\x01\x12\x04\x93\x01\x08\x13\n\r\n\
    \x05\x04\x01\x02\x03\x03\x12\x04\x93\x01\x16\x17\n\x91\x01\n\x04\x04\x01\
    \x02\x04\x12\x04\x98\x01\x02'\x1a\x82\x01\x20(`CreationOnly`)\n\x20The\
    \x20type\x20of\x20storage\x20used\x20by\x20this\x20cluster\x20to\x20serv\
    e\x20its\n\x20parent\x20instance's\x20tables,\x20unless\x20explicitly\
    \x20overridden.\n\n\r\n\x05\x04\x01\x02\x04\x06\x12\x04\x98\x01\x02\r\n\
    \r\n\x05\x04\x01\x02\x04\x01\x12\x04\x98\x01\x0e\"\n\r\n\x05\x04\x01\x02\
    \x04\x03\x12\x04\x98\x01%&\n\x82\x01\n\x02\x04\x02\x12\x06\x9d\x01\0\xcc\
    \x01\x01\x1at\x20A\x20configuration\x20object\x20describing\x20how\x20Cl\
    oud\x20Bigtable\x20should\x20treat\x20traffic\n\x20from\x20a\x20particul\
    ar\x20end\x20user\x20application.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\x9d\
    \x01\x08\x12\n\xfd\x01\n\x04\x04\x02\x03\0\x12\x04\xa2\x01\x02&\x1a\xee\
    \x01\x20Read/write\x20requests\x20may\x20be\x20routed\x20to\x20any\x20cl\
    uster\x20in\x20the\x20instance,\x20and\x20will\n\x20fail\x20over\x20to\
    \x20another\x20cluster\x20in\x20the\x20event\x20of\x20transient\x20error\
    s\x20or\x20delays.\n\x20Choosing\x20this\x20option\x20sacrifices\x20read\
    -your-writes\x20consistency\x20to\x20improve\n\x20availability.\n\n\r\n\
    \x05\x04\x02\x03\0\x01\x12\x04\xa2\x01\n#\n\xb1\x01\n\x04\x04\x02\x03\
    \x01\x12\x06\xa7\x01\x02\xaf\x01\x03\x1a\xa0\x01\x20Unconditionally\x20r\
    outes\x20all\x20read/write\x20requests\x20to\x20a\x20specific\x20cluster\
    .\n\x20This\x20option\x20preserves\x20read-your-writes\x20consistency,\
    \x20but\x20does\x20not\x20improve\n\x20availability.\n\n\r\n\x05\x04\x02\
    \x03\x01\x01\x12\x04\xa7\x01\n\x1e\nL\n\x06\x04\x02\x03\x01\x02\0\x12\
    \x04\xa9\x01\x04\x1a\x1a<\x20The\x20cluster\x20to\x20which\x20read/write\
    \x20requests\x20should\x20be\x20routed.\n\n\x0f\n\x07\x04\x02\x03\x01\
    \x02\0\x05\x12\x04\xa9\x01\x04\n\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x01\
    \x12\x04\xa9\x01\x0b\x15\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x03\x12\x04\
    \xa9\x01\x18\x19\n\xd1\x01\n\x06\x04\x02\x03\x01\x02\x01\x12\x04\xae\x01\
    \x04(\x1a\xc0\x01\x20Whether\x20or\x20not\x20`CheckAndMutateRow`\x20and\
    \x20`ReadModifyWriteRow`\x20requests\x20are\n\x20allowed\x20by\x20this\
    \x20app\x20profile.\x20It\x20is\x20unsafe\x20to\x20send\x20these\x20requ\
    ests\x20to\n\x20the\x20same\x20table/row/column\x20in\x20multiple\x20clu\
    sters.\n\n\x0f\n\x07\x04\x02\x03\x01\x02\x01\x05\x12\x04\xae\x01\x04\x08\
    \n\x0f\n\x07\x04\x02\x03\x01\x02\x01\x01\x12\x04\xae\x01\t#\n\x0f\n\x07\
    \x04\x02\x03\x01\x02\x01\x03\x12\x04\xae\x01&'\n\xaf\x01\n\x04\x04\x02\
    \x02\0\x12\x04\xb4\x01\x02\x12\x1a\xa0\x01\x20(`OutputOnly`)\n\x20The\
    \x20unique\x20name\x20of\x20the\x20app\x20profile.\x20Values\x20are\x20o\
    f\x20the\x20form\n\x20`projects/<project>/instances/<instance>/appProfil\
    es/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\
    \xb4\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xb4\x01\t\r\n\r\n\
    \x05\x04\x02\x02\0\x03\x12\x04\xb4\x01\x10\x11\n\xcd\x03\n\x04\x04\x02\
    \x02\x01\x12\x04\xbe\x01\x02\x12\x1a\xbe\x03\x20Strongly\x20validated\
    \x20etag\x20for\x20optimistic\x20concurrency\x20control.\x20Preserve\x20\
    the\n\x20value\x20returned\x20from\x20`GetAppProfile`\x20when\x20calling\
    \x20`UpdateAppProfile`\x20to\n\x20fail\x20the\x20request\x20if\x20there\
    \x20has\x20been\x20a\x20modification\x20in\x20the\x20mean\x20time.\x20Th\
    e\n\x20`update_mask`\x20of\x20the\x20request\x20need\x20not\x20include\
    \x20`etag`\x20for\x20this\x20protection\n\x20to\x20apply.\n\x20See\x20[W\
    ikipedia](https://en.wikipedia.org/wiki/HTTP_ETag)\x20and\n\x20[RFC\x207\
    232](https://tools.ietf.org/html/rfc7232#section-2.3)\x20for\x20more\n\
    \x20details.\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xbe\x01\x02\x08\n\r\
    \n\x05\x04\x02\x02\x01\x01\x12\x04\xbe\x01\t\r\n\r\n\x05\x04\x02\x02\x01\
    \x03\x12\x04\xbe\x01\x10\x11\nS\n\x04\x04\x02\x02\x02\x12\x04\xc1\x01\
    \x02\x19\x1aE\x20Optional\x20long\x20form\x20description\x20of\x20the\
    \x20use\x20case\x20for\x20this\x20AppProfile.\n\n\r\n\x05\x04\x02\x02\
    \x02\x05\x12\x04\xc1\x01\x02\x08\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\
    \xc1\x01\t\x14\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\xc1\x01\x17\x18\n}\
    \n\x04\x04\x02\x08\0\x12\x06\xc5\x01\x02\xcb\x01\x03\x1am\x20The\x20rout\
    ing\x20policy\x20for\x20all\x20read/write\x20requests\x20which\x20use\
    \x20this\x20app\x20profile.\n\x20A\x20value\x20must\x20be\x20explicitly\
    \x20set.\n\n\r\n\x05\x04\x02\x08\0\x01\x12\x04\xc5\x01\x08\x16\nM\n\x04\
    \x04\x02\x02\x03\x12\x04\xc7\x01\x04@\x1a?\x20Use\x20a\x20multi-cluster\
    \x20routing\x20policy\x20that\x20may\x20pick\x20any\x20cluster.\n\n\r\n\
    \x05\x04\x02\x02\x03\x06\x12\x04\xc7\x01\x04\x1d\n\r\n\x05\x04\x02\x02\
    \x03\x01\x12\x04\xc7\x01\x1e;\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\xc7\
    \x01>?\n4\n\x04\x04\x02\x02\x04\x12\x04\xca\x01\x044\x1a&\x20Use\x20a\
    \x20single-cluster\x20routing\x20policy.\n\n\r\n\x05\x04\x02\x02\x04\x06\
    \x12\x04\xca\x01\x04\x18\n\r\n\x05\x04\x02\x02\x04\x01\x12\x04\xca\x01\
    \x19/\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\xca\x0123b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::annotations::file_descriptor().clone());
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Instance::generated_message_descriptor_data());
            messages.push(Cluster::generated_message_descriptor_data());
            messages.push(AppProfile::generated_message_descriptor_data());
            messages.push(app_profile::MultiClusterRoutingUseAny::generated_message_descriptor_data());
            messages.push(app_profile::SingleClusterRouting::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(instance::State::generated_enum_descriptor_data());
            enums.push(instance::Type::generated_enum_descriptor_data());
            enums.push(cluster::State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
