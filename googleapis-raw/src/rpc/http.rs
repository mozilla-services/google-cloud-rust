// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/rpc/http.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct HttpRequest {
    // message fields
    pub method: ::std::string::String,
    pub uri: ::std::string::String,
    pub headers: ::protobuf::RepeatedField<HttpHeader>,
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpRequest {
    fn default() -> &'a HttpRequest {
        <HttpRequest as ::protobuf::Message>::default_instance()
    }
}

impl HttpRequest {
    pub fn new() -> HttpRequest {
        ::std::default::Default::default()
    }

    // string method = 1;


    pub fn get_method(&self) -> &str {
        &self.method
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        &mut self.method
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.method, ::std::string::String::new())
    }

    // string uri = 2;


    pub fn get_uri(&self) -> &str {
        &self.uri
    }
    pub fn clear_uri(&mut self) {
        self.uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        &mut self.uri
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uri, ::std::string::String::new())
    }

    // repeated .google.rpc.HttpHeader headers = 3;


    pub fn get_headers(&self) -> &[HttpHeader] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<HttpHeader>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<HttpHeader> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<HttpHeader> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }

    // bytes body = 4;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HttpRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.method)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uri)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.method);
        }
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uri);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.method.is_empty() {
            os.write_string(1, &self.method)?;
        }
        if !self.uri.is_empty() {
            os.write_string(2, &self.uri)?;
        }
        for v in &self.headers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.body.is_empty() {
            os.write_bytes(4, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpRequest {
        HttpRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "method",
                |m: &HttpRequest| { &m.method },
                |m: &mut HttpRequest| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uri",
                |m: &HttpRequest| { &m.uri },
                |m: &mut HttpRequest| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpHeader>>(
                "headers",
                |m: &HttpRequest| { &m.headers },
                |m: &mut HttpRequest| { &mut m.headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body",
                |m: &HttpRequest| { &m.body },
                |m: &mut HttpRequest| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpRequest>(
                "HttpRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpRequest {
        static instance: ::protobuf::rt::LazyV2<HttpRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpRequest::new)
    }
}

impl ::protobuf::Clear for HttpRequest {
    fn clear(&mut self) {
        self.method.clear();
        self.uri.clear();
        self.headers.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpResponse {
    // message fields
    pub status: i32,
    pub reason: ::std::string::String,
    pub headers: ::protobuf::RepeatedField<HttpHeader>,
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpResponse {
    fn default() -> &'a HttpResponse {
        <HttpResponse as ::protobuf::Message>::default_instance()
    }
}

impl HttpResponse {
    pub fn new() -> HttpResponse {
        ::std::default::Default::default()
    }

    // int32 status = 1;


    pub fn get_status(&self) -> i32 {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: i32) {
        self.status = v;
    }

    // string reason = 2;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // repeated .google.rpc.HttpHeader headers = 3;


    pub fn get_headers(&self) -> &[HttpHeader] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<HttpHeader>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<HttpHeader> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<HttpHeader> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }

    // bytes body = 4;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HttpResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.status = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != 0 {
            my_size += ::protobuf::rt::value_size(1, self.status, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reason);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != 0 {
            os.write_int32(1, self.status)?;
        }
        if !self.reason.is_empty() {
            os.write_string(2, &self.reason)?;
        }
        for v in &self.headers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.body.is_empty() {
            os.write_bytes(4, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpResponse {
        HttpResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "status",
                |m: &HttpResponse| { &m.status },
                |m: &mut HttpResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &HttpResponse| { &m.reason },
                |m: &mut HttpResponse| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpHeader>>(
                "headers",
                |m: &HttpResponse| { &m.headers },
                |m: &mut HttpResponse| { &mut m.headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body",
                |m: &HttpResponse| { &m.body },
                |m: &mut HttpResponse| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpResponse>(
                "HttpResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpResponse {
        static instance: ::protobuf::rt::LazyV2<HttpResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpResponse::new)
    }
}

impl ::protobuf::Clear for HttpResponse {
    fn clear(&mut self) {
        self.status = 0;
        self.reason.clear();
        self.headers.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpHeader {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpHeader {
    fn default() -> &'a HttpHeader {
        <HttpHeader as ::protobuf::Message>::default_instance()
    }
}

impl HttpHeader {
    pub fn new() -> HttpHeader {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HttpHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpHeader {
        HttpHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &HttpHeader| { &m.key },
                |m: &mut HttpHeader| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &HttpHeader| { &m.value },
                |m: &mut HttpHeader| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpHeader>(
                "HttpHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpHeader {
        static instance: ::protobuf::rt::LazyV2<HttpHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpHeader::new)
    }
}

impl ::protobuf::Clear for HttpHeader {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15google/rpc/http.proto\x12\ngoogle.rpc\"}\n\x0bHttpRequest\x12\x16\
    \n\x06method\x18\x01\x20\x01(\tR\x06method\x12\x10\n\x03uri\x18\x02\x20\
    \x01(\tR\x03uri\x120\n\x07headers\x18\x03\x20\x03(\x0b2\x16.google.rpc.H\
    ttpHeaderR\x07headers\x12\x12\n\x04body\x18\x04\x20\x01(\x0cR\x04body\"\
    \x84\x01\n\x0cHttpResponse\x12\x16\n\x06status\x18\x01\x20\x01(\x05R\x06\
    status\x12\x16\n\x06reason\x18\x02\x20\x01(\tR\x06reason\x120\n\x07heade\
    rs\x18\x03\x20\x03(\x0b2\x16.google.rpc.HttpHeaderR\x07headers\x12\x12\n\
    \x04body\x18\x04\x20\x01(\x0cR\x04body\"4\n\nHttpHeader\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lueBX\n\x0ecom.google.rpcB\tHttpProtoP\x01Z3google.golang.org/genproto/g\
    oogleapis/rpc/http;http\xa2\x02\x03RPCJ\xb6\x10\n\x06\x12\x04\x0e\0?\x01\
    \n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202022\x20\
    Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20V\
    ersion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20\
    this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\x08\n\x01\x08\
    \x12\x03\x12\0J\n\t\n\x02\x08\x0b\x12\x03\x12\0J\n\x08\n\x01\x08\x12\x03\
    \x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\0*\
    \n\t\n\x02\x08\x08\x12\x03\x14\0*\n\x08\n\x01\x08\x12\x03\x15\0'\n\t\n\
    \x02\x08\x01\x12\x03\x15\0'\n\x08\n\x01\x08\x12\x03\x16\0!\n\t\n\x02\x08\
    $\x12\x03\x16\0!\n)\n\x02\x04\0\x12\x04\x19\0&\x01\x1a\x1d\x20Represents\
    \x20an\x20HTTP\x20request.\n\n\n\n\x03\x04\0\x01\x12\x03\x19\x08\x13\n'\
    \n\x04\x04\0\x02\0\x12\x03\x1b\x02\x14\x1a\x1a\x20The\x20HTTP\x20request\
    \x20method.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1b\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x1b\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x1b\x12\x13\n$\n\x04\x04\0\x02\x01\x12\x03\x1e\x02\x11\x1a\x17\x20T\
    he\x20HTTP\x20request\x20URI.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x1e\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1e\t\x0c\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x1e\x0f\x10\n\x96\x01\n\x04\x04\0\x02\x02\x12\
    \x03\"\x02\"\x1a\x88\x01\x20The\x20HTTP\x20request\x20headers.\x20The\
    \x20ordering\x20of\x20the\x20headers\x20is\x20significant.\n\x20Multiple\
    \x20headers\x20with\x20the\x20same\x20key\x20may\x20present\x20for\x20th\
    e\x20request.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\"\x02\n\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\"\x0b\x15\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\"\x16\x1d\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\"\x20!\nV\n\x04\
    \x04\0\x02\x03\x12\x03%\x02\x11\x1aI\x20The\x20HTTP\x20request\x20body.\
    \x20If\x20the\x20body\x20is\x20not\x20expected,\x20it\x20should\x20be\
    \x20empty.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03%\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03%\x08\x0c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03%\x0f\x10\n*\n\x02\x04\x01\x12\x04)\06\x01\x1a\x1e\x20Represents\x20\
    an\x20HTTP\x20response.\n\n\n\n\x03\x04\x01\x01\x12\x03)\x08\x14\n8\n\
    \x04\x04\x01\x02\0\x12\x03+\x02\x13\x1a+\x20The\x20HTTP\x20status\x20cod\
    e,\x20such\x20as\x20200\x20or\x20404.\n\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03+\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03+\x08\x0e\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03+\x11\x12\nC\n\x04\x04\x01\x02\x01\x12\x03\
    .\x02\x14\x1a6\x20The\x20HTTP\x20reason\x20phrase,\x20such\x20as\x20\"OK\
    \"\x20or\x20\"Not\x20Found\".\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03.\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03.\t\x0f\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03.\x12\x13\n\x98\x01\n\x04\x04\x01\x02\x02\x12\
    \x032\x02\"\x1a\x8a\x01\x20The\x20HTTP\x20response\x20headers.\x20The\
    \x20ordering\x20of\x20the\x20headers\x20is\x20significant.\n\x20Multiple\
    \x20headers\x20with\x20the\x20same\x20key\x20may\x20present\x20for\x20th\
    e\x20response.\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x032\x02\n\n\x0c\n\
    \x05\x04\x01\x02\x02\x06\x12\x032\x0b\x15\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x032\x16\x1d\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x032\x20!\nW\n\
    \x04\x04\x01\x02\x03\x12\x035\x02\x11\x1aJ\x20The\x20HTTP\x20response\
    \x20body.\x20If\x20the\x20body\x20is\x20not\x20expected,\x20it\x20should\
    \x20be\x20empty.\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x035\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x035\x08\x0c\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x035\x0f\x10\n(\n\x02\x04\x02\x12\x049\0?\x01\x1a\x1c\x20Re\
    presents\x20an\x20HTTP\x20header.\n\n\n\n\x03\x04\x02\x01\x12\x039\x08\
    \x12\n;\n\x04\x04\x02\x02\0\x12\x03;\x02\x11\x1a.\x20The\x20HTTP\x20head\
    er\x20key.\x20It\x20is\x20case\x20insensitive.\n\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03;\t\x0c\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03;\x0f\x10\n%\n\x04\x04\x02\x02\x01\
    \x12\x03>\x02\x13\x1a\x18\x20The\x20HTTP\x20header\x20value.\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03>\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03>\t\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03>\x11\x12b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
