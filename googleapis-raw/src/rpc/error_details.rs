// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/rpc/error_details.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Describes when the clients can retry a failed request. Clients could ignore
///  the recommendation here or retry when this information is missing from error
///  responses.
///
///  It's always recommended that clients should use exponential backoff when
///  retrying.
///
///  Clients should wait until `retry_delay` amount of time has passed since
///  receiving the error response before retrying.  If retrying requests also
///  fail, clients should use an exponential backoff scheme to gradually increase
///  the delay between retries based on `retry_delay`, until either a maximum
///  number of retires have been reached or a maximum retry delay cap has been
///  reached.
// @@protoc_insertion_point(message:google.rpc.RetryInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RetryInfo {
    // message fields
    ///  Clients should wait at least this long between retrying the same request.
    // @@protoc_insertion_point(field:google.rpc.RetryInfo.retry_delay)
    pub retry_delay: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.RetryInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RetryInfo {
    fn default() -> &'a RetryInfo {
        <RetryInfo as ::protobuf::Message>::default_instance()
    }
}

impl RetryInfo {
    pub fn new() -> RetryInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "retry_delay",
            |m: &RetryInfo| { &m.retry_delay },
            |m: &mut RetryInfo| { &mut m.retry_delay },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RetryInfo>(
            "RetryInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RetryInfo {
    const NAME: &'static str = "RetryInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.retry_delay)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.retry_delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.retry_delay.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RetryInfo {
        RetryInfo::new()
    }

    fn clear(&mut self) {
        self.retry_delay.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RetryInfo {
        static instance: RetryInfo = RetryInfo {
            retry_delay: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RetryInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RetryInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RetryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RetryInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Describes additional debugging info.
// @@protoc_insertion_point(message:google.rpc.DebugInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DebugInfo {
    // message fields
    ///  The stack trace entries indicating where the error occurred.
    // @@protoc_insertion_point(field:google.rpc.DebugInfo.stack_entries)
    pub stack_entries: ::std::vec::Vec<::std::string::String>,
    ///  Additional debugging information provided by the server.
    // @@protoc_insertion_point(field:google.rpc.DebugInfo.detail)
    pub detail: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.DebugInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugInfo {
    fn default() -> &'a DebugInfo {
        <DebugInfo as ::protobuf::Message>::default_instance()
    }
}

impl DebugInfo {
    pub fn new() -> DebugInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stack_entries",
            |m: &DebugInfo| { &m.stack_entries },
            |m: &mut DebugInfo| { &mut m.stack_entries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "detail",
            |m: &DebugInfo| { &m.detail },
            |m: &mut DebugInfo| { &mut m.detail },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugInfo>(
            "DebugInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugInfo {
    const NAME: &'static str = "DebugInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.stack_entries.push(is.read_string()?);
                },
                18 => {
                    self.detail = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.stack_entries {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if !self.detail.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.detail);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.stack_entries {
            os.write_string(1, &v)?;
        };
        if !self.detail.is_empty() {
            os.write_string(2, &self.detail)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugInfo {
        DebugInfo::new()
    }

    fn clear(&mut self) {
        self.stack_entries.clear();
        self.detail.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugInfo {
        static instance: DebugInfo = DebugInfo {
            stack_entries: ::std::vec::Vec::new(),
            detail: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Describes how a quota check failed.
///
///  For example if a daily limit was exceeded for the calling project,
///  a service could respond with a QuotaFailure detail containing the project
///  id and the description of the quota limit that was exceeded.  If the
///  calling project hasn't enabled the service in the developer console, then
///  a service could respond with the project id and set `service_disabled`
///  to true.
///
///  Also see RetryDetail and Help types for other details about handling a
///  quota failure.
// @@protoc_insertion_point(message:google.rpc.QuotaFailure)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QuotaFailure {
    // message fields
    ///  Describes all quota violations.
    // @@protoc_insertion_point(field:google.rpc.QuotaFailure.violations)
    pub violations: ::std::vec::Vec<quota_failure::Violation>,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.QuotaFailure.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuotaFailure {
    fn default() -> &'a QuotaFailure {
        <QuotaFailure as ::protobuf::Message>::default_instance()
    }
}

impl QuotaFailure {
    pub fn new() -> QuotaFailure {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "violations",
            |m: &QuotaFailure| { &m.violations },
            |m: &mut QuotaFailure| { &mut m.violations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuotaFailure>(
            "QuotaFailure",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuotaFailure {
    const NAME: &'static str = "QuotaFailure";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.violations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.violations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.violations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuotaFailure {
        QuotaFailure::new()
    }

    fn clear(&mut self) {
        self.violations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuotaFailure {
        static instance: QuotaFailure = QuotaFailure {
            violations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuotaFailure {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuotaFailure").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuotaFailure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuotaFailure {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `QuotaFailure`
pub mod quota_failure {
    ///  A message type used to describe a single quota violation.  For example, a
    ///  daily quota or a custom quota that was exceeded.
    // @@protoc_insertion_point(message:google.rpc.QuotaFailure.Violation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Violation {
        // message fields
        ///  The subject on which the quota check failed.
        ///  For example, "clientip:<ip address of client>" or "project:<Google
        ///  developer project id>".
        // @@protoc_insertion_point(field:google.rpc.QuotaFailure.Violation.subject)
        pub subject: ::std::string::String,
        ///  A description of how the quota check failed. Clients can use this
        ///  description to find more about the quota configuration in the service's
        ///  public documentation, or find the relevant quota limit to adjust through
        ///  developer console.
        ///
        ///  For example: "Service disabled" or "Daily Limit for read operations
        ///  exceeded".
        // @@protoc_insertion_point(field:google.rpc.QuotaFailure.Violation.description)
        pub description: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:google.rpc.QuotaFailure.Violation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Violation {
        fn default() -> &'a Violation {
            <Violation as ::protobuf::Message>::default_instance()
        }
    }

    impl Violation {
        pub fn new() -> Violation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "subject",
                |m: &Violation| { &m.subject },
                |m: &mut Violation| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "description",
                |m: &Violation| { &m.description },
                |m: &mut Violation| { &mut m.description },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Violation>(
                "QuotaFailure.Violation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Violation {
        const NAME: &'static str = "Violation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.subject = is.read_string()?;
                    },
                    18 => {
                        self.description = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.subject.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.subject);
            }
            if !self.description.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.description);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.subject.is_empty() {
                os.write_string(1, &self.subject)?;
            }
            if !self.description.is_empty() {
                os.write_string(2, &self.description)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Violation {
            Violation::new()
        }

        fn clear(&mut self) {
            self.subject.clear();
            self.description.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Violation {
            static instance: Violation = Violation {
                subject: ::std::string::String::new(),
                description: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Violation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("QuotaFailure.Violation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Violation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Violation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Describes what preconditions have failed.
///
///  For example, if an RPC failed because it required the Terms of Service to be
///  acknowledged, it could list the terms of service violation in the
///  PreconditionFailure message.
// @@protoc_insertion_point(message:google.rpc.PreconditionFailure)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PreconditionFailure {
    // message fields
    ///  Describes all precondition violations.
    // @@protoc_insertion_point(field:google.rpc.PreconditionFailure.violations)
    pub violations: ::std::vec::Vec<precondition_failure::Violation>,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.PreconditionFailure.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PreconditionFailure {
    fn default() -> &'a PreconditionFailure {
        <PreconditionFailure as ::protobuf::Message>::default_instance()
    }
}

impl PreconditionFailure {
    pub fn new() -> PreconditionFailure {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "violations",
            |m: &PreconditionFailure| { &m.violations },
            |m: &mut PreconditionFailure| { &mut m.violations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PreconditionFailure>(
            "PreconditionFailure",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PreconditionFailure {
    const NAME: &'static str = "PreconditionFailure";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.violations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.violations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.violations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PreconditionFailure {
        PreconditionFailure::new()
    }

    fn clear(&mut self) {
        self.violations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PreconditionFailure {
        static instance: PreconditionFailure = PreconditionFailure {
            violations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PreconditionFailure {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PreconditionFailure").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PreconditionFailure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PreconditionFailure {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PreconditionFailure`
pub mod precondition_failure {
    ///  A message type used to describe a single precondition failure.
    // @@protoc_insertion_point(message:google.rpc.PreconditionFailure.Violation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Violation {
        // message fields
        ///  The type of PreconditionFailure. We recommend using a service-specific
        ///  enum type to define the supported precondition violation types. For
        ///  example, "TOS" for "Terms of Service violation".
        // @@protoc_insertion_point(field:google.rpc.PreconditionFailure.Violation.type)
        pub type_: ::std::string::String,
        ///  The subject, relative to the type, that failed.
        ///  For example, "google.com/cloud" relative to the "TOS" type would
        ///  indicate which terms of service is being referenced.
        // @@protoc_insertion_point(field:google.rpc.PreconditionFailure.Violation.subject)
        pub subject: ::std::string::String,
        ///  A description of how the precondition failed. Developers can use this
        ///  description to understand how to fix the failure.
        ///
        ///  For example: "Terms of service not accepted".
        // @@protoc_insertion_point(field:google.rpc.PreconditionFailure.Violation.description)
        pub description: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:google.rpc.PreconditionFailure.Violation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Violation {
        fn default() -> &'a Violation {
            <Violation as ::protobuf::Message>::default_instance()
        }
    }

    impl Violation {
        pub fn new() -> Violation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "type",
                |m: &Violation| { &m.type_ },
                |m: &mut Violation| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "subject",
                |m: &Violation| { &m.subject },
                |m: &mut Violation| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "description",
                |m: &Violation| { &m.description },
                |m: &mut Violation| { &mut m.description },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Violation>(
                "PreconditionFailure.Violation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Violation {
        const NAME: &'static str = "Violation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.type_ = is.read_string()?;
                    },
                    18 => {
                        self.subject = is.read_string()?;
                    },
                    26 => {
                        self.description = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.type_.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.type_);
            }
            if !self.subject.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.subject);
            }
            if !self.description.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.description);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.type_.is_empty() {
                os.write_string(1, &self.type_)?;
            }
            if !self.subject.is_empty() {
                os.write_string(2, &self.subject)?;
            }
            if !self.description.is_empty() {
                os.write_string(3, &self.description)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Violation {
            Violation::new()
        }

        fn clear(&mut self) {
            self.type_.clear();
            self.subject.clear();
            self.description.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Violation {
            static instance: Violation = Violation {
                type_: ::std::string::String::new(),
                subject: ::std::string::String::new(),
                description: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Violation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PreconditionFailure.Violation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Violation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Violation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Describes violations in a client request. This error type focuses on the
///  syntactic aspects of the request.
// @@protoc_insertion_point(message:google.rpc.BadRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BadRequest {
    // message fields
    ///  Describes all violations in a client request.
    // @@protoc_insertion_point(field:google.rpc.BadRequest.field_violations)
    pub field_violations: ::std::vec::Vec<bad_request::FieldViolation>,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.BadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BadRequest {
    fn default() -> &'a BadRequest {
        <BadRequest as ::protobuf::Message>::default_instance()
    }
}

impl BadRequest {
    pub fn new() -> BadRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "field_violations",
            |m: &BadRequest| { &m.field_violations },
            |m: &mut BadRequest| { &mut m.field_violations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BadRequest>(
            "BadRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BadRequest {
    const NAME: &'static str = "BadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field_violations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.field_violations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.field_violations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BadRequest {
        BadRequest::new()
    }

    fn clear(&mut self) {
        self.field_violations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BadRequest {
        static instance: BadRequest = BadRequest {
            field_violations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BadRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BadRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BadRequest`
pub mod bad_request {
    ///  A message type used to describe a single bad request field.
    // @@protoc_insertion_point(message:google.rpc.BadRequest.FieldViolation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FieldViolation {
        // message fields
        ///  A path leading to a field in the request body. The value will be a
        ///  sequence of dot-separated identifiers that identify a protocol buffer
        ///  field. E.g., "field_violations.field" would identify this field.
        // @@protoc_insertion_point(field:google.rpc.BadRequest.FieldViolation.field)
        pub field: ::std::string::String,
        ///  A description of why the request element is bad.
        // @@protoc_insertion_point(field:google.rpc.BadRequest.FieldViolation.description)
        pub description: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:google.rpc.BadRequest.FieldViolation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FieldViolation {
        fn default() -> &'a FieldViolation {
            <FieldViolation as ::protobuf::Message>::default_instance()
        }
    }

    impl FieldViolation {
        pub fn new() -> FieldViolation {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "field",
                |m: &FieldViolation| { &m.field },
                |m: &mut FieldViolation| { &mut m.field },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "description",
                |m: &FieldViolation| { &m.description },
                |m: &mut FieldViolation| { &mut m.description },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FieldViolation>(
                "BadRequest.FieldViolation",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for FieldViolation {
        const NAME: &'static str = "FieldViolation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.field = is.read_string()?;
                    },
                    18 => {
                        self.description = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.field.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.field);
            }
            if !self.description.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.description);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.field.is_empty() {
                os.write_string(1, &self.field)?;
            }
            if !self.description.is_empty() {
                os.write_string(2, &self.description)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FieldViolation {
            FieldViolation::new()
        }

        fn clear(&mut self) {
            self.field.clear();
            self.description.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FieldViolation {
            static instance: FieldViolation = FieldViolation {
                field: ::std::string::String::new(),
                description: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for FieldViolation {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("BadRequest.FieldViolation").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for FieldViolation {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for FieldViolation {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Contains metadata about the request that clients can attach when filing a bug
///  or providing other forms of feedback.
// @@protoc_insertion_point(message:google.rpc.RequestInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RequestInfo {
    // message fields
    ///  An opaque string that should only be interpreted by the service generating
    ///  it. For example, it can be used to identify requests in the service's logs.
    // @@protoc_insertion_point(field:google.rpc.RequestInfo.request_id)
    pub request_id: ::std::string::String,
    ///  Any data that was used to serve this request. For example, an encrypted
    ///  stack trace that can be sent back to the service provider for debugging.
    // @@protoc_insertion_point(field:google.rpc.RequestInfo.serving_data)
    pub serving_data: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.RequestInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RequestInfo {
    fn default() -> &'a RequestInfo {
        <RequestInfo as ::protobuf::Message>::default_instance()
    }
}

impl RequestInfo {
    pub fn new() -> RequestInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_id",
            |m: &RequestInfo| { &m.request_id },
            |m: &mut RequestInfo| { &mut m.request_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serving_data",
            |m: &RequestInfo| { &m.serving_data },
            |m: &mut RequestInfo| { &mut m.serving_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestInfo>(
            "RequestInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RequestInfo {
    const NAME: &'static str = "RequestInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.request_id = is.read_string()?;
                },
                18 => {
                    self.serving_data = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if !self.serving_data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.serving_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if !self.serving_data.is_empty() {
            os.write_string(2, &self.serving_data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RequestInfo {
        RequestInfo::new()
    }

    fn clear(&mut self) {
        self.request_id.clear();
        self.serving_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RequestInfo {
        static instance: RequestInfo = RequestInfo {
            request_id: ::std::string::String::new(),
            serving_data: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RequestInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RequestInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RequestInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Describes the resource that is being accessed.
// @@protoc_insertion_point(message:google.rpc.ResourceInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResourceInfo {
    // message fields
    ///  A name for the type of resource being accessed, e.g. "sql table",
    ///  "cloud storage bucket", "file", "Google calendar"; or the type URL
    ///  of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
    // @@protoc_insertion_point(field:google.rpc.ResourceInfo.resource_type)
    pub resource_type: ::std::string::String,
    ///  The name of the resource being accessed.  For example, a shared calendar
    ///  name: "example.com_4fghdhgsrgh@group.calendar.google.com", if the current
    ///  error is
    ///  [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
    // @@protoc_insertion_point(field:google.rpc.ResourceInfo.resource_name)
    pub resource_name: ::std::string::String,
    ///  The owner of the resource (optional).
    ///  For example, "user:<owner email>" or "project:<Google developer project
    ///  id>".
    // @@protoc_insertion_point(field:google.rpc.ResourceInfo.owner)
    pub owner: ::std::string::String,
    ///  Describes what error is encountered when accessing this resource.
    ///  For example, updating a cloud project may require the `writer` permission
    ///  on the developer console project.
    // @@protoc_insertion_point(field:google.rpc.ResourceInfo.description)
    pub description: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.ResourceInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResourceInfo {
    fn default() -> &'a ResourceInfo {
        <ResourceInfo as ::protobuf::Message>::default_instance()
    }
}

impl ResourceInfo {
    pub fn new() -> ResourceInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_type",
            |m: &ResourceInfo| { &m.resource_type },
            |m: &mut ResourceInfo| { &mut m.resource_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_name",
            |m: &ResourceInfo| { &m.resource_name },
            |m: &mut ResourceInfo| { &mut m.resource_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &ResourceInfo| { &m.owner },
            |m: &mut ResourceInfo| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &ResourceInfo| { &m.description },
            |m: &mut ResourceInfo| { &mut m.description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResourceInfo>(
            "ResourceInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResourceInfo {
    const NAME: &'static str = "ResourceInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.resource_type = is.read_string()?;
                },
                18 => {
                    self.resource_name = is.read_string()?;
                },
                26 => {
                    self.owner = is.read_string()?;
                },
                34 => {
                    self.description = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.resource_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_type);
        }
        if !self.resource_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.resource_name);
        }
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.owner);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.resource_type.is_empty() {
            os.write_string(1, &self.resource_type)?;
        }
        if !self.resource_name.is_empty() {
            os.write_string(2, &self.resource_name)?;
        }
        if !self.owner.is_empty() {
            os.write_string(3, &self.owner)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResourceInfo {
        ResourceInfo::new()
    }

    fn clear(&mut self) {
        self.resource_type.clear();
        self.resource_name.clear();
        self.owner.clear();
        self.description.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResourceInfo {
        static instance: ResourceInfo = ResourceInfo {
            resource_type: ::std::string::String::new(),
            resource_name: ::std::string::String::new(),
            owner: ::std::string::String::new(),
            description: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResourceInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResourceInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResourceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Provides links to documentation or for performing an out of band action.
///
///  For example, if a quota check failed with an error indicating the calling
///  project hasn't enabled the accessed service, this can contain a URL pointing
///  directly to the right place in the developer console to flip the bit.
// @@protoc_insertion_point(message:google.rpc.Help)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Help {
    // message fields
    ///  URL(s) pointing to additional information on handling the current error.
    // @@protoc_insertion_point(field:google.rpc.Help.links)
    pub links: ::std::vec::Vec<help::Link>,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.Help.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Help {
    fn default() -> &'a Help {
        <Help as ::protobuf::Message>::default_instance()
    }
}

impl Help {
    pub fn new() -> Help {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "links",
            |m: &Help| { &m.links },
            |m: &mut Help| { &mut m.links },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Help>(
            "Help",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Help {
    const NAME: &'static str = "Help";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.links.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.links {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.links {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Help {
        Help::new()
    }

    fn clear(&mut self) {
        self.links.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Help {
        static instance: Help = Help {
            links: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Help {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Help").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Help {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Help {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Help`
pub mod help {
    ///  Describes a URL link.
    // @@protoc_insertion_point(message:google.rpc.Help.Link)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Link {
        // message fields
        ///  Describes what the link offers.
        // @@protoc_insertion_point(field:google.rpc.Help.Link.description)
        pub description: ::std::string::String,
        ///  The URL of the link.
        // @@protoc_insertion_point(field:google.rpc.Help.Link.url)
        pub url: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:google.rpc.Help.Link.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Link {
        fn default() -> &'a Link {
            <Link as ::protobuf::Message>::default_instance()
        }
    }

    impl Link {
        pub fn new() -> Link {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "description",
                |m: &Link| { &m.description },
                |m: &mut Link| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "url",
                |m: &Link| { &m.url },
                |m: &mut Link| { &mut m.url },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Link>(
                "Help.Link",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Link {
        const NAME: &'static str = "Link";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.description = is.read_string()?;
                    },
                    18 => {
                        self.url = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.description.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.description);
            }
            if !self.url.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.url);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.description.is_empty() {
                os.write_string(1, &self.description)?;
            }
            if !self.url.is_empty() {
                os.write_string(2, &self.url)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Link {
            Link::new()
        }

        fn clear(&mut self) {
            self.description.clear();
            self.url.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Link {
            static instance: Link = Link {
                description: ::std::string::String::new(),
                url: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Link {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Help.Link").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Link {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Link {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Provides a localized error message that is safe to return to the user
///  which can be attached to an RPC error.
// @@protoc_insertion_point(message:google.rpc.LocalizedMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LocalizedMessage {
    // message fields
    ///  The locale used following the specification defined at
    ///  http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
    ///  Examples are: "en-US", "fr-CH", "es-MX"
    // @@protoc_insertion_point(field:google.rpc.LocalizedMessage.locale)
    pub locale: ::std::string::String,
    ///  The localized error message in the above locale.
    // @@protoc_insertion_point(field:google.rpc.LocalizedMessage.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.rpc.LocalizedMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LocalizedMessage {
    fn default() -> &'a LocalizedMessage {
        <LocalizedMessage as ::protobuf::Message>::default_instance()
    }
}

impl LocalizedMessage {
    pub fn new() -> LocalizedMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "locale",
            |m: &LocalizedMessage| { &m.locale },
            |m: &mut LocalizedMessage| { &mut m.locale },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &LocalizedMessage| { &m.message },
            |m: &mut LocalizedMessage| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LocalizedMessage>(
            "LocalizedMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LocalizedMessage {
    const NAME: &'static str = "LocalizedMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.locale = is.read_string()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.locale.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.locale);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.locale.is_empty() {
            os.write_string(1, &self.locale)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LocalizedMessage {
        LocalizedMessage::new()
    }

    fn clear(&mut self) {
        self.locale.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LocalizedMessage {
        static instance: LocalizedMessage = LocalizedMessage {
            locale: ::std::string::String::new(),
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LocalizedMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LocalizedMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LocalizedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalizedMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egoogle/rpc/error_details.proto\x12\ngoogle.rpc\x1a\x1egoogle/proto\
    buf/duration.proto\"G\n\tRetryInfo\x12:\n\x0bretry_delay\x18\x01\x20\x01\
    (\x0b2\x19.google.protobuf.DurationR\nretryDelay\"H\n\tDebugInfo\x12#\n\
    \rstack_entries\x18\x01\x20\x03(\tR\x0cstackEntries\x12\x16\n\x06detail\
    \x18\x02\x20\x01(\tR\x06detail\"\x9b\x01\n\x0cQuotaFailure\x12B\n\nviola\
    tions\x18\x01\x20\x03(\x0b2\".google.rpc.QuotaFailure.ViolationR\nviolat\
    ions\x1aG\n\tViolation\x12\x18\n\x07subject\x18\x01\x20\x01(\tR\x07subje\
    ct\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\"\xbd\x01\
    \n\x13PreconditionFailure\x12I\n\nviolations\x18\x01\x20\x03(\x0b2).goog\
    le.rpc.PreconditionFailure.ViolationR\nviolations\x1a[\n\tViolation\x12\
    \x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x18\n\x07subject\x18\x02\
    \x20\x01(\tR\x07subject\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0b\
    description\"\xa8\x01\n\nBadRequest\x12P\n\x10field_violations\x18\x01\
    \x20\x03(\x0b2%.google.rpc.BadRequest.FieldViolationR\x0ffieldViolations\
    \x1aH\n\x0eFieldViolation\x12\x14\n\x05field\x18\x01\x20\x01(\tR\x05fiel\
    d\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\"O\n\x0bRe\
    questInfo\x12\x1d\n\nrequest_id\x18\x01\x20\x01(\tR\trequestId\x12!\n\
    \x0cserving_data\x18\x02\x20\x01(\tR\x0bservingData\"\x90\x01\n\x0cResou\
    rceInfo\x12#\n\rresource_type\x18\x01\x20\x01(\tR\x0cresourceType\x12#\n\
    \rresource_name\x18\x02\x20\x01(\tR\x0cresourceName\x12\x14\n\x05owner\
    \x18\x03\x20\x01(\tR\x05owner\x12\x20\n\x0bdescription\x18\x04\x20\x01(\
    \tR\x0bdescription\"o\n\x04Help\x12+\n\x05links\x18\x01\x20\x03(\x0b2\
    \x15.google.rpc.Help.LinkR\x05links\x1a:\n\x04Link\x12\x20\n\x0bdescript\
    ion\x18\x01\x20\x01(\tR\x0bdescription\x12\x10\n\x03url\x18\x02\x20\x01(\
    \tR\x03url\"D\n\x10LocalizedMessage\x12\x16\n\x06locale\x18\x01\x20\x01(\
    \tR\x06locale\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07messageBl\n\
    \x0ecom.google.rpcB\x11ErrorDetailsProtoP\x01Z?google.golang.org/genprot\
    o/googleapis/rpc/errdetails;errdetails\xa2\x02\x03RPCJ\x80>\n\x07\x12\
    \x05\x0e\0\xc7\x01\x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb2\x04\
    \x20Copyright\x202017\x20Google\x20Inc.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\
    \x12\x03\x10\0\x13\n\t\n\x02\x03\0\x12\x03\x12\0(\n\x08\n\x01\x08\x12\
    \x03\x14\0V\n\t\n\x02\x08\x0b\x12\x03\x14\0V\n\x08\n\x01\x08\x12\x03\x15\
    \0\"\n\t\n\x02\x08\n\x12\x03\x15\0\"\n\x08\n\x01\x08\x12\x03\x16\02\n\t\
    \n\x02\x08\x08\x12\x03\x16\02\n\x08\n\x01\x08\x12\x03\x17\0'\n\t\n\x02\
    \x08\x01\x12\x03\x17\0'\n\x08\n\x01\x08\x12\x03\x18\0!\n\t\n\x02\x08$\
    \x12\x03\x18\0!\n\x8b\x05\n\x02\x04\0\x12\x04'\0*\x01\x1a\xfe\x04\x20Des\
    cribes\x20when\x20the\x20clients\x20can\x20retry\x20a\x20failed\x20reque\
    st.\x20Clients\x20could\x20ignore\n\x20the\x20recommendation\x20here\x20\
    or\x20retry\x20when\x20this\x20information\x20is\x20missing\x20from\x20e\
    rror\n\x20responses.\n\n\x20It's\x20always\x20recommended\x20that\x20cli\
    ents\x20should\x20use\x20exponential\x20backoff\x20when\n\x20retrying.\n\
    \n\x20Clients\x20should\x20wait\x20until\x20`retry_delay`\x20amount\x20o\
    f\x20time\x20has\x20passed\x20since\n\x20receiving\x20the\x20error\x20re\
    sponse\x20before\x20retrying.\x20\x20If\x20retrying\x20requests\x20also\
    \n\x20fail,\x20clients\x20should\x20use\x20an\x20exponential\x20backoff\
    \x20scheme\x20to\x20gradually\x20increase\n\x20the\x20delay\x20between\
    \x20retries\x20based\x20on\x20`retry_delay`,\x20until\x20either\x20a\x20\
    maximum\n\x20number\x20of\x20retires\x20have\x20been\x20reached\x20or\
    \x20a\x20maximum\x20retry\x20delay\x20cap\x20has\x20been\n\x20reached.\n\
    \n\n\n\x03\x04\0\x01\x12\x03'\x08\x11\nX\n\x04\x04\0\x02\0\x12\x03)\x02+\
    \x1aK\x20Clients\x20should\x20wait\x20at\x20least\x20this\x20long\x20bet\
    ween\x20retrying\x20the\x20same\x20request.\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03)\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03)\x1b&\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03))*\n2\n\x02\x04\x01\x12\x04-\03\x01\x1a&\
    \x20Describes\x20additional\x20debugging\x20info.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03-\x08\x11\nK\n\x04\x04\x01\x02\0\x12\x03/\x02$\x1a>\x20The\
    \x20stack\x20trace\x20entries\x20indicating\x20where\x20the\x20error\x20\
    occurred.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03/\x02\n\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03/\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03/\
    \x12\x1f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03/\"#\nG\n\x04\x04\x01\x02\
    \x01\x12\x032\x02\x14\x1a:\x20Additional\x20debugging\x20information\x20\
    provided\x20by\x20the\x20server.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x032\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x032\t\x0f\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x032\x12\x13\n\xfe\x03\n\x02\x04\x02\x12\x04@\0\
    U\x01\x1a\xf1\x03\x20Describes\x20how\x20a\x20quota\x20check\x20failed.\
    \n\n\x20For\x20example\x20if\x20a\x20daily\x20limit\x20was\x20exceeded\
    \x20for\x20the\x20calling\x20project,\n\x20a\x20service\x20could\x20resp\
    ond\x20with\x20a\x20QuotaFailure\x20detail\x20containing\x20the\x20proje\
    ct\n\x20id\x20and\x20the\x20description\x20of\x20the\x20quota\x20limit\
    \x20that\x20was\x20exceeded.\x20\x20If\x20the\n\x20calling\x20project\
    \x20hasn't\x20enabled\x20the\x20service\x20in\x20the\x20developer\x20con\
    sole,\x20then\n\x20a\x20service\x20could\x20respond\x20with\x20the\x20pr\
    oject\x20id\x20and\x20set\x20`service_disabled`\n\x20to\x20true.\n\n\x20\
    Also\x20see\x20RetryDetail\x20and\x20Help\x20types\x20for\x20other\x20de\
    tails\x20about\x20handling\x20a\n\x20quota\x20failure.\n\n\n\n\x03\x04\
    \x02\x01\x12\x03@\x08\x14\n\x8b\x01\n\x04\x04\x02\x03\0\x12\x04C\x02Q\
    \x03\x1a}\x20A\x20message\x20type\x20used\x20to\x20describe\x20a\x20sing\
    le\x20quota\x20violation.\x20\x20For\x20example,\x20a\n\x20daily\x20quot\
    a\x20or\x20a\x20custom\x20quota\x20that\x20was\x20exceeded.\n\n\x0c\n\
    \x05\x04\x02\x03\0\x01\x12\x03C\n\x13\n\x9b\x01\n\x06\x04\x02\x03\0\x02\
    \0\x12\x03G\x04\x17\x1a\x8b\x01\x20The\x20subject\x20on\x20which\x20the\
    \x20quota\x20check\x20failed.\n\x20For\x20example,\x20\"clientip:<ip\x20\
    address\x20of\x20client>\"\x20or\x20\"project:<Google\n\x20developer\x20\
    project\x20id>\".\n\n\x0e\n\x07\x04\x02\x03\0\x02\0\x05\x12\x03G\x04\n\n\
    \x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\x03G\x0b\x12\n\x0e\n\x07\x04\x02\
    \x03\0\x02\0\x03\x12\x03G\x15\x16\n\xcc\x02\n\x06\x04\x02\x03\0\x02\x01\
    \x12\x03P\x04\x1b\x1a\xbc\x02\x20A\x20description\x20of\x20how\x20the\
    \x20quota\x20check\x20failed.\x20Clients\x20can\x20use\x20this\n\x20desc\
    ription\x20to\x20find\x20more\x20about\x20the\x20quota\x20configuration\
    \x20in\x20the\x20service's\n\x20public\x20documentation,\x20or\x20find\
    \x20the\x20relevant\x20quota\x20limit\x20to\x20adjust\x20through\n\x20de\
    veloper\x20console.\n\n\x20For\x20example:\x20\"Service\x20disabled\"\
    \x20or\x20\"Daily\x20Limit\x20for\x20read\x20operations\n\x20exceeded\".\
    \n\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x05\x12\x03P\x04\n\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x01\x01\x12\x03P\x0b\x16\n\x0e\n\x07\x04\x02\x03\0\x02\
    \x01\x03\x12\x03P\x19\x1a\n.\n\x04\x04\x02\x02\0\x12\x03T\x02$\x1a!\x20D\
    escribes\x20all\x20quota\x20violations.\n\n\x0c\n\x05\x04\x02\x02\0\x04\
    \x12\x03T\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03T\x0b\x14\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03T\x15\x1f\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03T\"#\n\xe8\x01\n\x02\x04\x03\x12\x04\\\0r\x01\x1a\xdb\x01\x20Des\
    cribes\x20what\x20preconditions\x20have\x20failed.\n\n\x20For\x20example\
    ,\x20if\x20an\x20RPC\x20failed\x20because\x20it\x20required\x20the\x20Te\
    rms\x20of\x20Service\x20to\x20be\n\x20acknowledged,\x20it\x20could\x20li\
    st\x20the\x20terms\x20of\x20service\x20violation\x20in\x20the\n\x20Preco\
    nditionFailure\x20message.\n\n\n\n\x03\x04\x03\x01\x12\x03\\\x08\x1b\nN\
    \n\x04\x04\x03\x03\0\x12\x04^\x02n\x03\x1a@\x20A\x20message\x20type\x20u\
    sed\x20to\x20describe\x20a\x20single\x20precondition\x20failure.\n\n\x0c\
    \n\x05\x04\x03\x03\0\x01\x12\x03^\n\x13\n\xcf\x01\n\x06\x04\x03\x03\0\
    \x02\0\x12\x03b\x04\x14\x1a\xbf\x01\x20The\x20type\x20of\x20Precondition\
    Failure.\x20We\x20recommend\x20using\x20a\x20service-specific\n\x20enum\
    \x20type\x20to\x20define\x20the\x20supported\x20precondition\x20violatio\
    n\x20types.\x20For\n\x20example,\x20\"TOS\"\x20for\x20\"Terms\x20of\x20S\
    ervice\x20violation\".\n\n\x0e\n\x07\x04\x03\x03\0\x02\0\x05\x12\x03b\
    \x04\n\n\x0e\n\x07\x04\x03\x03\0\x02\0\x01\x12\x03b\x0b\x0f\n\x0e\n\x07\
    \x04\x03\x03\0\x02\0\x03\x12\x03b\x12\x13\n\xb9\x01\n\x06\x04\x03\x03\0\
    \x02\x01\x12\x03g\x04\x17\x1a\xa9\x01\x20The\x20subject,\x20relative\x20\
    to\x20the\x20type,\x20that\x20failed.\n\x20For\x20example,\x20\"google.c\
    om/cloud\"\x20relative\x20to\x20the\x20\"TOS\"\x20type\x20would\n\x20ind\
    icate\x20which\x20terms\x20of\x20service\x20is\x20being\x20referenced.\n\
    \n\x0e\n\x07\x04\x03\x03\0\x02\x01\x05\x12\x03g\x04\n\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x01\x01\x12\x03g\x0b\x12\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x01\x03\x12\x03g\x15\x16\n\xba\x01\n\x06\x04\x03\x03\0\x02\x02\x12\x03m\
    \x04\x1b\x1a\xaa\x01\x20A\x20description\x20of\x20how\x20the\x20precondi\
    tion\x20failed.\x20Developers\x20can\x20use\x20this\n\x20description\x20\
    to\x20understand\x20how\x20to\x20fix\x20the\x20failure.\n\n\x20For\x20ex\
    ample:\x20\"Terms\x20of\x20service\x20not\x20accepted\".\n\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x02\x05\x12\x03m\x04\n\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x02\x01\x12\x03m\x0b\x16\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x03\x12\x03m\
    \x19\x1a\n5\n\x04\x04\x03\x02\0\x12\x03q\x02$\x1a(\x20Describes\x20all\
    \x20precondition\x20violations.\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03q\
    \x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03q\x0b\x14\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03q\x15\x1f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03q\"\
    #\nz\n\x02\x04\x04\x12\x05v\0\x84\x01\x01\x1am\x20Describes\x20violation\
    s\x20in\x20a\x20client\x20request.\x20This\x20error\x20type\x20focuses\
    \x20on\x20the\n\x20syntactic\x20aspects\x20of\x20the\x20request.\n\n\n\n\
    \x03\x04\x04\x01\x12\x03v\x08\x12\nL\n\x04\x04\x04\x03\0\x12\x05x\x02\
    \x80\x01\x03\x1a=\x20A\x20message\x20type\x20used\x20to\x20describe\x20a\
    \x20single\x20bad\x20request\x20field.\n\n\x0c\n\x05\x04\x04\x03\0\x01\
    \x12\x03x\n\x18\n\xdd\x01\n\x06\x04\x04\x03\0\x02\0\x12\x03|\x04\x15\x1a\
    \xcd\x01\x20A\x20path\x20leading\x20to\x20a\x20field\x20in\x20the\x20req\
    uest\x20body.\x20The\x20value\x20will\x20be\x20a\n\x20sequence\x20of\x20\
    dot-separated\x20identifiers\x20that\x20identify\x20a\x20protocol\x20buf\
    fer\n\x20field.\x20E.g.,\x20\"field_violations.field\"\x20would\x20ident\
    ify\x20this\x20field.\n\n\x0e\n\x07\x04\x04\x03\0\x02\0\x05\x12\x03|\x04\
    \n\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\x03|\x0b\x10\n\x0e\n\x07\x04\
    \x04\x03\0\x02\0\x03\x12\x03|\x13\x14\nA\n\x06\x04\x04\x03\0\x02\x01\x12\
    \x03\x7f\x04\x1b\x1a2\x20A\x20description\x20of\x20why\x20the\x20request\
    \x20element\x20is\x20bad.\n\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x05\x12\
    \x03\x7f\x04\n\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x01\x12\x03\x7f\x0b\x16\
    \n\x0e\n\x07\x04\x04\x03\0\x02\x01\x03\x12\x03\x7f\x19\x1a\n=\n\x04\x04\
    \x04\x02\0\x12\x04\x83\x01\x02/\x1a/\x20Describes\x20all\x20violations\
    \x20in\x20a\x20client\x20request.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\
    \x83\x01\x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\x83\x01\x0b\x19\n\r\n\
    \x05\x04\x04\x02\0\x01\x12\x04\x83\x01\x1a*\n\r\n\x05\x04\x04\x02\0\x03\
    \x12\x04\x83\x01-.\n\x84\x01\n\x02\x04\x05\x12\x06\x88\x01\0\x90\x01\x01\
    \x1av\x20Contains\x20metadata\x20about\x20the\x20request\x20that\x20clie\
    nts\x20can\x20attach\x20when\x20filing\x20a\x20bug\n\x20or\x20providing\
    \x20other\x20forms\x20of\x20feedback.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\
    \x88\x01\x08\x13\n\xa8\x01\n\x04\x04\x05\x02\0\x12\x04\x8b\x01\x02\x18\
    \x1a\x99\x01\x20An\x20opaque\x20string\x20that\x20should\x20only\x20be\
    \x20interpreted\x20by\x20the\x20service\x20generating\n\x20it.\x20For\
    \x20example,\x20it\x20can\x20be\x20used\x20to\x20identify\x20requests\
    \x20in\x20the\x20service's\x20logs.\n\n\r\n\x05\x04\x05\x02\0\x05\x12\
    \x04\x8b\x01\x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x8b\x01\t\x13\n\
    \r\n\x05\x04\x05\x02\0\x03\x12\x04\x8b\x01\x16\x17\n\xa2\x01\n\x04\x04\
    \x05\x02\x01\x12\x04\x8f\x01\x02\x1a\x1a\x93\x01\x20Any\x20data\x20that\
    \x20was\x20used\x20to\x20serve\x20this\x20request.\x20For\x20example,\
    \x20an\x20encrypted\n\x20stack\x20trace\x20that\x20can\x20be\x20sent\x20\
    back\x20to\x20the\x20service\x20provider\x20for\x20debugging.\n\n\r\n\
    \x05\x04\x05\x02\x01\x05\x12\x04\x8f\x01\x02\x08\n\r\n\x05\x04\x05\x02\
    \x01\x01\x12\x04\x8f\x01\t\x15\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\x8f\
    \x01\x18\x19\n>\n\x02\x04\x06\x12\x06\x93\x01\0\xa8\x01\x01\x1a0\x20Desc\
    ribes\x20the\x20resource\x20that\x20is\x20being\x20accessed.\n\n\x0b\n\
    \x03\x04\x06\x01\x12\x04\x93\x01\x08\x14\n\xdb\x01\n\x04\x04\x06\x02\0\
    \x12\x04\x97\x01\x02\x1b\x1a\xcc\x01\x20A\x20name\x20for\x20the\x20type\
    \x20of\x20resource\x20being\x20accessed,\x20e.g.\x20\"sql\x20table\",\n\
    \x20\"cloud\x20storage\x20bucket\",\x20\"file\",\x20\"Google\x20calendar\
    \";\x20or\x20the\x20type\x20URL\n\x20of\x20the\x20resource:\x20e.g.\x20\
    \"type.googleapis.com/google.pubsub.v1.Topic\".\n\n\r\n\x05\x04\x06\x02\
    \0\x05\x12\x04\x97\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\x97\
    \x01\t\x16\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x97\x01\x19\x1a\n\xf7\x01\
    \n\x04\x04\x06\x02\x01\x12\x04\x9d\x01\x02\x1b\x1a\xe8\x01\x20The\x20nam\
    e\x20of\x20the\x20resource\x20being\x20accessed.\x20\x20For\x20example,\
    \x20a\x20shared\x20calendar\n\x20name:\x20\"example.com_4fghdhgsrgh@grou\
    p.calendar.google.com\",\x20if\x20the\x20current\n\x20error\x20is\n\x20[\
    google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].\n\
    \n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\x9d\x01\x02\x08\n\r\n\x05\x04\x06\
    \x02\x01\x01\x12\x04\x9d\x01\t\x16\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\
    \x9d\x01\x19\x1a\n\x85\x01\n\x04\x04\x06\x02\x02\x12\x04\xa2\x01\x02\x13\
    \x1aw\x20The\x20owner\x20of\x20the\x20resource\x20(optional).\n\x20For\
    \x20example,\x20\"user:<owner\x20email>\"\x20or\x20\"project:<Google\x20\
    developer\x20project\n\x20id>\".\n\n\r\n\x05\x04\x06\x02\x02\x05\x12\x04\
    \xa2\x01\x02\x08\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xa2\x01\t\x0e\n\r\
    \n\x05\x04\x06\x02\x02\x03\x12\x04\xa2\x01\x11\x12\n\xc0\x01\n\x04\x04\
    \x06\x02\x03\x12\x04\xa7\x01\x02\x19\x1a\xb1\x01\x20Describes\x20what\
    \x20error\x20is\x20encountered\x20when\x20accessing\x20this\x20resource.\
    \n\x20For\x20example,\x20updating\x20a\x20cloud\x20project\x20may\x20req\
    uire\x20the\x20`writer`\x20permission\n\x20on\x20the\x20developer\x20con\
    sole\x20project.\n\n\r\n\x05\x04\x06\x02\x03\x05\x12\x04\xa7\x01\x02\x08\
    \n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\xa7\x01\t\x14\n\r\n\x05\x04\x06\
    \x02\x03\x03\x12\x04\xa7\x01\x17\x18\n\xba\x02\n\x02\x04\x07\x12\x06\xaf\
    \x01\0\xbb\x01\x01\x1a\xab\x02\x20Provides\x20links\x20to\x20documentati\
    on\x20or\x20for\x20performing\x20an\x20out\x20of\x20band\x20action.\n\n\
    \x20For\x20example,\x20if\x20a\x20quota\x20check\x20failed\x20with\x20an\
    \x20error\x20indicating\x20the\x20calling\n\x20project\x20hasn't\x20enab\
    led\x20the\x20accessed\x20service,\x20this\x20can\x20contain\x20a\x20URL\
    \x20pointing\n\x20directly\x20to\x20the\x20right\x20place\x20in\x20the\
    \x20developer\x20console\x20to\x20flip\x20the\x20bit.\n\n\x0b\n\x03\x04\
    \x07\x01\x12\x04\xaf\x01\x08\x0c\n'\n\x04\x04\x07\x03\0\x12\x06\xb1\x01\
    \x02\xb7\x01\x03\x1a\x17\x20Describes\x20a\x20URL\x20link.\n\n\r\n\x05\
    \x04\x07\x03\0\x01\x12\x04\xb1\x01\n\x0e\n1\n\x06\x04\x07\x03\0\x02\0\
    \x12\x04\xb3\x01\x04\x1b\x1a!\x20Describes\x20what\x20the\x20link\x20off\
    ers.\n\n\x0f\n\x07\x04\x07\x03\0\x02\0\x05\x12\x04\xb3\x01\x04\n\n\x0f\n\
    \x07\x04\x07\x03\0\x02\0\x01\x12\x04\xb3\x01\x0b\x16\n\x0f\n\x07\x04\x07\
    \x03\0\x02\0\x03\x12\x04\xb3\x01\x19\x1a\n&\n\x06\x04\x07\x03\0\x02\x01\
    \x12\x04\xb6\x01\x04\x13\x1a\x16\x20The\x20URL\x20of\x20the\x20link.\n\n\
    \x0f\n\x07\x04\x07\x03\0\x02\x01\x05\x12\x04\xb6\x01\x04\n\n\x0f\n\x07\
    \x04\x07\x03\0\x02\x01\x01\x12\x04\xb6\x01\x0b\x0e\n\x0f\n\x07\x04\x07\
    \x03\0\x02\x01\x03\x12\x04\xb6\x01\x11\x12\nX\n\x04\x04\x07\x02\0\x12\
    \x04\xba\x01\x02\x1a\x1aJ\x20URL(s)\x20pointing\x20to\x20additional\x20i\
    nformation\x20on\x20handling\x20the\x20current\x20error.\n\n\r\n\x05\x04\
    \x07\x02\0\x04\x12\x04\xba\x01\x02\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\
    \xba\x01\x0b\x0f\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xba\x01\x10\x15\n\r\
    \n\x05\x04\x07\x02\0\x03\x12\x04\xba\x01\x18\x19\n}\n\x02\x04\x08\x12\
    \x06\xbf\x01\0\xc7\x01\x01\x1ao\x20Provides\x20a\x20localized\x20error\
    \x20message\x20that\x20is\x20safe\x20to\x20return\x20to\x20the\x20user\n\
    \x20which\x20can\x20be\x20attached\x20to\x20an\x20RPC\x20error.\n\n\x0b\
    \n\x03\x04\x08\x01\x12\x04\xbf\x01\x08\x18\n\x9e\x01\n\x04\x04\x08\x02\0\
    \x12\x04\xc3\x01\x02\x14\x1a\x8f\x01\x20The\x20locale\x20used\x20followi\
    ng\x20the\x20specification\x20defined\x20at\n\x20http://www.rfc-editor.o\
    rg/rfc/bcp/bcp47.txt.\n\x20Examples\x20are:\x20\"en-US\",\x20\"fr-CH\",\
    \x20\"es-MX\"\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xc3\x01\x02\x08\n\r\
    \n\x05\x04\x08\x02\0\x01\x12\x04\xc3\x01\t\x0f\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\xc3\x01\x12\x13\n@\n\x04\x04\x08\x02\x01\x12\x04\xc6\x01\
    \x02\x15\x1a2\x20The\x20localized\x20error\x20message\x20in\x20the\x20ab\
    ove\x20locale.\n\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\xc6\x01\x02\x08\n\
    \r\n\x05\x04\x08\x02\x01\x01\x12\x04\xc6\x01\t\x10\n\r\n\x05\x04\x08\x02\
    \x01\x03\x12\x04\xc6\x01\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(13);
            messages.push(RetryInfo::generated_message_descriptor_data());
            messages.push(DebugInfo::generated_message_descriptor_data());
            messages.push(QuotaFailure::generated_message_descriptor_data());
            messages.push(PreconditionFailure::generated_message_descriptor_data());
            messages.push(BadRequest::generated_message_descriptor_data());
            messages.push(RequestInfo::generated_message_descriptor_data());
            messages.push(ResourceInfo::generated_message_descriptor_data());
            messages.push(Help::generated_message_descriptor_data());
            messages.push(LocalizedMessage::generated_message_descriptor_data());
            messages.push(quota_failure::Violation::generated_message_descriptor_data());
            messages.push(precondition_failure::Violation::generated_message_descriptor_data());
            messages.push(bad_request::FieldViolation::generated_message_descriptor_data());
            messages.push(help::Link::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
